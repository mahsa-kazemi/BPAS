# 1 "zerodimensionalregularchain.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "zerodimensionalregularchain.cpp"
# 1 "regularchainmacros.hpp" 1




# 1 "../../include/Utils/AsyncGenerator.hpp" 1




# 1 "../../include/Utils/AsyncObjectStream.hpp" 1





# 1 "/usr/include/c++/7/thread" 1 3
# 32 "/usr/include/c++/7/thread" 3
       
# 33 "/usr/include/c++/7/thread" 3





# 1 "/usr/include/c++/7/chrono" 1 3
# 32 "/usr/include/c++/7/chrono" 3
       
# 33 "/usr/include/c++/7/chrono" 3





# 1 "/usr/include/c++/7/ratio" 1 3
# 32 "/usr/include/c++/7/ratio" 3
       
# 33 "/usr/include/c++/7/ratio" 3





# 1 "/usr/include/c++/7/type_traits" 1 3
# 32 "/usr/include/c++/7/type_traits" 3
       
# 33 "/usr/include/c++/7/type_traits" 3





# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 1 3
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3

# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 533 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 2 3
# 534 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/cpu_defines.h" 1 3
# 537 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3
# 39 "/usr/include/c++/7/type_traits" 2 3



namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/usr/include/c++/7/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 192 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 324 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 936 "/usr/include/c++/7/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };



  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1771 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1860 "/usr/include/c++/7/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };



  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1890 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2036 "/usr/include/c++/7/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2075 "/usr/include/c++/7/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2548 "/usr/include/c++/7/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3103 "/usr/include/c++/7/type_traits" 3

}
# 39 "/usr/include/c++/7/ratio" 2 3
# 1 "/usr/include/c++/7/cstdint" 1 3
# 32 "/usr/include/c++/7/cstdint" 3
       
# 33 "/usr/include/c++/7/cstdint" 3
# 41 "/usr/include/c++/7/cstdint" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/7/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 40 "/usr/include/c++/7/ratio" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/7/ratio" 3
  template<intmax_t _Pn>
    struct __static_sign
    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>
    { };

  template<intmax_t _Pn>
    struct __static_abs
    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>
    { };

  template<intmax_t _Pn, intmax_t _Qn>
    struct __static_gcd
    : __static_gcd<_Qn, (_Pn % _Qn)>
    { };

  template<intmax_t _Pn>
    struct __static_gcd<_Pn, 0>
    : integral_constant<intmax_t, __static_abs<_Pn>::value>
    { };

  template<intmax_t _Qn>
    struct __static_gcd<0, _Qn>
    : integral_constant<intmax_t, __static_abs<_Qn>::value>
    { };







  template<intmax_t _Pn, intmax_t _Qn>
    struct __safe_multiply
    {
    private:
      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;
      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;
      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;
      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;

      static_assert(__a1 == 0 || __b1 == 0,
      "overflow in multiplication");
      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),
      "overflow in multiplication");
      static_assert(__b0 * __a0 <= 0x7fffffffffffffffL,
      "overflow in multiplication");
      static_assert((__a0 * __b1 + __b0 * __a1) * __c
      <= 0x7fffffffffffffffL - __b0 * __a0,
      "overflow in multiplication");

    public:
      static const intmax_t value = _Pn * _Qn;
    };



  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_less
    : integral_constant<bool, (__hi1 < __hi2
          || (__hi1 == __hi2 && __lo1 < __lo2))>
    { };

  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_add
    {
      static constexpr uintmax_t __lo = __lo1 + __lo2;
      static constexpr uintmax_t __hi = (__hi1 + __hi2 +
      (__lo1 + __lo2 < __lo1));
    };


  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_sub
    {
      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,
      "Internal library error");
      static constexpr uintmax_t __lo = __lo1 - __lo2;
      static constexpr uintmax_t __hi = (__hi1 - __hi2 -
      (__lo1 < __lo2));
    };


  template<uintmax_t __x, uintmax_t __y>
    struct __big_mul
    {
    private:
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __x0 = __x % __c;
      static constexpr uintmax_t __x1 = __x / __c;
      static constexpr uintmax_t __y0 = __y % __c;
      static constexpr uintmax_t __y1 = __y / __c;
      static constexpr uintmax_t __x0y0 = __x0 * __y0;
      static constexpr uintmax_t __x0y1 = __x0 * __y1;
      static constexpr uintmax_t __x1y0 = __x1 * __y0;
      static constexpr uintmax_t __x1y1 = __x1 * __y1;
      static constexpr uintmax_t __mix = __x0y1 + __x1y0;
      static constexpr uintmax_t __mix_lo = __mix * __c;
      static constexpr uintmax_t __mix_hi
      = __mix / __c + ((__mix < __x0y1) ? __c : 0);
      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
    public:
      static constexpr uintmax_t __hi = _Res::__hi;
      static constexpr uintmax_t __lo = _Res::__lo;
    };



  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div_impl
    {
    private:
      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),
      "Internal library error");
      static_assert(__n1 < __d, "Internal library error");
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __d1 = __d / __c;
      static constexpr uintmax_t __d0 = __d % __c;

      static constexpr uintmax_t __q1x = __n1 / __d1;
      static constexpr uintmax_t __r1x = __n1 % __d1;
      static constexpr uintmax_t __m = __q1x * __d0;
      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;
      static constexpr uintmax_t __r1z = __r1y + __d;
      static constexpr uintmax_t __r1
      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))
  ? (__r1z + __d) : __r1z : __r1y) - __m;
      static constexpr uintmax_t __q1
      = __q1x - ((__r1y < __m)
   ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);
      static constexpr uintmax_t __q0x = __r1 / __d1;
      static constexpr uintmax_t __r0x = __r1 % __d1;
      static constexpr uintmax_t __n = __q0x * __d0;
      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;
      static constexpr uintmax_t __r0z = __r0y + __d;
      static constexpr uintmax_t __r0
      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))
  ? (__r0z + __d) : __r0z : __r0y) - __n;
      static constexpr uintmax_t __q0
      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)
      && (__r0z < __n)) ? 2 : 1 : 0);

    public:
      static constexpr uintmax_t __quot = __q1 * __c + __q0;
      static constexpr uintmax_t __rem = __r0;

    private:
      typedef __big_mul<__quot, __d> _Prod;
      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
  };

  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div
    {
    private:
      static_assert(__d != 0, "Internal library error");
      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
      "This library calls __builtin_clzll on uintmax_t, which "
      "is unsafe on your platform. Please complain to "
      "http://gcc.gnu.org/bugzilla/");
      static constexpr int __shift = __builtin_clzll(__d);
      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
      static constexpr uintmax_t __new_d = __d * __c1;
      static constexpr uintmax_t __new_n0 = __n0 * __c1;
      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;

    public:
      static constexpr uintmax_t __quot_hi = __n1 / __d;
      static constexpr uintmax_t __quot_lo = _Res::__quot;
      static constexpr uintmax_t __rem = _Res::__rem / __c1;

    private:
      typedef __big_mul<__quot_lo, __d> _P0;
      typedef __big_mul<__quot_hi, __d> _P1;
      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;

      static_assert(_P1::__hi == 0, "Internal library error");
      static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");

      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
      static_assert(__rem < __d, "Internal library error");
    };
# 262 "/usr/include/c++/7/ratio" 3
  template<intmax_t _Num, intmax_t _Den = 1>
    struct ratio
    {
      static_assert(_Den != 0, "denominator cannot be zero");
      static_assert(_Num >= -0x7fffffffffffffffL && _Den >= -0x7fffffffffffffffL,
      "out of range");


      static constexpr intmax_t num =
        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;

      static constexpr intmax_t den =
        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;

      typedef ratio<num, den> type;
    };

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::num;

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::den;

  template<typename _R1, typename _R2>
    struct __ratio_multiply
    {
    private:
      static const intmax_t __gcd1 =
        __static_gcd<_R1::num, _R2::den>::value;
      static const intmax_t __gcd2 =
        __static_gcd<_R2::num, _R1::den>::value;

    public:
      typedef ratio<
        __safe_multiply<(_R1::num / __gcd1),
                        (_R2::num / __gcd2)>::value,
        __safe_multiply<(_R1::den / __gcd2),
                        (_R2::den / __gcd1)>::value> type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_divide
    {
      static_assert(_R2::num != 0, "division by 0");

      typedef typename __ratio_multiply<
        _R1,
        ratio<_R2::den, _R2::num>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_divide = typename __ratio_divide<_R1, _R2>::type;


  template<typename _R1, typename _R2>
    struct ratio_equal
    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
    { };


  template<typename _R1, typename _R2>
    struct ratio_not_equal
    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
    { };


  template<typename _R1, typename _R2,
           typename _Left = __big_mul<_R1::num,_R2::den>,
           typename _Right = __big_mul<_R2::num,_R1::den> >
    struct __ratio_less_impl_1
    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,
           _Right::__hi, _Right::__lo>::value>
    { };

  template<typename _R1, typename _R2,
    bool = (_R1::num == 0 || _R2::num == 0
     || (__static_sign<_R1::num>::value
         != __static_sign<_R2::num>::value)),
    bool = (__static_sign<_R1::num>::value == -1
     && __static_sign<_R2::num>::value == -1)>
    struct __ratio_less_impl
    : __ratio_less_impl_1<_R1, _R2>::type
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, true, false>
    : integral_constant<bool, _R1::num < _R2::num>
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, false, true>
    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,
           ratio<-_R1::num, _R1::den> >::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less
    : __ratio_less_impl<_R1, _R2>::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less_equal
    : integral_constant<bool, !ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater
    : integral_constant<bool, ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater_equal
    : integral_constant<bool, !ratio_less<_R1, _R2>::value>
    { };
# 421 "/usr/include/c++/7/ratio" 3
  template<typename _R1, typename _R2,
      bool = (_R1::num >= 0),
      bool = (_R2::num >= 0),
      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,
        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>
    struct __ratio_add_impl
    {
    private:
      typedef typename __ratio_add_impl<
        ratio<-_R1::num, _R1::den>,
        ratio<-_R2::num, _R2::den> >::type __t;
    public:
      typedef ratio<-__t::num, __t::den> type;
    };


  template<typename _R1, typename _R2, bool __b>
    struct __ratio_add_impl<_R1, _R2, true, true, __b>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<_R2::num, _R1::den / __g> __y;
      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      static_assert(__n::__hi >= __x::__hi, "Internal library error");
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, false, true, true>
    : __ratio_add_impl<_R2, _R1>
    { };


  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, true, false, false>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<-_R2::num, _R1::den / __g> __y;
      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add
    {
      typedef typename __ratio_add_impl<_R1, _R2>::type type;
      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_add = typename __ratio_add<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_subtract
    {
      typedef typename __ratio_add<
        _R1,
        ratio<-_R2::num, _R2::den>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;


  typedef ratio<1, 1000000000000000000> atto;
  typedef ratio<1, 1000000000000000> femto;
  typedef ratio<1, 1000000000000> pico;
  typedef ratio<1, 1000000000> nano;
  typedef ratio<1, 1000000> micro;
  typedef ratio<1, 1000> milli;
  typedef ratio<1, 100> centi;
  typedef ratio<1, 10> deci;
  typedef ratio< 10, 1> deca;
  typedef ratio< 100, 1> hecto;
  typedef ratio< 1000, 1> kilo;
  typedef ratio< 1000000, 1> mega;
  typedef ratio< 1000000000, 1> giga;
  typedef ratio< 1000000000000, 1> tera;
  typedef ratio< 1000000000000000, 1> peta;
  typedef ratio< 1000000000000000000, 1> exa;



}
# 39 "/usr/include/c++/7/chrono" 2 3

# 1 "/usr/include/c++/7/limits" 1 3
# 40 "/usr/include/c++/7/limits" 3
       
# 41 "/usr/include/c++/7/limits" 3
# 158 "/usr/include/c++/7/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/include/c++/7/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "/usr/include/c++/7/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 311 "/usr/include/c++/7/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 382 "/usr/include/c++/7/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffffffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffffffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1570 "/usr/include/c++/7/limits" 3
  template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1593 "/usr/include/c++/7/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750796873653722224568e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859811704183484516925e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 41 "/usr/include/c++/7/chrono" 2 3
# 1 "/usr/include/c++/7/ctime" 1 3
# 39 "/usr/include/c++/7/ctime" 3
       
# 40 "/usr/include/c++/7/ctime" 3


# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 39 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 43 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;




typedef __pid_t pid_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 61 "/usr/include/time.h" 2 3 4







extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 43 "/usr/include/c++/7/ctime" 2 3
# 58 "/usr/include/c++/7/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 42 "/usr/include/c++/7/chrono" 2 3
# 1 "/usr/include/c++/7/bits/parse_numbers.h" 1 3
# 33 "/usr/include/c++/7/bits/parse_numbers.h" 3
       
# 34 "/usr/include/c++/7/bits/parse_numbers.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{


namespace __parse_int
{
  template<unsigned _Base, char _Dig>
    struct _Digit;

  template<unsigned _Base>
    struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>
    {
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>
    {
      using __valid = true_type;
    };

  template<unsigned _Base, unsigned _Val>
    struct _Digit_impl : integral_constant<unsigned, _Val>
    {
      static_assert(_Base > _Val, "invalid digit");
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '2'> : _Digit_impl<_Base, 2>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '3'> : _Digit_impl<_Base, 3>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '4'> : _Digit_impl<_Base, 4>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '5'> : _Digit_impl<_Base, 5>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '6'> : _Digit_impl<_Base, 6>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '7'> : _Digit_impl<_Base, 7>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '8'> : _Digit_impl<_Base, 8>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '9'> : _Digit_impl<_Base, 9>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'a'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'A'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'b'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'B'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'c'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'C'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'd'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'D'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'e'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'E'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'f'> : _Digit_impl<_Base, 0xf>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'F'> : _Digit_impl<_Base, 0xf>
    { };


  template<unsigned _Base>
    struct _Digit<_Base, '\''> : integral_constant<unsigned, 0>
    {
      using __valid = false_type;
    };



  template<unsigned long long _Val>
    using __ull_constant = integral_constant<unsigned long long, _Val>;

  template<unsigned _Base, char _Dig, char... _Digs>
    struct _Power_help
    {
      using __next = typename _Power_help<_Base, _Digs...>::type;
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type
 = __ull_constant<__next::value * (__valid_digit{} ? _Base : 1ULL)>;
    };

  template<unsigned _Base, char _Dig>
    struct _Power_help<_Base, _Dig>
    {
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type = __ull_constant<__valid_digit::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Power : _Power_help<_Base, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Power<_Base> : __ull_constant<0>
    { };



  template<unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>
    struct _Number_help
    {
      using __digit = _Digit<_Base, _Dig>;
      using __valid_digit = typename __digit::__valid;
      using __next = _Number_help<_Base,
      __valid_digit::value ? _Pow / _Base : _Pow,
      _Digs...>;
      using type = __ull_constant<_Pow * __digit::value + __next::type::value>;
      static_assert((type::value / _Pow) == __digit::value,
      "integer literal does not fit in unsigned long long");
    };


  template<unsigned _Base, unsigned long long _Pow, char _Dig, char..._Digs>
    struct _Number_help<_Base, _Pow, '\'', _Dig, _Digs...>
    : _Number_help<_Base, _Pow, _Dig, _Digs...>
    { };


  template<unsigned _Base, unsigned long long _Pow, char _Dig>
    struct _Number_help<_Base, _Pow, _Dig>
    {

      using type = __ull_constant<_Digit<_Base, _Dig>::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Number
    : _Number_help<_Base, _Power<_Base, _Digs...>::value, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Number<_Base>
    : __ull_constant<0>
    { };



  template<char... _Digs>
    struct _Parse_int;

  template<char... _Digs>
    struct _Parse_int<'0', 'b', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'B', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'x', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'X', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', _Digs...>
    : _Number<8U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int
    : _Number<10U, _Digs...>::type
    { };

}


namespace __select_int
{
  template<unsigned long long _Val, typename... _Ints>
    struct _Select_int_base;

  template<unsigned long long _Val, typename _IntType, typename... _Ints>
    struct _Select_int_base<_Val, _IntType, _Ints...>
    : conditional_t<(_Val <= std::numeric_limits<_IntType>::max()),
      integral_constant<_IntType, _Val>,
      _Select_int_base<_Val, _Ints...>>
    { };

  template<unsigned long long _Val>
    struct _Select_int_base<_Val>
    { };

  template<char... _Digs>
    using _Select_int = typename _Select_int_base<
 __parse_int::_Parse_int<_Digs...>::value,
 unsigned char,
 unsigned short,
 unsigned int,
 unsigned long,
 unsigned long long
      >::type;

}


}
# 43 "/usr/include/c++/7/chrono" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 59 "/usr/include/c++/7/chrono" 3
  namespace chrono
  {
 

    template<typename _Rep, typename _Period = ratio<1>>
      struct duration;

    template<typename _Clock, typename _Dur = typename _Clock::duration>
      struct time_point;

 
  }





  template<typename _CT, typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper
    {
    private:
      typedef __static_gcd<_Period1::num, _Period2::num> __gcd_num;
      typedef __static_gcd<_Period1::den, _Period2::den> __gcd_den;
      typedef typename _CT::type __cr;
      typedef ratio<__gcd_num::value,
        (_Period1::den / __gcd_den::value) * _Period2::den> __r;
    public:
      typedef __success_type<chrono::duration<__cr, __r>> type;
    };

  template<typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper<__failure_type, _Period1, _Period2>
    { typedef __failure_type type; };

  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
    struct common_type<chrono::duration<_Rep1, _Period1>,
             chrono::duration<_Rep2, _Period2>>
    : public __duration_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Rep1, _Rep2>>::type, _Period1, _Period2>::type
    { };



  template<typename _CT, typename _Clock>
    struct __timepoint_common_type_wrapper
    {
      typedef __success_type<chrono::time_point<_Clock, typename _CT::type>>
        type;
    };

  template<typename _Clock>
    struct __timepoint_common_type_wrapper<__failure_type, _Clock>
    { typedef __failure_type type; };

  template<typename _Clock, typename _Duration1, typename _Duration2>
    struct common_type<chrono::time_point<_Clock, _Duration1>,
             chrono::time_point<_Clock, _Duration2>>
    : public __timepoint_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Duration1, _Duration2>>::type, _Clock>::type
    { };



  namespace chrono
  {
 


    template<typename _ToDur, typename _CF, typename _CR,
      bool _NumIsOne = false, bool _DenIsOne = false>
      struct __duration_cast_impl
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
       * static_cast<_CR>(_CF::num)
       / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(__d.count()));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
   }
      };

    template<typename _Tp>
      struct __is_duration
      : std::false_type
      { };

    template<typename _Rep, typename _Period>
      struct __is_duration<duration<_Rep, _Period>>
      : std::true_type
      { };


    template<typename _ToDur, typename _Rep, typename _Period>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       _ToDur>::type
      duration_cast(const duration<_Rep, _Period>& __d)
      {
 typedef typename _ToDur::period __to_period;
 typedef typename _ToDur::rep __to_rep;
 typedef ratio_divide<_Period, __to_period> __cf;
 typedef typename common_type<__to_rep, _Rep, intmax_t>::type
          __cr;
 typedef __duration_cast_impl<_ToDur, __cf, __cr,
          __cf::num == 1, __cf::den == 1> __dc;
 return __dc::__cast(__d);
      }


    template<typename _Rep>
      struct treat_as_floating_point
      : is_floating_point<_Rep>
      { };
# 275 "/usr/include/c++/7/chrono" 3
    template<typename _Rep>
      struct duration_values
      {
 static constexpr _Rep
 zero()
 { return _Rep(0); }

 static constexpr _Rep
 max()
 { return numeric_limits<_Rep>::max(); }

 static constexpr _Rep
 min()
 { return numeric_limits<_Rep>::lowest(); }
      };

    template<typename _Tp>
      struct __is_ratio
      : std::false_type
      { };

    template<intmax_t _Num, intmax_t _Den>
      struct __is_ratio<ratio<_Num, _Den>>
      : std::true_type
      { };


    template<typename _Rep, typename _Period>
      struct duration
      {
 typedef _Rep rep;
 typedef _Period period;

 static_assert(!__is_duration<_Rep>::value, "rep cannot be a duration");
 static_assert(__is_ratio<_Period>::value,
        "period must be a specialization of ratio");
 static_assert(_Period::num > 0, "period must be positive");


 constexpr duration() = default;




 duration(const duration&) = default;



 template<typename _Rep2, typename = typename
        enable_if<is_convertible<const _Rep2&, rep>::value
    && (treat_as_floating_point<rep>::value
        || !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr explicit duration(const _Rep2& __rep)
   : __r(static_cast<rep>(__rep)) { }

 template<typename _Rep2, typename _Period2, typename = typename
        enable_if<treat_as_floating_point<rep>::value
    || (ratio_divide<_Period2, period>::den == 1
        && !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr duration(const duration<_Rep2, _Period2>& __d)
   : __r(duration_cast<duration>(__d).count()) { }

 ~duration() = default;
 duration& operator=(const duration&) = default;


 constexpr rep
 count() const
 { return __r; }


 constexpr duration
 operator+() const
 { return *this; }

 constexpr duration
 operator-() const
 { return duration(-__r); }

 duration&
 operator++()
 {
   ++__r;
   return *this;
 }

 duration
 operator++(int)
 { return duration(__r++); }

 duration&
 operator--()
 {
   --__r;
   return *this;
 }

 duration
 operator--(int)
 { return duration(__r--); }

 duration&
 operator+=(const duration& __d)
 {
   __r += __d.count();
   return *this;
 }

 duration&
 operator-=(const duration& __d)
 {
   __r -= __d.count();
   return *this;
 }

 duration&
 operator*=(const rep& __rhs)
 {
   __r *= __rhs;
   return *this;
 }

 duration&
 operator/=(const rep& __rhs)
 {
   __r /= __rhs;
   return *this;
 }


 template<typename _Rep2 = rep>
  
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const rep& __rhs)
   {
     __r %= __rhs;
     return *this;
   }

 template<typename _Rep2 = rep>
  
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const duration& __d)
   {
     __r %= __d.count();
     return *this;
   }


 static constexpr duration
 zero()
 { return duration(duration_values<rep>::zero()); }

 static constexpr duration
 min()
 { return duration(duration_values<rep>::min()); }

 static constexpr duration
 max()
 { return duration(duration_values<rep>::max()); }

      private:
 rep __r;
      };

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() + __cd(__rhs).count());
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() - __cd(__rhs).count());
      }





    template<typename _Rep1, typename _Rep2, bool =
      is_convertible<const _Rep2&,
       typename common_type<_Rep1, _Rep2>::type>::value>
      struct __common_rep_type { };

    template<typename _Rep1, typename _Rep2>
      struct __common_rep_type<_Rep1, _Rep2, true>
      { typedef typename common_type<_Rep1, _Rep2>::type type; };

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() * __s);
      }

    template<typename _Rep1, typename _Rep2, typename _Period>
      constexpr
      duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
      { return __d * __s; }

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() / __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<_Rep1, _Rep2>::type
      operator/(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__lhs).count() / __cd(__rhs).count();
      }


    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() % __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator%(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() % __cd(__rhs).count());
      }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() == __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() < __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator!=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs < __rhs); }


    typedef duration<int64_t, nano> nanoseconds;


    typedef duration<int64_t, micro> microseconds;


    typedef duration<int64_t, milli> milliseconds;


    typedef duration<int64_t> seconds;


    typedef duration<int64_t, ratio< 60>> minutes;


    typedef duration<int64_t, ratio<3600>> hours;


    template<typename _Clock, typename _Dur>
      struct time_point
      {
 typedef _Clock clock;
 typedef _Dur duration;
 typedef typename duration::rep rep;
 typedef typename duration::period period;

 constexpr time_point() : __d(duration::zero())
 { }

 constexpr explicit time_point(const duration& __dur)
 : __d(__dur)
 { }


 template<typename _Dur2,
   typename = _Require<is_convertible<_Dur2, _Dur>>>
   constexpr time_point(const time_point<clock, _Dur2>& __t)
   : __d(__t.time_since_epoch())
   { }


 constexpr duration
 time_since_epoch() const
 { return __d; }


 time_point&
 operator+=(const duration& __dur)
 {
   __d += __dur;
   return *this;
 }

 time_point&
 operator-=(const duration& __dur)
 {
   __d -= __dur;
   return *this;
 }


 static constexpr time_point
 min()
 { return time_point(duration::min()); }

 static constexpr time_point
 max()
 { return time_point(duration::max()); }

      private:
 duration __d;
      };


    template<typename _ToDur, typename _Clock, typename _Dur>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       time_point<_Clock, _ToDur>>::type
      time_point_cast(const time_point<_Clock, _Dur>& __t)
      {
 typedef time_point<_Clock, _ToDur> __time_point;
 return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
      }
# 711 "/usr/include/c++/7/chrono" 3
    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator+(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() + __rhs);
      }

    template<typename _Rep1, typename _Period1,
      typename _Clock, typename _Dur2>
      constexpr time_point<_Clock,
 typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef typename common_type<__dur1,_Dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__rhs.time_since_epoch() + __lhs);
      }

    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() -__rhs);
      }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator==(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator!=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() < __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs < __rhs); }
# 811 "/usr/include/c++/7/chrono" 3
    inline namespace _V2 {






    struct system_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock, duration> time_point;

      static_assert(system_clock::duration::min()
      < system_clock::duration::zero(),
      "a clock's minimum duration cannot be less than its epoch");

      static constexpr bool is_steady = false;

      static time_point
      now() noexcept;


      static std::time_t
      to_time_t(const time_point& __t) noexcept
      {
 return std::time_t(duration_cast<chrono::seconds>
      (__t.time_since_epoch()).count());
      }

      static time_point
      from_time_t(std::time_t __t) noexcept
      {
 typedef chrono::time_point<system_clock, seconds> __from;
 return time_point_cast<system_clock::duration>
        (__from(chrono::seconds(__t)));
      }
    };







    struct steady_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock, duration> time_point;

      static constexpr bool is_steady = true;

      static time_point
      now() noexcept;
    };
# 878 "/usr/include/c++/7/chrono" 3
    using high_resolution_clock = system_clock;

    }

 
  }





  inline namespace literals
  {
  inline namespace chrono_literals
  {
 

    template<typename _Rep, unsigned long long _Val>
      struct _Checked_integral_constant
      : integral_constant<_Rep, static_cast<_Rep>(_Val)>
      {
 static_assert(_Checked_integral_constant::value >= 0
        && _Checked_integral_constant::value == _Val,
        "literal value cannot be represented by duration type");
      };

    template<typename _Dur, char... _Digits>
      constexpr _Dur __check_overflow()
      {
 using _Val = __parse_int::_Parse_int<_Digits...>;
 using _Rep = typename _Dur::rep;


 using _CheckedVal = _Checked_integral_constant<_Rep, _Val::value>;
 return _Dur{_CheckedVal::value};
      }

    constexpr chrono::duration<long double, ratio<3600,1>>
    operator""h(long double __hours)
    { return chrono::duration<long double, ratio<3600,1>>{__hours}; }

    template <char... _Digits>
      constexpr chrono::hours
      operator""h()
      { return __check_overflow<chrono::hours, _Digits...>(); }

    constexpr chrono::duration<long double, ratio<60,1>>
    operator""min(long double __mins)
    { return chrono::duration<long double, ratio<60,1>>{__mins}; }

    template <char... _Digits>
      constexpr chrono::minutes
      operator""min()
      { return __check_overflow<chrono::minutes, _Digits...>(); }

    constexpr chrono::duration<long double>
    operator""s(long double __secs)
    { return chrono::duration<long double>{__secs}; }

    template <char... _Digits>
      constexpr chrono::seconds
      operator""s()
      { return __check_overflow<chrono::seconds, _Digits...>(); }

    constexpr chrono::duration<long double, milli>
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }

    constexpr chrono::duration<long double, micro>
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }

    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
      { return __check_overflow<chrono::microseconds, _Digits...>(); }

    constexpr chrono::duration<long double, nano>
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }

 
  }
  }

  namespace chrono
  {
 

  using namespace literals::chrono_literals;

 
  }




}
# 39 "/usr/include/c++/7/thread" 2 3
# 1 "/usr/include/c++/7/memory" 1 3
# 46 "/usr/include/c++/7/memory" 3
       
# 47 "/usr/include/c++/7/memory" 3
# 62 "/usr/include/c++/7/memory" 3
# 1 "/usr/include/c++/7/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/7/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/7/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/7/bits/functexcept.h" 3
# 1 "/usr/include/c++/7/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/7/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/7/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/7/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/7/bits/stl_pair.h" 3
# 1 "/usr/include/c++/7/bits/move.h" 1 3
# 34 "/usr/include/c++/7/bits/move.h" 3
# 1 "/usr/include/c++/7/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/7/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/7/bits/concept_check.h" 3
# 35 "/usr/include/c++/7/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 115 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 135 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}
# 166 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 181 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/7/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/7/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };
# 197 "/usr/include/c++/7/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 241 "/usr/include/c++/7/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 269 "/usr/include/c++/7/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __not_<__and_<is_copy_assignable<_T1>,
                is_copy_assignable<_T2>>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p) = delete;

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 516 "/usr/include/c++/7/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 535 "/usr/include/c++/7/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/include/c++/7/debug/assertions.h" 1 3
# 66 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;




  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 195 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/7/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/7/bits/ptr_traits.h" 1 3
# 37 "/usr/include/c++/7/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;


}
# 67 "/usr/include/c++/7/bits/stl_iterator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 100 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 167 "/usr/include/c++/7/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 297 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 387 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 451 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 486 "/usr/include/c++/7/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 528 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 543 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 577 "/usr/include/c++/7/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 619 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 638 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 689 "/usr/include/c++/7/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 733 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 757 "/usr/include/c++/7/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 857 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{

# 1009 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }


}
# 68 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/7/debug/debug.h" 1 3
# 48 "/usr/include/c++/7/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/7/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/7/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 118 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 148 "/usr/include/c++/7/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, (void)++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1039 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1071 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1104 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1153 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;
      using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1201 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1237 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1280 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1313 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1360 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1395 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



}
# 63 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/allocator.h" 1 3
# 46 "/usr/include/c++/7/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
# 1 "/usr/include/c++/7/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/7/ext/new_allocator.h" 3
# 1 "/usr/include/c++/7/new" 1 3
# 37 "/usr/include/c++/7/new" 3
       
# 38 "/usr/include/c++/7/new" 3


# 1 "/usr/include/c++/7/exception" 1 3
# 33 "/usr/include/c++/7/exception" 3
       
# 34 "/usr/include/c++/7/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/7/bits/exception.h" 1 3
# 34 "/usr/include/c++/7/bits/exception.h" 3
       
# 35 "/usr/include/c++/7/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/7/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/7/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "/usr/include/c++/7/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 132 "/usr/include/c++/7/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/7/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/7/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 39 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/typeinfo" 1 3
# 32 "/usr/include/c++/7/typeinfo" 3
       
# 33 "/usr/include/c++/7/typeinfo" 3



# 1 "/usr/include/c++/7/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/7/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/7/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/7/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/7/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/7/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/include/c++/7/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/new" 1 3
# 41 "/usr/include/c++/7/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "/usr/include/c++/7/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "/usr/include/c++/7/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(__ex)),
   __exception_ptr::__dest_thunk<_Ex>);
      try
 {
          ::new (__e) _Ex(__ex);
          return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 208 "/usr/include/c++/7/bits/exception_ptr.h" 3
    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 143 "/usr/include/c++/7/exception" 2 3
# 1 "/usr/include/c++/7/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/7/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 42 "/usr/include/c++/7/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 144 "/usr/include/c++/7/exception" 2 3
# 41 "/usr/include/c++/7/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "/usr/include/c++/7/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "/usr/include/c++/7/new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "/usr/include/c++/7/new" 3
#pragma GCC visibility pop
# 34 "/usr/include/c++/7/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/include/c++/7/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "/usr/include/c++/7/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "/usr/include/c++/7/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/7/bits/allocator.h" 2 3
# 1 "/usr/include/c++/7/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/7/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/7/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/7/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 48 "/usr/include/c++/7/bits/allocator.h" 2 3
# 57 "/usr/include/c++/7/bits/allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "/usr/include/c++/7/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 64 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/stl_construct.h" 1 3
# 61 "/usr/include/c++/7/bits/stl_construct.h" 3
# 1 "/usr/include/c++/7/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/alloc_traits.h" 3



# 1 "/usr/include/c++/7/bits/alloc_traits.h" 1 3
# 41 "/usr/include/c++/7/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


}
# 37 "/usr/include/c++/7/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "/usr/include/c++/7/ext/alloc_traits.h" 3
  };


}
# 62 "/usr/include/c++/7/bits/stl_construct.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 87 "/usr/include/c++/7/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }
# 232 "/usr/include/c++/7/bits/stl_construct.h" 3

}
# 65 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/stl_uninitialized.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 113 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 179 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 242 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 378 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 810 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }

  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 882 "/usr/include/c++/7/bits/stl_uninitialized.h" 3

}
# 66 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 83 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 67 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/7/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }




      raw_storage_iterator&
      operator=(_Tp&& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), std::move(__element));
 return *this;
      }


      raw_storage_iterator&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator
      operator++(int)
      {
 raw_storage_iterator __tmp = *this;
 ++_M_iter;
 return __tmp;
      }



      _OutputIterator base() const { return _M_iter; }
    };


}
# 68 "/usr/include/c++/7/memory" 2 3




# 1 "/usr/include/c++/7/iosfwd" 1 3
# 36 "/usr/include/c++/7/iosfwd" 3
       
# 37 "/usr/include/c++/7/iosfwd" 3


# 1 "/usr/include/c++/7/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/7/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/7/bits/stringfwd.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/usr/include/c++/7/iosfwd" 2 3
# 1 "/usr/include/c++/7/bits/postypes.h" 1 3
# 38 "/usr/include/c++/7/bits/postypes.h" 3
       
# 39 "/usr/include/c++/7/bits/postypes.h" 3

# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 673 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 727 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 782 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 808 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 818 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 857 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/7/cwchar" 2 3
# 62 "/usr/include/c++/7/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/7/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/7/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/7/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/include/c++/7/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/7/bits/postypes.h" 2 3
# 68 "/usr/include/c++/7/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/7/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/7/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/7/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/7/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/7/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/7/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 73 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/7/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/7/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
{
  int sched_priority;
};

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 743 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1160 "/usr/include/pthread.h" 3 4
}
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/7/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/7/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/7/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 74 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/ext/concurrence.h" 1 3
# 32 "/usr/include/c++/7/ext/concurrence.h" 3
       
# 33 "/usr/include/c++/7/ext/concurrence.h" 3







namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;
# 67 "/usr/include/c++/7/ext/concurrence.h" 3
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 147 "/usr/include/c++/7/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 202 "/usr/include/c++/7/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 280 "/usr/include/c++/7/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}
# 75 "/usr/include/c++/7/memory" 2 3

# 1 "/usr/include/c++/7/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/7/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };
# 512 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 740 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 817 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 937 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/7/backward/binders.h" 1 3
# 60 "/usr/include/c++/7/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/7/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1128 "/usr/include/c++/7/bits/stl_function.h" 2 3
# 77 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/uses_allocator.h" 1 3
# 35 "/usr/include/c++/7/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __erased_type { };

  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {
      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>,
   is_constructible<_Tp, _Args..., _Alloc>>::value, "construction with"
   " an allocator must be possible if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      __uses_allocator_construct_impl(__use_alloc<_Tp, _Alloc, _Args...>(__a),
          __ptr, std::forward<_Args>(__args)...);
    }


}
# 78 "/usr/include/c++/7/memory" 2 3


# 1 "/usr/include/c++/7/bits/unique_ptr.h" 1 3
# 36 "/usr/include/c++/7/bits/unique_ptr.h" 3
# 1 "/usr/include/c++/7/utility" 1 3
# 58 "/usr/include/c++/7/utility" 3
       
# 59 "/usr/include/c++/7/utility" 3
# 69 "/usr/include/c++/7/utility" 3
# 1 "/usr/include/c++/7/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 
# 85 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  }

}
# 70 "/usr/include/c++/7/utility" 2 3






# 1 "/usr/include/c++/7/initializer_list" 1 3
# 33 "/usr/include/c++/7/initializer_list" 3
       
# 34 "/usr/include/c++/7/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 77 "/usr/include/c++/7/utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp, typename = void>
    struct __tuple_size_cv_impl { };

  template<typename _Tp>
    struct __tuple_size_cv_impl<_Tp, __void_t<decltype(tuple_size<_Tp>::value)>>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };



  template<typename _Tp>
    struct tuple_size<const _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp> : __tuple_size_cv_impl<_Tp> { };
# 128 "/usr/include/c++/7/utility" 3
  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };




  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }




  template<size_t... _Indexes> struct _Index_tuple { };


  template<typename _Itup1, typename _Itup2> struct _Itup_cat;

  template<size_t... _Ind1, size_t... _Ind2>
    struct _Itup_cat<_Index_tuple<_Ind1...>, _Index_tuple<_Ind2...>>
    {
      using __type = _Index_tuple<_Ind1..., (_Ind2 + sizeof...(_Ind1))...>;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    : _Itup_cat<typename _Build_index_tuple<_Num / 2>::__type,
  typename _Build_index_tuple<_Num - _Num / 2>::__type>
    { };

  template<>
    struct _Build_index_tuple<1>
    {
      typedef _Index_tuple<0> __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };

  template<typename _Tp, _Tp _Num,
    typename _ISeq = typename _Build_index_tuple<_Num>::__type>
    struct _Make_integer_sequence;

  template<typename _Tp, _Tp _Num, size_t... _Idx>
    struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>
    {
      static_assert( _Num >= 0,
       "Cannot make integer sequence of negative length" );

      typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence
      = typename _Make_integer_sequence<_Tp, _Num>::__type;


  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 402 "/usr/include/c++/7/utility" 3

}
# 37 "/usr/include/c++/7/bits/unique_ptr.h" 2 3
# 1 "/usr/include/c++/7/tuple" 1 3
# 32 "/usr/include/c++/7/tuple" 3
       
# 33 "/usr/include/c++/7/tuple" 3






# 1 "/usr/include/c++/7/array" 1 3
# 32 "/usr/include/c++/7/array" 3
       
# 33 "/usr/include/c++/7/array" 3






# 1 "/usr/include/c++/7/stdexcept" 1 3
# 36 "/usr/include/c++/7/stdexcept" 3
       
# 37 "/usr/include/c++/7/stdexcept" 3


# 1 "/usr/include/c++/7/string" 1 3
# 36 "/usr/include/c++/7/string" 3
       
# 37 "/usr/include/c++/7/string" 3



# 1 "/usr/include/c++/7/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/7/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/7/bits/char_traits.h" 3



# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3
# 42 "/usr/include/c++/7/bits/char_traits.h" 2 3





namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/7/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "/usr/include/c++/7/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 268 "/usr/include/c++/7/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/usr/include/c++/7/string" 2 3


# 1 "/usr/include/c++/7/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/7/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/7/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3

# 1 "/usr/include/c++/7/clocale" 1 3
# 39 "/usr/include/c++/7/clocale" 3
       
# 40 "/usr/include/c++/7/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/7/clocale" 2 3
# 51 "/usr/include/c++/7/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/7/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/7/cctype" 1 3
# 39 "/usr/include/c++/7/cctype" 3
       
# 40 "/usr/include/c++/7/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/include/c++/7/cctype" 2 3
# 62 "/usr/include/c++/7/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/include/c++/7/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/7/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/7/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/7/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/7/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/7/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/7/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/7/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/7/string" 2 3






# 1 "/usr/include/c++/7/bits/range_access.h" 1 3
# 33 "/usr/include/c++/7/bits/range_access.h" 3
       
# 34 "/usr/include/c++/7/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 323 "/usr/include/c++/7/bits/range_access.h" 3

}
# 52 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/7/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/7/bits/basic_string.h" 3
# 52 "/usr/include/c++/7/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "/usr/include/c++/7/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }






      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }







      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 531 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 599 "/usr/include/c++/7/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 646 "/usr/include/c++/7/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 703 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 721 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (!__str._M_is_local()
     && (_Alloc_traits::_S_propagate_on_move_assign()
       || _Alloc_traits::_S_always_equal()))
   {
     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {
      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
     assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 806 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 935 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 948 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 997 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1026 "/usr/include/c++/7/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1043 "/usr/include/c++/7/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1064 "/usr/include/c++/7/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1085 "/usr/include/c++/7/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1148 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1201 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1218 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1260 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1284 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1329 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1360 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1383 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1399 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1415 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1432 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1445 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1513 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1555 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1591 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
 ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1611 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1634 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1657 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1676 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1700 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1718 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1778 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1797 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1816 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1860 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1882 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1907 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1932 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1956 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1974 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1994 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2016 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2037 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2062 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2094 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2153 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2212 "/usr/include/c++/7/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2250 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2260 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2270 "/usr/include/c++/7/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2282 "/usr/include/c++/7/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2301 "/usr/include/c++/7/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2317 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2331 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2363 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2380 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2393 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2427 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2441 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2458 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2472 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2507 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2521 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2541 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2556 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2591 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2605 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2625 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2639 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2674 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2688 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2706 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2721 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2756 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2770 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2788 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2804 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2823 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2916 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2942 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2960 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 2984 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3011 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5877 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 5998 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6045 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6083 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6121 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6159 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6197 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6235 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6255 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6273 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6296 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6313 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/7/ext/string_conversions.h" 1 3
# 32 "/usr/include/c++/7/ext/string_conversions.h" 3
       
# 33 "/usr/include/c++/7/ext/string_conversions.h" 3
# 41 "/usr/include/c++/7/ext/string_conversions.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 75 "/usr/include/c++/7/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 135 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 197 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 257 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/7/cstdlib" 2 3

# 1 "/usr/include/c++/7/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/7/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/7/bits/std_abs.h" 3
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/usr/include/c++/7/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/7/cstdlib" 2 3
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3
# 43 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cstdio" 1 3
# 39 "/usr/include/c++/7/cstdio" 3
       
# 40 "/usr/include/c++/7/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4






typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 868 "/usr/include/stdio.h" 3 4
}
# 43 "/usr/include/c++/7/cstdio" 2 3
# 96 "/usr/include/c++/7/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/7/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/7/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cerrno" 1 3
# 39 "/usr/include/c++/7/cerrno" 3
       
# 40 "/usr/include/c++/7/cerrno" 3


# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;




}
# 43 "/usr/include/c++/7/cerrno" 2 3
# 45 "/usr/include/c++/7/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6353 "/usr/include/c++/7/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}





# 1 "/usr/include/c++/7/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/7/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/7/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/7/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/7/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "/usr/include/c++/7/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6579 "/usr/include/c++/7/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };








  inline namespace literals
  {
  inline namespace string_literals
  {


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }



  }
  }



}
# 53 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/7/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/7/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "/usr/include/c++/7/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1607 "/usr/include/c++/7/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/include/c++/7/string" 2 3
# 40 "/usr/include/c++/7/stdexcept" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/include/c++/7/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 40 "/usr/include/c++/7/array" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "/usr/include/c++/7/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "/usr/include/c++/7/array" 3
  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    class tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    class tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "/usr/include/c++/7/tuple" 2 3

# 1 "/usr/include/c++/7/bits/invoke.h" 1 3
# 33 "/usr/include/c++/7/bits/invoke.h" 3
       
# 34 "/usr/include/c++/7/bits/invoke.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/7/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


}
# 42 "/usr/include/c++/7/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 176 "/usr/include/c++/7/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value
               && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_assignable<_Head>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 return *this;
      }

      template<typename _UHead>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
   return *this;
 }

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Elements>
  struct _TC
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
    }

    template<typename _SrcTuple>
    static constexpr bool _NonNestedTuple()
    {
      return __and_<__not_<is_same<tuple<_Elements...>,
                                   typename remove_cv<
                                     typename remove_reference<_SrcTuple>::type
                                   >::type>>,
                     __not_<is_convertible<_SrcTuple, _Elements...>>,
                     __not_<is_constructible<_Elements..., _SrcTuple>>
              >::value;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return __not_<is_same<tuple<_Elements...>,
        typename remove_const<
          typename remove_reference<_UElements...>::type
          >::type>>::value;
    }
  };

  template<typename... _Elements>
  struct _TC<false, _Elements...>
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _NonNestedTuple()
    {
      return true;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return true;
    }
  };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;



      template<typename _Dummy>
      struct _TC2
      {
        static constexpr bool _DefaultConstructibleTuple()
        {
          return __and_<is_default_constructible<_Elements>...>::value;
        }
        static constexpr bool _ImplicitlyDefaultConstructibleTuple()
        {
          return __and_<__is_implicitly_default_constructible<_Elements>...>
            ::value;
        }
      };

    public:
      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = true>
      constexpr tuple()
      : _Inherited() { }

      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _DefaultConstructibleTuple()
                                  &&
                                  !_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = false>
      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value,
            _Elements...>;

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=false>
      explicit constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }



      template<typename... _UElements> using _TMC =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && (_TC<(sizeof...(_UElements)==1), _Elements...>::
     template _NotSameTuple<_UElements...>()),
                      _Elements...>;



      template<typename... _UElements> using _TMCT =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && !is_same<tuple<_Elements...>,
      tuple<_UElements...>>::value,
                      _Elements...>;

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=true>
        constexpr tuple(_UElements&&... __elements)
        : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=false>
        explicit constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;



      template<typename _Dummy> using _TNTC =
        _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
            _Elements...>;

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=true>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=false>
        explicit constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
        explicit constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };
# 889 "/usr/include/c++/7/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&) { }
      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
      : _Inherited() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<
                  __and_<
                    is_default_constructible<_U1>,
                    is_default_constructible<_U2>,
                    __not_<
                      __and_<__is_implicitly_default_constructible<_U1>,
                             __is_implicitly_default_constructible<_U2>>>>
                  ::value, bool>::type = false>

      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value, _T1, _T2>;

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && _TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = true>
        constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && !_TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = false>
        explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }



      using _TMC = _TC<true, _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = true>
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = false>
        explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=false>

 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1278 "/usr/include/c++/7/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }



  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



  constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1695 "/usr/include/c++/7/tuple" 3

}
# 38 "/usr/include/c++/7/bits/unique_ptr.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename> class auto_ptr;



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 101 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }
    };

  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

      pointer& _M_ptr() { return std::get<0>(_M_t); }
      pointer _M_ptr() const { return std::get<0>(_M_t); }
      _Dp& _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <class _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
         is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
                __not_<is_array<_Up>>,
                __or_<__and_<is_reference<deleter_type>,
                             is_same<deleter_type, _Ep>>,
                      __and_<__not_<is_reference<deleter_type>>,
                             is_convertible<_Ep, deleter_type>>
                >
              >;




      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr() noexcept
 : _M_t()
        { }







      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 212 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 224 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!std::is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }



      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;



      ~unique_ptr() noexcept
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 280 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 295 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
 ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
 ;
 return get();
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(_M_t._M_ptr(), __p);
 if (__p != pointer())
   get_deleter()(__p);
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _Up_up = unique_ptr<_Up, _Ep>,
        typename _Up_element_type = typename _Up_up::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<typename _Up_up::pointer, _Up_element_type*>,
          is_convertible<_Up_element_type(*)[], element_type(*)[]>,
          __or_<__and_<is_reference<deleter_type>, is_same<deleter_type, _Ep>>,
                __and_<__not_<is_reference<deleter_type>>,
                       is_convertible<_Ep, deleter_type>>>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr() noexcept
 : _M_t()
        { }
# 464 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 482 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
               typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
      unique_ptr(_Up __p,
                 typename conditional<is_reference<deleter_type>::value,
                 deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 498 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
               typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
      unique_ptr(_Up __p, typename
   remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }

      template<typename _Up, typename _Ep,
        typename = _Require<__safe_conversion_up<_Up, _Ep>>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 539 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 554 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
 ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
      void
      reset(_Up __p) noexcept
      {
 pointer __ptr = __p;
 using std::swap;
 swap(_M_t._M_ptr(), __ptr);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
      }

      void reset(nullptr_t = nullptr) noexcept
      {
        reset(pointer());
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline


    typename enable_if<__is_swappable<_Dp>::value>::type



    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }


  template<typename _Tp, typename _Dp>
    typename enable_if<!__is_swappable<_Dp>::value>::type
    swap(unique_ptr<_Tp, _Dp>&,
  unique_ptr<_Tp, _Dp>&) = delete;


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };





  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }


  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__invalid_type
    make_unique(_Args&&...) = delete;





}
# 81 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/shared_ptr.h" 1 3
# 52 "/usr/include/c++/7/bits/shared_ptr.h" 3
# 1 "/usr/include/c++/7/bits/shared_ptr_base.h" 1 3
# 55 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
# 1 "/usr/include/c++/7/bits/allocated_ptr.h" 1 3
# 40 "/usr/include/c++/7/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(std::__addressof(__a)),
 _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }


      value_type* get() { return _S_raw_ptr(_M_ptr); }

    private:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }

      template<typename _Ptr>
 static auto
 _S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))
 { return _S_raw_ptr(__ptr.operator->()); }

      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


}
# 56 "/usr/include/c++/7/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/7/bits/refwrap.h" 1 3
# 33 "/usr/include/c++/7/bits/refwrap.h" 3
       
# 34 "/usr/include/c++/7/bits/refwrap.h" 3
# 43 "/usr/include/c++/7/bits/refwrap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes......) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile >
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(_T1) >
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(*)(_T1) >
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() >
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) >
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() const >
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const >
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile >
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile >
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile >
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile >
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return cref(__t.get()); }




}
# 57 "/usr/include/c++/7/bits/shared_ptr_base.h" 2 3

# 1 "/usr/include/c++/7/ext/aligned_buffer.h" 1 3
# 32 "/usr/include/c++/7/ext/aligned_buffer.h" 3
       
# 33 "/usr/include/c++/7/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {



      struct _Tp2 { _Tp _M_t; };

      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };






  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
    {
      typename
 std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
 _M_storage;

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };

}
# 59 "/usr/include/c++/7/bits/shared_ptr_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename> class auto_ptr;






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
            ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
  __atomic_thread_fence (4);
       }


            ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
            ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


  __atomic_thread_fence (4);
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, std::move(__d), _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {



        return __ti == typeid(_Deleter)
   ? std::__addressof(_M_impl._M_del())
   : nullptr;



      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag { };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;

      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }


      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

 if (__ti == typeid(_Sp_make_shared_tag))
   return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());

 return nullptr;
      }

    private:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  struct __sp_array_delete
  {
    template<typename _Yp>
      void operator()(_Yp* __p) const { delete[] __p; }
  };

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr>
 __shared_count(_Ptr __p, false_type)
 : __shared_count(__p)
 { }

      template<typename _Ptr>
 __shared_count(_Ptr __p, true_type)
 : __shared_count(__p, __sp_array_delete{}, allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   try
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   catch(...)
     {
       __d(__p);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
         _Args&&... __args)
 : _M_pi(0)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typename _Sp_cp_type::__allocator_type __a2(__a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   ::new (__mem) _Sp_cp_type(std::move(__a),
        std::forward<_Args>(__args)...);
   _M_pi = __mem;
   __guard = nullptr;
 }



      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {


   if (__r.get() == nullptr)
     return;

   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }







  template<typename _Yp_ptr, typename _Tp_ptr>
    struct __sp_compatible_with
    : false_type
    { };

  template<typename _Yp, typename _Tp>
    struct __sp_compatible_with<_Yp*, _Tp*>
    : is_convertible<_Yp*, _Tp*>::type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
    : true_type
    { };


  template<typename _Up, size_t _Nm, typename _Yp, typename = void>
    struct __sp_is_constructible_arrN
    : false_type
    { };

  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
    : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
    { };


  template<typename _Up, typename _Yp, typename = void>
    struct __sp_is_constructible_arr
    : false_type
    { };

  template<typename _Up, typename _Yp>
    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
    : is_convertible<_Yp(*)[], _Up(*)[]>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible;


  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible<_Up[_Nm], _Yp>
    : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
    { };


  template<typename _Up, typename _Yp>
    struct __sp_is_constructible<_Up[], _Yp>
    : __sp_is_constructible_arr<_Up, _Yp>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible
    : is_convertible<_Yp*, _Tp*>::type
    { };



  template<typename _Tp, _Lock_policy _Lp,
    bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
    class __shared_ptr_access
    {
    public:
      using element_type = _Tp;

      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, false, true>
    {
    public:
      using element_type = _Tp;

      element_type*
      operator->() const noexcept
      {
 auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
 ;
 return __ptr;
      }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, true, false>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;


      [[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]]
      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      [[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]]
      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }


      element_type&
      operator[](ptrdiff_t __i) const
      {
 ;
 ;
 return _M_get()[__i];
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    : public __shared_ptr_access<_Tp, _Lp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

    private:

      template<typename _Yp>
 using _SafeConv
   = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;


      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __shared_ptr&>;


      template<typename _Yp, typename _Del, typename _Res = void,
        typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
 using _UniqCompatible = typename enable_if<__and_<
   __sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>
   >::value, _Res>::type;


      template<typename _Yp, typename _Del>
 using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

    public:





      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Yp, typename = _SafeConv<_Yp>>
 explicit
 __shared_ptr(_Yp* __p)
 : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 {
   static_assert( !is_void<_Yp>::value, "incomplete type" );
   static_assert( sizeof(_Yp) > 0, "incomplete type" );
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, std::move(__d))
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
 { }

      template<typename _Yp>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Yp, typename = _Compatible<_Yp>>
 explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {


   _M_ptr = __r._M_ptr;
 }


      template<typename _Yp, typename _Del,
        typename = _UniqCompatible<_Yp, _Del>>
 __shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }


    protected:

      template<typename _Tp1, typename _Del,
        typename enable_if<__and_<
   __not_<is_array<_Tp>>, is_array<_Tp1>,
          is_convertible<typename unique_ptr<_Tp1, _Del>::pointer, _Tp*>
        >::value, bool>::type = true>
 __shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }
    public:




      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(auto_ptr<_Yp>&& __r);


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


      template<typename _Yp>
 _Assignable<_Yp>
 operator=(auto_ptr<_Yp>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Yp>
 _Assignable<_Yp>
 operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Yp, typename _Del>
 _UniqAssignable<_Yp, _Del>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Yp>
 _SafeConv<_Yp>
 reset(_Yp* __p)
 {

   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Yp, typename _Deleter>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d)
 { __shared_ptr(__p, std::move(__d)).swap(*this); }

      template<typename _Yp, typename _Deleter, typename _Alloc>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      element_type*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }

      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }

      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
       _Args&&... __args)
 : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
    std::forward<_Args>(__args)...)
 {


   void* __p = _M_refcount._M_get_deleter(typeid(__tag));
   _M_ptr = static_cast<_Tp*>(__p);
   _M_enable_shared_from_this_with(_M_ptr);
 }
# 1337 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:

      template<typename _Yp>
 using __esft_base_t = decltype(__enable_shared_from_this_base(
       std::declval<const __shared_count<_Lp>&>(),
       std::declval<_Yp*>()));


      template<typename _Yp, typename = void>
 struct __has_esft_base
 : false_type { };

      template<typename _Yp>
 struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
 : __not_<is_array<_Tp>> { };

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp* __p) noexcept
 {
   if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
     __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 }

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<!__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp*) noexcept
 { }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1>
 static _Tp1*
 _S_raw_ptr(_Tp1* __ptr)
 { return __ptr; }

      template<typename _Tp1>
 static auto
 _S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
 { return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      element_type* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a,
       const __shared_ptr<_Up, _Lp>& __b) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Sp>
    struct _Sp_less : public binary_function<_Sp, _Sp, bool>
    {
      bool
      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept
      {
 typedef typename _Sp::element_type element_type;
 return std::less<element_type*>()(__lhs.get(), __rhs.get());
      }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_less<__shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1543 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 1589 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __weak_ptr&>;

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 1625 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 _M_ptr = __r._M_ptr;
 _M_refcount = std::move(__r._M_refcount);
 __r._M_ptr = nullptr;
 return *this;
      }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 if (use_count() == 0)
   {
     _M_ptr = __ptr;
     _M_refcount = __refcount;
   }
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      element_type* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }
    };

  template<>
    struct _Sp_owner_less<void, void>
    {
      template<typename _Tp, typename _Up>
 auto
 operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept
 -> decltype(__lhs.owner_before(__rhs))
 { return __lhs.owner_before(__rhs); }

      using is_transparent = void;
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }


      __weak_ptr<_Tp, _Lp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      __weak_ptr<const _Tp, _Lp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      friend const __enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<_Lp>&,
         const __enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      {
 return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(
     __s.get());
      }
    };


}
# 53 "/usr/include/c++/7/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }


  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 92 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename... _Args>
 using _Constructible = typename enable_if<
   is_constructible<__shared_ptr<_Tp>, _Args...>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 >::type;

    public:

      using element_type = typename __shared_ptr<_Tp>::element_type;
# 117 "/usr/include/c++/7/bits/shared_ptr.h" 3
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Yp, typename = _Constructible<_Yp*>>
 explicit
 shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
# 144 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter,
        typename = _Constructible<_Yp*, _Deleter>>
 shared_ptr(_Yp* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 162 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 181 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 201 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 223 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp>
 shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 234 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 shared_ptr(const shared_ptr<_Yp>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 264 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 explicit shared_ptr(const weak_ptr<_Yp>& __r)
 : __shared_ptr<_Tp>(__r) { }


      template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 shared_ptr(auto_ptr<_Yp>&& __r);




      template<typename _Yp, typename _Del,
        typename = _Constructible<unique_ptr<_Yp, _Del>>>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }





      template<typename _Yp, typename _Del,
  _Constructible<unique_ptr<_Yp, _Del>, __sp_array_delete>* = 0>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }






      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


      template<typename _Yp>
 _Assignable<auto_ptr<_Yp>>
 operator=(auto_ptr<_Yp>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Yp>
 _Assignable<shared_ptr<_Yp>>
 operator=(shared_ptr<_Yp>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Yp, typename _Del>
 _Assignable<unique_ptr<_Yp, _Del>>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
     _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 { }

      template<typename _Yp, typename _Alloc, typename... _Args>
 friend shared_ptr<_Yp>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };
# 366 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Up>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }

  template<typename _Tp, typename _Up>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      using _Up_elt = typename shared_ptr<_Up>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp, typename _Up>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, typename _Up>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp, typename _Up>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>
    { };


  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }

  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }

  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 519 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Arg>
 using _Constructible = typename enable_if<
   is_constructible<__weak_ptr<_Tp>, _Arg>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 >::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<const weak_ptr<_Yp>&>
 operator=(const weak_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<weak_ptr<_Yp>>
 operator=(weak_ptr<_Yp>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };







  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp = void>
    struct owner_less;


  template<>
    struct owner_less<void> : _Sp_owner_less<void, void>
    { };


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }



      weak_ptr<_Tp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      weak_ptr<const _Tp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }


      friend const enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<>&,
         const enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 686 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }
# 701 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      {
 return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
      }
    };




}
# 82 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 1 3
# 33 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
# 1 "/usr/include/c++/7/bits/atomic_base.h" 1 3
# 33 "/usr/include/c++/7/bits/atomic_base.h" 3
       
# 34 "/usr/include/c++/7/bits/atomic_base.h" 3



# 1 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 3
# 38 "/usr/include/c++/7/bits/atomic_base.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/7/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;

  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | (__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(__m); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(__m); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;




  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 148 "/usr/include/c++/7/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 237 "/usr/include/c++/7/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }
    };




}
# 34 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };







  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>* __p)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 96 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 132 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 169 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 218 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }





}
# 83 "/usr/include/c++/7/memory" 2 3

# 1 "/usr/include/c++/7/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/7/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/7/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));
# 86 "/usr/include/c++/7/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/include/c++/7/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/include/c++/7/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/include/c++/7/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 210 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/include/c++/7/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 264 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1, typename>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {
     
      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__tmp);
    }

  template<typename _Tp>
  template<typename _Tp1, typename>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }



}
# 85 "/usr/include/c++/7/memory" 2 3
# 93 "/usr/include/c++/7/memory" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 113 "/usr/include/c++/7/memory" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{
  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);
  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if ((__size + __diff) > __space)
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}



enum class pointer_safety { relaxed, preferred, strict };

inline void
declare_reachable(void*) { }

template <typename _Tp>
  inline _Tp*
  undeclare_reachable(_Tp* __p) { return __p; }

inline void
declare_no_pointers(char*, size_t) { }

inline void
undeclare_no_pointers(char*, size_t) { }

inline pointer_safety
get_pointer_safety() noexcept { return pointer_safety::relaxed; }


}
# 40 "/usr/include/c++/7/thread" 2 3

# 1 "/usr/include/c++/7/cerrno" 1 3
# 39 "/usr/include/c++/7/cerrno" 3
       
# 40 "/usr/include/c++/7/cerrno" 3
# 42 "/usr/include/c++/7/thread" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/7/thread" 3
  class thread
  {
  public:


    struct _State
    {
      virtual ~_State();
      virtual void _M_run() = 0;
    };
    using _State_ptr = unique_ptr<_State>;

    typedef __gthread_t native_handle_type;


    class id
    {
      native_handle_type _M_thread;

    public:
      id() noexcept : _M_thread() { }

      explicit
      id(native_handle_type __id) : _M_thread(__id) { }

    private:
      friend class thread;
      friend class hash<thread::id>;

      friend bool
      operator==(thread::id __x, thread::id __y) noexcept;

      friend bool
      operator<(thread::id __x, thread::id __y) noexcept;

      template<class _CharT, class _Traits>
 friend basic_ostream<_CharT, _Traits>&
 operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };

  private:
    id _M_id;

  public:
    thread() noexcept = default;


    thread(thread&) = delete;
    thread(const thread&) = delete;
    thread(const thread&&) = delete;

    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit
      thread(_Callable&& __f, _Args&&... __args)
      {


 auto __depend = reinterpret_cast<void(*)()>(&pthread_create);



        _M_start_thread(_S_make_state(
       __make_invoker(std::forward<_Callable>(__f),
        std::forward<_Args>(__args)...)),
     __depend);
      }

    ~thread()
    {
      if (joinable())
 std::terminate();
    }

    thread& operator=(const thread&) = delete;

    thread& operator=(thread&& __t) noexcept
    {
      if (joinable())
 std::terminate();
      swap(__t);
      return *this;
    }

    void
    swap(thread& __t) noexcept
    { std::swap(_M_id, __t._M_id); }

    bool
    joinable() const noexcept
    { return !(_M_id == id()); }

    void
    join();

    void
    detach();

    thread::id
    get_id() const noexcept
    { return _M_id; }



    native_handle_type
    native_handle()
    { return _M_id._M_thread; }


    static unsigned int
    hardware_concurrency() noexcept;

  private:
    template<typename _Callable>
      struct _State_impl : public _State
      {
 _Callable _M_func;

 _State_impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
 { }

 void
 _M_run() { _M_func(); }
      };

    void
    _M_start_thread(_State_ptr, void (*)());

    template<typename _Callable>
      static _State_ptr
      _S_make_state(_Callable&& __f)
      {
 using _Impl = _State_impl<_Callable>;
 return _State_ptr{new _Impl{std::forward<_Callable>(__f)}};
      }
# 218 "/usr/include/c++/7/thread" 3
  private:

    template<typename _Tuple>
      struct _Invoker
      {
 _Tuple _M_t;

 template<size_t _Index>
   static __tuple_element_t<_Index, _Tuple>&&
   _S_declval();

 template<size_t... _Ind>
   auto
   _M_invoke(_Index_tuple<_Ind...>)
   noexcept(noexcept(std::__invoke(_S_declval<_Ind>()...)))
   -> decltype(std::__invoke(_S_declval<_Ind>()...))
   { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }

 using _Indices
   = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;

 auto
 operator()()
 noexcept(noexcept(std::declval<_Invoker&>()._M_invoke(_Indices())))
 -> decltype(std::declval<_Invoker&>()._M_invoke(_Indices()))
 { return _M_invoke(_Indices()); }
      };

    template<typename... _Tp>
      using __decayed_tuple = tuple<typename std::decay<_Tp>::type...>;

  public:


    template<typename _Callable, typename... _Args>
      static _Invoker<__decayed_tuple<_Callable, _Args...>>
      __make_invoker(_Callable&& __callable, _Args&&... __args)
      {
 return { __decayed_tuple<_Callable, _Args...>{
     std::forward<_Callable>(__callable), std::forward<_Args>(__args)...
 } };
      }
  };

  inline void
  swap(thread& __x, thread& __y) noexcept
  { __x.swap(__y); }

  inline bool
  operator==(thread::id __x, thread::id __y) noexcept
  {




    return __x._M_thread == __y._M_thread;
  }

  inline bool
  operator!=(thread::id __x, thread::id __y) noexcept
  { return !(__x == __y); }

  inline bool
  operator<(thread::id __x, thread::id __y) noexcept
  {


    return __x._M_thread < __y._M_thread;
  }

  inline bool
  operator<=(thread::id __x, thread::id __y) noexcept
  { return !(__y < __x); }

  inline bool
  operator>(thread::id __x, thread::id __y) noexcept
  { return __y < __x; }

  inline bool
  operator>=(thread::id __x, thread::id __y) noexcept
  { return !(__x < __y); }



  template<>
    struct hash<thread::id>
    : public __hash_base<size_t, thread::id>
    {
      size_t
      operator()(const thread::id& __id) const noexcept
      { return std::_Hash_impl::hash(__id._M_thread); }
    };

  template<class _CharT, class _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
    {
      if (__id == thread::id())
 return __out << "thread::id of a non-executing thread";
      else
 return __out << __id._M_thread;
    }







  namespace this_thread
  {
 


    inline thread::id
    get_id() noexcept
    {





      if (!__gthread_active_p())
 return thread::id(1);

      return thread::id(__gthread_self());
    }


    inline void
    yield() noexcept
    {

      __gthread_yield();

    }

    void
    __sleep_for(chrono::seconds, chrono::nanoseconds);


    template<typename _Rep, typename _Period>
      inline void
      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
      {
 if (__rtime <= __rtime.zero())
   return;
 auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.count()),
     static_cast<long>(__ns.count())
   };
 while (::nanosleep(&__ts, &__ts) == -1 && (*__errno_location ()) == 4)
   { }



      }


    template<typename _Clock, typename _Duration>
      inline void
      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)
      {
 auto __now = _Clock::now();
 if (_Clock::is_steady)
   {
     if (__now < __atime)
       sleep_for(__atime - __now);
     return;
   }
 while (__now < __atime)
   {
     sleep_for(__atime - __now);
     __now = _Clock::now();
   }
      }

 
  }



}
# 7 "../../include/Utils/AsyncObjectStream.hpp" 2
# 1 "/usr/include/c++/7/future" 1 3
# 32 "/usr/include/c++/7/future" 3
       
# 33 "/usr/include/c++/7/future" 3





# 1 "/usr/include/c++/7/mutex" 1 3
# 32 "/usr/include/c++/7/mutex" 3
       
# 33 "/usr/include/c++/7/mutex" 3
# 42 "/usr/include/c++/7/mutex" 3
# 1 "/usr/include/c++/7/system_error" 1 3
# 32 "/usr/include/c++/7/system_error" 3
       
# 33 "/usr/include/c++/7/system_error" 3






# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/error_constants.h" 1 3
# 34 "/usr/include/x86_64-linux-gnu/c++/7/bits/error_constants.h" 3
# 1 "/usr/include/c++/7/cerrno" 1 3
# 39 "/usr/include/c++/7/cerrno" 3
       
# 40 "/usr/include/c++/7/cerrno" 3
# 35 "/usr/include/x86_64-linux-gnu/c++/7/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/usr/include/c++/7/system_error" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "/usr/include/c++/7/system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "/usr/include/c++/7/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 414 "/usr/include/c++/7/system_error" 3

}
# 43 "/usr/include/c++/7/mutex" 2 3
# 1 "/usr/include/c++/7/bits/std_mutex.h" 1 3
# 33 "/usr/include/c++/7/bits/std_mutex.h" 3
       
# 34 "/usr/include/c++/7/bits/std_mutex.h" 3
# 46 "/usr/include/c++/7/bits/std_mutex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/7/bits/std_mutex.h" 3
  class __mutex_base
  {
  protected:
    typedef __gthread_mutex_t __native_type;


    __native_type _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };

    constexpr __mutex_base() noexcept = default;
# 81 "/usr/include/c++/7/bits/std_mutex.h" 3
    __mutex_base(const __mutex_base&) = delete;
    __mutex_base& operator=(const __mutex_base&) = delete;
  };


  class mutex : private __mutex_base
  {
  public:
    typedef __native_type* native_handle_type;


    constexpr

    mutex() noexcept = default;
    ~mutex() = default;

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };




  struct defer_lock_t { explicit defer_lock_t() = default; };


  struct try_to_lock_t { explicit try_to_lock_t() = default; };



  struct adopt_lock_t { explicit adopt_lock_t() = default; };


  constexpr defer_lock_t defer_lock { };


  constexpr try_to_lock_t try_to_lock { };


  constexpr adopt_lock_t adopt_lock { };






  template<typename _Mutex>
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { }

      ~lock_guard()
      { _M_device.unlock(); }

      lock_guard(const lock_guard&) = delete;
      lock_guard& operator=(const lock_guard&) = delete;

    private:
      mutex_type& _M_device;
    };
# 184 "/usr/include/c++/7/bits/std_mutex.h" 3
  template<typename _Mutex>
    class unique_lock
    {
    public:
      typedef _Mutex mutex_type;

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      explicit unique_lock(mutex_type& __m)
      : _M_device(std::__addressof(__m)), _M_owns(false)
      {
 lock();
 _M_owns = true;
      }

      unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(false)
      { }

      unique_lock(mutex_type& __m, try_to_lock_t)
      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
      { }

      unique_lock(mutex_type& __m, adopt_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(true)
      {

      }

      template<typename _Clock, typename _Duration>
 unique_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __atime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_until(__atime))
 { }

      template<typename _Rep, typename _Period>
 unique_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rtime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_for(__rtime))
 { }

      ~unique_lock()
      {
 if (_M_owns)
   unlock();
      }

      unique_lock(const unique_lock&) = delete;
      unique_lock& operator=(const unique_lock&) = delete;

      unique_lock(unique_lock&& __u) noexcept
      : _M_device(__u._M_device), _M_owns(__u._M_owns)
      {
 __u._M_device = 0;
 __u._M_owns = false;
      }

      unique_lock& operator=(unique_lock&& __u) noexcept
      {
 if(_M_owns)
   unlock();

 unique_lock(std::move(__u)).swap(*this);

 __u._M_device = 0;
 __u._M_owns = false;

 return *this;
      }

      void
      lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_device->lock();
     _M_owns = true;
   }
      }

      bool
      try_lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_owns = _M_device->try_lock();
     return _M_owns;
   }
      }

      template<typename _Clock, typename _Duration>
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_until(__atime);
       return _M_owns;
     }
 }

      template<typename _Rep, typename _Period>
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_for(__rtime);
       return _M_owns;
     }
  }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_device)
   {
     _M_device->unlock();
     _M_owns = false;
   }
      }

      void
      swap(unique_lock& __u) noexcept
      {
 std::swap(_M_device, __u._M_device);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 mutex_type* __ret = _M_device;
 _M_device = 0;
 _M_owns = false;
 return __ret;
      }

      bool
      owns_lock() const noexcept
      { return _M_owns; }

      explicit operator bool() const noexcept
      { return owns_lock(); }

      mutex_type*
      mutex() const noexcept
      { return _M_device; }

    private:
      mutex_type* _M_device;
      bool _M_owns;
    };


  template<typename _Mutex>
    inline void
    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }



}
# 44 "/usr/include/c++/7/mutex" 2 3
# 54 "/usr/include/c++/7/mutex" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/7/mutex" 3
  class __recursive_mutex_base
  {
  protected:
    typedef __gthread_recursive_mutex_t __native_type;

    __recursive_mutex_base(const __recursive_mutex_base&) = delete;
    __recursive_mutex_base& operator=(const __recursive_mutex_base&) = delete;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };

    __recursive_mutex_base() = default;
# 90 "/usr/include/c++/7/mutex" 3
  };


  class recursive_mutex : private __recursive_mutex_base
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_mutex() = default;
    ~recursive_mutex() = default;

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };


  template<typename _Derived>
    class __timed_mutex_impl
    {
    protected:
      typedef chrono::high_resolution_clock __clock_t;

      template<typename _Rep, typename _Period>
 bool
 _M_try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   using chrono::steady_clock;
   auto __rt = chrono::duration_cast<steady_clock::duration>(__rtime);
   if (ratio_greater<steady_clock::period, _Period>())
     ++__rt;
   return _M_try_lock_until(steady_clock::now() + __rt);
 }

      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<__clock_t,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   return static_cast<_Derived*>(this)->_M_timedlock(__ts);
 }

      template<typename _Clock, typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   auto __rtime = __atime - _Clock::now();
   return _M_try_lock_until(__clock_t::now() + __rtime);
 }
    };


  class timed_mutex
  : private __mutex_base, public __timed_mutex_impl<timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    timed_mutex() = default;
    ~timed_mutex() = default;

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_mutex_timedlock(&_M_mutex, &__ts); }
  };


  class recursive_timed_mutex
  : private __recursive_mutex_base,
    public __timed_mutex_impl<recursive_timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_timed_mutex() = default;
    ~recursive_timed_mutex() = default;

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<recursive_timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts); }
  };
# 467 "/usr/include/c++/7/mutex" 3
  template<typename _Lock>
    inline unique_lock<_Lock>
    __try_to_lock(_Lock& __l)
    { return unique_lock<_Lock>{__l, try_to_lock}; }

  template<int _Idx, bool _Continue = true>
    struct __try_lock_impl
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = std::__try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
       constexpr bool __cont = _Idx + 2 < sizeof...(_Lock);
       using __try_locker = __try_lock_impl<_Idx + 1, __cont>;
       __try_locker::__do_try_lock(__locks, __idx);
              if (__idx == -1)
                __lock.release();
            }
 }
    };

  template<int _Idx>
    struct __try_lock_impl<_Idx, false>
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = std::__try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
              __idx = -1;
              __lock.release();
            }
 }
    };
# 519 "/usr/include/c++/7/mutex" 3
  template<typename _Lock1, typename _Lock2, typename... _Lock3>
    int
    try_lock(_Lock1& __l1, _Lock2& __l2, _Lock3&... __l3)
    {
      int __idx;
      auto __locks = std::tie(__l1, __l2, __l3...);
      __try_lock_impl<0>::__do_try_lock(__locks, __idx);
      return __idx;
    }
# 540 "/usr/include/c++/7/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    void
    lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
      while (true)
        {
          using __try_locker = __try_lock_impl<0, sizeof...(_L3) != 0>;
          unique_lock<_L1> __first(__l1);
          int __idx;
          auto __locks = std::tie(__l2, __l3...);
          __try_locker::__do_try_lock(__locks, __idx);
          if (__idx == -1)
            {
              __first.release();
              return;
            }
        }
    }
# 629 "/usr/include/c++/7/mutex" 3
  struct once_flag
  {
  private:
    typedef __gthread_once_t __native_type;
    __native_type _M_once = 0;

  public:

    constexpr once_flag() noexcept = default;


    once_flag(const once_flag&) = delete;

    once_flag& operator=(const once_flag&) = delete;

    template<typename _Callable, typename... _Args>
      friend void
      call_once(once_flag& __once, _Callable&& __f, _Args&&... __args);
  };


  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();
# 662 "/usr/include/c++/7/mutex" 3
  extern "C" void __once_proxy(void);


  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {


      auto __callable = [&] {
   std::__invoke(std::forward<_Callable>(__f),
   std::forward<_Args>(__args)...);
      };

      __once_callable = std::__addressof(__callable);
      __once_call = []{ (*(decltype(__callable)*)__once_callable)(); };






      int __e = __gthread_once(&__once._M_once, &__once_proxy);
# 697 "/usr/include/c++/7/mutex" 3
      if (__e)
 __throw_system_error(__e);
    }




}
# 39 "/usr/include/c++/7/future" 2 3

# 1 "/usr/include/c++/7/condition_variable" 1 3
# 32 "/usr/include/c++/7/condition_variable" 3
       
# 33 "/usr/include/c++/7/condition_variable" 3
# 49 "/usr/include/c++/7/condition_variable" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/7/condition_variable" 3
  enum class cv_status { no_timeout, timeout };


  class condition_variable
  {
    typedef chrono::system_clock __clock_t;
    typedef __gthread_cond_t __native_type;


    __native_type _M_cond = { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } };




  public:
    typedef __native_type* native_handle_type;

    condition_variable() noexcept;
    ~condition_variable() noexcept;

    condition_variable(const condition_variable&) = delete;
    condition_variable& operator=(const condition_variable&) = delete;

    void
    notify_one() noexcept;

    void
    notify_all() noexcept;

    void
    wait(unique_lock<mutex>& __lock) noexcept;

    template<typename _Predicate>
      void
      wait(unique_lock<mutex>& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }

    template<typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<__clock_t, _Duration>& __atime)
      { return __wait_until_impl(__lock, __atime); }

    template<typename _Clock, typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {

 const typename _Clock::time_point __c_entry = _Clock::now();
 const __clock_t::time_point __s_entry = __clock_t::now();
 const auto __delta = __atime - __c_entry;
 const auto __s_atime = __s_entry + __delta;

 return __wait_until_impl(__lock, __s_atime);
      }

    template<typename _Clock, typename _Duration, typename _Predicate>
      bool
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Rep, typename _Period>
      cv_status
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime)
      { return wait_until(__lock, __clock_t::now() + __rtime); }

    template<typename _Rep, typename _Period, typename _Predicate>
      bool
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime,
        _Predicate __p)
      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }

    native_handle_type
    native_handle()
    { return &_M_cond; }

  private:
    template<typename _Dur>
      cv_status
      __wait_until_impl(unique_lock<mutex>& __lock,
   const chrono::time_point<__clock_t, _Dur>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 __gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),
     &__ts);

 return (__clock_t::now() < __atime
  ? cv_status::no_timeout : cv_status::timeout);
      }
  };

  void
  notify_all_at_thread_exit(condition_variable&, unique_lock<mutex>);

  struct __at_thread_exit_elt
  {
    __at_thread_exit_elt* _M_next;
    void (*_M_cb)(void*);
  };

  inline namespace _V2 {



  class condition_variable_any
  {
    typedef chrono::system_clock __clock_t;
    condition_variable _M_cond;
    shared_ptr<mutex> _M_mutex;


    template<typename _Lock>
      struct _Unlock
      {
 explicit _Unlock(_Lock& __lk) : _M_lock(__lk) { __lk.unlock(); }

 ~_Unlock() noexcept(false)
 {
   if (uncaught_exception())
     {
       try
       { _M_lock.lock(); }
       catch(const __cxxabiv1::__forced_unwind&)
       { throw; }
       catch(...)
       { }
     }
   else
     _M_lock.lock();
 }

 _Unlock(const _Unlock&) = delete;
 _Unlock& operator=(const _Unlock&) = delete;

 _Lock& _M_lock;
      };

  public:
    condition_variable_any() : _M_mutex(std::make_shared<mutex>()) { }
    ~condition_variable_any() = default;

    condition_variable_any(const condition_variable_any&) = delete;
    condition_variable_any& operator=(const condition_variable_any&) = delete;

    void
    notify_one() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_one();
    }

    void
    notify_all() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_all();
    }

    template<typename _Lock>
      void
      wait(_Lock& __lock)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 _M_cond.wait(__my_lock2);
      }


    template<typename _Lock, typename _Predicate>
      void
      wait(_Lock& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }

    template<typename _Lock, typename _Clock, typename _Duration>
      cv_status
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 return _M_cond.wait_until(__my_lock2, __atime);
      }

    template<typename _Lock, typename _Clock,
      typename _Duration, typename _Predicate>
      bool
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Lock, typename _Rep, typename _Period>
      cv_status
      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime)
      { return wait_until(__lock, __clock_t::now() + __rtime); }

    template<typename _Lock, typename _Rep,
      typename _Period, typename _Predicate>
      bool
      wait_for(_Lock& __lock,
        const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p)
      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }
  };

  }



}
# 41 "/usr/include/c++/7/future" 2 3

# 1 "/usr/include/c++/7/atomic" 1 3
# 35 "/usr/include/c++/7/atomic" 3
       
# 36 "/usr/include/c++/7/atomic" 3
# 44 "/usr/include/c++/7/atomic" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/7/atomic" 3
  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }





    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
  };







  template<typename _Tp>
    struct atomic
    {
    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");

    public:
      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }






      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, __m);
 return *__ptr;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, __m);
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),
     __ptr, __m);
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),
     __ptr, __m);
 return *__ptr;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
    };



  template<typename _Tp>
    struct atomic<_Tp*>
    {
      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      { return _M_b++; }

      __pointer_type
      operator++(int) volatile noexcept
      { return _M_b++; }

      __pointer_type
      operator--(int) noexcept
      { return _M_b--; }

      __pointer_type
      operator--(int) volatile noexcept
      { return _M_b--; }

      __pointer_type
      operator++() noexcept
      { return ++_M_b; }

      __pointer_type
      operator++() volatile noexcept
      { return ++_M_b; }

      __pointer_type
      operator--() noexcept
      { return --_M_b; }

      __pointer_type
      operator--() volatile noexcept
      { return --_M_b; }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return _M_b.operator-=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator-=(__d); }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }





      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_sub(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_sub(__d, __m); }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;


  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;






  typedef atomic<int8_t> atomic_int8_t;


  typedef atomic<uint8_t> atomic_uint8_t;


  typedef atomic<int16_t> atomic_int16_t;


  typedef atomic<uint16_t> atomic_uint16_t;


  typedef atomic<int32_t> atomic_int32_t;


  typedef atomic<uint32_t> atomic_uint32_t;


  typedef atomic<int64_t> atomic_int64_t;


  typedef atomic<uint64_t> atomic_uint64_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;



  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }



  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }





  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }



  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(volatile atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(volatile atomic<_ITp*>* __a,
         ptrdiff_t __d, memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }



}
# 43 "/usr/include/c++/7/future" 2 3
# 1 "/usr/include/c++/7/bits/atomic_futex.h" 1 3
# 33 "/usr/include/c++/7/bits/atomic_futex.h" 3
       
# 34 "/usr/include/c++/7/bits/atomic_futex.h" 3
# 47 "/usr/include/c++/7/bits/atomic_futex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  struct __atomic_futex_unsigned_base
  {

    bool
    _M_futex_wait_until(unsigned *__addr, unsigned __val, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns);


    static void _M_futex_notify_all(unsigned* __addr);
  };

  template <unsigned _Waiter_bit = 0x80000000>
  class __atomic_futex_unsigned : __atomic_futex_unsigned_base
  {
    typedef chrono::system_clock __clock_t;


    atomic<unsigned> _M_data;

  public:
    explicit
    __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
    { }

    inline __attribute__((__always_inline__)) unsigned
    _M_load(memory_order __mo)
    {
      return _M_data.load(__mo) & ~_Waiter_bit;
    }

  private:





    unsigned
    _M_load_and_test_until(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns)
    {
      for (;;)
 {





   _M_data.fetch_or(_Waiter_bit, memory_order_relaxed);
   bool __ret = _M_futex_wait_until((unsigned*)(void*)&_M_data,
        __assumed | _Waiter_bit,
        __has_timeout, __s, __ns);

   __assumed = _M_load(__mo);
   if (!__ret || ((__operand == __assumed) == __equal))
     return __assumed;

 }
    }





    unsigned
    _M_load_and_test(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo)
    {
      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
        false, {}, {});
    }






    template<typename _Dur>
    unsigned
    _M_load_and_test_until_impl(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo,
 const chrono::time_point<__clock_t, _Dur>& __atime)
    {
      auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
      auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
   true, __s.time_since_epoch(), __ns);
    }

  public:

    inline __attribute__((__always_inline__)) unsigned
    _M_load_when_not_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) != __val)
 return (__i & ~_Waiter_bit);

      return _M_load_and_test(__i, __val, false, __mo);
    }

    inline __attribute__((__always_inline__)) void
    _M_load_when_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return;

      _M_load_and_test(__i, __val, true, __mo);
    }


    template<typename _Rep, typename _Period>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_for(unsigned __val, memory_order __mo,
   const chrono::duration<_Rep, _Period>& __rtime)
      {
 return _M_load_when_equal_until(__val, __mo,
     __clock_t::now() + __rtime);
      }


    template<typename _Clock, typename _Duration>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_until(unsigned __val, memory_order __mo,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {

 const typename _Clock::time_point __c_entry = _Clock::now();
 const __clock_t::time_point __s_entry = __clock_t::now();
 const auto __delta = __atime - __c_entry;
 const auto __s_atime = __s_entry + __delta;
 return _M_load_when_equal_until(__val, __mo, __s_atime);
      }


    template<typename _Duration>
    inline __attribute__((__always_inline__)) bool
    _M_load_when_equal_until(unsigned __val, memory_order __mo,
 const chrono::time_point<__clock_t, _Duration>& __atime)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return true;

      __i = _M_load_and_test_until_impl(__i, __val, true, __mo, __atime);
      return (__i & ~_Waiter_bit) == __val;
    }

    inline __attribute__((__always_inline__)) void
    _M_store_notify_all(unsigned __val, memory_order __mo)
    {
      unsigned* __futex = (unsigned *)(void *)&_M_data;
      if (_M_data.exchange(__val, __mo) & _Waiter_bit)
 _M_futex_notify_all(__futex);
    }
  };
# 287 "/usr/include/c++/7/bits/atomic_futex.h" 3

}
# 44 "/usr/include/c++/7/future" 2 3




# 1 "/usr/include/c++/7/bits/std_function.h" 1 3
# 33 "/usr/include/c++/7/bits/std_function.h" 3
       
# 34 "/usr/include/c++/7/bits/std_function.h" 3
# 47 "/usr/include/c++/7/bits/std_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };







  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };







  template<typename _Tp>
    struct __is_location_invariant
    : is_trivially_copyable<_Tp>::type
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* __fp)
   { return __fp != nullptr; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* __mp)
   { return __mp != nullptr; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { ::new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::__invoke(_Base::_M_get_pointer(__functor)->__value,
        std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 std::__invoke(_Base::_M_get_pointer(__functor)->__value,
        std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _From, typename _To>
    using __check_func_return_type
      = __or_<is_void<_To>, is_same<_From, _To>, is_convertible<_From, _To>>;







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      template<typename _Func,
        typename _Res2 = typename result_of<_Func&(_ArgTypes...)>::type>
 struct _Callable : __check_func_return_type<_Res2, _Res> { };



      template<typename _Tp>
 struct _Callable<function, _Tp> : false_type { };

      template<typename _Cond, typename _Tp>
 using _Requires = typename enable_if<_Cond::value, _Tp>::type;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 432 "/usr/include/c++/7/bits/std_function.h" 3
      function(const function& __x);
# 441 "/usr/include/c++/7/bits/std_function.h" 3
      function(function&& __x) noexcept : _Function_base()
      {
 __x.swap(*this);
      }
# 462 "/usr/include/c++/7/bits/std_function.h" 3
      template<typename _Functor,
        typename = _Requires<__not_<is_same<_Functor, function>>, void>,
        typename = _Requires<_Callable<_Functor>, void>>
 function(_Functor);
# 479 "/usr/include/c++/7/bits/std_function.h" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 497 "/usr/include/c++/7/bits/std_function.h" 3
      function&
      operator=(function&& __x) noexcept
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 511 "/usr/include/c++/7/bits/std_function.h" 3
      function&
      operator=(nullptr_t) noexcept
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = nullptr;
     _M_invoker = nullptr;
   }
 return *this;
      }
# 539 "/usr/include/c++/7/bits/std_function.h" 3
      template<typename _Functor>
 _Requires<_Callable<typename decay<_Functor>::type>, function&>
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 565 "/usr/include/c++/7/bits/std_function.h" 3
      void swap(function& __x) noexcept
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 582 "/usr/include/c++/7/bits/std_function.h" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 595 "/usr/include/c++/7/bits/std_function.h" 3
      _Res operator()(_ArgTypes... __args) const;
# 608 "/usr/include/c++/7/bits/std_function.h" 3
      const type_info& target_type() const noexcept;
# 621 "/usr/include/c++/7/bits/std_function.h" 3
      template<typename _Functor> _Functor* target() noexcept;

      template<typename _Functor> const _Functor* target() const noexcept;



    private:
      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
      _Invoker_type _M_invoker;
  };
# 670 "/usr/include/c++/7/bits/std_function.h" 3
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
      {
 typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const noexcept
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target() noexcept
      {
 const function* __const_this = this;
 const _Functor* __func = __const_this->template target<_Functor>();
 return const_cast<_Functor*>(__func);
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return nullptr;
      }
# 762 "/usr/include/c++/7/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }
# 780 "/usr/include/c++/7/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 801 "/usr/include/c++/7/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y) noexcept
    { __x.swap(__y); }


}
# 49 "/usr/include/c++/7/future" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/7/future" 3
  enum class future_errc
  {
    future_already_retrieved = 1,
    promise_already_satisfied,
    no_state,
    broken_promise
  };


  template<>
    struct is_error_code_enum<future_errc> : public true_type { };


  const error_category&
  future_category() noexcept;


  inline error_code
  make_error_code(future_errc __errc) noexcept
  { return error_code(static_cast<int>(__errc), future_category()); }


  inline error_condition
  make_error_condition(future_errc __errc) noexcept
  { return error_condition(static_cast<int>(__errc), future_category()); }





  class future_error : public logic_error
  {
  public:
    explicit
    future_error(future_errc __errc)
    : future_error(std::make_error_code(__errc))
    { }

    virtual ~future_error() noexcept;

    virtual const char*
    what() const noexcept;

    const error_code&
    code() const noexcept { return _M_code; }

  private:
    explicit
    future_error(error_code __ec)
    : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
    { }

    friend void __throw_future_error(int);

    error_code _M_code;
  };


  template<typename _Res>
    class future;

  template<typename _Res>
    class shared_future;

  template<typename _Signature>
    class packaged_task;

  template<typename _Res>
    class promise;


  enum class launch
  {
    async = 1,
    deferred = 2
  };

  constexpr launch operator&(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) & static_cast<int>(__y));
  }

  constexpr launch operator|(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) | static_cast<int>(__y));
  }

  constexpr launch operator^(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) ^ static_cast<int>(__y));
  }

  constexpr launch operator~(launch __x)
  { return static_cast<launch>(~static_cast<int>(__x)); }

  inline launch& operator&=(launch& __x, launch __y)
  { return __x = __x & __y; }

  inline launch& operator|=(launch& __x, launch __y)
  { return __x = __x | __y; }

  inline launch& operator^=(launch& __x, launch __y)
  { return __x = __x ^ __y; }


  enum class future_status
  {
    ready,
    timeout,
    deferred
  };



  template<typename _Fn, typename... _Args>
    using __async_result_of = typename result_of<
      typename decay<_Fn>::type(typename decay<_Args>::type...)>::type;

  template<typename _Fn, typename... _Args>
    future<__async_result_of<_Fn, _Args...>>
    async(launch __policy, _Fn&& __fn, _Args&&... __args);

  template<typename _Fn, typename... _Args>
    future<__async_result_of<_Fn, _Args...>>
    async(_Fn&& __fn, _Args&&... __args);




  struct __future_base
  {

    struct _Result_base
    {
      exception_ptr _M_error;

      _Result_base(const _Result_base&) = delete;
      _Result_base& operator=(const _Result_base&) = delete;


      virtual void _M_destroy() = 0;

      struct _Deleter
      {
 void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
      };

    protected:
      _Result_base();
      virtual ~_Result_base();
    };


    template<typename _Res>
      using _Ptr = unique_ptr<_Res, _Result_base::_Deleter>;


    template<typename _Res>
      struct _Result : _Result_base
      {
      private:
 __gnu_cxx::__aligned_buffer<_Res> _M_storage;
 bool _M_initialized;

      public:
 typedef _Res result_type;

 _Result() noexcept : _M_initialized() { }

 ~_Result()
 {
   if (_M_initialized)
     _M_value().~_Res();
 }


 _Res&
 _M_value() noexcept { return *_M_storage._M_ptr(); }

 void
 _M_set(const _Res& __res)
 {
   ::new (_M_storage._M_addr()) _Res(__res);
   _M_initialized = true;
 }

 void
 _M_set(_Res&& __res)
 {
   ::new (_M_storage._M_addr()) _Res(std::move(__res));
   _M_initialized = true;
 }

      private:
 void _M_destroy() { delete this; }
    };


    template<typename _Res, typename _Alloc>
      struct _Result_alloc final : _Result<_Res>, _Alloc
      {
 using __allocator_type = __alloc_rebind<_Alloc, _Result_alloc>;

        explicit
 _Result_alloc(const _Alloc& __a) : _Result<_Res>(), _Alloc(__a)
 { }

      private:
 void _M_destroy()
 {
   __allocator_type __a(*this);
   __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
   this->~_Result_alloc();
 }
      };


    template<typename _Res, typename _Allocator>
      static _Ptr<_Result_alloc<_Res, _Allocator>>
      _S_allocate_result(const _Allocator& __a)
      {
 using __result_type = _Result_alloc<_Res, _Allocator>;
 typename __result_type::__allocator_type __a2(__a);
 auto __guard = std::__allocate_guarded(__a2);
 __result_type* __p = ::new((void*)__guard.get()) __result_type{__a};
 __guard = nullptr;
 return _Ptr<__result_type>(__p);
      }


    template<typename _Res, typename _Tp>
      static _Ptr<_Result<_Res>>
      _S_allocate_result(const std::allocator<_Tp>& __a)
      {
 return _Ptr<_Result<_Res>>(new _Result<_Res>);
      }




    class _State_baseV2
    {
      typedef _Ptr<_Result_base> _Ptr_type;

      enum _Status : unsigned {
 __not_ready,
 __ready
      };

      _Ptr_type _M_result;
      __atomic_futex_unsigned<> _M_status;
      atomic_flag _M_retrieved = { 0 };
      once_flag _M_once;

    public:
      _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
 { }
      _State_baseV2(const _State_baseV2&) = delete;
      _State_baseV2& operator=(const _State_baseV2&) = delete;
      virtual ~_State_baseV2() = default;

      _Result_base&
      wait()
      {

 _M_complete_async();


 _M_status._M_load_when_equal(_Status::__ready, memory_order_acquire);
 return *_M_result;
      }

      template<typename _Rep, typename _Period>
        future_status
        wait_for(const chrono::duration<_Rep, _Period>& __rel)
        {


   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;
   if (_M_is_deferred_future())
     return future_status::deferred;
   if (_M_status._M_load_when_equal_for(_Status::__ready,
       memory_order_acquire, __rel))
     {
# 363 "/usr/include/c++/7/future" 3
       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }

      template<typename _Clock, typename _Duration>
        future_status
        wait_until(const chrono::time_point<_Clock, _Duration>& __abs)
        {


   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;
   if (_M_is_deferred_future())
     return future_status::deferred;
   if (_M_status._M_load_when_equal_until(_Status::__ready,
       memory_order_acquire, __abs))
     {



       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }



      void
      _M_set_result(function<_Ptr_type()> __res, bool __ignore_failure = false)
      {
 bool __did_set = false;


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (__did_set)

   _M_status._M_store_notify_all(_Status::__ready,
     memory_order_release);
 else if (!__ignore_failure)
          __throw_future_error(int(future_errc::promise_already_satisfied));
      }




      void
      _M_set_delayed_result(function<_Ptr_type()> __res,
       weak_ptr<_State_baseV2> __self)
      {
 bool __did_set = false;
 unique_ptr<_Make_ready> __mr{new _Make_ready};


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (!__did_set)
          __throw_future_error(int(future_errc::promise_already_satisfied));
 __mr->_M_shared_state = std::move(__self);
 __mr->_M_set();
 __mr.release();
      }


      void
      _M_break_promise(_Ptr_type __res)
      {
 if (static_cast<bool>(__res))
   {
     __res->_M_error =
       make_exception_ptr(future_error(future_errc::broken_promise));




     _M_result.swap(__res);

     _M_status._M_store_notify_all(_Status::__ready,
       memory_order_release);
   }
      }


      void
      _M_set_retrieved_flag()
      {
 if (_M_retrieved.test_and_set())
   __throw_future_error(int(future_errc::future_already_retrieved));
      }

      template<typename _Res, typename _Arg>
        struct _Setter;


      template<typename _Res, typename _Arg>
        struct _Setter<_Res, _Arg&>
        {


          static_assert(is_same<_Res, _Arg&>::value
              || is_same<const _Res, _Arg>::value,
              "Invalid specialisation");


          typename promise<_Res>::_Ptr_type operator()() const
          {
            _M_promise->_M_storage->_M_set(*_M_arg);
            return std::move(_M_promise->_M_storage);
          }
          promise<_Res>* _M_promise;
          _Arg* _M_arg;
        };


      template<typename _Res>
        struct _Setter<_Res, _Res&&>
        {

          typename promise<_Res>::_Ptr_type operator()() const
          {
            _M_promise->_M_storage->_M_set(std::move(*_M_arg));
            return std::move(_M_promise->_M_storage);
          }
          promise<_Res>* _M_promise;
          _Res* _M_arg;
        };


      template<typename _Res>
 struct _Setter<_Res, void>
 {
   static_assert(is_void<_Res>::value, "Only used for promise<void>");

   typename promise<_Res>::_Ptr_type operator()() const
   { return std::move(_M_promise->_M_storage); }

   promise<_Res>* _M_promise;
 };

      struct __exception_ptr_tag { };


      template<typename _Res>
        struct _Setter<_Res, __exception_ptr_tag>
        {

          typename promise<_Res>::_Ptr_type operator()() const
          {
            _M_promise->_M_storage->_M_error = *_M_ex;
            return std::move(_M_promise->_M_storage);
          }

          promise<_Res>* _M_promise;
          exception_ptr* _M_ex;
        };

      template<typename _Res, typename _Arg>
        static _Setter<_Res, _Arg&&>
        __setter(promise<_Res>* __prom, _Arg&& __arg)
        {
   _S_check(__prom->_M_future);
          return _Setter<_Res, _Arg&&>{ __prom, std::__addressof(__arg) };
        }

      template<typename _Res>
        static _Setter<_Res, __exception_ptr_tag>
        __setter(exception_ptr& __ex, promise<_Res>* __prom)
        {
   _S_check(__prom->_M_future);
          return _Setter<_Res, __exception_ptr_tag>{ __prom, &__ex };
        }

      template<typename _Res>
 static _Setter<_Res, void>
 __setter(promise<_Res>* __prom)
 {
   _S_check(__prom->_M_future);
   return _Setter<_Res, void>{ __prom };
 }

      template<typename _Tp>
        static void
        _S_check(const shared_ptr<_Tp>& __p)
        {
          if (!static_cast<bool>(__p))
            __throw_future_error((int)future_errc::no_state);
        }

    private:

      void
      _M_do_set(function<_Ptr_type()>* __f, bool* __did_set)
      {
        _Ptr_type __res = (*__f)();



 *__did_set = true;
        _M_result.swap(__res);
      }


      virtual void _M_complete_async() { }


      virtual bool _M_is_deferred_future() const { return false; }

      struct _Make_ready final : __at_thread_exit_elt
      {
 weak_ptr<_State_baseV2> _M_shared_state;
 static void _S_run(void*);
 void _M_set();
      };
    };





    using _State_base = _State_baseV2;
    class _Async_state_commonV2;


    template<typename _BoundFn,
      typename _Res = decltype(std::declval<_BoundFn&>()())>
      class _Deferred_state;

    template<typename _BoundFn,
      typename _Res = decltype(std::declval<_BoundFn&>()())>
      class _Async_state_impl;

    template<typename _Signature>
      class _Task_state_base;

    template<typename _Fn, typename _Alloc, typename _Signature>
      class _Task_state;

    template<typename _BoundFn>
      static std::shared_ptr<_State_base>
      _S_make_deferred_state(_BoundFn&& __fn);

    template<typename _BoundFn>
      static std::shared_ptr<_State_base>
      _S_make_async_state(_BoundFn&& __fn);

    template<typename _Res_ptr, typename _Fn,
      typename _Res = typename _Res_ptr::element_type::result_type>
      struct _Task_setter;

    template<typename _Res_ptr, typename _BoundFn>
      static _Task_setter<_Res_ptr, _BoundFn>
      _S_task_setter(_Res_ptr& __ptr, _BoundFn& __call)
      {
 return { std::__addressof(__ptr), std::__addressof(__call) };
      }
  };


  template<typename _Res>
    struct __future_base::_Result<_Res&> : __future_base::_Result_base
    {
      typedef _Res& result_type;

      _Result() noexcept : _M_value_ptr() { }

      void
      _M_set(_Res& __res) noexcept
      { _M_value_ptr = std::addressof(__res); }

      _Res& _M_get() noexcept { return *_M_value_ptr; }

    private:
      _Res* _M_value_ptr;

      void _M_destroy() { delete this; }
    };


  template<>
    struct __future_base::_Result<void> : __future_base::_Result_base
    {
      typedef void result_type;

    private:
      void _M_destroy() { delete this; }
    };




  template<typename _Res, typename _Arg>
    struct __is_location_invariant
    <__future_base::_State_base::_Setter<_Res, _Arg>>
    : true_type { };


  template<typename _Res_ptr, typename _Fn, typename _Res>
    struct __is_location_invariant
    <__future_base::_Task_setter<_Res_ptr, _Fn, _Res>>
    : true_type { };


  template<typename _Res>
    class __basic_future : public __future_base
    {
    protected:
      typedef shared_ptr<_State_base> __state_type;
      typedef __future_base::_Result<_Res>& __result_type;

    private:
      __state_type _M_state;

    public:

      __basic_future(const __basic_future&) = delete;
      __basic_future& operator=(const __basic_future&) = delete;

      bool
      valid() const noexcept { return static_cast<bool>(_M_state); }

      void
      wait() const
      {
        _State_base::_S_check(_M_state);
        _M_state->wait();
      }

      template<typename _Rep, typename _Period>
        future_status
        wait_for(const chrono::duration<_Rep, _Period>& __rel) const
        {
          _State_base::_S_check(_M_state);
          return _M_state->wait_for(__rel);
        }

      template<typename _Clock, typename _Duration>
        future_status
        wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const
        {
          _State_base::_S_check(_M_state);
          return _M_state->wait_until(__abs);
        }

    protected:

      __result_type
      _M_get_result() const
      {
        _State_base::_S_check(_M_state);
        _Result_base& __res = _M_state->wait();
        if (!(__res._M_error == 0))
          rethrow_exception(__res._M_error);
        return static_cast<__result_type>(__res);
      }

      void _M_swap(__basic_future& __that) noexcept
      {
        _M_state.swap(__that._M_state);
      }


      explicit
      __basic_future(const __state_type& __state) : _M_state(__state)
      {
        _State_base::_S_check(_M_state);
        _M_state->_M_set_retrieved_flag();
      }


      explicit
      __basic_future(const shared_future<_Res>&) noexcept;


      explicit
      __basic_future(shared_future<_Res>&&) noexcept;


      explicit
      __basic_future(future<_Res>&&) noexcept;

      constexpr __basic_future() noexcept : _M_state() { }

      struct _Reset
      {
        explicit _Reset(__basic_future& __fut) noexcept : _M_fut(__fut) { }
        ~_Reset() { _M_fut._M_state.reset(); }
        __basic_future& _M_fut;
      };
    };



  template<typename _Res>
    class future : public __basic_future<_Res>
    {
      friend class promise<_Res>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<__async_result_of<_Fn, _Args...>>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      _Res
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        return std::move(this->_M_get_result()._M_value());
      }

      shared_future<_Res> share() noexcept;
    };


  template<typename _Res>
    class future<_Res&> : public __basic_future<_Res&>
    {
      friend class promise<_Res&>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<__async_result_of<_Fn, _Args...>>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res&> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      _Res&
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        return this->_M_get_result()._M_get();
      }

      shared_future<_Res&> share() noexcept;
    };


  template<>
    class future<void> : public __basic_future<void>
    {
      friend class promise<void>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<__async_result_of<_Fn, _Args...>>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<void> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      void
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        this->_M_get_result();
      }

      shared_future<void> share() noexcept;
    };



  template<typename _Res>
    class shared_future : public __basic_future<_Res>
    {
      typedef __basic_future<_Res> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) noexcept : _Base_type(__sf) { }


      shared_future(future<_Res>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf) noexcept
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      const _Res&
      get() const { return this->_M_get_result()._M_value(); }
    };


  template<typename _Res>
    class shared_future<_Res&> : public __basic_future<_Res&>
    {
      typedef __basic_future<_Res&> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<_Res&>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      _Res&
      get() const { return this->_M_get_result()._M_get(); }
    };


  template<>
    class shared_future<void> : public __basic_future<void>
    {
      typedef __basic_future<void> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<void>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      void
      get() const { this->_M_get_result(); }
    };


  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(const shared_future<_Res>& __sf) noexcept
    : _M_state(__sf._M_state)
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(shared_future<_Res>&& __sf) noexcept
    : _M_state(std::move(__sf._M_state))
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(future<_Res>&& __uf) noexcept
    : _M_state(std::move(__uf._M_state))
    { }



  template<typename _Res>
    inline shared_future<_Res>
    future<_Res>::share() noexcept
    { return shared_future<_Res>(std::move(*this)); }

  template<typename _Res>
    inline shared_future<_Res&>
    future<_Res&>::share() noexcept
    { return shared_future<_Res&>(std::move(*this)); }

  inline shared_future<void>
  future<void>::share() noexcept
  { return shared_future<void>(std::move(*this)); }


  template<typename _Res>
    class promise
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res>(__a))
        { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<_Res>
      get_future()
      { return future<_Res>(_M_future); }


      void
      set_value(const _Res& __r)
      { _M_future->_M_set_result(_State::__setter(this, __r)); }

      void
      set_value(_Res&& __r)
      { _M_future->_M_set_result(_State::__setter(this, std::move(__r))); }

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(const _Res& __r)
      {
 _M_future->_M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_value_at_thread_exit(_Res&& __r)
      {
 _M_future->_M_set_delayed_result(
     _State::__setter(this, std::move(__r)), _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };

  template<typename _Res>
    inline void
    swap(promise<_Res>& __x, promise<_Res>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Res, typename _Alloc>
    struct uses_allocator<promise<_Res>, _Alloc>
    : public true_type { };



  template<typename _Res>
    class promise<_Res&>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res&> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res&>(__a))
        { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<_Res&>
      get_future()
      { return future<_Res&>(_M_future); }


      void
      set_value(_Res& __r)
      { _M_future->_M_set_result(_State::__setter(this, __r)); }

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(_Res& __r)
      {
 _M_future->_M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };


  template<>
    class promise<void>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<void> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<void>(__a))
        { }



      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<void>
      get_future()
      { return future<void>(_M_future); }


      void
      set_value()
      { _M_future->_M_set_result(_State::__setter(this)); }

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit()
      { _M_future->_M_set_delayed_result(_State::__setter(this), _M_future); }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };

  template<typename _Ptr_type, typename _Fn, typename _Res>
    struct __future_base::_Task_setter
    {

      _Ptr_type operator()() const
      {
 try
   {
     (*_M_result)->_M_set((*_M_fn)());
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };

  template<typename _Ptr_type, typename _Fn>
    struct __future_base::_Task_setter<_Ptr_type, _Fn, void>
    {
      _Ptr_type operator()() const
      {
 try
   {
     (*_M_fn)();
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };


  template<typename _Res, typename... _Args>
    struct __future_base::_Task_state_base<_Res(_Args...)>
    : __future_base::_State_base
    {
      typedef _Res _Res_type;

      template<typename _Alloc>
 _Task_state_base(const _Alloc& __a)
 : _M_result(_S_allocate_result<_Res>(__a))
 { }


      virtual void
      _M_run(_Args&&... __args) = 0;


      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base>) = 0;

      virtual shared_ptr<_Task_state_base>
      _M_reset() = 0;

      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
    };


  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    struct __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)> final
    : __future_base::_Task_state_base<_Res(_Args...)>
    {
      template<typename _Fn2>
 _Task_state(_Fn2&& __fn, const _Alloc& __a)
 : _Task_state_base<_Res(_Args...)>(__a),
   _M_impl(std::forward<_Fn2>(__fn), __a)
 { }

    private:
      virtual void
      _M_run(_Args&&... __args)
      {
 auto __boundfn = [&] () -> typename result_of<_Fn&(_Args&&...)>::type {
     return std::__invoke(_M_impl._M_fn, std::forward<_Args>(__args)...);
 };
 this->_M_set_result(_S_task_setter(this->_M_result, __boundfn));
      }

      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base> __self)
      {
 auto __boundfn = [&] () -> typename result_of<_Fn&(_Args&&...)>::type {
     return std::__invoke(_M_impl._M_fn, std::forward<_Args>(__args)...);
 };
 this->_M_set_delayed_result(_S_task_setter(this->_M_result, __boundfn),
        std::move(__self));
      }

      virtual shared_ptr<_Task_state_base<_Res(_Args...)>>
      _M_reset();

      struct _Impl : _Alloc
      {
 template<typename _Fn2>
   _Impl(_Fn2&& __fn, const _Alloc& __a)
   : _Alloc(__a), _M_fn(std::forward<_Fn2>(__fn)) { }
 _Fn _M_fn;
      } _M_impl;
    };

  template<typename _Signature, typename _Fn, typename _Alloc>
    static shared_ptr<__future_base::_Task_state_base<_Signature>>
    __create_task_state(_Fn&& __fn, const _Alloc& __a)
    {
      typedef typename decay<_Fn>::type _Fn2;
      typedef __future_base::_Task_state<_Fn2, _Alloc, _Signature> _State;
      return std::allocate_shared<_State>(__a, std::forward<_Fn>(__fn), __a);
    }

  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    shared_ptr<__future_base::_Task_state_base<_Res(_Args...)>>
    __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)>::_M_reset()
    {
      return __create_task_state<_Res(_Args...)>(std::move(_M_impl._M_fn),
       static_cast<_Alloc&>(_M_impl));
    }

  template<typename _Task, typename _Fn, bool
    = is_same<_Task, typename decay<_Fn>::type>::value>
    struct __constrain_pkgdtask
    { typedef void __type; };

  template<typename _Task, typename _Fn>
    struct __constrain_pkgdtask<_Task, _Fn, true>
    { };


  template<typename _Res, typename... _ArgTypes>
    class packaged_task<_Res(_ArgTypes...)>
    {
      typedef __future_base::_Task_state_base<_Res(_ArgTypes...)> _State_type;
      shared_ptr<_State_type> _M_state;

    public:

      packaged_task() noexcept { }



      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator& __a) noexcept
 { }

      template<typename _Fn, typename = typename
        __constrain_pkgdtask<packaged_task, _Fn>::__type>
 explicit
 packaged_task(_Fn&& __fn)
 : packaged_task(allocator_arg, std::allocator<int>(),
   std::forward<_Fn>(__fn))
 { }




      template<typename _Fn, typename _Alloc, typename = typename
        __constrain_pkgdtask<packaged_task, _Fn>::__type>
 packaged_task(allocator_arg_t, const _Alloc& __a, _Fn&& __fn)
 : _M_state(__create_task_state<_Res(_ArgTypes...)>(
      std::forward<_Fn>(__fn), __a))
 { }

      ~packaged_task()
      {
        if (static_cast<bool>(_M_state) && !_M_state.unique())
   _M_state->_M_break_promise(std::move(_M_state->_M_result));
      }


      packaged_task(const packaged_task&) = delete;
      packaged_task& operator=(const packaged_task&) = delete;

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        const packaged_task&) = delete;


      packaged_task(packaged_task&& __other) noexcept
      { this->swap(__other); }

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        packaged_task&& __other) noexcept
 { this->swap(__other); }

      packaged_task& operator=(packaged_task&& __other) noexcept
      {
 packaged_task(std::move(__other)).swap(*this);
 return *this;
      }

      void
      swap(packaged_task& __other) noexcept
      { _M_state.swap(__other._M_state); }

      bool
      valid() const noexcept
      { return static_cast<bool>(_M_state); }


      future<_Res>
      get_future()
      { return future<_Res>(_M_state); }


      void
      operator()(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run(std::forward<_ArgTypes>(__args)...);
      }

      void
      make_ready_at_thread_exit(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run_delayed(std::forward<_ArgTypes>(__args)..., _M_state);
      }

      void
      reset()
      {
 __future_base::_State_base::_S_check(_M_state);
 packaged_task __tmp;
 __tmp._M_state = _M_state;
 _M_state = _M_state->_M_reset();
      }
    };


  template<typename _Res, typename... _ArgTypes>
    inline void
    swap(packaged_task<_Res(_ArgTypes...)>& __x,
  packaged_task<_Res(_ArgTypes...)>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Res, typename _Alloc>
    struct uses_allocator<packaged_task<_Res>, _Alloc>
    : public true_type { };




  template<typename _BoundFn, typename _Res>
    class __future_base::_Deferred_state final
    : public __future_base::_State_base
    {
    public:
      explicit
      _Deferred_state(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      { }

    private:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;


      virtual void
      _M_complete_async()
      {






        _M_set_result(_S_task_setter(_M_result, _M_fn), true);
      }



      virtual bool _M_is_deferred_future() const { return true; }
    };


  class __future_base::_Async_state_commonV2
    : public __future_base::_State_base
  {
  protected:
    ~_Async_state_commonV2() = default;
# 1645 "/usr/include/c++/7/future" 3
    virtual void _M_complete_async() { _M_join(); }

    void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }

    thread _M_thread;
    once_flag _M_once;
  };



  template<typename _BoundFn, typename _Res>
    class __future_base::_Async_state_impl final
    : public __future_base::_Async_state_commonV2
    {
    public:
      explicit
      _Async_state_impl(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      {
 _M_thread = std::thread{ [this] {
     try
       {
  _M_set_result(_S_task_setter(_M_result, _M_fn));
       }
     catch(const __cxxabiv1::__forced_unwind&)
       {

  if (static_cast<bool>(_M_result))
    this->_M_break_promise(std::move(_M_result));
  throw;
       }
        } };
      }




      ~_Async_state_impl() { if (_M_thread.joinable()) _M_thread.join(); }

    private:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;
    };

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_deferred_state(_BoundFn&& __fn)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Deferred_state<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    }

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_async_state(_BoundFn&& __fn)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Async_state_impl<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    }



  template<typename _Fn, typename... _Args>
    future<__async_result_of<_Fn, _Args...>>
    async(launch __policy, _Fn&& __fn, _Args&&... __args)
    {
      std::shared_ptr<__future_base::_State_base> __state;
      if ((__policy & launch::async) == launch::async)
 {
   try
     {
       __state = __future_base::_S_make_async_state(
    std::thread::__make_invoker(std::forward<_Fn>(__fn),
           std::forward<_Args>(__args)...)
    );
     }

   catch(const system_error& __e)
     {
       if (__e.code() != errc::resource_unavailable_try_again
    || (__policy & launch::deferred) != launch::deferred)
  throw;
     }

 }
      if (!__state)
 {
   __state = __future_base::_S_make_deferred_state(
       std::thread::__make_invoker(std::forward<_Fn>(__fn),
       std::forward<_Args>(__args)...));
 }
      return future<__async_result_of<_Fn, _Args...>>(__state);
    }


  template<typename _Fn, typename... _Args>
    inline future<__async_result_of<_Fn, _Args...>>
    async(_Fn&& __fn, _Args&&... __args)
    {
      return std::async(launch::async|launch::deferred,
   std::forward<_Fn>(__fn),
   std::forward<_Args>(__args)...);
    }






}
# 8 "../../include/Utils/AsyncObjectStream.hpp" 2

# 1 "/usr/include/c++/7/queue" 1 3
# 58 "/usr/include/c++/7/queue" 3
       
# 59 "/usr/include/c++/7/queue" 3

# 1 "/usr/include/c++/7/deque" 1 3
# 58 "/usr/include/c++/7/deque" 3
       
# 59 "/usr/include/c++/7/deque" 3





# 1 "/usr/include/c++/7/bits/stl_deque.h" 1 3
# 68 "/usr/include/c++/7/bits/stl_deque.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 90 "/usr/include/c++/7/bits/stl_deque.h" 3
  constexpr inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < 512
     ? size_t(512 / __size) : size_t(1)); }
# 107 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator
    {






    private:
      template<typename _Up>
 using __ptr_to = typename pointer_traits<_Ptr>::template rebind<_Up>;
      template<typename _CvTp>
 using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_to<_CvTp>>;
    public:
      typedef __iter<_Tp> iterator;
      typedef __iter<const _Tp> const_iterator;
      typedef __ptr_to<_Tp> _Elt_pointer;
      typedef __ptr_to<_Elt_pointer> _Map_pointer;


      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }

      typedef std::random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Ptr pointer;
      typedef _Ref reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Deque_iterator _Self;

      _Elt_pointer _M_cur;
      _Elt_pointer _M_first;
      _Elt_pointer _M_last;
      _Map_pointer _M_node;

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) noexcept
      : _M_cur(__x), _M_first(*__y),
 _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() noexcept
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) noexcept
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 _M_last(__x._M_last), _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const noexcept
      { return *_M_cur; }

      pointer
      operator->() const noexcept
      { return _M_cur; }

      _Self&
      operator++() noexcept
      {
 ++_M_cur;
 if (_M_cur == _M_last)
   {
     _M_set_node(_M_node + 1);
     _M_cur = _M_first;
   }
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 ++*this;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 if (_M_cur == _M_first)
   {
     _M_set_node(_M_node - 1);
     _M_cur = _M_last;
   }
 --_M_cur;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 --*this;
 return __tmp;
      }

      _Self&
      operator+=(difference_type __n) noexcept
      {
 const difference_type __offset = __n + (_M_cur - _M_first);
 if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
   _M_cur += __n;
 else
   {
     const difference_type __node_offset =
       __offset > 0 ? __offset / difference_type(_S_buffer_size())
      : -difference_type((-__offset - 1)
           / _S_buffer_size()) - 1;
     _M_set_node(_M_node + __node_offset);
     _M_cur = _M_first + (__offset - __node_offset
     * difference_type(_S_buffer_size()));
   }
 return *this;
      }

      _Self
      operator+(difference_type __n) const noexcept
      {
 _Self __tmp = *this;
 return __tmp += __n;
      }

      _Self&
      operator-=(difference_type __n) noexcept
      { return *this += -__n; }

      _Self
      operator-(difference_type __n) const noexcept
      {
 _Self __tmp = *this;
 return __tmp -= __n;
      }

      reference
      operator[](difference_type __n) const noexcept
      { return *(*this + __n); }






      void
      _M_set_node(_Map_pointer __new_node) noexcept
      {
 _M_node = __new_node;
 _M_first = *__new_node;
 _M_last = _M_first + difference_type(_S_buffer_size());
      }
    };




  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__x == __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__x == __y); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
       : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
       : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return __y < __x; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return __y < __x; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__y < __x); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__y < __x); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    { return !(__x < __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    { return !(__x < __y); }





  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) noexcept
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 (_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) noexcept
    {
      return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 (_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline _Deque_iterator<_Tp, _Ref, _Ptr>
    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
    noexcept
    { return __x + __n; }

  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
         _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
         __result); }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy_backward(_Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__first),
    _Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__last),
    __result); }


  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
         _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
         __result); }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::move_backward(_Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__first),
    _Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__last),
    __result); }
# 459 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    class _Deque_base
    {
    protected:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;





      typedef typename _Alloc_traits::pointer _Ptr;
      typedef typename _Alloc_traits::const_pointer _Ptr_const;


      typedef typename _Alloc_traits::template rebind<_Ptr>::other
 _Map_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;

    public:
      typedef _Alloc allocator_type;
      typedef typename _Alloc_traits::size_type size_type;

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const> const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
      : _M_impl(__a)
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a)
      : _M_impl(__a)
      { }


      _Deque_base(_Deque_base&& __x, false_type)
      : _M_impl(__x._M_move_impl())
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
 _M_initialize_map(0);
 if (__x._M_impl._M_map)
   this->_M_impl._M_swap_data(__x._M_impl);
      }

      _Deque_base(_Deque_base&& __x)
      : _Deque_base(std::move(__x), typename _Alloc_traits::is_always_equal{})
      { }

      _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_type __n)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   {
     if (__x._M_impl._M_map)
       {
  _M_initialize_map(0);
  this->_M_impl._M_swap_data(__x._M_impl);
       }
   }
 else
   {
     _M_initialize_map(__n);
   }
      }


      ~_Deque_base() noexcept;

    protected:
      typedef typename iterator::_Map_pointer _Map_pointer;




      struct _Deque_impl
      : public _Tp_alloc_type
      {
 _Map_pointer _M_map;
 size_t _M_map_size;
 iterator _M_start;
 iterator _M_finish;

 _Deque_impl()
 : _Tp_alloc_type(), _M_map(), _M_map_size(0),
   _M_start(), _M_finish()
 { }

 _Deque_impl(const _Tp_alloc_type& __a) noexcept
 : _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
   _M_start(), _M_finish()
 { }


 _Deque_impl(_Deque_impl&&) = default;

 _Deque_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
   _M_start(), _M_finish()
 { }


 void _M_swap_data(_Deque_impl& __x) noexcept
 {
   using std::swap;
   swap(this->_M_start, __x._M_start);
   swap(this->_M_finish, __x._M_finish);
   swap(this->_M_map, __x._M_map);
   swap(this->_M_map_size, __x._M_map_size);
 }
      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const noexcept
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p) noexcept
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 _Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 return _Map_alloc_traits::allocate(__map_alloc, __n);
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) noexcept
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 _Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }

    protected:
      void _M_initialize_map(size_t);
      void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
      void _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish) noexcept;
      enum { _S_initial_map_size = 8 };

      _Deque_impl _M_impl;


    private:
      _Deque_impl
      _M_move_impl()
      {
 if (!_M_impl._M_map)
   return std::move(_M_impl);


 _Tp_alloc_type __alloc{_M_get_Tp_allocator()};

 _Tp_alloc_type __sink __attribute((__unused__)) {std::move(__alloc)};

 _Deque_base __empty{__alloc};
 __empty._M_initialize_map(0);

 _Deque_impl __ret{std::move(_M_get_Tp_allocator())};
 _M_impl._M_swap_data(__ret);
 _M_impl._M_swap_data(__empty._M_impl);
 return __ret;
      }

    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() noexcept
    {
      if (this->_M_impl._M_map)
 {
   _M_destroy_nodes(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 }
    }
# 679 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
      + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
        size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);






      _Map_pointer __nstart = (this->_M_impl._M_map
          + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;

      try
 { _M_create_nodes(__nstart, __nfinish); }
      catch(...)
 {
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   this->_M_impl._M_map = _Map_pointer();
   this->_M_impl._M_map_size = 0;
   throw;
 }

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
     + __num_elements
     % __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      try
 {
   for (__cur = __nstart; __cur < __nfinish; ++__cur)
     *__cur = this->_M_allocate_node();
 }
      catch(...)
 {
   _M_destroy_nodes(__nstart, __cur);
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish) noexcept
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 _M_deallocate_node(*__n);
    }
# 830 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class deque : protected _Deque_base<_Tp, _Alloc>
    {
# 842 "/usr/include/c++/7/bits/stl_deque.h" 3
      typedef _Deque_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Alloc_traits _Alloc_traits;
      typedef typename _Base::_Map_pointer _Map_pointer;

    public:
      typedef _Tp value_type;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }


      using _Base::_M_initialize_map;
      using _Base::_M_create_nodes;
      using _Base::_M_destroy_nodes;
      using _Base::_M_allocate_node;
      using _Base::_M_deallocate_node;
      using _Base::_M_allocate_map;
      using _Base::_M_deallocate_map;
      using _Base::_M_get_Tp_allocator;





      using _Base::_M_impl;

    public:






      deque() : _Base() { }





      explicit
      deque(const allocator_type& __a)
      : _Base(__a, 0) { }
# 907 "/usr/include/c++/7/bits/stl_deque.h" 3
      explicit
      deque(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__a, __n)
      { _M_default_initialize(); }
# 920 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque(size_type __n, const value_type& __value,
     const allocator_type& __a = allocator_type())
      : _Base(__a, __n)
      { _M_fill_initialize(__value); }
# 947 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
       __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }
# 962 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque(deque&& __x)
      : _Base(std::move(__x)) { }


      deque(const deque& __x, const allocator_type& __a)
      : _Base(__a, __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }


      deque(deque&& __x, const allocator_type& __a)
      : _Base(std::move(__x), __a, __x.size())
      {
 if (__x.get_allocator() != __a)
   {
     std::__uninitialized_move_a(__x.begin(), __x.end(),
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
     __x.clear();
   }
      }
# 996 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque(initializer_list<value_type> __l,
     const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 1021 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 deque(_InputIterator __first, _InputIterator __last,
       const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 1044 "/usr/include/c++/7/bits/stl_deque.h" 3
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
# 1056 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque&
      operator=(const deque& __x);
# 1068 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque&
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
      {
 using __always_equal = typename _Alloc_traits::is_always_equal;
 _M_move_assign1(std::move(__x), __always_equal{});
 return *this;
      }
# 1087 "/usr/include/c++/7/bits/stl_deque.h" 3
      deque&
      operator=(initializer_list<value_type> __l)
      {
 _M_assign_aux(__l.begin(), __l.end(),
        random_access_iterator_tag());
 return *this;
      }
# 1106 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 1123 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 1150 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      assign(initializer_list<value_type> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }



      allocator_type
      get_allocator() const noexcept
      { return _Base::get_allocator(); }






      iterator
      begin() noexcept
      { return this->_M_impl._M_start; }





      const_iterator
      begin() const noexcept
      { return this->_M_impl._M_start; }






      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }






      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->_M_impl._M_start); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }






      const_iterator
      cbegin() const noexcept
      { return this->_M_impl._M_start; }






      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }




      size_type
      size() const noexcept
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 1289 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      resize(size_type __new_size)
      {
 const size_type __len = size();
 if (__new_size > __len)
   _M_default_append(__new_size - __len);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1311 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 const size_type __len = size();
 if (__new_size > __len)
   _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1347 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      shrink_to_fit() noexcept
      { _M_shrink_to_fit(); }






      bool
      empty() const noexcept
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
# 1372 "/usr/include/c++/7/bits/stl_deque.h" 3
      reference
      operator[](size_type __n) noexcept
      {
 ;
 return this->_M_impl._M_start[difference_type(__n)];
      }
# 1390 "/usr/include/c++/7/bits/stl_deque.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
 ;
 return this->_M_impl._M_start[difference_type(__n)];
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("deque::_M_range_check: __n " "(which is %zu)>= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1421 "/usr/include/c++/7/bits/stl_deque.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1439 "/usr/include/c++/7/bits/stl_deque.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
 ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
 ;
 return *begin();
      }





      reference
      back() noexcept
      {
 ;
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 ;
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1504 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      push_front(const value_type& __x)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_start._M_cur - 1,
         __x);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(__x);
      }


      void
      push_front(value_type&& __x)
      { emplace_front(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_front(_Args&&... __args);
# 1541 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_finish._M_cur, __x);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(__x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 1577 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      pop_front() noexcept
      {
 ;
 if (this->_M_impl._M_start._M_cur
     != this->_M_impl._M_start._M_last - 1)
   {
     _Alloc_traits::destroy(this->_M_impl,
       this->_M_impl._M_start._M_cur);
     ++this->_M_impl._M_start._M_cur;
   }
 else
   _M_pop_front_aux();
      }
# 1600 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      pop_back() noexcept
      {
 ;
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_first)
   {
     --this->_M_impl._M_finish._M_cur;
     _Alloc_traits::destroy(this->_M_impl,
       this->_M_impl._M_finish._M_cur);
   }
 else
   _M_pop_back_aux();
      }
# 1625 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args);
# 1638 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1664 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1677 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      {
 auto __offset = __p - cbegin();
 _M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),
       std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1698 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }
# 1732 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(__position._M_const_cast(),
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1778 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }
# 1802 "/usr/include/c++/7/bits/stl_deque.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
# 1821 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      swap(deque& __x) noexcept
      {


                                                          ;

 _M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(begin()); }

    protected:






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 {
   _M_initialize_map(static_cast<size_type>(__n));
   _M_fill_initialize(__x);
 }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   _M_range_initialize(__first, __last,
         std::__iterator_category(__first));
 }
# 1880 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag);
# 1902 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      _M_fill_initialize(const value_type& __value);



      void
      _M_default_initialize();
# 1918 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len > size())
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       _M_range_insert_aux(end(), __mid, __last,
      std::__iterator_category(__first));
     }
   else
     _M_erase_at_end(std::copy(__first, __last, begin()));
 }



      void
      _M_fill_assign(size_type __n, const value_type& __val)
      {
 if (__n > size())
   {
     std::fill(begin(), end(), __val);
     _M_fill_insert(end(), __n - size(), __val);
   }
 else
   {
     _M_erase_at_end(begin() + difference_type(__n));
     std::fill(begin(), end(), __val);
   }
      }
# 1979 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename... _Args>
 void _M_push_back_aux(_Args&&... __args);

      template<typename... _Args>
 void _M_push_front_aux(_Args&&... __args);


      void _M_pop_back_aux();

      void _M_pop_front_aux();
# 1998 "/usr/include/c++/7/bits/stl_deque.h" 3
      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos,
      _Integer __n, _Integer __x, __true_type)
 { _M_fill_insert(__pos, __n, __x); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
 {
   _M_range_insert_aux(__pos, __first, __last,
         std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert_aux(iterator __pos, _InputIterator __first,
       _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag);




      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);






      template<typename... _Args>
 iterator
 _M_insert_aux(iterator __pos, _Args&&... __args);



      void
      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);


      template<typename _ForwardIterator>
 void
 _M_insert_aux(iterator __pos,
        _ForwardIterator __first, _ForwardIterator __last,
        size_type __n);




      void
      _M_destroy_data_aux(iterator __first, iterator __last);



      template<typename _Alloc1>
 void
 _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
 { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
        const std::allocator<_Tp>&)
      {
 if (!__has_trivial_destructor(value_type))
   _M_destroy_data_aux(__first, __last);
      }


      void
      _M_erase_at_begin(iterator __pos)
      {
 _M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
 _M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
 this->_M_impl._M_start = __pos;
      }



      void
      _M_erase_at_end(iterator __pos)
      {
 _M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 _M_destroy_nodes(__pos._M_node + 1,
    this->_M_impl._M_finish._M_node + 1);
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();




      iterator
      _M_reserve_elements_at_front(size_type __n)
      {
 const size_type __vacancies = this->_M_impl._M_start._M_cur
          - this->_M_impl._M_start._M_first;
 if (__n > __vacancies)
   _M_new_elements_at_front(__n - __vacancies);
 return this->_M_impl._M_start - difference_type(__n);
      }

      iterator
      _M_reserve_elements_at_back(size_type __n)
      {
 const size_type __vacancies = (this->_M_impl._M_finish._M_last
           - this->_M_impl._M_finish._M_cur) - 1;
 if (__n > __vacancies)
   _M_new_elements_at_back(__n - __vacancies);
 return this->_M_impl._M_finish + difference_type(__n);
      }

      void
      _M_new_elements_at_front(size_type __new_elements);

      void
      _M_new_elements_at_back(size_type __new_elements);
# 2148 "/usr/include/c++/7/bits/stl_deque.h" 3
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add + 1 > this->_M_impl._M_map_size
     - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, false);
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
           - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, true);
      }

      void
      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);





      void
      _M_move_assign1(deque&& __x, true_type) noexcept
      {
 this->_M_impl._M_swap_data(__x._M_impl);
 __x.clear();
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }




      void
      _M_move_assign1(deque&& __x, false_type)
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign();
 _M_move_assign2(std::move(__x), __bool_constant<__move_storage>());
      }



      template<typename... _Args>
      void
      _M_replace_map(_Args&&... __args)
      {

 deque __newobj(std::forward<_Args>(__args)...);

 clear();
 _M_deallocate_node(*begin()._M_node);
 _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 this->_M_impl._M_map = nullptr;
 this->_M_impl._M_map_size = 0;

 this->_M_impl._M_swap_data(__newobj._M_impl);
      }


      void
      _M_move_assign2(deque&& __x, true_type)
      {

 auto __alloc = __x._M_get_Tp_allocator();


 _M_replace_map(std::move(__x));

 _M_get_Tp_allocator() = std::move(__alloc);
      }



      void
      _M_move_assign2(deque&& __x, false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   {


     _M_replace_map(std::move(__x), __x.get_allocator());
   }
 else
   {


     _M_assign_aux(std::__make_move_if_noexcept_iterator(__x.begin()),
     std::__make_move_if_noexcept_iterator(__x.end()),
     std::random_access_iterator_tag());
     __x.clear();
   }
      }

    };
# 2256 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const deque<_Tp, _Alloc>& __x,
                         const deque<_Tp, _Alloc>& __y)
    { return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin()); }
# 2274 "/usr/include/c++/7/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }




}
# 65 "/usr/include/c++/7/deque" 2 3

# 1 "/usr/include/c++/7/bits/deque.tcc" 1 3
# 59 "/usr/include/c++/7/bits/deque.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_initialize()
    {
      _Map_pointer __cur;
      try
        {
          for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
            std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
        _M_get_Tp_allocator());
          std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
      this->_M_impl._M_finish._M_cur,
      _M_get_Tp_allocator());
        }
      catch(...)
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
          throw;
        }
    }


  template <typename _Tp, typename _Alloc>
    deque<_Tp, _Alloc>&
    deque<_Tp, _Alloc>::
    operator=(const deque& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {


    _M_replace_map(__x, __x.get_allocator());
    std::__alloc_on_copy(_M_get_Tp_allocator(),
           __x._M_get_Tp_allocator());
    return *this;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __len = size();
   if (__len >= __x.size())
     _M_erase_at_end(std::copy(__x.begin(), __x.end(),
          this->_M_impl._M_start));
   else
     {
       const_iterator __mid = __x.begin() + difference_type(__len);
       std::copy(__x.begin(), __mid, this->_M_impl._M_start);
       _M_range_insert_aux(this->_M_impl._M_finish, __mid, __x.end(),
      std::random_access_iterator_tag());
     }
 }
      return *this;
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      deque<_Tp, _Alloc>::
      emplace_front(_Args&&... __args)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_start._M_cur - 1,
                std::forward<_Args>(__args)...);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(std::forward<_Args>(__args)...);



      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_finish._M_cur,
                std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(std::forward<_Args>(__args)...);



      }



  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 if (__position._M_cur == this->_M_impl._M_start._M_cur)
   {
     emplace_front(std::forward<_Args>(__args)...);
     return this->_M_impl._M_start;
   }
 else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
   {
     emplace_back(std::forward<_Args>(__args)...);
     iterator __tmp = this->_M_impl._M_finish;
     --__tmp;
     return __tmp;
   }
 else
   return _M_insert_aux(__position._M_const_cast(),
          std::forward<_Args>(__args)...);
      }


  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      if (__position._M_cur == this->_M_impl._M_start._M_cur)
 {
   push_front(__x);
   return this->_M_impl._M_start;
 }
      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 {
   push_back(__x);
   iterator __tmp = this->_M_impl._M_finish;
   --__tmp;
   return __tmp;
 }
      else
 return _M_insert_aux(__position._M_const_cast(), __x);
   }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      iterator __next = __position;
      ++__next;
      const difference_type __index = __position - begin();
      if (static_cast<size_type>(__index) < (size() >> 1))
 {
   if (__position != begin())
     std::move_backward(begin(), __position, __next);
   pop_front();
 }
      else
 {
   if (__next != end())
     std::move(__next, end(), __position);
   pop_back();
 }
      return begin() + __index;
    }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first == __last)
 return __first;
      else if (__first == begin() && __last == end())
 {
   clear();
   return end();
 }
      else
 {
   const difference_type __n = __last - __first;
   const difference_type __elems_before = __first - begin();
   if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
     {
       if (__first != begin())
  std::move_backward(begin(), __first, __last);
       _M_erase_at_begin(begin() + __n);
     }
   else
     {
       if (__last != end())
  std::move(__last, end(), __first);
       _M_erase_at_end(end() - __n);
     }
   return begin() + __elems_before;
 }
    }

  template <typename _Tp, class _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
        iterator __cur = begin();
        for (; __first != __last && __cur != end(); ++__cur, ++__first)
          *__cur = *__first;
        if (__first == __last)
          _M_erase_at_end(__cur);
        else
          _M_range_insert_aux(end(), __first, __last,
         std::__iterator_category(__first));
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
    {
      if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   try
     {
       std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
       __x, _M_get_Tp_allocator());
       this->_M_impl._M_start = __new_start;
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_fill_a(this->_M_impl._M_finish,
       __new_finish, __x,
       _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
      else
        _M_insert_aux(__pos, __n, __x);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_default_a(this->_M_impl._M_finish,
          __new_finish,
          _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    bool
    deque<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      const difference_type __front_capacity
 = (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
      if (__front_capacity == 0)
 return false;

      const difference_type __back_capacity
 = (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
      if (__front_capacity + __back_capacity < _S_buffer_size())
 return false;

      return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      try
        {
          for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
     __value, _M_get_Tp_allocator());
          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
          this->_M_impl._M_finish._M_cur,
          __value, _M_get_Tp_allocator());
        }
      catch(...)
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      {
        this->_M_initialize_map(0);
        try
          {
            for (; __first != __last; ++__first)

       emplace_back(*__first);



          }
        catch(...)
          {
            clear();
            throw;
          }
      }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        this->_M_initialize_map(__n);

        _Map_pointer __cur_node;
        try
          {
            for (__cur_node = this->_M_impl._M_start._M_node;
                 __cur_node < this->_M_impl._M_finish._M_node;
                 ++__cur_node)
       {
  _ForwardIterator __mid = __first;
  std::advance(__mid, _S_buffer_size());
  std::__uninitialized_copy_a(__first, __mid, *__cur_node,
         _M_get_Tp_allocator());
  __first = __mid;
       }
            std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_finish._M_first,
     _M_get_Tp_allocator());
          }
        catch(...)
          {
            std::_Destroy(this->_M_impl._M_start,
     iterator(*__cur_node, __cur_node),
     _M_get_Tp_allocator());
            throw;
          }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)





      {
 _M_reserve_map_at_back();
 *(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 try
   {

     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_finish._M_cur,
                std::forward<_Args>(__args)...);



     this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
      + 1);
     this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   }
 catch(...)
   {
     _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
     throw;
   }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(_Args&&... __args)





      {
 _M_reserve_map_at_front();
 *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 try
   {
     this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
            - 1);
     this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;

     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_start._M_cur,
                std::forward<_Args>(__args)...);



   }
 catch(...)
   {
     ++this->_M_impl._M_start;
     _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
     throw;
   }
      }


  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_finish._M_cur);
    }






  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        if (__pos._M_cur == this->_M_impl._M_start._M_cur)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last, __new_start,
         _M_get_Tp_allocator());
  this->_M_impl._M_start = __new_start;
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
   {
     iterator __new_finish = _M_reserve_elements_at_back(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last,
         this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  this->_M_impl._M_finish = __new_finish;
       }
     catch(...)
       {
  _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
     __new_finish._M_node + 1);
  throw;
       }
   }
        else
          _M_insert_aux(__pos, __first, __last, __n);
      }

  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos, _Args&&... __args)
      {
 value_type __x_copy(std::forward<_Args>(__args)...);







 difference_type __index = __pos - this->_M_impl._M_start;
 if (static_cast<size_type>(__index) < size() / 2)
   {
     push_front(std::move(front()));
     iterator __front1 = this->_M_impl._M_start;
     ++__front1;
     iterator __front2 = __front1;
     ++__front2;
     __pos = this->_M_impl._M_start + __index;
     iterator __pos1 = __pos;
     ++__pos1;
     std::move(__front2, __pos1, __front1);
   }
 else
   {
     push_back(std::move(back()));
     iterator __back1 = this->_M_impl._M_finish;
     --__back1;
     iterator __back2 = __back1;
     --__back2;
     __pos = this->_M_impl._M_start + __index;
     std::move_backward(__pos, __back2, __back1);
   }
 *__pos = std::move(__x_copy);
 return __pos;
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
    {
      const difference_type __elems_before = __pos - this->_M_impl._M_start;
      const size_type __length = this->size();
      value_type __x_copy = __x;
      if (__elems_before < difference_type(__length / 2))
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   iterator __old_start = this->_M_impl._M_start;
   __pos = this->_M_impl._M_start + __elems_before;
   try
     {
       if (__elems_before >= difference_type(__n))
  {
    iterator __start_n = (this->_M_impl._M_start
     + difference_type(__n));
    std::__uninitialized_move_a(this->_M_impl._M_start,
           __start_n, __new_start,
           _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::move(__start_n, __pos, __old_start);
    std::fill(__pos - difference_type(__n), __pos, __x_copy);
  }
       else
  {
    std::__uninitialized_move_fill(this->_M_impl._M_start,
       __pos, __new_start,
       this->_M_impl._M_start,
       __x_copy,
       _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::fill(__old_start, __pos, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   iterator __old_finish = this->_M_impl._M_finish;
   const difference_type __elems_after =
     difference_type(__length) - __elems_before;
   __pos = this->_M_impl._M_finish - __elems_after;
   try
     {
       if (__elems_after > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::fill(__pos, __pos + difference_type(__n), __x_copy);
  }
       else
  {
    std::__uninitialized_fill_move(this->_M_impl._M_finish,
       __pos + difference_type(__n),
       __x_copy, __pos,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::fill(__pos, __old_finish, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos,
                    _ForwardIterator __first, _ForwardIterator __last,
                    size_type __n)
      {
        const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
        const size_type __length = size();
        if (static_cast<size_type>(__elemsbefore) < __length / 2)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     iterator __old_start = this->_M_impl._M_start;
     __pos = this->_M_impl._M_start + __elemsbefore;
     try
       {
  if (__elemsbefore >= difference_type(__n))
    {
      iterator __start_n = (this->_M_impl._M_start
       + difference_type(__n));
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __start_n, __new_start,
      _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::move(__start_n, __pos, __old_start);
      std::copy(__first, __last, __pos - difference_type(__n));
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, difference_type(__n) - __elemsbefore);
      std::__uninitialized_move_copy(this->_M_impl._M_start,
         __pos, __first, __mid,
         __new_start,
         _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::copy(__mid, __last, __old_start);
    }
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else
        {
          iterator __new_finish = _M_reserve_elements_at_back(__n);
          iterator __old_finish = this->_M_impl._M_finish;
          const difference_type __elemsafter =
            difference_type(__length) - __elemsbefore;
          __pos = this->_M_impl._M_finish - __elemsafter;
          try
            {
              if (__elemsafter > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::copy(__first, __last, __pos);
  }
              else
  {
    _ForwardIterator __mid = __first;
    std::advance(__mid, __elemsafter);
    std::__uninitialized_copy_move(__mid, __last, __pos,
       this->_M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy(__first, __mid, __pos);
  }
            }
          catch(...)
            {
              _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
              throw;
            }
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
     __node < __last._M_node; ++__node)
  std::_Destroy(*__node, *__node + _S_buffer_size(),
         _M_get_Tp_allocator());

       if (__first._M_node != __last._M_node)
  {
    std::_Destroy(__first._M_cur, __first._M_last,
    _M_get_Tp_allocator());
    std::_Destroy(__last._M_first, __last._M_cur,
    _M_get_Tp_allocator());
  }
       else
  std::_Destroy(__first._M_cur, __last._M_cur,
         _M_get_Tp_allocator());
     }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_front(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_front"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_front(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_back(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_back"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_back(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
 = this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 {
   __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
      - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   if (__new_nstart < this->_M_impl._M_start._M_node)
     std::copy(this->_M_impl._M_start._M_node,
        this->_M_impl._M_finish._M_node + 1,
        __new_nstart);
   else
     std::copy_backward(this->_M_impl._M_start._M_node,
          this->_M_impl._M_finish._M_node + 1,
          __new_nstart + __old_num_nodes);
 }
      else
 {
   size_type __new_map_size = this->_M_impl._M_map_size
                              + std::max(this->_M_impl._M_map_size,
      __nodes_to_add) + 2;

   _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
   __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   std::copy(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1,
      __new_nstart);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

   this->_M_impl._M_map = __new_map;
   this->_M_impl._M_map_size = __new_map_size;
 }

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
    }



  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;

      for (typename _Self::_Map_pointer __node = __first._M_node + 1;
           __node < __last._M_node; ++__node)
 std::fill(*__node, *__node + _Self::_S_buffer_size(), __value);

      if (__first._M_node != __last._M_node)
 {
   std::fill(__first._M_cur, __first._M_last, __value);
   std::fill(__last._M_first, __last._M_cur, __value);
 }
      else
 std::fill(__first._M_cur, __last._M_cur, __value);
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, std::min(__first._M_last - __first._M_cur,
           __result._M_last - __result._M_cur));
   std::copy(__first._M_cur, __first._M_cur + __clen, __result._M_cur);
   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }
      return __result;
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __llen = __last._M_cur - __last._M_first;
   _Tp* __lend = __last._M_cur;

   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;

   if (!__llen)
     {
       __llen = _Self::_S_buffer_size();
       __lend = *(__last._M_node - 1) + __llen;
     }
   if (!__rlen)
     {
       __rlen = _Self::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len,
        std::min(__llen, __rlen));
   std::copy_backward(__lend - __clen, __lend, __rend);
   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }
      return __result;
    }


  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, std::min(__first._M_last - __first._M_cur,
           __result._M_last - __result._M_cur));
   std::move(__first._M_cur, __first._M_cur + __clen, __result._M_cur);
   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }
      return __result;
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __llen = __last._M_cur - __last._M_first;
   _Tp* __lend = __last._M_cur;

   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;

   if (!__llen)
     {
       __llen = _Self::_S_buffer_size();
       __lend = *(__last._M_node - 1) + __llen;
     }
   if (!__rlen)
     {
       __rlen = _Self::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len,
        std::min(__llen, __rlen));
   std::move_backward(__lend - __clen, __lend, __rend);
   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }
      return __result;
    }



}
# 67 "/usr/include/c++/7/deque" 2 3
# 61 "/usr/include/c++/7/queue" 2 3
# 1 "/usr/include/c++/7/vector" 1 3
# 58 "/usr/include/c++/7/vector" 3
       
# 59 "/usr/include/c++/7/vector" 3





# 1 "/usr/include/c++/7/bits/stl_vector.h" 1 3
# 68 "/usr/include/c++/7/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 215 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 227 "/usr/include/c++/7/bits/stl_vector.h" 3
      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 282 "/usr/include/c++/7/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 295 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 326 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 344 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 383 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 409 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 433 "/usr/include/c++/7/bits/stl_vector.h" 3
      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 446 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 460 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 481 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 500 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 517 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 545 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 688 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 708 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 740 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 779 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 794 "/usr/include/c++/7/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }
# 812 "/usr/include/c++/7/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 843 "/usr/include/c++/7/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 861 "/usr/include/c++/7/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
 ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
 ;
 return *begin();
      }





      reference
      back() noexcept
      {
 ;
 return *(end() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return *(end() - 1);
      }
# 919 "/usr/include/c++/7/bits/stl_vector.h" 3
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 938 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_realloc_insert(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 974 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 ;
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 995 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1011 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1041 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1058 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1083 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1125 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1177 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1204 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1228 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      swap(vector& __x) noexcept
      {


                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1281 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
 {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1359 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();
# 1446 "/usr/include/c++/7/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }

 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() { return *reinterpret_cast<_Tp*>(&__buf); }

      private:
 pointer
 _M_ptr() { return pointer_traits<pointer>::pointer_to(_M_val()); }

 vector* _M_this;
 typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
      };



      template<typename _Arg>
 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>
 void
 _M_realloc_insert(iterator __position, _Args&&... __args);


      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>
 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }


      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }
# 1581 "/usr/include/c++/7/bits/stl_vector.h" 3
    };
# 1594 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1611 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


}
# 65 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/stl_bvector.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage()
 { }


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = nullptr;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_start = _M_impl._M_finish = _Bit_iterator();
     _M_impl._M_end_of_storage = _Bit_pointer();
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 542 "/usr/include/c++/7/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }
# 613 "/usr/include/c++/7/bits/stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(vector&& __x, const allocator_type& __a)
    noexcept(_Bit_alloc_traits::_S_always_equal())
    : _Base(__a)
    {
      if (__x.get_allocator() == __a)
 {
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
 }
      else
 {
   _M_initialize(__x.size());
   _M_copy_aligned(__x.begin(), __x.end(), begin());
   __x.clear();
 }
    }

    vector(const vector& __x, const allocator_type& __a)
    : _Base(__a)
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 679 "/usr/include/c++/7/bits/stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;

      if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
 {
   if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
     {
       this->_M_deallocate();
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
       _M_initialize(__x.size());
     }
   else
     std::__alloc_on_copy(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
 }

      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
    {
      if (_Bit_alloc_traits::_S_propagate_on_move_assign()
   || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
 {
   this->_M_deallocate();
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
   std::__alloc_on_move(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
 }
      else
 {
   if (__x.size() > capacity())
     {
       this->_M_deallocate();
       _M_initialize(__x.size());
     }
   this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
          begin());
   __x.clear();
 }
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 775 "/usr/include/c++/7/bits/stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                          ,
     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x) noexcept
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 991 "/usr/include/c++/7/bits/stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>



      void

      emplace_back(_Args&&... __args)
      {
 push_back(bool(__args...));



      }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();






    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "/usr/include/c++/7/vector" 2 3



# 1 "/usr/include/c++/7/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/7/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_realloc_insert(end(), std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
   }
 else
   {

     const auto __pos = begin() + (__position - cbegin());


     _Temporary_value __x_copy(this, __x);
     _M_insert_aux(__pos, std::move(__x_copy._M_val()));



   }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1))
                 );
      ++this->_M_impl._M_finish;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len =
 _M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);
      try
 {





   _Alloc_traits::construct(this->_M_impl,
       __new_start + __elems_before,

       std::forward<_Args>(__args)...);



   __new_finish = pointer();

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (this->_M_impl._M_start, __position.base(),
      __new_start, _M_get_Tp_allocator());

   ++__new_finish;

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__position.base(), this->_M_impl._M_finish,
      __new_finish, _M_get_Tp_allocator());
 }
      catch(...)
 {
   if (!__new_finish)
     _Alloc_traits::destroy(this->_M_impl,
       __new_start + __elems_before);
   else
     std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
   _M_deallocate(__new_start, __len);
   throw;
 }
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
      this->_M_impl._M_end_of_storage
      - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __destroy_from = pointer();
       try
  {
    std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
    __destroy_from = __new_start + __size;
    std::__uninitialized_move_if_noexcept_a(
        this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (__destroy_from)
      std::_Destroy(__destroy_from, __destroy_from + __n,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(begin(), end(), __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, end(),
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/usr/include/c++/7/vector" 2 3
# 62 "/usr/include/c++/7/queue" 2 3
# 1 "/usr/include/c++/7/bits/stl_heap.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare& __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return std::__is_heap_until(__first, __n, __comp) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __n, __cmp) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      return std::__is_heap(__first, std::move(__comp),
       std::distance(__first, __last));
    }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare& __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 152 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_val __comp;
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }
# 187 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;
      ;

      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 269 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   __gnu_cxx::__ops::_Iter_less_iter __comp;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 302 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   typedef __decltype(__comp) _Cmp;
   __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
   --__last;
   std::__pop_heap(__first, __last, __last, __cmp);
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 358 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__make_heap(__first, __last, __comp);
    }
# 384 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 420 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__sort_heap(__first, __last, __comp);
    }
# 447 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__sort_heap(__first, __last, __cmp);
    }
# 475 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last), __comp);
    }
# 503 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
    }
# 527 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 540 "/usr/include/c++/7/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    {

     

      ;
      ;

      const auto __dist = std::distance(__first, __last);
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __dist, __cmp) == __dist;
    }



}
# 63 "/usr/include/c++/7/queue" 2 3

# 1 "/usr/include/c++/7/bits/stl_queue.h" 1 3
# 65 "/usr/include/c++/7/bits/stl_queue.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/7/bits/stl_queue.h" 3
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
    {
# 109 "/usr/include/c++/7/bits/stl_queue.h" 3
      template<typename _Tp1, typename _Seq1>
 friend bool
 operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);

      template<typename _Tp1, typename _Seq1>
 friend bool
 operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);


      template<typename _Alloc>
 using _Uses = typename
   enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;


    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;

    protected:
# 139 "/usr/include/c++/7/bits/stl_queue.h" 3
      _Sequence c;

    public:
# 150 "/usr/include/c++/7/bits/stl_queue.h" 3
      template<typename _Seq = _Sequence, typename _Requires = typename
        enable_if<is_default_constructible<_Seq>::value>::type>
 queue()
 : c() { }

      explicit
      queue(const _Sequence& __c)
      : c(__c) { }

      explicit
      queue(_Sequence&& __c)
      : c(std::move(__c)) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 explicit
 queue(const _Alloc& __a)
 : c(__a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(const _Sequence& __c, const _Alloc& __a)
 : c(__c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(_Sequence&& __c, const _Alloc& __a)
 : c(std::move(__c), __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(const queue& __q, const _Alloc& __a)
 : c(__q.c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(queue&& __q, const _Alloc& __a)
 : c(std::move(__q.c), __a) { }





      bool
      empty() const
      { return c.empty(); }


      size_type
      size() const
      { return c.size(); }





      reference
      front()
      {
 ;
 return c.front();
      }





      const_reference
      front() const
      {
 ;
 return c.front();
      }





      reference
      back()
      {
 ;
 return c.back();
      }





      const_reference
      back() const
      {
 ;
 return c.back();
      }
# 250 "/usr/include/c++/7/bits/stl_queue.h" 3
      void
      push(const value_type& __x)
      { c.push_back(__x); }


      void
      push(value_type&& __x)
      { c.push_back(std::move(__x)); }







      template<typename... _Args>
 void
 emplace(_Args&&... __args)
 { c.emplace_back(std::forward<_Args>(__args)...); }
# 283 "/usr/include/c++/7/bits/stl_queue.h" 3
      void
      pop()
      {
 ;
 c.pop_front();
      }


      void
      swap(queue& __q)

      noexcept(__is_nothrow_swappable<_Sequence>::value)



      {
 using std::swap;
 swap(c, __q.c);
      }

    };
# 316 "/usr/include/c++/7/bits/stl_queue.h" 3
  template<typename _Tp, typename _Seq>
    inline bool
    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __x.c == __y.c; }
# 334 "/usr/include/c++/7/bits/stl_queue.h" 3
  template<typename _Tp, typename _Seq>
    inline bool
    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __x.c < __y.c; }


  template<typename _Tp, typename _Seq>
    inline bool
    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Seq>
    inline bool
    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Seq>
    inline bool
    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Seq>
    inline bool
    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Seq>
    inline


    typename enable_if<__is_swappable<_Seq>::value>::type



    swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Seq, typename _Alloc>
    struct uses_allocator<queue<_Tp, _Seq>, _Alloc>
    : public uses_allocator<_Seq, _Alloc>::type { };
# 421 "/usr/include/c++/7/bits/stl_queue.h" 3
  template<typename _Tp, typename _Sequence = vector<_Tp>,
    typename _Compare = less<typename _Sequence::value_type> >
    class priority_queue
    {
# 439 "/usr/include/c++/7/bits/stl_queue.h" 3
      template<typename _Alloc>
 using _Uses = typename
   enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;


    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;


      typedef _Compare value_compare;

    protected:

      _Sequence c;
      _Compare comp;

    public:
# 470 "/usr/include/c++/7/bits/stl_queue.h" 3
      template<typename _Seq = _Sequence, typename _Requires = typename
        enable_if<__and_<is_default_constructible<_Compare>,
    is_default_constructible<_Seq>>::value>::type>
 priority_queue()
 : c(), comp() { }

      explicit
      priority_queue(const _Compare& __x, const _Sequence& __s)
      : c(__s), comp(__x)
      { std::make_heap(c.begin(), c.end(), comp); }

      explicit
      priority_queue(const _Compare& __x, _Sequence&& __s = _Sequence())
      : c(std::move(__s)), comp(__x)
      { std::make_heap(c.begin(), c.end(), comp); }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 explicit
 priority_queue(const _Alloc& __a)
 : c(__a), comp() { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, const _Alloc& __a)
 : c(__a), comp(__x) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, const _Sequence& __c,
         const _Alloc& __a)
 : c(__c, __a), comp(__x) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, _Sequence&& __c, const _Alloc& __a)
 : c(std::move(__c), __a), comp(__x) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const priority_queue& __q, const _Alloc& __a)
 : c(__q.c, __a), comp(__q.comp) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(priority_queue&& __q, const _Alloc& __a)
 : c(std::move(__q.c), __a), comp(std::move(__q.comp)) { }
# 540 "/usr/include/c++/7/bits/stl_queue.h" 3
      template<typename _InputIterator>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x,
         const _Sequence& __s)
 : c(__s), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }

      template<typename _InputIterator>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x = _Compare(),
         _Sequence&& __s = _Sequence())
 : c(std::move(__s)), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }





      bool
      empty() const
      { return c.empty(); }


      size_type
      size() const
      { return c.size(); }





      const_reference
      top() const
      {
 ;
 return c.front();
      }
# 594 "/usr/include/c++/7/bits/stl_queue.h" 3
      void
      push(const value_type& __x)
      {
 c.push_back(__x);
 std::push_heap(c.begin(), c.end(), comp);
      }


      void
      push(value_type&& __x)
      {
 c.push_back(std::move(__x));
 std::push_heap(c.begin(), c.end(), comp);
      }

      template<typename... _Args>
 void
 emplace(_Args&&... __args)
 {
   c.emplace_back(std::forward<_Args>(__args)...);
   std::push_heap(c.begin(), c.end(), comp);
 }
# 629 "/usr/include/c++/7/bits/stl_queue.h" 3
      void
      pop()
      {
 ;
 std::pop_heap(c.begin(), c.end(), comp);
 c.pop_back();
      }


      void
      swap(priority_queue& __pq)
      noexcept(__and_<

   __is_nothrow_swappable<_Sequence>,



   __is_nothrow_swappable<_Compare>
        >::value)
      {
 using std::swap;
 swap(c, __pq.c);
 swap(comp, __pq.comp);
      }

    };




  template<typename _Tp, typename _Sequence, typename _Compare>
    inline


    typename enable_if<__and_<__is_swappable<_Sequence>,
         __is_swappable<_Compare>>::value>::type



    swap(priority_queue<_Tp, _Sequence, _Compare>& __x,
  priority_queue<_Tp, _Sequence, _Compare>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Sequence, typename _Compare,
    typename _Alloc>
    struct uses_allocator<priority_queue<_Tp, _Sequence, _Compare>, _Alloc>
    : public uses_allocator<_Sequence, _Alloc>::type { };



}
# 65 "/usr/include/c++/7/queue" 2 3
# 10 "../../include/Utils/AsyncObjectStream.hpp" 2
# 1 "/usr/include/c++/7/iostream" 1 3
# 36 "/usr/include/c++/7/iostream" 3
       
# 37 "/usr/include/c++/7/iostream" 3


# 1 "/usr/include/c++/7/ostream" 1 3
# 36 "/usr/include/c++/7/ostream" 3
       
# 37 "/usr/include/c++/7/ostream" 3

# 1 "/usr/include/c++/7/ios" 1 3
# 36 "/usr/include/c++/7/ios" 3
       
# 37 "/usr/include/c++/7/ios" 3





# 1 "/usr/include/c++/7/bits/ios_base.h" 1 3
# 37 "/usr/include/c++/7/bits/ios_base.h" 3
       
# 38 "/usr/include/c++/7/bits/ios_base.h" 3



# 1 "/usr/include/c++/7/bits/locale_classes.h" 1 3
# 37 "/usr/include/c++/7/bits/locale_classes.h" 3
       
# 38 "/usr/include/c++/7/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/7/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/include/c++/7/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/include/c++/7/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/include/c++/7/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/include/c++/7/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/include/c++/7/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "/usr/include/c++/7/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "/usr/include/c++/7/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "/usr/include/c++/7/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/usr/include/c++/7/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/usr/include/c++/7/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/usr/include/c++/7/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/usr/include/c++/7/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "/usr/include/c++/7/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "/usr/include/c++/7/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "/usr/include/c++/7/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "/usr/include/c++/7/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "/usr/include/c++/7/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "/usr/include/c++/7/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "/usr/include/c++/7/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "/usr/include/c++/7/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "/usr/include/c++/7/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "/usr/include/c++/7/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "/usr/include/c++/7/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "/usr/include/c++/7/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "/usr/include/c++/7/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "/usr/include/c++/7/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "/usr/include/c++/7/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "/usr/include/c++/7/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/7/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/7/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/7/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/include/c++/7/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/include/c++/7/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "/usr/include/c++/7/bits/locale_classes.h" 2 3
# 42 "/usr/include/c++/7/bits/ios_base.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 0x7fffffff,
      _S_ios_openmode_min = ~0x7fffffff
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "/usr/include/c++/7/bits/ios_base.h" 3
  class ios_base
  {
# 246 "/usr/include/c++/7/bits/ios_base.h" 3
  public:
# 255 "/usr/include/c++/7/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "/usr/include/c++/7/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "/usr/include/c++/7/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "/usr/include/c++/7/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "/usr/include/c++/7/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 487 "/usr/include/c++/7/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 504 "/usr/include/c++/7/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 516 "/usr/include/c++/7/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 629 "/usr/include/c++/7/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 645 "/usr/include/c++/7/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 662 "/usr/include/c++/7/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 688 "/usr/include/c++/7/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 739 "/usr/include/c++/7/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 751 "/usr/include/c++/7/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 762 "/usr/include/c++/7/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 773 "/usr/include/c++/7/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 792 "/usr/include/c++/7/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 808 "/usr/include/c++/7/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 829 "/usr/include/c++/7/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 846 "/usr/include/c++/7/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 860 "/usr/include/c++/7/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "/usr/include/c++/7/ios" 2 3
# 1 "/usr/include/c++/7/streambuf" 1 3
# 36 "/usr/include/c++/7/streambuf" 3
       
# 37 "/usr/include/c++/7/streambuf" 3
# 45 "/usr/include/c++/7/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "/usr/include/c++/7/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "/usr/include/c++/7/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "/usr/include/c++/7/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "/usr/include/c++/7/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "/usr/include/c++/7/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "/usr/include/c++/7/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "/usr/include/c++/7/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "/usr/include/c++/7/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "/usr/include/c++/7/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "/usr/include/c++/7/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "/usr/include/c++/7/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "/usr/include/c++/7/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "/usr/include/c++/7/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "/usr/include/c++/7/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "/usr/include/c++/7/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "/usr/include/c++/7/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "/usr/include/c++/7/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "/usr/include/c++/7/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "/usr/include/c++/7/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "/usr/include/c++/7/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "/usr/include/c++/7/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "/usr/include/c++/7/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "/usr/include/c++/7/streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "/usr/include/c++/7/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "/usr/include/c++/7/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "/usr/include/c++/7/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "/usr/include/c++/7/streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "/usr/include/c++/7/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "/usr/include/c++/7/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "/usr/include/c++/7/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "/usr/include/c++/7/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "/usr/include/c++/7/streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "/usr/include/c++/7/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "/usr/include/c++/7/streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "/usr/include/c++/7/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}

# 1 "/usr/include/c++/7/bits/streambuf.tcc" 1 3
# 37 "/usr/include/c++/7/bits/streambuf.tcc" 3
       
# 38 "/usr/include/c++/7/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 851 "/usr/include/c++/7/streambuf" 2 3
# 44 "/usr/include/c++/7/ios" 2 3
# 1 "/usr/include/c++/7/bits/basic_ios.h" 1 3
# 33 "/usr/include/c++/7/bits/basic_ios.h" 3
       
# 34 "/usr/include/c++/7/bits/basic_ios.h" 3



# 1 "/usr/include/c++/7/bits/locale_facets.h" 1 3
# 37 "/usr/include/c++/7/bits/locale_facets.h" 3
       
# 38 "/usr/include/c++/7/bits/locale_facets.h" 3

# 1 "/usr/include/c++/7/cwctype" 1 3
# 39 "/usr/include/c++/7/cwctype" 3
       
# 40 "/usr/include/c++/7/cwctype" 3
# 50 "/usr/include/c++/7/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 51 "/usr/include/c++/7/cwctype" 2 3
# 80 "/usr/include/c++/7/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/include/c++/7/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/7/cctype" 1 3
# 39 "/usr/include/c++/7/cctype" 3
       
# 40 "/usr/include/c++/7/cctype" 3
# 41 "/usr/include/c++/7/bits/locale_facets.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_base.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 42 "/usr/include/c++/7/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/7/bits/streambuf_iterator.h" 1 3
# 33 "/usr/include/c++/7/bits/streambuf_iterator.h" 3
       
# 34 "/usr/include/c++/7/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/7/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "/usr/include/c++/7/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/usr/include/c++/7/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/usr/include/c++/7/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/usr/include/c++/7/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/usr/include/c++/7/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/usr/include/c++/7/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/usr/include/c++/7/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 929 "/usr/include/c++/7/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 962 "/usr/include/c++/7/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1011 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1028 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1044 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1061 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1081 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1104 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1130 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1156 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1181 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1214 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1225 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1249 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1268 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1286 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1304 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1321 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1338 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1354 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1371 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1391 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1413 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1436 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1462 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_inline.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1535 "/usr/include/c++/7/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1665 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1703 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1717 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1731 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1744 "/usr/include/c++/7/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1775 "/usr/include/c++/7/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1788 "/usr/include/c++/7/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1801 "/usr/include/c++/7/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1818 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1830 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1843 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1856 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1869 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1947 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1968 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1994 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2031 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2134 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2207 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2270 "/usr/include/c++/7/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2288 "/usr/include/c++/7/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2309 "/usr/include/c++/7/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2327 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2369 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2432 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2457 "/usr/include/c++/7/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2505 "/usr/include/c++/7/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/7/bits/locale_facets.tcc" 1 3
# 33 "/usr/include/c++/7/bits/locale_facets.tcc" 3
       
# 34 "/usr/include/c++/7/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "/usr/include/c++/7/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/usr/include/c++/7/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/usr/include/c++/7/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/usr/include/c++/7/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/usr/include/c++/7/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1206 "/usr/include/c++/7/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2652 "/usr/include/c++/7/bits/locale_facets.h" 2 3
# 38 "/usr/include/c++/7/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/usr/include/c++/7/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "/usr/include/c++/7/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "/usr/include/c++/7/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/usr/include/c++/7/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/usr/include/c++/7/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/usr/include/c++/7/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/usr/include/c++/7/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/usr/include/c++/7/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/usr/include/c++/7/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/usr/include/c++/7/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/usr/include/c++/7/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/usr/include/c++/7/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/usr/include/c++/7/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/usr/include/c++/7/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/usr/include/c++/7/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/7/bits/basic_ios.tcc" 1 3
# 33 "/usr/include/c++/7/bits/basic_ios.tcc" 3
       
# 34 "/usr/include/c++/7/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/include/c++/7/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/usr/include/c++/7/bits/basic_ios.h" 2 3
# 45 "/usr/include/c++/7/ios" 2 3
# 39 "/usr/include/c++/7/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/7/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/7/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/include/c++/7/ostream" 3
      pos_type
      tellp();
# 368 "/usr/include/c++/7/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/include/c++/7/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "/usr/include/c++/7/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "/usr/include/c++/7/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "/usr/include/c++/7/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "/usr/include/c++/7/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "/usr/include/c++/7/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "/usr/include/c++/7/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "/usr/include/c++/7/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "/usr/include/c++/7/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 674 "/usr/include/c++/7/ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}

# 1 "/usr/include/c++/7/bits/ostream.tcc" 1 3
# 37 "/usr/include/c++/7/bits/ostream.tcc" 3
       
# 38 "/usr/include/c++/7/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 694 "/usr/include/c++/7/ostream" 2 3
# 40 "/usr/include/c++/7/iostream" 2 3
# 1 "/usr/include/c++/7/istream" 1 3
# 36 "/usr/include/c++/7/istream" 3
       
# 37 "/usr/include/c++/7/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/include/c++/7/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/include/c++/7/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/include/c++/7/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/include/c++/7/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/include/c++/7/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/include/c++/7/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/include/c++/7/istream" 3
      int_type
      get();
# 315 "/usr/include/c++/7/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/include/c++/7/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/include/c++/7/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/include/c++/7/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/include/c++/7/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/include/c++/7/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/include/c++/7/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/include/c++/7/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/include/c++/7/istream" 3
      int_type
      peek();
# 485 "/usr/include/c++/7/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/include/c++/7/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/include/c++/7/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/include/c++/7/istream" 3
      __istream_type&
      unget();
# 555 "/usr/include/c++/7/istream" 3
      int
      sync();
# 570 "/usr/include/c++/7/istream" 3
      pos_type
      tellg();
# 585 "/usr/include/c++/7/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/include/c++/7/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/usr/include/c++/7/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "/usr/include/c++/7/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "/usr/include/c++/7/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "/usr/include/c++/7/istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}

# 1 "/usr/include/c++/7/bits/istream.tcc" 1 3
# 37 "/usr/include/c++/7/bits/istream.tcc" 3
       
# 38 "/usr/include/c++/7/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 try
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     __in._M_setstate(ios_base::badbit);
     throw;
   }
 catch(...)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "/usr/include/c++/7/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "/usr/include/c++/7/istream" 2 3
# 41 "/usr/include/c++/7/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/7/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 11 "../../include/Utils/AsyncObjectStream.hpp" 2
# 29 "../../include/Utils/AsyncObjectStream.hpp"

# 29 "../../include/Utils/AsyncObjectStream.hpp"
template <class Object>
class AsyncObjectStream {

 std::queue<Object> retObjs;
 bool finished;

 std::promise<Object> promise;
 bool promiseSet;






 std::future<Object> future;

 std::recursive_mutex m_mutex;

 void prepareNewFuture() {
  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   if (finished && retObjs.empty()) {


   } else {
    bool futureNotTaken = future.valid();
    if (!futureNotTaken) {
     promise = std::promise<Object>();
     future = promise.get_future();
     promiseSet = 0;
    }
   }
  }
 }




 void tryPrepareNextResult() {

  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   if(finished && retObjs.empty()) {

   } else if(!promiseSet && !retObjs.empty()) {
    promise.set_value(std::move(retObjs.front()));
    retObjs.pop();
    promiseSet = 1;
   }
# 102 "../../include/Utils/AsyncObjectStream.hpp"
  }
 }

public:




 AsyncObjectStream() :
  finished(0),
  promiseSet(0)
 {
  future = promise.get_future();
 }
# 126 "../../include/Utils/AsyncObjectStream.hpp"
 bool getNextObject(Object& res) {
  bool noMoreObjects;
  bool valid;
  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   valid = future.valid();
   noMoreObjects = finished && (!valid || !promiseSet) && retObjs.empty();
  }
  if (noMoreObjects) {
   return false;
  }
  if (!valid) {
   return false;
  }







  future.wait();
  bool caught;
  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   try {
    res = future.get();
    caught = false;
   } catch (std::logic_error e) {
    caught = true;
   }
  }
  if (caught) {
   return false;
  }


  prepareNewFuture();
  tryPrepareNextResult();
  return true;
 }







 void addResult(Object& res) {
  if (finished) {
   throw std::runtime_error("AsyncObjectStream declared finished by tried to add new result.");
  }
  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   retObjs.push(std::move(res));
  }
  tryPrepareNextResult();
 }
# 190 "../../include/Utils/AsyncObjectStream.hpp"
 void resultsFinished() {
  for(std::unique_lock<std::recursive_mutex> lk(m_mutex); lk; lk.unlock()) {
   finished = true;
   if (retObjs.empty() && !promiseSet) {
    promise.set_exception(
     std::make_exception_ptr(
      std::logic_error("Cancel waiting; we are done.")));
   }
  }
 }

};
# 6 "../../include/Utils/AsyncGenerator.hpp" 2
# 1 "/usr/include/c++/7/functional" 1 3
# 46 "/usr/include/c++/7/functional" 3
       
# 47 "/usr/include/c++/7/functional" 3
# 67 "/usr/include/c++/7/functional" 3

# 67 "/usr/include/c++/7/functional" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 85 "/usr/include/c++/7/functional" 3
  template<typename... _Types>
    struct _Pack : integral_constant<size_t, sizeof...(_Types)>
    { };

  template<typename _From, typename _To, bool = _From::value == _To::value>
    struct _AllConvertible : false_type
    { };

  template<typename... _From, typename... _To>
    struct _AllConvertible<_Pack<_From...>, _Pack<_To...>, true>
    : __and_<is_convertible<_From, _To>...>
    { };

  template<typename _Tp1, typename _Tp2>
    using _NotSame = __not_<is_same<typename std::decay<_Tp1>::type,
        typename std::decay<_Tp2>::type>>;

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };
# 134 "/usr/include/c++/7/functional" 3
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
# 147 "/usr/include/c++/7/functional" 3
  template<typename _MemFunPtr,
    bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
    class _Mem_fn_base
    : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using _Traits = _Mem_fn_traits<_MemFunPtr>;

      using _Arity = typename _Traits::__arity;
      using _Varargs = typename _Traits::__vararg;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemFunPtr _M_pmf;

    public:

      using result_type = typename _Traits::__result_type;

      explicit constexpr
      _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }

      template<typename... _Args>
 auto
 operator()(_Args&&... __args) const
 noexcept(noexcept(
       std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))
 -> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))
 { return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }
    };


  template<typename _MemObjPtr>
    class _Mem_fn_base<_MemObjPtr, false>
    {
      using _Arity = integral_constant<size_t, 0>;
      using _Varargs = false_type;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemObjPtr _M_pm;

    public:
      explicit constexpr
      _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { }

      template<typename _Tp>
 auto
 operator()(_Tp&& __obj) const
 noexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))
 -> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))
 { return std::__invoke(_M_pm, std::forward<_Tp>(__obj)); }
    };

  template<typename _MemberPointer>
    struct _Mem_fn;

  template<typename _Res, typename _Class>
    struct _Mem_fn<_Res _Class::*>
    : _Mem_fn_base<_Res _Class::*>
    {
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
    };
# 219 "/usr/include/c++/7/functional" 3
  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }
# 234 "/usr/include/c++/7/functional" 3
  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };
# 245 "/usr/include/c++/7/functional" 3
  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };
# 260 "/usr/include/c++/7/functional" 3
  template<int _Num> struct _Placeholder { };

 





  namespace placeholders
  {
 




    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;
 
  }

 






  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };



  template<std::size_t __i, typename _Tuple>
    using _Safe_tuple_element_t
      = typename enable_if<(__i < tuple_size<_Tuple>::value),
      tuple_element<__i, _Tuple>>::type::type;
# 342 "/usr/include/c++/7/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;






  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:




      template<typename _CVRef, typename _Tuple>
 _Tp&
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };







  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::get<_Indexes>(std::move(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Tuple>
 _Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return
     ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }

      template<typename _BoundArg, typename _CallArgs>
 using _Mu_type = decltype(
     _Mu<typename remove_cv<_BoundArg>::type>()(
       std::declval<_BoundArg&>(), std::declval<_CallArgs&>()) );

      template<typename _Fn, typename _CallArgs, typename... _BArgs>
 using _Res_type_impl
   = typename result_of< _Fn&(_Mu_type<_BArgs, _CallArgs>&&...) >::type;

      template<typename _CallArgs>
 using _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;

      template<typename _CallArgs>
 using __dependent = typename
   enable_if<bool(tuple_size<_CallArgs>::value+1), _Functor>::type;

      template<typename _CallArgs, template<class> class __cv_quals>
 using _Res_type_cv = _Res_type_impl<
   typename __cv_quals<__dependent<_CallArgs>>::type,
   _CallArgs,
   typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args,
        typename _Result = _Res_type<tuple<_Args...>>>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
# 572 "/usr/include/c++/7/functional" 3
      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>

 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>

 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 using __enable_if_void
   = typename enable_if<is_void<_Res>{}>::type;

      template<typename _Res>
 using __disable_if_void
   = typename enable_if<!is_void<_Res>{}, _Result>::type;


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __disable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __enable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   std::__invoke(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __disable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __enable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   std::__invoke(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __disable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __enable_if_void<_Res>
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
 {
   std::__invoke(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __disable_if_void<_Res>
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 __enable_if_void<_Res>
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>) const volatile
 {
   std::__invoke(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };






  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_check_arity { };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args......), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Tp, typename _Class, typename... _BoundArgs>
    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
    {
      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
      using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
      static_assert(_Varargs::value
      ? sizeof...(_BoundArgs) >= _Arity::value + 1
      : sizeof...(_BoundArgs) == _Arity::value + 1,
      "Wrong number of arguments for pointer-to-member");
    };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };





  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };





  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }



  template<typename _Fn>
    class _Not_fn
    {
      template<typename _Fn2, typename... _Args>
 using __inv_res_t = typename __invoke_result<_Fn2, _Args...>::type;

      template<typename _Tp>
 static decltype(!std::declval<_Tp>())
 _S_not() noexcept(noexcept(!std::declval<_Tp>()));

    public:
      template<typename _Fn2>
 _Not_fn(_Fn2&& __fn, int)
 : _M_fn(std::forward<_Fn2>(__fn)) { }

      _Not_fn(const _Not_fn& __fn) = default;
      _Not_fn(_Not_fn&& __fn) = default;
      ~_Not_fn() = default;
# 939 "/usr/include/c++/7/functional" 3
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn &, _Args...>>()) operator()(_Args&&... __args) & noexcept(noexcept(_S_not<__inv_res_t<_Fn &, _Args...>>())) { return !std::__invoke(std::forward< _Fn & >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn const &, _Args...>>()) operator()(_Args&&... __args) const & noexcept(noexcept(_S_not<__inv_res_t<_Fn const &, _Args...>>())) { return !std::__invoke(std::forward< _Fn const & >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn &&, _Args...>>()) operator()(_Args&&... __args) && noexcept(noexcept(_S_not<__inv_res_t<_Fn &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn && >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn const &&, _Args...>>()) operator()(_Args&&... __args) const && noexcept(noexcept(_S_not<__inv_res_t<_Fn const &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn const && >(_M_fn), std::forward<_Args>(__args)...); }


    private:
      _Fn _M_fn;
    };
# 1244 "/usr/include/c++/7/functional" 3

}
# 7 "../../include/Utils/AsyncGenerator.hpp" 2
# 59 "../../include/Utils/AsyncGenerator.hpp"

# 59 "../../include/Utils/AsyncGenerator.hpp"
namespace AsyncGeneratorDetails {


 static int MaxThreads = std::thread::hardware_concurrency();

 static int currentThreads = 0;

}
# 87 "../../include/Utils/AsyncGenerator.hpp"
template <class Object>
class AsyncGenerator {


 AsyncObjectStream<Object> stream;
 std::thread m_thread;
 bool executingAsync;



 std::queue<Object> results;
 bool finishedProducing;

public:
# 117 "../../include/Utils/AsyncGenerator.hpp"
 template <class Function, class... Args>
 explicit AsyncGenerator(Function&& f, Args&&...args) :

  stream(),
  m_thread(),
  executingAsync(0),

  finishedProducing(0)
 {


   executingAsync = 1;
   ++(AsyncGeneratorDetails::currentThreads);
   m_thread = std::thread(std::forward<Function>(f), std::forward<Args>(args)..., std::ref(*this));
# 144 "../../include/Utils/AsyncGenerator.hpp"
 }






 AsyncGenerator() :

  stream(),
  m_thread(),
  executingAsync(0),

  finishedProducing(1)
 {

 }

 ~AsyncGenerator() {

  this->detach();

 }







 void generateObject(Object& obj) {

  if (executingAsync) {
   stream.addResult(obj);
  } else {

   results.push(std::move(obj));


  }

 }





 void setComplete() {

  if (executingAsync) {
   stream.resultsFinished();
   m_thread.detach();
  } else {

   finishedProducing = 1;


  }

 }
# 212 "../../include/Utils/AsyncGenerator.hpp"
 bool getNextObject(Object& obj) {

  if (executingAsync) {
   return stream.getNextObject(obj);
  } else {

   if(finishedProducing && results.empty()) {
    return false;
   }
   obj = std::move(results.front());
   results.pop();
   return true;

  }


 }





 void join() {

  if (m_thread.joinable()) {
   m_thread.join();
  }


 }





 void detach() {

  if (m_thread.joinable()) {
   m_thread.detach();
  }


 }





 static void maxThreads(int newMaxThreads) {
  AsyncGeneratorDetails::MaxThreads = newMaxThreads;
 }

};
# 6 "regularchainmacros.hpp" 2
# 2 "zerodimensionalregularchain.cpp" 2

# 1 "../../include/RegularChain/regularchain.hpp" 1



# 1 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../polynomial.h" 1







# 1 "../../include/RegularChain/../TriangularSet/../ring.h" 1






# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 1



# 1 "/usr/include/gmpxx.h" 1 3 4
# 36 "/usr/include/gmpxx.h" 3 4
# 1 "/usr/include/c++/7/cstring" 1 3 4
# 39 "/usr/include/c++/7/cstring" 3 4
       
# 40 "/usr/include/c++/7/cstring" 3


# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 88 "/usr/include/string.h" 3 4
}
# 98 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 203 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 223 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 250 "/usr/include/string.h" 3 4
}
# 260 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 300 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 327 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 368 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/7/cstring" 2 3
# 71 "/usr/include/c++/7/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 120 "/usr/include/c++/7/cstring" 3

}
# 37 "/usr/include/gmpxx.h" 2 3 4


# 1 "/usr/include/c++/7/algorithm" 1 3 4
# 58 "/usr/include/c++/7/algorithm" 3 4
       
# 59 "/usr/include/c++/7/algorithm" 3



# 1 "/usr/include/c++/7/bits/stl_algo.h" 1 3
# 59 "/usr/include/c++/7/bits/stl_algo.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 60 "/usr/include/c++/7/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/7/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/7/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/7/bits/algorithmfwd.h" 3
# 42 "/usr/include/c++/7/bits/algorithmfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 195 "/usr/include/c++/7/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);
# 224 "/usr/include/c++/7/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 565 "/usr/include/c++/7/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);
# 594 "/usr/include/c++/7/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "/usr/include/c++/7/bits/stl_algo.h" 2 3





# 1 "/usr/include/c++/7/bits/uniform_int_dist.h" 1 3
# 37 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace __detail
  {


    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      };

  }








  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument must be an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
   ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

 friend bool
 operator!=(const param_type& __p1, const param_type& __p2)
 { return !(__p1 == __p2); }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 267 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 351 "/usr/include/c++/7/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }




}
# 67 "/usr/include/c++/7/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
  return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 506 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 523 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 541 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 556 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {

     
     

      ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 580 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      if (__first == __last)
 return true;
      ++__first;
      return std::none_of(__first, __last, __pred);
    }
# 601 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {

     
     



      ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 668 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 700 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 734 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 797 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {

     
     


      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 825 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {

     
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = std::move(*__first);
     ++__result;
   }
      return __result;
    }
# 894 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 927 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 993 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1023 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1178 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1205 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {


  template<typename _ForwardIterator>
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1432 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  }
# 1469 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
  _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
         std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1546 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1649 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1735 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
# 1749 "/usr/include/c++/7/bits/stl_algo.h" 3
     
     

     

     
      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1784 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
# 1800 "/usr/include/c++/7/bits/stl_algo.h" 3
     
     

     

     

     

      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2021 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2075 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2105 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2176 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

     

      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2212 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2245 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val)
    {

     
     

      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2278 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
   _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2572 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2613 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
        _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Distance __buffer_size,
      _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2785 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   {
     ++__first1;
     ++__first2;
   }

      return __first2 == __last2;
    }
# 2824 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2868 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2903 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2952 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2984 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3052 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, (void)++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3134 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3168 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3207 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3221 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, (void)++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3250 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3274 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {

     
     


      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3299 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _Tp>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {

     

      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3320 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3400 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3428 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {

     
     


      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3540 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3571 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
      if (__ra_iters)
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3664 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      ;
      ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3691 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
      ;
      ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3767 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _IntType, typename _UniformRandomBitGenerator>
    pair<_IntType, _IntType>
    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
      _UniformRandomBitGenerator&& __g)
    {
      _IntType __x
 = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
      return std::make_pair(__x / __b1, __x % __b1);
    }
# 3789 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {

     

      ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;

      typedef typename remove_reference<_UniformRandomNumberGenerator>::type
 _Gen;
      typedef typename common_type<typename _Gen::result_type, __ud_type>::type
 __uc_type;

      const __uc_type __urngrange = __g.max() - __g.min();
      const __uc_type __urange = __uc_type(__last - __first);

      if (__urngrange / __urange >= __urange)

      {
 _RandomAccessIterator __i = __first + 1;





 if ((__urange % 2) == 0)
 {
   __distr_type __d{0, 1};
   std::iter_swap(__i++, __first + __d(__g));
 }





 while (__i != __last)
 {
   const __uc_type __swap_range = __uc_type(__i - __first) + 1;

   const pair<__uc_type, __uc_type> __pospos =
     __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);

   std::iter_swap(__i++, __first + __pospos.first);
   std::iter_swap(__i++, __first + __pospos.second);
 }

 return;
      }

      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }







# 3876 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 3897 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3921 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3952 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3992 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4024 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4049 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 4074 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 4097 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4137 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4176 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4211 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4244 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4292 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, (void)++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4329 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4362 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4394 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4426 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4457 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 4493 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4533 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4566 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {

     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4601 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4641 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4674 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4712 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4748 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4787 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {

     

     


      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4824 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4854 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4915 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4965 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5029 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 5063 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5131 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5180 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5250 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5298 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5370 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5420 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5498 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5548 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5601 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5626 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5665 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5690 "/usr/include/c++/7/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
           typename _Size, typename _UniformRandomBitGenerator>
    _RandomAccessIterator
    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
      _RandomAccessIterator __out, random_access_iterator_tag,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      __distrib_type __d{};
      _Size __sample_sz = 0;
      while (__first != __last && __sample_sz != __n)
 {
   __out[__sample_sz++] = *__first;
   ++__first;
 }
      for (auto __pop_sz = __sample_sz; __first != __last;
   ++__first, (void) ++__pop_sz)
 {
   const auto __k = __d(__g, __param_type{0, __pop_sz});
   if (__k < __n)
     __out[__k] = *__first;
 }
      return __out + __sample_sz;
    }


  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,
           typename _Size, typename _UniformRandomBitGenerator>
    _OutputIterator
    __sample(_ForwardIterator __first, _ForwardIterator __last,
      forward_iterator_tag,
      _OutputIterator __out, _Cat,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      using _USize = make_unsigned_t<_Size>;
      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;

      __distrib_type __d{};
      _Size __unsampled_sz = std::distance(__first, __last);
      __n = std::min(__n, __unsampled_sz);




      const __uc_type __urngrange = __g.max() - __g.min();
      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))


        {
   while (__n != 0 && __unsampled_sz >= 2)
     {
       const pair<_Size, _Size> __p =
  __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);

       --__unsampled_sz;
       if (__p.first < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;

       if (__n == 0) break;

       --__unsampled_sz;
       if (__p.second < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;
     }
        }



      for (; __n != 0; ++__first)
 if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
   {
     *__out++ = *__first;
     --__n;
   }
      return __out;
    }
# 5833 "/usr/include/c++/7/bits/stl_algo.h" 3

}
# 63 "/usr/include/c++/7/algorithm" 2 3
# 40 "/usr/include/gmpxx.h" 2 3 4


# 1 "/usr/include/c++/7/cfloat" 1 3 4
# 39 "/usr/include/c++/7/cfloat" 3 4
       
# 40 "/usr/include/c++/7/cfloat" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/float.h" 1 3 4
# 43 "/usr/include/c++/7/cfloat" 2 3
# 43 "/usr/include/gmpxx.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/gmp.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/include/c++/7/cstdio" 1 3 4
# 39 "/usr/include/c++/7/cstdio" 3 4
       
# 40 "/usr/include/c++/7/cstdio" 3
# 36 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 56 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 57 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 141 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;


typedef unsigned long int mp_bitcnt_t;




typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 468 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern "C" {
using std::FILE;



 void __gmp_set_memory_functions (void *(*) (size_t),
          void *(*) (void *, size_t, size_t),
          void (*) (void *, size_t)) throw ();


 void __gmp_get_memory_functions (void *(**) (size_t),
          void *(**) (void *, size_t, size_t),
          void (**) (void *, size_t)) throw ();


 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);


 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 550 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);
# 588 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);
# 617 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clears (mpz_ptr, ...);


 void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmp_si (mpz_srcptr, signed long int) throw () __attribute__ ((__pure__));


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) __attribute__ ((__pure__));


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_2fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_mfac_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_primorial_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_fits_slong_p (mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_fits_sshort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



 int __gmpz_fits_uint_p (mpz_srcptr) throw () __attribute__ ((__pure__));




 int __gmpz_fits_ulong_p (mpz_srcptr) throw () __attribute__ ((__pure__));




 int __gmpz_fits_ushort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) throw () __attribute__ ((__pure__));


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) throw () __attribute__ ((__pure__));




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



 mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr);


 void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


 void __gmpz_inits (mpz_ptr, ...);


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_kronecker_si (mpz_srcptr, long) __attribute__ ((__pure__));


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_si_kronecker (long, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




 mp_bitcnt_t __gmpz_popcount (mpz_srcptr) throw () __attribute__ ((__pure__));



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_sec (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



 size_t __gmpz_size (mpz_srcptr) throw () __attribute__ ((__pure__));



 size_t __gmpz_sizeinbase (mpz_srcptr, int) throw () __attribute__ ((__pure__));


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) throw ();


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);


 mp_srcptr __gmpz_limbs_read (mpz_srcptr);


 mp_ptr __gmpz_limbs_write (mpz_ptr, mp_size_t);


 mp_ptr __gmpz_limbs_modify (mpz_ptr, mp_size_t);


 void __gmpz_limbs_finish (mpz_ptr, mp_size_t);


 mpz_srcptr __gmpz_roinit_n (mpz_ptr, mp_srcptr, mp_size_t);







 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 void __gmpq_clears (mpq_ptr, ...);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) __attribute__ ((__pure__));


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) __attribute__ ((__pure__));


 int __gmpq_cmp_z (mpq_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) throw () __attribute__ ((__pure__));


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);


 void __gmpq_inits (mpq_ptr, ...);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) throw ();





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 void __gmpf_clears (mpf_ptr, ...);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_z (mpf_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


 int __gmpf_cmp_si (mpf_srcptr, signed long int) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 int __gmpf_fits_sint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_slong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_sshort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_uint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_ulong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_ushort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 mp_bitcnt_t __gmpf_get_default_prec (void) throw () __attribute__ ((__pure__));


 mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) throw () __attribute__ ((__pure__));


 long __gmpf_get_si (mpf_srcptr) throw () __attribute__ ((__pure__));


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


 void __gmpf_inits (mpf_ptr, ...);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (mp_bitcnt_t) throw ();


 void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


 void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) throw ();


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) throw ();


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1461 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));




 int __gmpn_zero_p (mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



 void __gmpn_divexact_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_limb_t __gmpn_div_qr_1 (mp_ptr, mp_limb_t *, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_div_qr_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg (mp_ptr, mp_srcptr, mp_size_t);



 void __gmpn_com (mp_ptr, mp_srcptr, mp_size_t);


 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_perfect_power_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 size_t __gmpn_sizeinbase (mp_srcptr, mp_size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_zero (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_cnd_add_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 mp_limb_t __gmpn_cnd_sub_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_sec_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_add_1_itch (mp_size_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_sec_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_sub_1_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_cnd_swap (mp_limb_t, volatile mp_limb_t *, volatile mp_limb_t *, mp_size_t);


 void __gmpn_sec_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_mul_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_sqr (mp_ptr, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_sqr_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_powm (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_powm_itch (mp_size_t, mp_bitcnt_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_tabselect (volatile mp_limb_t *, volatile const mp_limb_t *, mp_size_t, mp_size_t, mp_size_t);


 mp_limb_t __gmpn_sec_div_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_qr_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));

 void __gmpn_sec_div_r (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_r_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_sec_invert (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t, mp_ptr);

 mp_size_t __gmpn_sec_invert_itch (mp_size_t) __attribute__ ((__pure__));
# 1707 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1731 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffff * 2U + 1U)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffffffffffffL * 2UL + 1UL)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fff * 2 + 1)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z) throw ()
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1787 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n) throw ()
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u) throw ()
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? (0x7fffffffffffffffL * 2UL + 1UL) : 0);
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__ ((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z) throw ()
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2129 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size) throw ()
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_zero_p (mp_srcptr __gmp_p, mp_size_t __gmp_n) throw ()
{

    do {
      if (__gmp_p[--__gmp_n] != 0)
 return 0;
    } while (__gmp_n != 0);
  return 1;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  while (*__gmp_up == 0)
    {
      *__gmp_rp = 0;
      if (!--__gmp_n)
 return 0;
      ++__gmp_up; ++__gmp_rp;
    }

  *__gmp_rp = (- *__gmp_up) & ((~ (static_cast<mp_limb_t> (0))) >> 0);

  if (--__gmp_n)
    __gmpn_com (++__gmp_rp, ++__gmp_up, __gmp_n);

  return 1;
}



}
# 2278 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 std::ostream& operator<< (std::ostream &, mpz_srcptr);
 std::ostream& operator<< (std::ostream &, mpq_srcptr);
 std::ostream& operator<< (std::ostream &, mpf_srcptr);
 std::istream& operator>> (std::istream &, mpz_ptr);
 std::istream& operator>> (std::istream &, mpq_ptr);
 std::istream& operator>> (std::istream &, mpf_ptr);
# 2309 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 44 "/usr/include/gmpxx.h" 2 3 4
# 85 "/usr/include/gmpxx.h" 3 4
inline void __mpz_set_ui_safe(mpz_ptr p, unsigned long l)
{
  p->_mp_size = (l != 0);
  p->_mp_d[0] = l & ((~ (static_cast<mp_limb_t> (0))) >> 0);





}

inline void __mpz_set_si_safe(mpz_ptr p, long l)
{
  if(l < 0)
  {
    __mpz_set_ui_safe(p, -static_cast<unsigned long>(l));
    __gmpz_neg(p, p);
  }
  else
    __mpz_set_ui_safe(p, l);

}
# 151 "/usr/include/gmpxx.h" 3 4
inline unsigned long __gmpxx_abs_ui (signed long l)
{
  return l >= 0 ? static_cast<unsigned long>(l)
   : -static_cast<unsigned long>(l);
}







struct __gmp_unary_plus
{
  static void eval(mpz_ptr z, mpz_srcptr w) { __gmpz_set(z, w); }
  static void eval(mpq_ptr q, mpq_srcptr r) { __gmpq_set(q, r); }
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_set(f, g); }
};

struct __gmp_unary_minus
{
  static void eval(mpz_ptr z, mpz_srcptr w) { __gmpz_neg(z, w); }
  static void eval(mpq_ptr q, mpq_srcptr r) { __gmpq_neg(q, r); }
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_neg(f, g); }
};

struct __gmp_unary_com
{
  static void eval(mpz_ptr z, mpz_srcptr w) { __gmpz_com(z, w); }
};

struct __gmp_binary_plus
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_add(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  {


    if (__builtin_constant_p(l) && l == 0)
    {
      if (z != w) __gmpz_set(z, w);
    }
    else
      __gmpz_add_ui(z, w, l);
  }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  {
    if (l >= 0)
      eval(z, w, static_cast<unsigned long>(l));
    else
      __gmpz_sub_ui(z, w, -static_cast<unsigned long>(l));
  }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_add (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)
  { __gmpq_add(q, r, s); }

  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)
  {
    if (__builtin_constant_p(l) && l == 0)
    {
      if (q != r) __gmpq_set(q, r);
    }
    else
    {
      if (q == r)
        __gmpz_addmul_ui((&((q)->_mp_num)), (&((q)->_mp_den)), l);
      else
      {
        __gmpz_mul_ui((&((q)->_mp_num)), (&((r)->_mp_den)), l);
        __gmpz_add((&((q)->_mp_num)), (&((q)->_mp_num)), (&((r)->_mp_num)));
        __gmpz_set((&((q)->_mp_den)), (&((r)->_mp_den)));
      }
    }
  }
  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)
  { eval(q, r, l); }
  static inline void eval(mpq_ptr q, mpq_srcptr r, signed long int l);

  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)
  { eval(q, r, l); }
  static void eval(mpq_ptr q, mpq_srcptr r, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_add (q, r, temp); }
  static void eval(mpq_ptr q, double d, mpq_srcptr r)
  { eval(q, r, d); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpz_srcptr z)
  {
    if (q == r)
      __gmpz_addmul((&((q)->_mp_num)), (&((q)->_mp_den)), z);
    else
    {
      __gmpz_mul((&((q)->_mp_num)), (&((r)->_mp_den)), z);
      __gmpz_add((&((q)->_mp_num)), (&((q)->_mp_num)), (&((r)->_mp_num)));
      __gmpz_set((&((q)->_mp_den)), (&((r)->_mp_den)));
    }
  }
  static void eval(mpq_ptr q, mpz_srcptr z, mpq_srcptr r)
  { eval(q, r, z); }

  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)
  { __gmpf_add(f, g, h); }

  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)
  { __gmpf_add_ui(f, g, l); }
  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)
  { __gmpf_add_ui(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)
  {
    if (l >= 0)
      __gmpf_add_ui(f, g, l);
    else
      __gmpf_sub_ui(f, g, -static_cast<unsigned long>(l));
  }
  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)
  { eval(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, double d)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_add(f, g, temp);
    __gmpf_clear(temp);
  }
  static void eval(mpf_ptr f, double d, mpf_srcptr g)
  { eval(f, g, d); }
};

struct __gmp_binary_minus
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_sub(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  {
    if (__builtin_constant_p(l) && l == 0)
    {
      if (z != w) __gmpz_set(z, w);
    }
    else
      __gmpz_sub_ui(z, w, l);
  }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  {
    if (__builtin_constant_p(l) && l == 0)
    {
      __gmpz_neg(z, w);
    }
    else
      __gmpz_ui_sub(z, l, w);
  }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  {
    if (l >= 0)
      eval(z, w, static_cast<unsigned long>(l));
    else
      __gmpz_add_ui(z, w, -static_cast<unsigned long>(l));
  }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  {
    if (l >= 0)
      eval(z, static_cast<unsigned long>(l), w);
    else
      {
        __gmpz_add_ui(z, w, -static_cast<unsigned long>(l));
        __gmpz_neg(z, z);
      }
  }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_sub (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_sub (z, temp, w); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)
  { __gmpq_sub(q, r, s); }

  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)
  {
    if (__builtin_constant_p(l) && l == 0)
    {
      if (q != r) __gmpq_set(q, r);
    }
    else
    {
      if (q == r)
        __gmpz_submul_ui((&((q)->_mp_num)), (&((q)->_mp_den)), l);
      else
      {
        __gmpz_mul_ui((&((q)->_mp_num)), (&((r)->_mp_den)), l);
        __gmpz_sub((&((q)->_mp_num)), (&((r)->_mp_num)), (&((q)->_mp_num)));
        __gmpz_set((&((q)->_mp_den)), (&((r)->_mp_den)));
      }
    }
  }
  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)
  { eval(q, r, l); __gmpq_neg(q, q); }
  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)
  {
    if (l >= 0)
      eval(q, r, static_cast<unsigned long>(l));
    else
      __gmp_binary_plus::eval(q, r, -static_cast<unsigned long>(l));
  }
  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)
  { eval(q, r, l); __gmpq_neg(q, q); }
  static void eval(mpq_ptr q, mpq_srcptr r, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_sub (q, r, temp); }
  static void eval(mpq_ptr q, double d, mpq_srcptr r)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_sub (q, temp, r); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpz_srcptr z)
  {
    if (q == r)
      __gmpz_submul((&((q)->_mp_num)), (&((q)->_mp_den)), z);
    else
    {
      __gmpz_mul((&((q)->_mp_num)), (&((r)->_mp_den)), z);
      __gmpz_sub((&((q)->_mp_num)), (&((r)->_mp_num)), (&((q)->_mp_num)));
      __gmpz_set((&((q)->_mp_den)), (&((r)->_mp_den)));
    }
  }
  static void eval(mpq_ptr q, mpz_srcptr z, mpq_srcptr r)
  { eval(q, r, z); __gmpq_neg(q, q); }

  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)
  { __gmpf_sub(f, g, h); }

  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)
  { __gmpf_sub_ui(f, g, l); }
  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)
  { __gmpf_ui_sub(f, l, g); }
  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)
  {
    if (l >= 0)
      __gmpf_sub_ui(f, g, l);
    else
      __gmpf_add_ui(f, g, -static_cast<unsigned long>(l));
  }
  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)
  {
    if (l >= 0)
      __gmpf_sub_ui(f, g, l);
    else
      __gmpf_add_ui(f, g, -static_cast<unsigned long>(l));
    __gmpf_neg(f, f);
  }
  static void eval(mpf_ptr f, mpf_srcptr g, double d)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_sub(f, g, temp);
    __gmpf_clear(temp);
  }
  static void eval(mpf_ptr f, double d, mpf_srcptr g)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_sub(f, temp, g);
    __gmpf_clear(temp);
  }
};


inline void
__gmp_binary_plus::eval(mpq_ptr q, mpq_srcptr r, signed long int l)
{
  if (l >= 0)
    eval(q, r, static_cast<unsigned long>(l));
  else
    __gmp_binary_minus::eval(q, r, -static_cast<unsigned long>(l));
}

struct __gmp_binary_lshift
{
  static void eval(mpz_ptr z, mpz_srcptr w, mp_bitcnt_t l)
  {
    if (__builtin_constant_p(l) && (l == 0))
    {
      if (z != w) __gmpz_set(z, w);
    }
    else
      __gmpz_mul_2exp(z, w, l);
  }
  static void eval(mpq_ptr q, mpq_srcptr r, mp_bitcnt_t l)
  {
    if (__builtin_constant_p(l) && (l == 0))
    {
      if (q != r) __gmpq_set(q, r);
    }
    else
      __gmpq_mul_2exp(q, r, l);
  }
  static void eval(mpf_ptr f, mpf_srcptr g, mp_bitcnt_t l)
  { __gmpf_mul_2exp(f, g, l); }
};

struct __gmp_binary_rshift
{
  static void eval(mpz_ptr z, mpz_srcptr w, mp_bitcnt_t l)
  {
    if (__builtin_constant_p(l) && (l == 0))
    {
      if (z != w) __gmpz_set(z, w);
    }
    else
      __gmpz_fdiv_q_2exp(z, w, l);
  }
  static void eval(mpq_ptr q, mpq_srcptr r, mp_bitcnt_t l)
  {
    if (__builtin_constant_p(l) && (l == 0))
    {
      if (q != r) __gmpq_set(q, r);
    }
    else
      __gmpq_div_2exp(q, r, l);
  }
  static void eval(mpf_ptr f, mpf_srcptr g, mp_bitcnt_t l)
  { __gmpf_div_2exp(f, g, l); }
};

struct __gmp_binary_multiplies
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_mul(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  {


    if (__builtin_constant_p(l) && (l & (l-1)) == 0)
    {
      if (l == 0)
      {
        z->_mp_size = 0;
      }
      else
      {
        __gmp_binary_lshift::eval(z, w, __builtin_ctzl(l));
      }
    }
    else

      __gmpz_mul_ui(z, w, l);
  }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      eval(z, w, static_cast<unsigned long>(l));
    else if ((__builtin_constant_p(l <= 0) && (l <= 0)))
      {
        eval(z, w, -static_cast<unsigned long>(l));
 __gmpz_neg(z, z);
      }
    else
      __gmpz_mul_si (z, w, l);
  }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_mul (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)
  { __gmpq_mul(q, r, s); }

  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)
  {

    if (__builtin_constant_p(l) && (l & (l-1)) == 0)
    {
      if (l == 0)
      {
 __gmpq_set_ui(q, 0, 1);
      }
      else
      {
        __gmp_binary_lshift::eval(q, r, __builtin_ctzl(l));
      }
    }
    else

    {
      mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_ui_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1;
      __gmpq_mul (q, r, temp);
    }
  }
  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)
  { eval(q, r, l); }
  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      eval(q, r, static_cast<unsigned long>(l));
    else if ((__builtin_constant_p(l <= 0) && (l <= 0)))
      {
        eval(q, r, -static_cast<unsigned long>(l));
 __gmpq_neg(q, q);
      }
    else
      {
 mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_si_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1;
 __gmpq_mul (q, r, temp);
      }
  }
  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)
  { eval(q, r, l); }
  static void eval(mpq_ptr q, mpq_srcptr r, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_mul (q, r, temp); }
  static void eval(mpq_ptr q, double d, mpq_srcptr r)
  { eval(q, r, d); }

  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)
  { __gmpf_mul(f, g, h); }

  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)
  { __gmpf_mul_ui(f, g, l); }
  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)
  { __gmpf_mul_ui(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)
  {
    if (l >= 0)
      __gmpf_mul_ui(f, g, l);
    else
      {
 __gmpf_mul_ui(f, g, -static_cast<unsigned long>(l));
 __gmpf_neg(f, f);
      }
  }
  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)
  { eval(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, double d)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_mul(f, g, temp);
    __gmpf_clear(temp);
  }
  static void eval(mpf_ptr f, double d, mpf_srcptr g)
  { eval(f, g, d); }
};

struct __gmp_binary_divides
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_tdiv_q(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  {


    if (__builtin_constant_p(l) && (l & (l-1)) == 0 && l != 0)
    {
      if (l == 1)
      {
        if (z != w) __gmpz_set(z, w);
      }
      else
        __gmpz_tdiv_q_2exp(z, w, __builtin_ctzl(l));

    }
    else

      __gmpz_tdiv_q_ui(z, w, l);
  }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  {
    if (((w)->_mp_size < 0 ? -1 : (w)->_mp_size > 0) >= 0)
      {
 if (__gmpz_fits_ulong_p(w))
   __gmpz_set_ui(z, l / __gmpz_get_ui(w));
 else
   __gmpz_set_ui(z, 0);
      }
    else
      {
 __gmpz_neg(z, w);
 if (__gmpz_fits_ulong_p(z))
   {
     __gmpz_set_ui(z, l / __gmpz_get_ui(z));
     __gmpz_neg(z, z);
   }
 else
   __gmpz_set_ui(z, 0);
      }
  }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  {
    if (l >= 0)
      eval(z, w, static_cast<unsigned long>(l));
    else
      {
 eval(z, w, -static_cast<unsigned long>(l));
 __gmpz_neg(z, z);
      }
  }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  {
    if (__gmpz_fits_slong_p(w))
      __gmpz_set_si(z, l / __gmpz_get_si(w));
    else
      {


        __gmpz_set_si (z, (__gmpz_cmpabs_ui (w, __gmpxx_abs_ui(l)) == 0 ? -1 : 0));
      }
  }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_tdiv_q (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_tdiv_q (z, temp, w); }

  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)
  { __gmpq_div(q, r, s); }

  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)
  {

    if (__builtin_constant_p(l) && (l & (l-1)) == 0 && l != 0)
      __gmp_binary_rshift::eval(q, r, __builtin_ctzl(l));
    else

    {
      mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_ui_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1;
      __gmpq_div (q, r, temp);
    }
  }
  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)
  { mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_ui_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1; __gmpq_div (q, temp, r); }
  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      eval(q, r, static_cast<unsigned long>(l));
    else if ((__builtin_constant_p(l <= 0) && (l <= 0)))
      {
        eval(q, r, -static_cast<unsigned long>(l));
 __gmpq_neg(q, q);
      }
    else
      {
 mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_si_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1;
 __gmpq_div (q, r, temp);
      }
  }
  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)
  { mpq_t temp; mp_limb_t limbs[1 +1]; (&((temp)->_mp_num))->_mp_d = limbs; __mpz_set_si_safe ((&((temp)->_mp_num)), l); (&((temp)->_mp_den))->_mp_d = limbs + 1; (&((temp)->_mp_den))->_mp_size = 1; (&((temp)->_mp_den))->_mp_d[0] = 1; __gmpq_div (q, temp, r); }
  static void eval(mpq_ptr q, mpq_srcptr r, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_div (q, r, temp); }
  static void eval(mpq_ptr q, double d, mpq_srcptr r)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); __gmpq_div (q, temp, r); }

  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)
  { __gmpf_div(f, g, h); }

  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)
  { __gmpf_div_ui(f, g, l); }
  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)
  { __gmpf_ui_div(f, l, g); }
  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)
  {
    if (l >= 0)
      __gmpf_div_ui(f, g, l);
    else
      {
 __gmpf_div_ui(f, g, -static_cast<unsigned long>(l));
 __gmpf_neg(f, f);
      }
  }
  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)
  {
    if (l >= 0)
      __gmpf_ui_div(f, l, g);
    else
      {
 __gmpf_ui_div(f, -static_cast<unsigned long>(l), g);
 __gmpf_neg(f, f);
      }
  }
  static void eval(mpf_ptr f, mpf_srcptr g, double d)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_div(f, g, temp);
    __gmpf_clear(temp);
  }
  static void eval(mpf_ptr f, double d, mpf_srcptr g)
  {
    mpf_t temp;
    __gmpf_init2(temp, 8*sizeof(double));
    __gmpf_set_d(temp, d);
    __gmpf_div(f, temp, g);
    __gmpf_clear(temp);
  }
};

struct __gmp_binary_modulus
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_tdiv_r(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { __gmpz_tdiv_r_ui(z, w, l); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  {
    if (((w)->_mp_size < 0 ? -1 : (w)->_mp_size > 0) >= 0)
      {
 if (__gmpz_fits_ulong_p(w))
   __gmpz_set_ui(z, l % __gmpz_get_ui(w));
 else
   __gmpz_set_ui(z, l);
      }
    else
      {
 __gmpz_neg(z, w);
 if (__gmpz_fits_ulong_p(z))
   __gmpz_set_ui(z, l % __gmpz_get_ui(z));
 else
   __gmpz_set_ui(z, l);
      }
  }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  {
    __gmpz_tdiv_r_ui (z, w, __gmpxx_abs_ui(l));
  }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  {
    if (__gmpz_fits_slong_p(w))
      __gmpz_set_si(z, l % __gmpz_get_si(w));
    else
      {


        __gmpz_set_si (z, __gmpz_cmpabs_ui (w, __gmpxx_abs_ui(l)) == 0 ? 0 : l);
      }
  }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_tdiv_r (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_tdiv_r (z, temp, w); }
};

struct __gmp_binary_and
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_and(z, w, v); }

  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_ui_safe (temp, l); __gmpz_and (z, w, temp); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_si_safe (temp, l); __gmpz_and (z, w, temp); }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_and (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }
};

struct __gmp_binary_ior
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_ior(z, w, v); }
  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_ui_safe (temp, l); __gmpz_ior (z, w, temp); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_si_safe (temp, l); __gmpz_ior (z, w, temp); }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_ior (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }
};

struct __gmp_binary_xor
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_xor(z, w, v); }
  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_ui_safe (temp, l); __gmpz_xor (z, w, temp); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  { mpz_t temp; mp_limb_t limbs[1]; temp->_mp_d = limbs; __mpz_set_si_safe (temp, l); __gmpz_xor (z, w, temp); }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_xor (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }
};

struct __gmp_cmp_function
{
  static int eval(mpz_srcptr z, mpz_srcptr w) { return __gmpz_cmp(z, w); }

  static int eval(mpz_srcptr z, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,l)); }
  static int eval(unsigned long int l, mpz_srcptr z)
  { return -(__builtin_constant_p (l) && (l) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,l)); }
  static int eval(mpz_srcptr z, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,(static_cast<unsigned long> (l)))) : __gmpz_cmp_si (z,l)); }
  static int eval(signed long int l, mpz_srcptr z)
  { return -(__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,(static_cast<unsigned long> (l)))) : __gmpz_cmp_si (z,l)); }
  static int eval(mpz_srcptr z, double d)
  { return __gmpz_cmp_d(z, d); }
  static int eval(double d, mpz_srcptr z)
  { return -__gmpz_cmp_d(z, d); }

  static int eval(mpq_srcptr q, mpq_srcptr r) { return __gmpq_cmp(q, r); }

  static int eval(mpq_srcptr q, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p ((l) == (1)) && (l) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,l,1)); }
  static int eval(unsigned long int l, mpq_srcptr q)
  { return -(__builtin_constant_p (l) && (l) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p ((l) == (1)) && (l) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,l,1)); }
  static int eval(mpq_srcptr q, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (l))) == (1)) && ((static_cast<unsigned long> (l))) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,(static_cast<unsigned long> (l)),1)) : __gmpq_cmp_si (q, l, 1)); }
  static int eval(signed long int l, mpq_srcptr q)
  { return -(__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (l))) == (1)) && ((static_cast<unsigned long> (l))) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,(static_cast<unsigned long> (l)),1)) : __gmpq_cmp_si (q, l, 1)); }
  static int eval(mpq_srcptr q, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); return __gmpq_cmp (q, temp); }
  static int eval(double d, mpq_srcptr q)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); return __gmpq_cmp (temp, q); }
  static int eval(mpq_srcptr q, mpz_srcptr z)
  { return __gmpq_cmp_z(q, z); }
  static int eval(mpz_srcptr z, mpq_srcptr q)
  { return -__gmpq_cmp_z(q, z); }

  static int eval(mpf_srcptr f, mpf_srcptr g) { return __gmpf_cmp(f, g); }

  static int eval(mpf_srcptr f, unsigned long int l)
  { return __gmpf_cmp_ui(f, l); }
  static int eval(unsigned long int l, mpf_srcptr f)
  { return -__gmpf_cmp_ui(f, l); }
  static int eval(mpf_srcptr f, signed long int l)
  { return __gmpf_cmp_si(f, l); }
  static int eval(signed long int l, mpf_srcptr f)
  { return -__gmpf_cmp_si(f, l); }
  static int eval(mpf_srcptr f, double d)
  { return __gmpf_cmp_d(f, d); }
  static int eval(double d, mpf_srcptr f)
  { return -__gmpf_cmp_d(f, d); }
  static int eval(mpf_srcptr f, mpz_srcptr z)
  { return __gmpf_cmp_z(f, z); }
  static int eval(mpz_srcptr z, mpf_srcptr f)
  { return -__gmpf_cmp_z(f, z); }
  static int eval(mpf_srcptr f, mpq_srcptr q)
  {
    mpf_t qf;
    __gmpf_init(qf);
    __gmpf_set_q(qf, q);
    int ret = eval(f, qf);
    __gmpf_clear(qf);
    return ret;
  }
  static int eval(mpq_srcptr q, mpf_srcptr f)
  { return -eval(f, q); }
};

struct __gmp_binary_equal
{
  static bool eval(mpz_srcptr z, mpz_srcptr w) { return __gmpz_cmp(z, w) == 0; }

  static bool eval(mpz_srcptr z, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,l)) == 0; }
  static bool eval(unsigned long int l, mpz_srcptr z)
  { return eval(z, l); }
  static bool eval(mpz_srcptr z, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,(static_cast<unsigned long> (l)))) : __gmpz_cmp_si (z,l)) == 0; }
  static bool eval(signed long int l, mpz_srcptr z)
  { return eval(z, l); }
  static bool eval(mpz_srcptr z, double d)
  { return __gmpz_cmp_d(z, d) == 0; }
  static bool eval(double d, mpz_srcptr z)
  { return eval(z, d); }

  static bool eval(mpq_srcptr q, mpq_srcptr r)
  { return __gmpq_equal(q, r) != 0; }

  static bool eval(mpq_srcptr q, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p ((l) == (1)) && (l) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,l,1)) == 0; }
  static bool eval(unsigned long int l, mpq_srcptr q)
  { return eval(q, l); }
  static bool eval(mpq_srcptr q, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (l))) == (1)) && ((static_cast<unsigned long> (l))) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,(static_cast<unsigned long> (l)),1)) : __gmpq_cmp_si (q, l, 1)) == 0; }
  static bool eval(signed long int l, mpq_srcptr q)
  { return eval(q, l); }
  static bool eval(mpq_srcptr q, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); return __gmpq_equal (q, temp) != 0; }
  static bool eval(double d, mpq_srcptr q)
  { return eval(q, d); }
  static bool eval(mpq_srcptr q, mpz_srcptr z)
  { return __gmpq_cmp_z(q, z) == 0; }
  static bool eval(mpz_srcptr z, mpq_srcptr q)
  { return eval(q, z); }

  static bool eval(mpf_srcptr f, mpf_srcptr g) { return __gmpf_cmp(f, g) == 0; }

  static bool eval(mpf_srcptr f, unsigned long int l)
  { return __gmpf_cmp_ui(f, l) == 0; }
  static bool eval(unsigned long int l, mpf_srcptr f)
  { return eval(f, l); }
  static bool eval(mpf_srcptr f, signed long int l)
  { return __gmpf_cmp_si(f, l) == 0; }
  static bool eval(signed long int l, mpf_srcptr f)
  { return eval(f, l); }
  static bool eval(mpf_srcptr f, double d)
  { return __gmpf_cmp_d(f, d) == 0; }
  static bool eval(double d, mpf_srcptr f)
  { return eval(f, d); }
  static bool eval(mpf_srcptr f, mpz_srcptr z)
  { return __gmpf_cmp_z(f, z) == 0; }
  static bool eval(mpz_srcptr z, mpf_srcptr f)
  { return eval(f, z); }
  static bool eval(mpf_srcptr f, mpq_srcptr q)
  { return __gmp_cmp_function::eval(f, q) == 0; }
  static bool eval(mpq_srcptr q, mpf_srcptr f)
  { return eval(f, q); }
};

struct __gmp_binary_less
{
  static bool eval(mpz_srcptr z, mpz_srcptr w) { return __gmpz_cmp(z, w) < 0; }

  static bool eval(mpz_srcptr z, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,l)) < 0; }
  static bool eval(unsigned long int l, mpz_srcptr z)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,l)) > 0; }
  static bool eval(mpz_srcptr z, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,(static_cast<unsigned long> (l)))) : __gmpz_cmp_si (z,l)) < 0; }
  static bool eval(signed long int l, mpz_srcptr z)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0) : __gmpz_cmp_ui (z,(static_cast<unsigned long> (l)))) : __gmpz_cmp_si (z,l)) > 0; }
  static bool eval(mpz_srcptr z, double d)
  { return __gmpz_cmp_d(z, d) < 0; }
  static bool eval(double d, mpz_srcptr z)
  { return __gmpz_cmp_d(z, d) > 0; }

  static bool eval(mpq_srcptr q, mpq_srcptr r) { return __gmpq_cmp(q, r) < 0; }

  static bool eval(mpq_srcptr q, unsigned long int l)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p ((l) == (1)) && (l) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,l,1)) < 0; }
  static bool eval(unsigned long int l, mpq_srcptr q)
  { return (__builtin_constant_p (l) && (l) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p ((l) == (1)) && (l) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,l,1)) > 0; }
  static bool eval(mpq_srcptr q, signed long int l)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (l))) == (1)) && ((static_cast<unsigned long> (l))) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,(static_cast<unsigned long> (l)),1)) : __gmpq_cmp_si (q, l, 1)) < 0; }
  static bool eval(signed long int l, mpq_srcptr q)
  { return (__builtin_constant_p ((l) >= 0) && (l) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (l))) && ((static_cast<unsigned long> (l))) == 0 ? ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (l))) == (1)) && ((static_cast<unsigned long> (l))) == (1) ? __gmpz_cmp ((&((q)->_mp_num)), (&((q)->_mp_den))) : __gmpq_cmp_ui (q,(static_cast<unsigned long> (l)),1)) : __gmpq_cmp_si (q, l, 1)) > 0; }
  static bool eval(mpq_srcptr q, double d)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); return __gmpq_cmp (q, temp) < 0; }
  static bool eval(double d, mpq_srcptr q)
  { mpq_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1 + (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1]; (&((temp)->_mp_num))->_mp_d = limbs; (&((temp)->_mp_num))->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_d = limbs + (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; (&((temp)->_mp_den))->_mp_alloc = (((53 +1-(-1021)) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpq_set_d (temp, d); return __gmpq_cmp (temp, q) < 0; }
  static bool eval(mpq_srcptr q, mpz_srcptr z)
  { return __gmpq_cmp_z(q, z) < 0; }
  static bool eval(mpz_srcptr z, mpq_srcptr q)
  { return __gmpq_cmp_z(q, z) > 0; }

  static bool eval(mpf_srcptr f, mpf_srcptr g) { return __gmpf_cmp(f, g) < 0; }

  static bool eval(mpf_srcptr f, unsigned long int l)
  { return __gmpf_cmp_ui(f, l) < 0; }
  static bool eval(unsigned long int l, mpf_srcptr f)
  { return __gmpf_cmp_ui(f, l) > 0; }
  static bool eval(mpf_srcptr f, signed long int l)
  { return __gmpf_cmp_si(f, l) < 0; }
  static bool eval(signed long int l, mpf_srcptr f)
  { return __gmpf_cmp_si(f, l) > 0; }
  static bool eval(mpf_srcptr f, double d)
  { return __gmpf_cmp_d(f, d) < 0; }
  static bool eval(double d, mpf_srcptr f)
  { return __gmpf_cmp_d(f, d) > 0; }
  static bool eval(mpf_srcptr f, mpz_srcptr z)
  { return __gmpf_cmp_z(f, z) < 0; }
  static bool eval(mpz_srcptr z, mpf_srcptr f)
  { return __gmpf_cmp_z(f, z) > 0; }
  static bool eval(mpf_srcptr f, mpq_srcptr q)
  { return __gmp_cmp_function::eval(f, q) < 0; }
  static bool eval(mpq_srcptr q, mpf_srcptr f)
  { return __gmp_cmp_function::eval(q, f) < 0; }
};

struct __gmp_binary_greater
{
  template <class T, class U>
  static inline bool eval(T t, U u) { return __gmp_binary_less::eval(u, t); }
};

struct __gmp_unary_increment
{
  static void eval(mpz_ptr z) { __gmpz_add_ui(z, z, 1); }
  static void eval(mpq_ptr q)
  { __gmpz_add((&((q)->_mp_num)), (&((q)->_mp_num)), (&((q)->_mp_den))); }
  static void eval(mpf_ptr f) { __gmpf_add_ui(f, f, 1); }
};

struct __gmp_unary_decrement
{
  static void eval(mpz_ptr z) { __gmpz_sub_ui(z, z, 1); }
  static void eval(mpq_ptr q)
  { __gmpz_sub((&((q)->_mp_num)), (&((q)->_mp_num)), (&((q)->_mp_den))); }
  static void eval(mpf_ptr f) { __gmpf_sub_ui(f, f, 1); }
};

struct __gmp_abs_function
{
  static void eval(mpz_ptr z, mpz_srcptr w) { __gmpz_abs(z, w); }
  static void eval(mpq_ptr q, mpq_srcptr r) { __gmpq_abs(q, r); }
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_abs(f, g); }
};

struct __gmp_trunc_function
{
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_trunc(f, g); }
};

struct __gmp_floor_function
{
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_floor(f, g); }
};

struct __gmp_ceil_function
{
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_ceil(f, g); }
};

struct __gmp_sqrt_function
{
  static void eval(mpz_ptr z, mpz_srcptr w) { __gmpz_sqrt(z, w); }
  static void eval(mpf_ptr f, mpf_srcptr g) { __gmpf_sqrt(f, g); }
};

struct __gmp_hypot_function
{
  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)
  {
    mpf_t temp;
    __gmpf_init2(temp, __gmpf_get_prec(f));
    __gmpf_mul(temp, g, g);
    __gmpf_mul(f, h, h);
    __gmpf_add(f, f, temp);
    __gmpf_sqrt(f, f);
    __gmpf_clear(temp);
  }

  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)
  {
    mpf_t temp;
    __gmpf_init2(temp, __gmpf_get_prec(f));
    __gmpf_mul(temp, g, g);
    __gmpf_set_ui(f, l);
    __gmpf_mul_ui(f, f, l);
    __gmpf_add(f, f, temp);
    __gmpf_clear(temp);
    __gmpf_sqrt(f, f);
  }
  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)
  { eval(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)
  { eval(f, g, __gmpxx_abs_ui(l)); }
  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)
  { eval(f, g, l); }
  static void eval(mpf_ptr f, mpf_srcptr g, double d)
  {
    mpf_t temp;
    __gmpf_init2(temp, __gmpf_get_prec(f));
    __gmpf_mul(temp, g, g);
    __gmpf_set_d(f, d);
    __gmpf_mul(f, f, f);
    __gmpf_add(f, f, temp);
    __gmpf_sqrt(f, f);
    __gmpf_clear(temp);
  }
  static void eval(mpf_ptr f, double d, mpf_srcptr g)
  { eval(f, g, d); }
};

struct __gmp_sgn_function
{
  static int eval(mpz_srcptr z) { return ((z)->_mp_size < 0 ? -1 : (z)->_mp_size > 0); }
  static int eval(mpq_srcptr q) { return ((q)->_mp_num._mp_size < 0 ? -1 : (q)->_mp_num._mp_size > 0); }
  static int eval(mpf_srcptr f) { return ((f)->_mp_size < 0 ? -1 : (f)->_mp_size > 0); }
};

struct __gmp_gcd_function
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_gcd(z, w, v); }
  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { __gmpz_gcd_ui(z, w, l); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  { eval(z, w, __gmpxx_abs_ui(l)); }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_gcd (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }
};

struct __gmp_lcm_function
{
  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  { __gmpz_lcm(z, w, v); }
  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
  { __gmpz_lcm_ui(z, w, l); }
  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
  { eval(z, w, __gmpxx_abs_ui(l)); }
  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
  { eval(z, w, l); }
  static void eval(mpz_ptr z, mpz_srcptr w, double d)
  { mpz_t temp; mp_limb_t limbs[(((1024) + ((64 - 0) - 1)) / (64 - 0))+1]; temp->_mp_d = limbs; temp->_mp_alloc = (((1024) + ((64 - 0) - 1)) / (64 - 0))+1; __gmpz_set_d (temp, d); __gmpz_lcm (z, w, temp); }
  static void eval(mpz_ptr z, double d, mpz_srcptr w)
  { eval(z, w, d); }
};

struct __gmp_rand_function
{
  static void eval(mpz_ptr z, gmp_randstate_t s, mp_bitcnt_t l)
  { __gmpz_urandomb(z, s, l); }
  static void eval(mpz_ptr z, gmp_randstate_t s, mpz_srcptr w)
  { __gmpz_urandomm(z, s, w); }
  static void eval(mpf_ptr f, gmp_randstate_t s, mp_bitcnt_t prec)
  { __gmpf_urandomb(f, s, prec); }
};
# 1204 "/usr/include/gmpxx.h" 3 4
extern "C" {
  typedef void (*__gmp_freefunc_t) (void *, size_t);
}
struct __gmp_alloc_cstring
{
  char *str;
  __gmp_alloc_cstring(char *s) { str = s; }
  ~__gmp_alloc_cstring()
  {
    __gmp_freefunc_t freefunc;
    __gmp_get_memory_functions (__null, __null, &freefunc);
    (*freefunc) (str, std::strlen(str)+1);
  }
};



template <class T, class U>
class __gmp_expr;



template <class T>
struct __gmp_resolve_ref
{
  typedef T ref_type;
};

template <class T, class U>
struct __gmp_resolve_ref<__gmp_expr<T, U> >
{
  typedef const __gmp_expr<T, U> & ref_type;
};


template <class T, class U = T>
struct __gmp_resolve_expr;

template <>
struct __gmp_resolve_expr<mpz_t>
{
  typedef mpz_t value_type;
  typedef mpz_ptr ptr_type;
  typedef mpz_srcptr srcptr_type;
};

template <>
struct __gmp_resolve_expr<mpq_t>
{
  typedef mpq_t value_type;
  typedef mpq_ptr ptr_type;
  typedef mpq_srcptr srcptr_type;
};

template <>
struct __gmp_resolve_expr<mpf_t>
{
  typedef mpf_t value_type;
  typedef mpf_ptr ptr_type;
  typedef mpf_srcptr srcptr_type;
};

template <>
struct __gmp_resolve_expr<mpz_t, mpq_t>
{
  typedef mpq_t value_type;
};

template <>
struct __gmp_resolve_expr<mpq_t, mpz_t>
{
  typedef mpq_t value_type;
};

template <>
struct __gmp_resolve_expr<mpz_t, mpf_t>
{
  typedef mpf_t value_type;
};

template <>
struct __gmp_resolve_expr<mpf_t, mpz_t>
{
  typedef mpf_t value_type;
};

template <>
struct __gmp_resolve_expr<mpq_t, mpf_t>
{
  typedef mpf_t value_type;
};

template <>
struct __gmp_resolve_expr<mpf_t, mpq_t>
{
  typedef mpf_t value_type;
};


namespace std {
  template <class T, class U, class V, class W>
  struct common_type <__gmp_expr<T, U>, __gmp_expr<V, W> >
  {
  private:
    typedef typename __gmp_resolve_expr<T, V>::value_type X;
  public:
    typedef __gmp_expr<X, X> type;
  };

  template <class T, class U>
  struct common_type <__gmp_expr<T, U> >
  {
    typedef __gmp_expr<T, T> type;
  };
# 1332 "/usr/include/gmpxx.h" 3 4
  template <class T, class U> struct common_type <__gmp_expr<T, U>, signed char > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <signed char, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, unsigned char > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <unsigned char, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, signed int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <signed int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, unsigned int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <unsigned int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, signed short int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <signed short int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, unsigned short int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <unsigned short int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, signed long int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <signed long int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, unsigned long int > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <unsigned long int, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, float > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <float, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };
  template <class T, class U> struct common_type <__gmp_expr<T, U>, double > { typedef __gmp_expr<T, T> type; }; template <class T, class U> struct common_type <double, __gmp_expr<T, U> > { typedef __gmp_expr<T, T> type; };

}



template <class T, class Op>
struct __gmp_unary_expr
{
  typename __gmp_resolve_ref<T>::ref_type val;

  __gmp_unary_expr(const T &v) : val(v) { }
private:
  __gmp_unary_expr();
};

template <class T, class U, class Op>
struct __gmp_binary_expr
{
  typename __gmp_resolve_ref<T>::ref_type val1;
  typename __gmp_resolve_ref<U>::ref_type val2;

  __gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }
private:
  __gmp_binary_expr();
};
# 1428 "/usr/include/gmpxx.h" 3 4
template <>
class __gmp_expr<mpz_t, mpz_t>
{
private:
  typedef mpz_t value_type;
  value_type mp;


  void assign_ui(unsigned long l)
  {
    if ((__builtin_constant_p(l == 0) && (l == 0)))
      mp->_mp_size = 0;
    else
      __gmpz_set_ui(mp, l);
  }
  void assign_si(signed long l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      assign_ui(l);
    else if ((__builtin_constant_p(l <= 0) && (l <= 0)))
      {
 assign_ui(-static_cast<unsigned long>(l));
 __gmpz_neg(mp, mp);
      }
    else
      __gmpz_set_si(mp, l);
  }
  void assign_d (double d)
  {
    __gmpz_set_d (mp, d);
  }

  void init_ui(unsigned long l)
  {
    if ((__builtin_constant_p(l == 0) && (l == 0)))
      __gmpz_init(mp);
    else
      __gmpz_init_set_ui(mp, l);
  }
  void init_si(signed long l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      init_ui(l);
    else if ((__builtin_constant_p(l <= 0) && (l <= 0)))
      {
 init_ui(-static_cast<unsigned long>(l));
 __gmpz_neg(mp, mp);
      }
    else
      __gmpz_init_set_si(mp, l);
  }
  void init_d (double d)
  {
    __gmpz_init_set_d (mp, d);
  }

public:
  mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); }


  __gmp_expr() { __gmpz_init(mp); }

  __gmp_expr(const __gmp_expr &z) { __gmpz_init_set(mp, z.mp); }

  __gmp_expr(__gmp_expr &&z)
  { *mp = *z.mp; __gmpz_init(z.mp); }

  template <class T>
  __gmp_expr(const __gmp_expr<mpz_t, T> &expr)
  { __gmpz_init(mp); __gmp_set_expr(mp, expr); }
  template <class T, class U>
  explicit __gmp_expr(const __gmp_expr<T, U> &expr)
  { __gmpz_init(mp); __gmp_set_expr(mp, expr); }

  __gmp_expr(signed char c) { init_si(c); } __gmp_expr(unsigned char c) { init_ui(c); } __gmp_expr(signed int i) { init_si(i); } __gmp_expr(unsigned int i) { init_ui(i); } __gmp_expr(signed short int s) { init_si(s); } __gmp_expr(unsigned short int s) { init_ui(s); } __gmp_expr(signed long int l) { init_si(l); } __gmp_expr(unsigned long int l) { init_ui(l); } __gmp_expr(float f) { init_d(f); } __gmp_expr(double d) { init_d(d); }

  explicit __gmp_expr(const char *s, int base = 0)
  {
    if (__gmpz_init_set_str (mp, s, base) != 0)
      {
        __gmpz_clear (mp);
        throw std::invalid_argument ("mpz_set_str");
      }
  }
  explicit __gmp_expr(const std::string &s, int base = 0)
  {
    if (__gmpz_init_set_str(mp, s.c_str(), base) != 0)
      {
        __gmpz_clear (mp);
        throw std::invalid_argument ("mpz_set_str");
      }
  }

  explicit __gmp_expr(mpz_srcptr z) { __gmpz_init_set(mp, z); }

  ~__gmp_expr() { __gmpz_clear(mp); }

  void swap(__gmp_expr& z) noexcept { std::swap(*mp, *z.mp); }


  __gmp_expr & operator=(const __gmp_expr &z)
  { __gmpz_set(mp, z.mp); return *this; }

  __gmp_expr & operator=(__gmp_expr &&z) noexcept
  { swap(z); return *this; }

  template <class T, class U>
  __gmp_expr<value_type, value_type> & operator=(const __gmp_expr<T, U> &expr)
  { __gmp_set_expr(mp, expr); return *this; }

  __gmp_expr & operator=(signed char c) { assign_si(c); return *this; } __gmp_expr & operator=(unsigned char c) { assign_ui(c); return *this; } __gmp_expr & operator=(signed int i) { assign_si(i); return *this; } __gmp_expr & operator=(unsigned int i) { assign_ui(i); return *this; } __gmp_expr & operator=(signed short int s) { assign_si(s); return *this; } __gmp_expr & operator=(unsigned short int s) { assign_ui(s); return *this; } __gmp_expr & operator=(signed long int l) { assign_si(l); return *this; } __gmp_expr & operator=(unsigned long int l) { assign_ui(l); return *this; } __gmp_expr & operator=(float f) { assign_d(f); return *this; } __gmp_expr & operator=(double d) { assign_d(d); return *this; }

  __gmp_expr & operator=(const char *s)
  {
    if (__gmpz_set_str (mp, s, 0) != 0)
      throw std::invalid_argument ("mpz_set_str");
    return *this;
  }
  __gmp_expr & operator=(const std::string &s)
  {
    if (__gmpz_set_str(mp, s.c_str(), 0) != 0)
      throw std::invalid_argument ("mpz_set_str");
    return *this;
  }


  int set_str(const char *s, int base)
  { return __gmpz_set_str(mp, s, base); }
  int set_str(const std::string &s, int base)
  { return __gmpz_set_str(mp, s.c_str(), base); }
  std::string get_str(int base = 10) const
  {
    __gmp_alloc_cstring temp(__gmpz_get_str(0, base, mp));
    return std::string(temp.str);
  }


  mpz_srcptr __get_mp() const { return mp; }
  mpz_ptr __get_mp() { return mp; }
  mpz_srcptr get_mpz_t() const { return mp; }
  mpz_ptr get_mpz_t() { return mp; }

  signed long int get_si() const { return __gmpz_get_si(mp); }
  unsigned long int get_ui() const { return __gmpz_get_ui(mp); }
  double get_d() const { return __gmpz_get_d(mp); }



  bool fits_sint_p() const { return __gmpz_fits_sint_p(mp); }
  bool fits_uint_p() const { return __gmpz_fits_uint_p(mp); }
  bool fits_sshort_p() const { return __gmpz_fits_sshort_p(mp); }
  bool fits_ushort_p() const { return __gmpz_fits_ushort_p(mp); }
  bool fits_slong_p() const { return __gmpz_fits_slong_p(mp); }
  bool fits_ulong_p() const { return __gmpz_fits_ulong_p(mp); }





  explicit operator bool() const { return mp->_mp_size != 0; }



  template <class T, class U> __gmp_expr<value_type, value_type> & operator+=(const __gmp_expr<T, U> &); __gmp_expr & operator+=(signed char); __gmp_expr & operator+=(unsigned char); __gmp_expr & operator+=(signed int); __gmp_expr & operator+=(unsigned int); __gmp_expr & operator+=(signed short int); __gmp_expr & operator+=(unsigned short int); __gmp_expr & operator+=(signed long int); __gmp_expr & operator+=(unsigned long int); __gmp_expr & operator+=(float); __gmp_expr & operator+=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator-=(const __gmp_expr<T, U> &); __gmp_expr & operator-=(signed char); __gmp_expr & operator-=(unsigned char); __gmp_expr & operator-=(signed int); __gmp_expr & operator-=(unsigned int); __gmp_expr & operator-=(signed short int); __gmp_expr & operator-=(unsigned short int); __gmp_expr & operator-=(signed long int); __gmp_expr & operator-=(unsigned long int); __gmp_expr & operator-=(float); __gmp_expr & operator-=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator*=(const __gmp_expr<T, U> &); __gmp_expr & operator*=(signed char); __gmp_expr & operator*=(unsigned char); __gmp_expr & operator*=(signed int); __gmp_expr & operator*=(unsigned int); __gmp_expr & operator*=(signed short int); __gmp_expr & operator*=(unsigned short int); __gmp_expr & operator*=(signed long int); __gmp_expr & operator*=(unsigned long int); __gmp_expr & operator*=(float); __gmp_expr & operator*=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator/=(const __gmp_expr<T, U> &); __gmp_expr & operator/=(signed char); __gmp_expr & operator/=(unsigned char); __gmp_expr & operator/=(signed int); __gmp_expr & operator/=(unsigned int); __gmp_expr & operator/=(signed short int); __gmp_expr & operator/=(unsigned short int); __gmp_expr & operator/=(signed long int); __gmp_expr & operator/=(unsigned long int); __gmp_expr & operator/=(float); __gmp_expr & operator/=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator%=(const __gmp_expr<T, U> &); __gmp_expr & operator%=(signed char); __gmp_expr & operator%=(unsigned char); __gmp_expr & operator%=(signed int); __gmp_expr & operator%=(unsigned int); __gmp_expr & operator%=(signed short int); __gmp_expr & operator%=(unsigned short int); __gmp_expr & operator%=(signed long int); __gmp_expr & operator%=(unsigned long int); __gmp_expr & operator%=(float); __gmp_expr & operator%=(double);

  template <class T, class U> __gmp_expr<value_type, value_type> & operator&=(const __gmp_expr<T, U> &); __gmp_expr & operator&=(signed char); __gmp_expr & operator&=(unsigned char); __gmp_expr & operator&=(signed int); __gmp_expr & operator&=(unsigned int); __gmp_expr & operator&=(signed short int); __gmp_expr & operator&=(unsigned short int); __gmp_expr & operator&=(signed long int); __gmp_expr & operator&=(unsigned long int); __gmp_expr & operator&=(float); __gmp_expr & operator&=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator|=(const __gmp_expr<T, U> &); __gmp_expr & operator|=(signed char); __gmp_expr & operator|=(unsigned char); __gmp_expr & operator|=(signed int); __gmp_expr & operator|=(unsigned int); __gmp_expr & operator|=(signed short int); __gmp_expr & operator|=(unsigned short int); __gmp_expr & operator|=(signed long int); __gmp_expr & operator|=(unsigned long int); __gmp_expr & operator|=(float); __gmp_expr & operator|=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator^=(const __gmp_expr<T, U> &); __gmp_expr & operator^=(signed char); __gmp_expr & operator^=(unsigned char); __gmp_expr & operator^=(signed int); __gmp_expr & operator^=(unsigned int); __gmp_expr & operator^=(signed short int); __gmp_expr & operator^=(unsigned short int); __gmp_expr & operator^=(signed long int); __gmp_expr & operator^=(unsigned long int); __gmp_expr & operator^=(float); __gmp_expr & operator^=(double);

  __gmp_expr & operator<<=(mp_bitcnt_t);
  __gmp_expr & operator>>=(mp_bitcnt_t);

  inline __gmp_expr & operator++(); inline __gmp_expr operator++(int);
  inline __gmp_expr & operator--(); inline __gmp_expr operator--(int);
};

typedef __gmp_expr<mpz_t, mpz_t> mpz_class;




template <>
class __gmp_expr<mpq_t, mpq_t>
{
private:
  typedef mpq_t value_type;
  value_type mp;


  void assign_ui(unsigned long l) { __gmpq_set_ui(mp, l, 1); }
  void assign_si(signed long l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      assign_ui(l);
    else
      __gmpq_set_si(mp, l, 1);
  }
  void assign_d (double d) { __gmpq_set_d (mp, d); }

  void init_ui(unsigned long l) { __gmpq_init(mp); get_num() = l; }
  void init_si(signed long l) { __gmpq_init(mp); get_num() = l; }
  void init_d (double d) { __gmpq_init(mp); assign_d (d); }

public:
  mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); }
  void canonicalize() { __gmpq_canonicalize(mp); }


  __gmp_expr() { __gmpq_init(mp); }

  __gmp_expr(const __gmp_expr &q)
  {
    __gmpz_init_set((&((mp)->_mp_num)), (&((q.mp)->_mp_num)));
    __gmpz_init_set((&((mp)->_mp_den)), (&((q.mp)->_mp_den)));
  }

  __gmp_expr(__gmp_expr &&q)
  { *mp = *q.mp; __gmpq_init(q.mp); }

  template <class T>
  __gmp_expr(const __gmp_expr<mpz_t, T> &expr)
  { __gmpq_init(mp); __gmp_set_expr(mp, expr); }
  template <class T>
  __gmp_expr(const __gmp_expr<mpq_t, T> &expr)
  { __gmpq_init(mp); __gmp_set_expr(mp, expr); }
  template <class T, class U>
  explicit __gmp_expr(const __gmp_expr<T, U> &expr)
  { __gmpq_init(mp); __gmp_set_expr(mp, expr); }

  __gmp_expr(signed char c) { init_si(c); } __gmp_expr(unsigned char c) { init_ui(c); } __gmp_expr(signed int i) { init_si(i); } __gmp_expr(unsigned int i) { init_ui(i); } __gmp_expr(signed short int s) { init_si(s); } __gmp_expr(unsigned short int s) { init_ui(s); } __gmp_expr(signed long int l) { init_si(l); } __gmp_expr(unsigned long int l) { init_ui(l); } __gmp_expr(float f) { init_d(f); } __gmp_expr(double d) { init_d(d); }

  explicit __gmp_expr(const char *s, int base = 0)
  {
    __gmpq_init (mp);


    if (s == 0)
      {

 __gmpz_set_si((&((mp)->_mp_den)), base);
      }
    else if (__gmpq_set_str(mp, s, base) != 0)
      {
        __gmpq_clear (mp);
        throw std::invalid_argument ("mpq_set_str");
      }
  }
  explicit __gmp_expr(const std::string &s, int base = 0)
  {
    __gmpq_init(mp);
    if (__gmpq_set_str (mp, s.c_str(), base) != 0)
      {
        __gmpq_clear (mp);
        throw std::invalid_argument ("mpq_set_str");
      }
  }
  explicit __gmp_expr(mpq_srcptr q)
  {
    __gmpz_init_set((&((mp)->_mp_num)), (&((q)->_mp_num)));
    __gmpz_init_set((&((mp)->_mp_den)), (&((q)->_mp_den)));
  }

  __gmp_expr(const mpz_class &num, const mpz_class &den)
  {
    __gmpz_init_set((&((mp)->_mp_num)), num.get_mpz_t());
    __gmpz_init_set((&((mp)->_mp_den)), den.get_mpz_t());
  }

  ~__gmp_expr() { __gmpq_clear(mp); }

  void swap(__gmp_expr& q) noexcept { std::swap(*mp, *q.mp); }


  __gmp_expr & operator=(const __gmp_expr &q)
  { __gmpq_set(mp, q.mp); return *this; }

  __gmp_expr & operator=(__gmp_expr &&q) noexcept
  { swap(q); return *this; }
  __gmp_expr & operator=(mpz_class &&z) noexcept
  { get_num() = std::move(z); get_den() = 1u; return *this; }

  template <class T, class U>
  __gmp_expr<value_type, value_type> & operator=(const __gmp_expr<T, U> &expr)
  { __gmp_set_expr(mp, expr); return *this; }

  __gmp_expr & operator=(signed char c) { assign_si(c); return *this; } __gmp_expr & operator=(unsigned char c) { assign_ui(c); return *this; } __gmp_expr & operator=(signed int i) { assign_si(i); return *this; } __gmp_expr & operator=(unsigned int i) { assign_ui(i); return *this; } __gmp_expr & operator=(signed short int s) { assign_si(s); return *this; } __gmp_expr & operator=(unsigned short int s) { assign_ui(s); return *this; } __gmp_expr & operator=(signed long int l) { assign_si(l); return *this; } __gmp_expr & operator=(unsigned long int l) { assign_ui(l); return *this; } __gmp_expr & operator=(float f) { assign_d(f); return *this; } __gmp_expr & operator=(double d) { assign_d(d); return *this; }

  __gmp_expr & operator=(const char *s)
  {
    if (__gmpq_set_str (mp, s, 0) != 0)
      throw std::invalid_argument ("mpq_set_str");
    return *this;
  }
  __gmp_expr & operator=(const std::string &s)
  {
    if (__gmpq_set_str(mp, s.c_str(), 0) != 0)
      throw std::invalid_argument ("mpq_set_str");
    return *this;
  }


  int set_str(const char *s, int base)
  { return __gmpq_set_str(mp, s, base); }
  int set_str(const std::string &s, int base)
  { return __gmpq_set_str(mp, s.c_str(), base); }
  std::string get_str(int base = 10) const
  {
    __gmp_alloc_cstring temp(__gmpq_get_str(0, base, mp));
    return std::string(temp.str);
  }






  const mpz_class & get_num() const
  { return reinterpret_cast<const mpz_class &>(*(&((mp)->_mp_num))); }
  mpz_class & get_num()
  { return reinterpret_cast<mpz_class &>(*(&((mp)->_mp_num))); }
  const mpz_class & get_den() const
  { return reinterpret_cast<const mpz_class &>(*(&((mp)->_mp_den))); }
  mpz_class & get_den()
  { return reinterpret_cast<mpz_class &>(*(&((mp)->_mp_den))); }

  mpq_srcptr __get_mp() const { return mp; }
  mpq_ptr __get_mp() { return mp; }
  mpq_srcptr get_mpq_t() const { return mp; }
  mpq_ptr get_mpq_t() { return mp; }

  mpz_srcptr get_num_mpz_t() const { return (&((mp)->_mp_num)); }
  mpz_ptr get_num_mpz_t() { return (&((mp)->_mp_num)); }
  mpz_srcptr get_den_mpz_t() const { return (&((mp)->_mp_den)); }
  mpz_ptr get_den_mpz_t() { return (&((mp)->_mp_den)); }

  double get_d() const { return __gmpq_get_d(mp); }


  explicit operator bool() const { return (&((mp)->_mp_num))->_mp_size != 0; }



  template <class T, class U> __gmp_expr<value_type, value_type> & operator+=(const __gmp_expr<T, U> &); __gmp_expr & operator+=(signed char); __gmp_expr & operator+=(unsigned char); __gmp_expr & operator+=(signed int); __gmp_expr & operator+=(unsigned int); __gmp_expr & operator+=(signed short int); __gmp_expr & operator+=(unsigned short int); __gmp_expr & operator+=(signed long int); __gmp_expr & operator+=(unsigned long int); __gmp_expr & operator+=(float); __gmp_expr & operator+=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator-=(const __gmp_expr<T, U> &); __gmp_expr & operator-=(signed char); __gmp_expr & operator-=(unsigned char); __gmp_expr & operator-=(signed int); __gmp_expr & operator-=(unsigned int); __gmp_expr & operator-=(signed short int); __gmp_expr & operator-=(unsigned short int); __gmp_expr & operator-=(signed long int); __gmp_expr & operator-=(unsigned long int); __gmp_expr & operator-=(float); __gmp_expr & operator-=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator*=(const __gmp_expr<T, U> &); __gmp_expr & operator*=(signed char); __gmp_expr & operator*=(unsigned char); __gmp_expr & operator*=(signed int); __gmp_expr & operator*=(unsigned int); __gmp_expr & operator*=(signed short int); __gmp_expr & operator*=(unsigned short int); __gmp_expr & operator*=(signed long int); __gmp_expr & operator*=(unsigned long int); __gmp_expr & operator*=(float); __gmp_expr & operator*=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator/=(const __gmp_expr<T, U> &); __gmp_expr & operator/=(signed char); __gmp_expr & operator/=(unsigned char); __gmp_expr & operator/=(signed int); __gmp_expr & operator/=(unsigned int); __gmp_expr & operator/=(signed short int); __gmp_expr & operator/=(unsigned short int); __gmp_expr & operator/=(signed long int); __gmp_expr & operator/=(unsigned long int); __gmp_expr & operator/=(float); __gmp_expr & operator/=(double);

  __gmp_expr & operator<<=(mp_bitcnt_t);
  __gmp_expr & operator>>=(mp_bitcnt_t);

  inline __gmp_expr & operator++(); inline __gmp_expr operator++(int);
  inline __gmp_expr & operator--(); inline __gmp_expr operator--(int);
};

typedef __gmp_expr<mpq_t, mpq_t> mpq_class;




template <>
class __gmp_expr<mpf_t, mpf_t>
{
private:
  typedef mpf_t value_type;
  value_type mp;


  void assign_ui(unsigned long l) { __gmpf_set_ui(mp, l); }
  void assign_si(signed long l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      assign_ui(l);
    else
      __gmpf_set_si(mp, l);
  }
  void assign_d (double d) { __gmpf_set_d (mp, d); }

  void init_ui(unsigned long l)
  {
    if ((__builtin_constant_p(l == 0) && (l == 0)))
      __gmpf_init(mp);
    else
      __gmpf_init_set_ui(mp, l);
  }
  void init_si(signed long l)
  {
    if ((__builtin_constant_p(l >= 0) && (l >= 0)))
      init_ui(l);
    else
      __gmpf_init_set_si(mp, l);
  }
  void init_d (double d) { __gmpf_init_set_d (mp, d); }

public:
  mp_bitcnt_t get_prec() const { return __gmpf_get_prec(mp); }

  void set_prec(mp_bitcnt_t prec) { __gmpf_set_prec(mp, prec); }
  void set_prec_raw(mp_bitcnt_t prec) { __gmpf_set_prec_raw(mp, prec); }


  __gmp_expr() { __gmpf_init(mp); }

  __gmp_expr(const __gmp_expr &f)
  { __gmpf_init2(mp, f.get_prec()); __gmpf_set(mp, f.mp); }

  __gmp_expr(__gmp_expr &&f)
  { *mp = *f.mp; __gmpf_init2(f.mp, get_prec()); }

  __gmp_expr(const __gmp_expr &f, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set(mp, f.mp); }
  template <class T, class U>
  __gmp_expr(const __gmp_expr<T, U> &expr)
  { __gmpf_init2(mp, expr.get_prec()); __gmp_set_expr(mp, expr); }
  template <class T, class U>
  __gmp_expr(const __gmp_expr<T, U> &expr, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmp_set_expr(mp, expr); }

  __gmp_expr(signed char c) { init_si(c); } __gmp_expr(unsigned char c) { init_ui(c); } __gmp_expr(signed int i) { init_si(i); } __gmp_expr(unsigned int i) { init_ui(i); } __gmp_expr(signed short int s) { init_si(s); } __gmp_expr(unsigned short int s) { init_ui(s); } __gmp_expr(signed long int l) { init_si(l); } __gmp_expr(unsigned long int l) { init_ui(l); } __gmp_expr(float f) { init_d(f); } __gmp_expr(double d) { init_d(d); }

  __gmp_expr(signed char c, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_si(mp, c); }
  __gmp_expr(unsigned char c, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_ui(mp, c); }

  __gmp_expr(signed int i, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_si(mp, i); }
  __gmp_expr(unsigned int i, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_ui(mp, i); }

  __gmp_expr(signed short int s, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_si(mp, s); }
  __gmp_expr(unsigned short int s, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_ui(mp, s); }

  __gmp_expr(signed long int l, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_si(mp, l); }
  __gmp_expr(unsigned long int l, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_ui(mp, l); }

  __gmp_expr(float f, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_d(mp, f); }
  __gmp_expr(double d, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set_d(mp, d); }




  explicit __gmp_expr(const char *s)
  {
    if (__gmpf_init_set_str (mp, s, 0) != 0)
      {
        __gmpf_clear (mp);
        throw std::invalid_argument ("mpf_set_str");
      }
  }
  __gmp_expr(const char *s, mp_bitcnt_t prec, int base = 0)
  {
    __gmpf_init2(mp, prec);
    if (__gmpf_set_str(mp, s, base) != 0)
      {
        __gmpf_clear (mp);
        throw std::invalid_argument ("mpf_set_str");
      }
  }
  explicit __gmp_expr(const std::string &s)
  {
    if (__gmpf_init_set_str(mp, s.c_str(), 0) != 0)
      {
        __gmpf_clear (mp);
        throw std::invalid_argument ("mpf_set_str");
      }
  }
  __gmp_expr(const std::string &s, mp_bitcnt_t prec, int base = 0)
  {
    __gmpf_init2(mp, prec);
    if (__gmpf_set_str(mp, s.c_str(), base) != 0)
      {
        __gmpf_clear (mp);
        throw std::invalid_argument ("mpf_set_str");
      }
  }

  explicit __gmp_expr(mpf_srcptr f)
  { __gmpf_init2(mp, __gmpf_get_prec(f)); __gmpf_set(mp, f); }
  __gmp_expr(mpf_srcptr f, mp_bitcnt_t prec)
  { __gmpf_init2(mp, prec); __gmpf_set(mp, f); }

  ~__gmp_expr() { __gmpf_clear(mp); }

  void swap(__gmp_expr& f) noexcept { std::swap(*mp, *f.mp); }


  __gmp_expr & operator=(const __gmp_expr &f)
  { __gmpf_set(mp, f.mp); return *this; }

  __gmp_expr & operator=(__gmp_expr &&f) noexcept
  { swap(f); return *this; }

  template <class T, class U>
  __gmp_expr<value_type, value_type> & operator=(const __gmp_expr<T, U> &expr)
  { __gmp_set_expr(mp, expr); return *this; }

  __gmp_expr & operator=(signed char c) { assign_si(c); return *this; } __gmp_expr & operator=(unsigned char c) { assign_ui(c); return *this; } __gmp_expr & operator=(signed int i) { assign_si(i); return *this; } __gmp_expr & operator=(unsigned int i) { assign_ui(i); return *this; } __gmp_expr & operator=(signed short int s) { assign_si(s); return *this; } __gmp_expr & operator=(unsigned short int s) { assign_ui(s); return *this; } __gmp_expr & operator=(signed long int l) { assign_si(l); return *this; } __gmp_expr & operator=(unsigned long int l) { assign_ui(l); return *this; } __gmp_expr & operator=(float f) { assign_d(f); return *this; } __gmp_expr & operator=(double d) { assign_d(d); return *this; }

  __gmp_expr & operator=(const char *s)
  {
    if (__gmpf_set_str (mp, s, 0) != 0)
      throw std::invalid_argument ("mpf_set_str");
    return *this;
  }
  __gmp_expr & operator=(const std::string &s)
  {
    if (__gmpf_set_str(mp, s.c_str(), 0) != 0)
      throw std::invalid_argument ("mpf_set_str");
    return *this;
  }


  int set_str(const char *s, int base)
  { return __gmpf_set_str(mp, s, base); }
  int set_str(const std::string &s, int base)
  { return __gmpf_set_str(mp, s.c_str(), base); }
  std::string get_str(mp_exp_t &expo, int base = 10, size_t size = 0) const
  {
    __gmp_alloc_cstring temp(__gmpf_get_str(0, &expo, base, size, mp));
    return std::string(temp.str);
  }


  mpf_srcptr __get_mp() const { return mp; }
  mpf_ptr __get_mp() { return mp; }
  mpf_srcptr get_mpf_t() const { return mp; }
  mpf_ptr get_mpf_t() { return mp; }

  signed long int get_si() const { return __gmpf_get_si(mp); }
  unsigned long int get_ui() const { return __gmpf_get_ui(mp); }
  double get_d() const { return __gmpf_get_d(mp); }



  bool fits_sint_p() const { return __gmpf_fits_sint_p(mp); }
  bool fits_uint_p() const { return __gmpf_fits_uint_p(mp); }
  bool fits_sshort_p() const { return __gmpf_fits_sshort_p(mp); }
  bool fits_ushort_p() const { return __gmpf_fits_ushort_p(mp); }
  bool fits_slong_p() const { return __gmpf_fits_slong_p(mp); }
  bool fits_ulong_p() const { return __gmpf_fits_ulong_p(mp); }





  explicit operator bool() const { return mp->_mp_size != 0; }



  template <class T, class U> __gmp_expr<value_type, value_type> & operator+=(const __gmp_expr<T, U> &); __gmp_expr & operator+=(signed char); __gmp_expr & operator+=(unsigned char); __gmp_expr & operator+=(signed int); __gmp_expr & operator+=(unsigned int); __gmp_expr & operator+=(signed short int); __gmp_expr & operator+=(unsigned short int); __gmp_expr & operator+=(signed long int); __gmp_expr & operator+=(unsigned long int); __gmp_expr & operator+=(float); __gmp_expr & operator+=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator-=(const __gmp_expr<T, U> &); __gmp_expr & operator-=(signed char); __gmp_expr & operator-=(unsigned char); __gmp_expr & operator-=(signed int); __gmp_expr & operator-=(unsigned int); __gmp_expr & operator-=(signed short int); __gmp_expr & operator-=(unsigned short int); __gmp_expr & operator-=(signed long int); __gmp_expr & operator-=(unsigned long int); __gmp_expr & operator-=(float); __gmp_expr & operator-=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator*=(const __gmp_expr<T, U> &); __gmp_expr & operator*=(signed char); __gmp_expr & operator*=(unsigned char); __gmp_expr & operator*=(signed int); __gmp_expr & operator*=(unsigned int); __gmp_expr & operator*=(signed short int); __gmp_expr & operator*=(unsigned short int); __gmp_expr & operator*=(signed long int); __gmp_expr & operator*=(unsigned long int); __gmp_expr & operator*=(float); __gmp_expr & operator*=(double);
  template <class T, class U> __gmp_expr<value_type, value_type> & operator/=(const __gmp_expr<T, U> &); __gmp_expr & operator/=(signed char); __gmp_expr & operator/=(unsigned char); __gmp_expr & operator/=(signed int); __gmp_expr & operator/=(unsigned int); __gmp_expr & operator/=(signed short int); __gmp_expr & operator/=(unsigned short int); __gmp_expr & operator/=(signed long int); __gmp_expr & operator/=(unsigned long int); __gmp_expr & operator/=(float); __gmp_expr & operator/=(double);

  __gmp_expr & operator<<=(mp_bitcnt_t);
  __gmp_expr & operator>>=(mp_bitcnt_t);

  inline __gmp_expr & operator++(); inline __gmp_expr operator++(int);
  inline __gmp_expr & operator--(); inline __gmp_expr operator--(int);
};

typedef __gmp_expr<mpf_t, mpf_t> mpf_class;






inline mpz_class operator"" _mpz(const char* s)
{
  return mpz_class(s);
}

inline mpq_class operator"" _mpq(const char* s)
{
  mpq_class q;
  q.get_num() = s;
  return q;
}

inline mpf_class operator"" _mpf(const char* s)
{
  return mpf_class(s);
}






template <class T, class U>
inline std::ostream & operator<<
(std::ostream &o, const __gmp_expr<T, U> &expr)
{
  __gmp_expr<T, T> const& temp(expr);
  return o << temp.__get_mp();
}

template <class T>
inline std::istream & operator>>(std::istream &i, __gmp_expr<T, T> &expr)
{
  return i >> expr.__get_mp();
}
# 2055 "/usr/include/gmpxx.h" 3 4
inline void __gmp_set_expr(mpz_ptr z, const mpz_class &w)
{
  __gmpz_set(z, w.get_mpz_t());
}

template <class T>
inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpz_t, T> &expr)
{
  expr.eval(z);
}

template <class T>
inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpq_t, T> &expr)
{
  mpq_class const& temp(expr);
  __gmpz_set_q(z, temp.get_mpq_t());
}

template <class T>
inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpf_t, T> &expr)
{
  mpf_class const& temp(expr);
  __gmpz_set_f(z, temp.get_mpf_t());
}

inline void __gmp_set_expr(mpq_ptr q, const mpz_class &z)
{
  __gmpq_set_z(q, z.get_mpz_t());
}

template <class T>
inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpz_t, T> &expr)
{
  __gmp_set_expr((&((q)->_mp_num)), expr);
  __gmpz_set_ui((&((q)->_mp_den)), 1);
}

inline void __gmp_set_expr(mpq_ptr q, const mpq_class &r)
{
  __gmpq_set(q, r.get_mpq_t());
}

template <class T>
inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpq_t, T> &expr)
{
  expr.eval(q);
}

template <class T>
inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpf_t, T> &expr)
{
  mpf_class const& temp(expr);
  __gmpq_set_f(q, temp.get_mpf_t());
}

template <class T>
inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpz_t, T> &expr)
{
  mpz_class const& temp(expr);
  __gmpf_set_z(f, temp.get_mpz_t());
}

template <class T>
inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpq_t, T> &expr)
{
  mpq_class const& temp(expr);
  __gmpf_set_q(f, temp.get_mpq_t());
}

inline void __gmp_set_expr(mpf_ptr f, const mpf_class &g)
{
  __gmpf_set(f, g.get_mpf_t());
}

template <class T>
inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpf_t, T> &expr)
{
  expr.eval(f);
}




template <class T>
class __gmp_temp
{
  __gmp_expr<T, T> val;
  public:
  template<class U, class V>
  __gmp_temp(U const& u, V) : val (u) {}
  typename __gmp_resolve_expr<T>::srcptr_type
  __get_mp() const { return val.__get_mp(); }
};

template <>
class __gmp_temp <mpf_t>
{
  mpf_class val;
  public:
  template<class U>
  __gmp_temp(U const& u, mpf_ptr res) : val (u, __gmpf_get_prec(res)) {}
  mpf_srcptr __get_mp() const { return val.__get_mp(); }
};
# 2178 "/usr/include/gmpxx.h" 3 4
template <class T, class Op>
class __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, T>, Op> >
{
private:
  typedef __gmp_expr<T, T> val_type;

  __gmp_unary_expr<val_type, Op> expr;
public:
  explicit __gmp_expr(const val_type &val) : expr(val) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { Op::eval(p, expr.val.__get_mp()); }
  const val_type & get_val() const { return expr.val; }
  mp_bitcnt_t get_prec() const { return expr.val.get_prec(); }
};




template <class T, class U, class Op>
class __gmp_expr<T, __gmp_unary_expr<U, Op> >
{
private:
  typedef U val_type;

  __gmp_unary_expr<val_type, Op> expr;
public:
  explicit __gmp_expr(const val_type &val) : expr(val) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { Op::eval(p, expr.val); }
  const val_type & get_val() const { return expr.val; }
  mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); }
};




template <class T, class U, class Op>
class __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, Op> >
{
private:
  typedef __gmp_expr<T, U> val_type;

  __gmp_unary_expr<val_type, Op> expr;
public:
  explicit __gmp_expr(const val_type &val) : expr(val) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { expr.val.eval(p); Op::eval(p, p); }
  const val_type & get_val() const { return expr.val; }
  mp_bitcnt_t get_prec() const { return expr.val.get_prec(); }
};
# 2242 "/usr/include/gmpxx.h" 3 4
template <class T, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >
{
private:
  typedef __gmp_expr<T, T> val1_type;
  typedef __gmp_expr<T, T> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { Op::eval(p, expr.val1.__get_mp(), expr.val2.__get_mp()); }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};




template <class T, class U, class Op>
class __gmp_expr<T, __gmp_binary_expr<__gmp_expr<T, T>, U, Op> >
{
private:
  typedef __gmp_expr<T, T> val1_type;
  typedef U val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { Op::eval(p, expr.val1.__get_mp(), expr.val2); }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const { return expr.val1.get_prec(); }
};

template <class T, class U, class Op>
class __gmp_expr<T, __gmp_binary_expr<U, __gmp_expr<T, T>, Op> >
{
private:
  typedef U val1_type;
  typedef __gmp_expr<T, T> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  { Op::eval(p, expr.val1, expr.val2.__get_mp()); }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const { return expr.val2.get_prec(); }
};




template <class T, class U, class V, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<U, V>, Op> >
{
private:
  typedef __gmp_expr<T, T> val1_type;
  typedef __gmp_expr<U, V> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    if(p != expr.val1.__get_mp())
    {
      __gmp_set_expr(p, expr.val2);
      Op::eval(p, expr.val1.__get_mp(), p);
    }
    else
    {
      __gmp_temp<T> temp(expr.val2, p);
      Op::eval(p, expr.val1.__get_mp(), temp.__get_mp());
    }
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};

template <class T, class U, class V, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<U, V>, __gmp_expr<T, T>, Op> >
{
private:
  typedef __gmp_expr<U, V> val1_type;
  typedef __gmp_expr<T, T> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    if(p != expr.val2.__get_mp())
    {
      __gmp_set_expr(p, expr.val1);
      Op::eval(p, p, expr.val2.__get_mp());
    }
    else
    {
      __gmp_temp<T> temp(expr.val1, p);
      Op::eval(p, temp.__get_mp(), expr.val2.__get_mp());
    }
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};

template <class T, class U, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, U>, Op> >
{
private:
  typedef __gmp_expr<T, T> val1_type;
  typedef __gmp_expr<T, U> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    if(p != expr.val1.__get_mp())
    {
      __gmp_set_expr(p, expr.val2);
      Op::eval(p, expr.val1.__get_mp(), p);
    }
    else
    {
      __gmp_temp<T> temp(expr.val2, p);
      Op::eval(p, expr.val1.__get_mp(), temp.__get_mp());
    }
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};

template <class T, class U, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<T, T>, Op> >
{
private:
  typedef __gmp_expr<T, U> val1_type;
  typedef __gmp_expr<T, T> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    if(p != expr.val2.__get_mp())
    {
      __gmp_set_expr(p, expr.val1);
      Op::eval(p, p, expr.val2.__get_mp());
    }
    else
    {
      __gmp_temp<T> temp(expr.val1, p);
      Op::eval(p, temp.__get_mp(), expr.val2.__get_mp());
    }
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};




template <class T, class U, class V, class Op>
class __gmp_expr<T, __gmp_binary_expr<__gmp_expr<T, U>, V, Op> >
{
private:
  typedef __gmp_expr<T, U> val1_type;
  typedef V val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    expr.val1.eval(p);
    Op::eval(p, p, expr.val2);
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const { return expr.val1.get_prec(); }
};

template <class T, class U, class V, class Op>
class __gmp_expr<T, __gmp_binary_expr<U, __gmp_expr<T, V>, Op> >
{
private:
  typedef U val1_type;
  typedef __gmp_expr<T, V> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    expr.val2.eval(p);
    Op::eval(p, expr.val1, p);
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const { return expr.val2.get_prec(); }
};




template <class T, class U, class V, class W, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, Op> >
{
private:
  typedef __gmp_expr<T, U> val1_type;
  typedef __gmp_expr<V, W> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    __gmp_temp<T> temp2(expr.val2, p);
    expr.val1.eval(p);
    Op::eval(p, p, temp2.__get_mp());
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};

template <class T, class U, class V, class W, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<U, V>, __gmp_expr<T, W>, Op> >
{
private:
  typedef __gmp_expr<U, V> val1_type;
  typedef __gmp_expr<T, W> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    __gmp_temp<T> temp1(expr.val1, p);
    expr.val2.eval(p);
    Op::eval(p, temp1.__get_mp(), p);
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};

template <class T, class U, class V, class Op>
class __gmp_expr
<T, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<T, V>, Op> >
{
private:
  typedef __gmp_expr<T, U> val1_type;
  typedef __gmp_expr<T, V> val2_type;

  __gmp_binary_expr<val1_type, val2_type, Op> expr;
public:
  __gmp_expr(const val1_type &val1, const val2_type &val2)
    : expr(val1, val2) { }
  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
  {
    __gmp_temp<T> temp2(expr.val2, p);
    expr.val1.eval(p);
    Op::eval(p, p, temp2.__get_mp());
  }
  const val1_type & get_val1() const { return expr.val1; }
  const val2_type & get_val2() const { return expr.val2; }
  mp_bitcnt_t get_prec() const
  {
    mp_bitcnt_t prec1 = expr.val1.get_prec(),
      prec2 = expr.val2.get_prec();
    return (prec1 > prec2) ? prec1 : prec2;
  }
};
# 2761 "/usr/include/gmpxx.h" 3 4
template <> class __gmp_expr<mpq_t, __gmp_binary_expr<mpz_class, mpq_class, __gmp_binary_plus> > { private: typedef mpz_class val1_type; typedef mpq_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { __gmp_binary_plus::eval(q, expr.val1.get_mpz_t(), expr.val2.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <> class __gmp_expr<mpq_t, __gmp_binary_expr<mpq_class, mpz_class, __gmp_binary_plus> > { private: typedef mpq_class val1_type; typedef mpz_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { __gmp_binary_plus::eval(q, expr.val1.get_mpq_t(), expr.val2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<mpz_class, __gmp_expr<mpq_t, T>, __gmp_binary_plus> > { private: typedef mpz_class val1_type; typedef __gmp_expr<mpq_t, T> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpq_class temp(expr.val2); __gmp_binary_plus::eval(q, expr.val1.get_mpz_t(), temp.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<mpq_class, __gmp_expr<mpz_t, T>, __gmp_binary_plus> > { private: typedef mpq_class val1_type; typedef __gmp_expr<mpz_t, T> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp(expr.val2); __gmp_binary_plus::eval(q, expr.val1.get_mpq_t(), temp.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<__gmp_expr<mpz_t, T>, mpq_class, __gmp_binary_plus> > { private: typedef __gmp_expr<mpz_t, T> val1_type; typedef mpq_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp(expr.val1); __gmp_binary_plus::eval(q, temp.get_mpz_t(), expr.val2.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<__gmp_expr<mpq_t, T>, mpz_class, __gmp_binary_plus> > { private: typedef __gmp_expr<mpq_t, T> val1_type; typedef mpz_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpq_class temp(expr.val1); __gmp_binary_plus::eval(q, temp.get_mpq_t(), expr.val2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T, class U> class __gmp_expr<mpq_t, __gmp_binary_expr <__gmp_expr<mpz_t, T>, __gmp_expr<mpq_t, U>, __gmp_binary_plus> > { private: typedef __gmp_expr<mpz_t, T> val1_type; typedef __gmp_expr<mpq_t, U> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp1(expr.val1); expr.val2.eval(q); __gmp_binary_plus::eval(q, temp1.get_mpz_t(), q); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T, class U> class __gmp_expr<mpq_t, __gmp_binary_expr <__gmp_expr<mpq_t, T>, __gmp_expr<mpz_t, U>, __gmp_binary_plus> > { private: typedef __gmp_expr<mpq_t, T> val1_type; typedef __gmp_expr<mpz_t, U> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_plus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp2(expr.val2); expr.val1.eval(q); __gmp_binary_plus::eval(q, q, temp2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } };
template <> class __gmp_expr<mpq_t, __gmp_binary_expr<mpz_class, mpq_class, __gmp_binary_minus> > { private: typedef mpz_class val1_type; typedef mpq_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { __gmp_binary_minus::eval(q, expr.val1.get_mpz_t(), expr.val2.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <> class __gmp_expr<mpq_t, __gmp_binary_expr<mpq_class, mpz_class, __gmp_binary_minus> > { private: typedef mpq_class val1_type; typedef mpz_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { __gmp_binary_minus::eval(q, expr.val1.get_mpq_t(), expr.val2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<mpz_class, __gmp_expr<mpq_t, T>, __gmp_binary_minus> > { private: typedef mpz_class val1_type; typedef __gmp_expr<mpq_t, T> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpq_class temp(expr.val2); __gmp_binary_minus::eval(q, expr.val1.get_mpz_t(), temp.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<mpq_class, __gmp_expr<mpz_t, T>, __gmp_binary_minus> > { private: typedef mpq_class val1_type; typedef __gmp_expr<mpz_t, T> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp(expr.val2); __gmp_binary_minus::eval(q, expr.val1.get_mpq_t(), temp.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<__gmp_expr<mpz_t, T>, mpq_class, __gmp_binary_minus> > { private: typedef __gmp_expr<mpz_t, T> val1_type; typedef mpq_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp(expr.val1); __gmp_binary_minus::eval(q, temp.get_mpz_t(), expr.val2.get_mpq_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T> class __gmp_expr <mpq_t, __gmp_binary_expr<__gmp_expr<mpq_t, T>, mpz_class, __gmp_binary_minus> > { private: typedef __gmp_expr<mpq_t, T> val1_type; typedef mpz_class val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpq_class temp(expr.val1); __gmp_binary_minus::eval(q, temp.get_mpq_t(), expr.val2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T, class U> class __gmp_expr<mpq_t, __gmp_binary_expr <__gmp_expr<mpz_t, T>, __gmp_expr<mpq_t, U>, __gmp_binary_minus> > { private: typedef __gmp_expr<mpz_t, T> val1_type; typedef __gmp_expr<mpq_t, U> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp1(expr.val1); expr.val2.eval(q); __gmp_binary_minus::eval(q, temp1.get_mpz_t(), q); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } }; template <class T, class U> class __gmp_expr<mpq_t, __gmp_binary_expr <__gmp_expr<mpq_t, T>, __gmp_expr<mpz_t, U>, __gmp_binary_minus> > { private: typedef __gmp_expr<mpq_t, T> val1_type; typedef __gmp_expr<mpz_t, U> val2_type; __gmp_binary_expr<val1_type, val2_type, __gmp_binary_minus> expr; public: __gmp_expr(const val1_type &val1, const val2_type &val2) : expr(val1, val2) { } void eval(mpq_ptr q) const { mpz_class temp2(expr.val2); expr.val1.eval(q); __gmp_binary_minus::eval(q, q, temp2.get_mpz_t()); } const val1_type & get_val1() const { return expr.val1; } const val2_type & get_val2() const { return expr.val2; } mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); } };
# 3054 "/usr/include/gmpxx.h" 3 4
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_plus> > operator+(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_plus> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_minus> > operator-(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_minus> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_com> > operator~(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_unary_com> >(expr); }

template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_plus> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_plus> > operator+(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_plus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_plus> > operator+(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_plus> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_minus> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_minus> > operator-(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_minus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_minus> > operator-(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_minus> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_multiplies> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_multiplies> > operator*(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_multiplies> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_multiplies> > operator*(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_multiplies> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_divides> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_divides> > operator/(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_divides> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_divides> > operator/(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_divides> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_modulus> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_modulus> > operator%(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_modulus> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_modulus> > operator%(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_modulus> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_and> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> > operator&(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_and> > operator&(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_and> > operator&(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_and> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_and> > operator&(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_and> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_ior> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_ior> > operator|(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_ior> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_ior> > operator|(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_ior> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_binary_xor> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_xor> > operator^(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_binary_xor> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_xor> > operator^(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_binary_xor> >(t, expr); }

template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, mp_bitcnt_t, __gmp_binary_lshift> > operator<<(const __gmp_expr<T, U> &expr, mp_bitcnt_t l) { return __gmp_expr<T, __gmp_binary_expr <__gmp_expr<T, U>, mp_bitcnt_t, __gmp_binary_lshift> >(expr, l); }
template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, mp_bitcnt_t, __gmp_binary_rshift> > operator>>(const __gmp_expr<T, U> &expr, mp_bitcnt_t l) { return __gmp_expr<T, __gmp_binary_expr <__gmp_expr<T, U>, mp_bitcnt_t, __gmp_binary_rshift> >(expr, l); }

template <class T, class U, class V, class W> inline bool operator==(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return __gmp_binary_equal::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator==(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator==(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator==(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator==(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator==(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator==(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator==(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator==(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator==(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator==(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator==(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_equal::eval(static_cast<double>(t), temp.__get_mp()); }
template <class T, class U, class V, class W> inline bool operator!=(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return ! __gmp_binary_equal::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator!=(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator!=(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator!=(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator!=(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator!=(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator!=(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator!=(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator!=(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator!=(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator!=(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator!=(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_equal::eval(static_cast<double>(t), temp.__get_mp()); }
template <class T, class U, class V, class W> inline bool operator<(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return __gmp_binary_less::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator<(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator<(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_less::eval(static_cast<double>(t), temp.__get_mp()); }
template <class T, class U, class V, class W> inline bool operator<=(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return ! __gmp_binary_greater::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<=(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<=(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<=(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<=(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<=(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<=(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator<=(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator<=(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator<=(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator<=(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator<=(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_greater::eval(static_cast<double>(t), temp.__get_mp()); }
template <class T, class U, class V, class W> inline bool operator>(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return __gmp_binary_greater::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator>(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator>(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_binary_greater::eval(static_cast<double>(t), temp.__get_mp()); }
template <class T, class U, class V, class W> inline bool operator>=(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return ! __gmp_binary_less::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>=(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>=(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>=(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>=(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>=(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>=(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline bool operator>=(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline bool operator>=(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator>=(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline bool operator>=(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline bool operator>=(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return ! __gmp_binary_less::eval(static_cast<double>(t), temp.__get_mp()); }

template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_abs_function> > abs(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_abs_function> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_trunc_function> > trunc(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_trunc_function> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_floor_function> > floor(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_floor_function> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_ceil_function> > ceil(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_ceil_function> >(expr); }
template <class T, class U> inline __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_sqrt_function> > sqrt(const __gmp_expr<T, U> &expr) { return __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, __gmp_sqrt_function> >(expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_hypot_function> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_hypot_function> > hypot(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_hypot_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_hypot_function> > hypot(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_hypot_function> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_gcd_function> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_gcd_function> > gcd(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_gcd_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_gcd_function> > gcd(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_gcd_function> >(t, expr); }
template <class T, class U, class V, class W> inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type, __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, __gmp_lcm_function> > (expr1, expr2); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, signed char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(signed char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, unsigned char t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(unsigned char t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, signed int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(signed int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, unsigned int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(unsigned int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, signed short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(signed short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, unsigned short int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(unsigned short int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, signed long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, signed long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(signed long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<signed long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, unsigned long int t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, unsigned long int, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(unsigned long int t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<unsigned long int, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, float t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(float t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_lcm_function> > lcm(const __gmp_expr<T, U> &expr, double t) { return __gmp_expr <T, __gmp_binary_expr<__gmp_expr<T, U>, double, __gmp_lcm_function> >(expr, t); } template <class T, class U> inline __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_lcm_function> > lcm(double t, const __gmp_expr<T, U> &expr) { return __gmp_expr <T, __gmp_binary_expr<double, __gmp_expr<T, U>, __gmp_lcm_function> >(t, expr); }

template <class T, class U> inline int sgn(const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_sgn_function::eval(temp.__get_mp()); }
template <class T, class U, class V, class W> inline int cmp(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2) { __gmp_expr<T, T> const& temp1(expr1); __gmp_expr<V, V> const& temp2(expr2); return __gmp_cmp_function::eval(temp1.__get_mp(), temp2.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, signed char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline int cmp(signed char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, unsigned char t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline int cmp(unsigned char t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, signed int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline int cmp(signed int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, unsigned int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline int cmp(unsigned int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, signed short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline int cmp(signed short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, unsigned short int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline int cmp(unsigned short int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, signed long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<signed long int>(t)); } template <class T, class U> inline int cmp(signed long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<signed long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, unsigned long int t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<unsigned long int>(t)); } template <class T, class U> inline int cmp(unsigned long int t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<unsigned long int>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, float t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline int cmp(float t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<double>(t), temp.__get_mp()); } template <class T, class U> inline int cmp(const __gmp_expr<T, U> &expr, double t) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(temp.__get_mp(), static_cast<double>(t)); } template <class T, class U> inline int cmp(double t, const __gmp_expr<T, U> &expr) { __gmp_expr<T, T> const& temp(expr); return __gmp_cmp_function::eval(static_cast<double>(t), temp.__get_mp()); }

template <class T>
void swap(__gmp_expr<T, T>& x, __gmp_expr<T, T>& y) noexcept
{ x.swap(y); }



template <class T, class U> inline mpz_class & mpz_class::operator+=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_plus> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator+=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_plus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator+=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_plus> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator-=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_minus> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator-=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_minus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator-=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_minus> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator*=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_multiplies> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator*=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator*=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator/=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_divides> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator/=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_divides> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator/=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_divides> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator%=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_modulus> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator%=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_modulus> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator%=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_modulus> >(*this, t)); return *this; }

template <class T, class U> inline mpz_class & mpz_class::operator&=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_and> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator&=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_and> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator&=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_and> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator|=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_ior> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator|=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_ior> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator|=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_ior> >(*this, t)); return *this; }
template <class T, class U> inline mpz_class & mpz_class::operator^=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, __gmp_expr<T, U>, __gmp_binary_xor> >(*this, expr)); return *this; } inline mpz_class & mpz_class::operator^=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, signed long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, unsigned long int, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(float t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_xor> >(*this, t)); return *this; } inline mpz_class & mpz_class::operator^=(double t) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, double, __gmp_binary_xor> >(*this, t)); return *this; }

inline mpz_class & mpz_class::operator<<=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, mp_bitcnt_t, __gmp_binary_lshift> >(*this, l)); return *this; }
inline mpz_class & mpz_class::operator>>=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpz_t, __gmp_binary_expr <mpz_class, mp_bitcnt_t, __gmp_binary_rshift> >(*this, l)); return *this; }

inline mpz_class & mpz_class::operator++() { __gmp_unary_increment::eval(mp); return *this; } inline mpz_class mpz_class::operator++(int) { mpz_class temp(*this); __gmp_unary_increment::eval(mp); return temp; }
inline mpz_class & mpz_class::operator--() { __gmp_unary_decrement::eval(mp); return *this; } inline mpz_class mpz_class::operator--(int) { mpz_class temp(*this); __gmp_unary_decrement::eval(mp); return temp; }



template <class T, class U> inline mpq_class & mpq_class::operator+=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, __gmp_expr<T, U>, __gmp_binary_plus> >(*this, expr)); return *this; } inline mpq_class & mpq_class::operator+=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(float t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_plus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator+=(double t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_plus> >(*this, t)); return *this; }
template <class T, class U> inline mpq_class & mpq_class::operator-=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, __gmp_expr<T, U>, __gmp_binary_minus> >(*this, expr)); return *this; } inline mpq_class & mpq_class::operator-=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(float t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_minus> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator-=(double t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_minus> >(*this, t)); return *this; }
template <class T, class U> inline mpq_class & mpq_class::operator*=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, __gmp_expr<T, U>, __gmp_binary_multiplies> >(*this, expr)); return *this; } inline mpq_class & mpq_class::operator*=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(float t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator*=(double t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; }
template <class T, class U> inline mpq_class & mpq_class::operator/=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, __gmp_expr<T, U>, __gmp_binary_divides> >(*this, expr)); return *this; } inline mpq_class & mpq_class::operator/=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(float t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_divides> >(*this, t)); return *this; } inline mpq_class & mpq_class::operator/=(double t) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, double, __gmp_binary_divides> >(*this, t)); return *this; }

inline mpq_class & mpq_class::operator<<=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, mp_bitcnt_t, __gmp_binary_lshift> >(*this, l)); return *this; }
inline mpq_class & mpq_class::operator>>=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpq_t, __gmp_binary_expr <mpq_class, mp_bitcnt_t, __gmp_binary_rshift> >(*this, l)); return *this; }

inline mpq_class & mpq_class::operator++() { __gmp_unary_increment::eval(mp); return *this; } inline mpq_class mpq_class::operator++(int) { mpq_class temp(*this); __gmp_unary_increment::eval(mp); return temp; }
inline mpq_class & mpq_class::operator--() { __gmp_unary_decrement::eval(mp); return *this; } inline mpq_class mpq_class::operator--(int) { mpq_class temp(*this); __gmp_unary_decrement::eval(mp); return temp; }



template <class T, class U> inline mpf_class & mpf_class::operator+=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, __gmp_expr<T, U>, __gmp_binary_plus> >(*this, expr)); return *this; } inline mpf_class & mpf_class::operator+=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(float t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_plus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator+=(double t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_plus> >(*this, t)); return *this; }
template <class T, class U> inline mpf_class & mpf_class::operator-=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, __gmp_expr<T, U>, __gmp_binary_minus> >(*this, expr)); return *this; } inline mpf_class & mpf_class::operator-=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(float t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_minus> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator-=(double t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_minus> >(*this, t)); return *this; }
template <class T, class U> inline mpf_class & mpf_class::operator*=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, __gmp_expr<T, U>, __gmp_binary_multiplies> >(*this, expr)); return *this; } inline mpf_class & mpf_class::operator*=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(float t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator*=(double t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_multiplies> >(*this, t)); return *this; }
template <class T, class U> inline mpf_class & mpf_class::operator/=(const __gmp_expr<T, U> &expr) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, __gmp_expr<T, U>, __gmp_binary_divides> >(*this, expr)); return *this; } inline mpf_class & mpf_class::operator/=(signed char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(unsigned char t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(signed int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(unsigned int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(signed short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(unsigned short int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(signed long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, signed long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(unsigned long int t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, unsigned long int, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(float t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_divides> >(*this, t)); return *this; } inline mpf_class & mpf_class::operator/=(double t) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, double, __gmp_binary_divides> >(*this, t)); return *this; }

inline mpf_class & mpf_class::operator<<=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, mp_bitcnt_t, __gmp_binary_lshift> >(*this, l)); return *this; }
inline mpf_class & mpf_class::operator>>=(mp_bitcnt_t l) { __gmp_set_expr(mp, __gmp_expr<mpf_t, __gmp_binary_expr <mpf_class, mp_bitcnt_t, __gmp_binary_rshift> >(*this, l)); return *this; }

inline mpf_class & mpf_class::operator++() { __gmp_unary_increment::eval(mp); return *this; } inline mpf_class mpf_class::operator++(int) { mpf_class temp(*this); __gmp_unary_increment::eval(mp); return temp; }
inline mpf_class & mpf_class::operator--() { __gmp_unary_decrement::eval(mp); return *this; } inline mpf_class mpf_class::operator--(int) { mpf_class temp(*this); __gmp_unary_decrement::eval(mp); return temp; }





class __gmp_urandomb_value { };
class __gmp_urandomm_value { };

template <>
class __gmp_expr<mpz_t, __gmp_urandomb_value>
{
private:
  __gmp_randstate_struct *state;
  mp_bitcnt_t bits;
public:
  __gmp_expr(gmp_randstate_t s, mp_bitcnt_t l) : state(s), bits(l) { }
  void eval(mpz_ptr z) const { __gmp_rand_function::eval(z, state, bits); }
  mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); }
};

template <>
class __gmp_expr<mpz_t, __gmp_urandomm_value>
{
private:
  __gmp_randstate_struct *state;
  mpz_class range;
public:
  __gmp_expr(gmp_randstate_t s, const mpz_class &z) : state(s), range(z) { }
  void eval(mpz_ptr z) const
  { __gmp_rand_function::eval(z, state, range.get_mpz_t()); }
  mp_bitcnt_t get_prec() const { return __gmpf_get_default_prec(); }
};

template <>
class __gmp_expr<mpf_t, __gmp_urandomb_value>
{
private:
  __gmp_randstate_struct *state;
  mp_bitcnt_t bits;
public:
  __gmp_expr(gmp_randstate_t s, mp_bitcnt_t l) : state(s), bits(l) { }
  void eval(mpf_ptr f) const
  {
    __gmp_rand_function::eval(f, state,
 (bits>0) ? bits : __gmpf_get_prec(f));
  }
  mp_bitcnt_t get_prec() const
  {
    if (bits == 0)
      return __gmpf_get_default_prec();
    else
      return bits;
  }
};

extern "C" {
  typedef void __gmp_randinit_default_t (gmp_randstate_t);
  typedef void __gmp_randinit_lc_2exp_t (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);
  typedef int __gmp_randinit_lc_2exp_size_t (gmp_randstate_t, mp_bitcnt_t);
}

class gmp_randclass
{
private:
  gmp_randstate_t state;


  gmp_randclass(const gmp_randclass &);
  void operator=(const gmp_randclass &);
public:

  gmp_randclass(gmp_randalg_t alg, unsigned long int size)
  {
    switch (alg)
      {
      case GMP_RAND_ALG_LC:
      default:
 __gmp_randinit(state, alg, size);
 break;
      }
  }


  gmp_randclass(__gmp_randinit_default_t* f) { f(state); }


  gmp_randclass(__gmp_randinit_lc_2exp_t* f,
  mpz_class z, unsigned long int l1, mp_bitcnt_t l2)
  { f(state, z.get_mpz_t(), l1, l2); }


  gmp_randclass(__gmp_randinit_lc_2exp_size_t* f,
  mp_bitcnt_t size)
  {
    if (f (state, size) == 0)
      throw std::length_error ("gmp_randinit_lc_2exp_size");
  }

  ~gmp_randclass() { __gmp_randclear(state); }


  void seed();
  void seed(unsigned long int s) { __gmp_randseed_ui(state, s); }
  void seed(const mpz_class &z) { __gmp_randseed(state, z.get_mpz_t()); }


  __gmp_expr<mpz_t, __gmp_urandomb_value> get_z_bits(mp_bitcnt_t l)
  { return __gmp_expr<mpz_t, __gmp_urandomb_value>(state, l); }
  __gmp_expr<mpz_t, __gmp_urandomb_value> get_z_bits(const mpz_class &z)
  { return get_z_bits(z.get_ui()); }


  __gmp_expr<mpz_t, __gmp_urandomm_value> get_z_range(const mpz_class &z)
  { return __gmp_expr<mpz_t, __gmp_urandomm_value>(state, z); }

  __gmp_expr<mpf_t, __gmp_urandomb_value> get_f(mp_bitcnt_t prec = 0)
  { return __gmp_expr<mpf_t, __gmp_urandomb_value>(state, prec); }
};




namespace std {
  template <> class numeric_limits<mpz_class>
  {
  public:
    static const bool is_specialized = true;
    static mpz_class min() { return mpz_class(); }
    static mpz_class max() { return mpz_class(); }
    static mpz_class lowest() { return mpz_class(); }
    static const int digits = 0;
    static const int digits10 = 0;
    static const int max_digits10 = 0;
    static const bool is_signed = true;
    static const bool is_integer = true;
    static const bool is_exact = true;
    static const int radix = 2;
    static mpz_class epsilon() { return mpz_class(); }
    static mpz_class round_error() { return mpz_class(); }
    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;
    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    static mpz_class infinity() { return mpz_class(); }
    static mpz_class quiet_NaN() { return mpz_class(); }
    static mpz_class signaling_NaN() { return mpz_class(); }
    static mpz_class denorm_min() { return mpz_class(); }
    static const bool is_iec559 = false;
    static const bool is_bounded = false;
    static const bool is_modulo = false;
    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_toward_zero;
  };

  template <> class numeric_limits<mpq_class>
  {
  public:
    static const bool is_specialized = true;
    static mpq_class min() { return mpq_class(); }
    static mpq_class max() { return mpq_class(); }
    static mpq_class lowest() { return mpq_class(); }
    static const int digits = 0;
    static const int digits10 = 0;
    static const int max_digits10 = 0;
    static const bool is_signed = true;
    static const bool is_integer = false;
    static const bool is_exact = true;
    static const int radix = 2;
    static mpq_class epsilon() { return mpq_class(); }
    static mpq_class round_error() { return mpq_class(); }
    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;
    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    static mpq_class infinity() { return mpq_class(); }
    static mpq_class quiet_NaN() { return mpq_class(); }
    static mpq_class signaling_NaN() { return mpq_class(); }
    static mpq_class denorm_min() { return mpq_class(); }
    static const bool is_iec559 = false;
    static const bool is_bounded = false;
    static const bool is_modulo = false;
    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_toward_zero;
  };

  template <> class numeric_limits<mpf_class>
  {
  public:
    static const bool is_specialized = true;
    static mpf_class min() { return mpf_class(); }
    static mpf_class max() { return mpf_class(); }
    static mpf_class lowest() { return mpf_class(); }
    static const int digits = 0;
    static const int digits10 = 0;
    static const int max_digits10 = 0;
    static const bool is_signed = true;
    static const bool is_integer = false;
    static const bool is_exact = false;
    static const int radix = 2;
    static mpf_class epsilon() { return mpf_class(); }
    static mpf_class round_error() { return mpf_class(); }
    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;
    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    static mpf_class infinity() { return mpf_class(); }
    static mpf_class quiet_NaN() { return mpf_class(); }
    static mpf_class signaling_NaN() { return mpf_class(); }
    static mpf_class denorm_min() { return mpf_class(); }
    static const bool is_iec559 = false;
    static const bool is_bounded = false;
    static const bool is_modulo = false;
    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_indeterminate;
  };
}
# 5 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 2

# 1 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 1







# 1 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"

# 9 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
class Symbol;
# 29 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
enum ExprTreeType {
 EXPR_NONE = 0x0,
 EXPR_VAR,
 EXPR_INT,
 EXPR_MPZ,
 EXPR_MPQ,
 EXPR_ADD,
 EXPR_SUB,
 EXPR_MULT,
 EXPR_DIV,
 EXPR_EXP,
 EXPR_NEG,
 EXPR_SYM,
 EXPR_ARRAY,
 EXPR_DATA
};
# 57 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
union ExprTreeVal {
 std::string* var;
 long int i;
 mpz_class* z;
 mpq_class* q;
 Symbol* sym;
 void* genericData;
};
# 76 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
struct ExprTreeNode {
 ExprTreeNode* left;
 ExprTreeNode* right;
 ExprTreeType type;
 ExprTreeVal val;




 ExprTreeNode();





 ExprTreeNode(ExprTreeType type, ExprTreeVal* val, ExprTreeNode* lNode, ExprTreeNode* rNode);




 ExprTreeNode(const std::string& s);




 ExprTreeNode(long int i);




 ExprTreeNode(const mpz_class& z);




 ExprTreeNode(const mpq_class& q);




 ExprTreeNode(const Symbol& s);




 ~ExprTreeNode();






 bool findChildType(ExprTreeType searchType);






 std::string toString() const;






 bool isVar() const;





 bool isConstant() const;






 bool isPolynomialTerm() const;
# 165 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
 ExprTreeNode* deepCopy() const;
# 176 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
 static ExprTreeNode* combineExprTreeNodes(ExprTreeNode* lNode, ExprTreeNode* rNode, ExprTreeType tType, ExprTreeVal* vVal = 
# 176 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp" 3 4
                                                                                                                            __null
# 176 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExprTreeNode.hpp"
                                                                                                                                );
};
# 9 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 2
# 17 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
class ExpressionTree {
private:
 ExprTreeNode* root;

public:




 ExpressionTree();




 ExpressionTree(ExprTreeNode* theRoot);




 ExpressionTree(const ExpressionTree& otherTree);




 ExpressionTree(const std::vector<ExpressionTree>& trees);




 ~ExpressionTree();




 ExpressionTree& operator= (const ExpressionTree& otherTree);






 ExpressionTree(ExpressionTree&& otherTree);




 ExpressionTree& operator= (ExpressionTree&& otherTree);
# 73 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
 static ExpressionTree combineExpressionTrees(const ExpressionTree& left, const ExpressionTree& right, ExprTreeType type, ExprTreeVal* val = 
# 73 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
                                                                                                                                            __null
# 73 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
                                                                                                                                                );







 ExpressionTree operator+(const ExpressionTree& rightTree);







 ExpressionTree& operator+=(const ExpressionTree& rightTree);







 ExpressionTree operator-(const ExpressionTree& rightTree);







 ExpressionTree& operator-=(const ExpressionTree& rightTree);







 ExpressionTree operator*(const ExpressionTree& rightTree);







 ExpressionTree& operator*=(const ExpressionTree& rightTree);







 ExpressionTree operator/(const ExpressionTree& rightTree);







 ExpressionTree& operator/=(const ExpressionTree& rightTree);







 ExpressionTree operator^(const ExpressionTree& rightTree);







 ExpressionTree& operator^=(const ExpressionTree& rightTree);




 std::string toString() const;






 std::string toMapleString() const;






 std::string toLaTeXString() const;






 template <class ExpTreeConvert>
 void fromVector(const std::vector<ExpTreeConvert>& ringVec) {
  delete root;
  root = 
# 182 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
        __null
# 182 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
            ;
  for(size_t i = 0; i < ringVec.size(); ++i) {
   ExpressionTree elem = ringVec[i].convertToExpressionTree();
   root = ExprTreeNode::combineExprTreeNodes(root, elem.root, EXPR_ARRAY, 
# 185 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
                                                                         __null
# 185 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
                                                                             );
   elem.root = 
# 186 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
              __null
# 186 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
                  ;
  }
  root = ExprTreeNode::combineExprTreeNodes(root, 
# 188 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
                                                 __null
# 188 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
                                                     , EXPR_ARRAY, 
# 188 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp" 3 4
                                                                   __null
# 188 "../../include/RegularChain/../TriangularSet/../Ring/../ExpressionTree/ExpressionTree.hpp"
                                                                       );
 }
};




class ExpressionTreeConvert {

public:





 virtual ExpressionTree convertToExpressionTree() const = 0;
};
# 7 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 2
# 15 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp"
typedef enum RingProperty {
    COMMUTATIVE_RING = 0x001,
    INTEGRAL_DOMAIN = 0x003,
    GCD_DOMAIN = 0x007,
    UNIQUE_FACTORIZATION_DOMAIN = 0x00f,
    PRINICPAL_IDEAL_DOMAIN = 0x01f,
    EUCLIDEAN_DOMAIN = 0x03f,
    FIELD = 0x07f,
    PRIME_FIELD = 0x0ff,
    FINITE_FIELD = 0x1ff,
    SMALL_PRIME_FIELD = 0x3ff,
    COMPLEX_FIELD = 0x47f
} RingProperty;




class RingProperties {
private:
    unsigned int prop;


public:




    RingProperties();




    RingProperties(RingProperty p);




    RingProperties(std::vector<RingProperty> v);




    inline bool has(RingProperty p);





    inline bool has(const RingProperties& p);
};
# 75 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp"
template <class Derived>
class BPASRing : public virtual ExpressionTreeConvert {
public:




    static RingProperties properties;




    virtual mpz_class characteristic() {
        return 0;
    }






    virtual bool isZero() const = 0;




    virtual void zero() = 0;






    virtual bool isOne() const = 0;




    virtual void one() = 0;






    virtual Derived unitCanonical(Derived* u = 
# 120 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 3 4
                                              __null
# 120 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp"
                                                  , Derived* v = 
# 120 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 3 4
                                                                 __null
# 120 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp"
                                                                     ) const = 0;




    virtual Derived& operator= (const Derived&) = 0;




    virtual Derived operator+ (const Derived&) const = 0;




    virtual Derived& operator+= (const Derived&) =0;




    virtual Derived operator- (const Derived&) const = 0;




    virtual Derived& operator-= (const Derived&) = 0;




    virtual Derived operator- () const = 0;




    virtual Derived operator* (const Derived&) const = 0;




    virtual Derived& operator*= (const Derived&) = 0;




    virtual Derived operator^ (long long int e) const = 0;




    virtual Derived& operator^= (long long int e) = 0;






    virtual bool operator== (const Derived&) const = 0;






    virtual bool operator!= (const Derived&) const = 0;







    virtual void print(std::ostream& ostream) const {
        ostream << convertToExpressionTree().toString();
    }






    friend std::ostream& operator<< (std::ostream& ostream, const Derived& d) {
        d.print(ostream);
        return ostream;
    }

    friend std::ostream& operator<< (std::ostream& ostream, Derived&& d) {
        d.print(ostream);
        return ostream;
    }







};
# 8 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASIntegralDomain.hpp" 1





# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASRing.hpp" 1
# 7 "../../include/RegularChain/../TriangularSet/../Ring/BPASIntegralDomain.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/../Utils/TemplateHelpers.hpp" 1
# 12 "../../include/RegularChain/../TriangularSet/../Ring/../Utils/TemplateHelpers.hpp"
template<class T, class B> struct Derived_from {
 static void constraints(T* p) {
  B* pb = p;
 }
 Derived_from() {
  void(*p)(T*) = constraints;
 }
};
# 8 "../../include/RegularChain/../TriangularSet/../Ring/BPASIntegralDomain.hpp" 2





template <class Derived>
class BPASIntegralDomain : public virtual BPASRing<Derived> {

public:




 virtual Derived operator/ (const Derived&) const = 0;




 virtual Derived& operator/= (const Derived&) = 0;

};
# 9 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASGCDDomain.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASIntegralDomain.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../Ring/BPASGCDDomain.hpp" 2

# 1 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp" 1







# 1 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/../Ring/BPASRing.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/../ExpressionTree/ExpressionTree.hpp" 1
# 10 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/../Utils/TemplateHelpers.hpp" 1
# 11 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp" 2





template <class Ring>
class Factor : public std::pair<Ring, int>, public ExpressionTreeConvert, private Derived_from<Ring, BPASRing<Ring>> {

public:



 Factor() : std::pair<Ring,int>() {}






 Factor(const Ring& r, int e) : std::pair<Ring,int>(r,e) {}






 Factor(Ring&& r, int e) : std::pair<Ring,int>(r,e) {}





 Factor(const std::pair<Ring, int>& p) : std::pair<Ring, int>(p) {}






 bool operator==(const Factor<Ring>& f) {
  return (this->first == f.first && this->second == f.second);
 }






 bool operator!=(const Factor<Ring>& f) {
  return (this->first != f.first || this->second != f.second);
 }






    friend std::ostream& operator<<(std::ostream& out, const Factor<Ring>& f) {
  out << "[" << f.first << ", " << f.second << "]";
  return out;

 }





 ExpressionTree convertToExpressionTree() const {
  std::vector<ExpressionTree> trees;
  trees.push_back(this->first.convertToExpressionTree());
  trees.emplace_back(new ExprTreeNode(this->second));

  return ExpressionTree(trees);
 }
};
# 94 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp"
template <class Ring>
class Factors : public ExpressionTreeConvert, private Derived_from<Ring, BPASRing<Ring>> {

private:
 Ring u;
 std::vector<Factor<Ring>> facts;

public:




 Factors();





 Factors(const Ring& r);






 Factors(const std::vector<Ring>& v);







 Factors(const std::vector<Ring>& v, const std::vector<int>& e);
# 137 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp"
 Factors(const std::vector<Ring>& v, const std::vector<int>& e, const Ring& u);





 Factors(const std::vector<Factor<Ring>>& v);






 Factors(const std::vector<Factor<Ring>>& v, const Ring& u);





 Factors(const Factors& f);





 Factors(Factors&& f);




 ~Factors();





 inline void setRingElement(const Ring& r) {
  u = r;
 }





 inline Ring ringElement() const {
  return u;
 }





 inline void multiplyRingElement(const Ring& r) {
  u *= r;
 }





 inline std::vector<Factor<Ring>> factors() const {
  return facts;
 }






 inline Factor<Ring> factor(int i) const {
  if (i < facts.size())
   return facts[i];
  else {
   std::cerr << "BPAS: error, i exceeds array bounds of list of factors" << std::endl;
   exit(1);
  }
 }





 inline void setFactors(const std::vector<Factor<Ring>>& v) {
  facts = v;
 }





 inline void addFactor(const Factor<Ring>& f) {
  if (f.first.isOne()) {
   return;
  }
  for (int i = 0; i < facts.size(); ++i) {
   if (f.first == facts[i].first) {
    facts[i].second += f.second;
    return;
   }
  }
  facts.push_back(f);
 }






 inline void addFactor(const Ring& r, int e) {
  if (r.isOne()) {
   return;
  }
  for (int i = 0; i < facts.size(); ++i) {
   if (r == facts[i].first) {
    facts[i].second += e;
    return;
   }
  }
  facts.emplace_back(r, e);
 }






 inline void addFactors(const Factors<Ring> f) {
  for (int i = 0; i < f.facts.size(); ++i) {
   this->addFactor(f.facts[i]);
  }
 }





 inline size_t size() const {
  return facts.size();
 }





 Factors<Ring>& operator=(const Factors<Ring>& f);





 Factors<Ring>& operator=(Factors<Ring>&& f);







 bool operator==(const Factors<Ring>& f) const;







 inline bool operator!=(const Factors<Ring>& f) const {
  return !(*this == f);
 }






 inline Factor<Ring>& operator[](size_t idx) {
  return facts[idx];
 }






    friend std::ostream& operator<<(std::ostream& out, const Factors<Ring>& f) {
  out << "[" << f.u << ", [";


  for (int i = 0; i < f.facts.size(); ++i) {
   out << f.facts[i];
   if (i + 1 < f.facts.size()) {
    out << ", ";
   }
  }

  out << "]]";
  return out;
 }





 ExpressionTree convertToExpressionTree() const {
  std::vector<ExpressionTree> trees;
  ExpressionTree t;
  t.fromVector(facts);

  trees.push_back(u.convertToExpressionTree());
  trees.push_back(t);

  return ExpressionTree(trees);
 }

};



# 1 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors_impl.hxx" 1
# 16 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors_impl.hxx"
template <class Ring>
Factors<Ring>::Factors () {
 u.one();
}




template <class Ring>
Factors<Ring>::Factors(const Ring& r) {
 u.one();
 facts.emplace_back(r, 1);
}





template <class Ring>
Factors<Ring>::Factors (const std::vector<Ring>& v) {
 u.one();
 for (int i = 0; i < v.size(); ++i) {
  facts.emplace_back(v[i], 1);
 }
}





template <class Ring>
Factors<Ring>::Factors (const std::vector<Ring>& v, const std::vector<int>& e) {
 u.one();
 for (int i = 0; i < v.size() && i < e.size(); ++i) {
  facts.emplace_back(v[i], e[i]);
 }
}






template <class Ring>
Factors<Ring>::Factors (const std::vector<Ring>& v, const std::vector<int>& e, const Ring& u) {
 this->u = u;
 for (int i = 0; i < v.size() && i < e.size(); ++i) {
  facts.emplace_back(v[i], e[i]);
 }
}




template <class Ring>
Factors<Ring>::Factors (const std::vector<Factor<Ring>>& v) {
 u.one();
 facts = v;
}




template <class Ring>
Factors<Ring>::Factors (const std::vector<Factor<Ring>>& v, const Ring& u) {
 this->u = u;
 facts = v;
}




template <class Ring>
Factors<Ring>::Factors (const Factors<Ring>& f) {
 this->u = f.u;
 facts = f.facts;
}




template <class Ring>
Factors<Ring>::Factors (Factors&& f ) {
 this->u = f.u;
 f.u.one();

 this->facts = std::move(f.facts);
}




template <class Ring>
Factors<Ring>::~Factors() {
 facts.clear();
}




template <class Ring>
Factors<Ring>& Factors<Ring>::operator=(const Factors<Ring>& f) {
 if (this != &f) {
  this->u = f.u;
  this->facts = f.facts;
 }
 return *this;
}




template <class Ring>
Factors<Ring>& Factors<Ring>::operator=(Factors<Ring>&& f) {
 if (this != &f) {
  this->u = f.u;
  f.u.one();

  this->facts = std::move(f.facts);
 }
 return *this;
}






template <class Ring>
bool Factors<Ring>::operator==(const Factors<Ring>& f) const {
 if (u != f.u) {
  return false;
 }

 if (facts.size() != f.facts.size()) {
  return false;
 }

 for (int i = 0; i < facts.size(); ++i) {
  bool found = false;
  for (int j = 0; j < f.facts.size(); ++j) {
   if (facts[i].first == f.facts[j].first &&
     facts[i].second == f.facts[j].second) {
    found = true;
    break;
   }
  }
  if (found == false) {
   return false;
  }
 }

 return true;
}
# 356 "../../include/RegularChain/../TriangularSet/../Ring/../DataStructures/Factors.hpp" 2
# 8 "../../include/RegularChain/../TriangularSet/../Ring/BPASGCDDomain.hpp" 2





template <class Derived>
class BPASGCDDomain : public virtual BPASIntegralDomain<Derived> {

public:




 virtual Derived gcd(const Derived& other) const = 0;




 virtual Factors<Derived> squareFree() const = 0;

};
# 10 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASGCDDomain.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 2





template <class Derived>
class BPASEuclideanDomain : public virtual BPASGCDDomain<Derived> {

public:




 virtual Derived euclideanSize() const = 0;





 virtual Derived euclideanDivision(const Derived& b, Derived* q = 
# 25 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 3 4
                                                                 __null
# 25 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp"
                                                                     ) const = 0;





 virtual Derived extendedEuclidean(const Derived& b, Derived* s = 
# 31 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 3 4
                                                                 __null
# 31 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp"
                                                                     , Derived* t = 
# 31 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 3 4
                                                                                    __null
# 31 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp"
                                                                                        ) const = 0;




 virtual Derived quotient(const Derived& b) const = 0;




 virtual Derived remainder(const Derived& b) const = 0;




 virtual Derived operator%(const Derived& b) const = 0;




 virtual Derived& operator%=(const Derived& b) = 0;


};
# 11 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASField.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASEuclideanDomain.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../Ring/BPASField.hpp" 2




template <class Derived>
class BPASField : public virtual BPASEuclideanDomain<Derived> {

public:




 virtual Derived inverse() const = 0;
};
# 12 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASFieldOfFractions.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../Ring/BPASField.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../Ring/BPASFieldOfFractions.hpp" 2
# 15 "../../include/RegularChain/../TriangularSet/../Ring/BPASFieldOfFractions.hpp"
template <class Domain, class Derived>
class BPASFieldOfFractions : public virtual BPASField<Derived>, private Derived_from<Domain, BPASGCDDomain<Domain>> {
 public:




  virtual void canonicalize() = 0;




  virtual Domain numerator() const = 0;




  virtual Domain denominator() const = 0;
};
# 13 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
class RationalNumber;
class ComplexRationalNumber;
class SmallPrimeField;
class BigPrimeField;
class GeneralizedFermatPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;




class Integer : public BPASEuclideanDomain<Integer> {
 private:
  mpz_class _m;
 public:
  static mpz_class characteristic;
  static RingProperties properties;







  Integer ();




  Integer (int a);




  Integer (const mpz_t& a);




  Integer (const mpz_class& a);





  Integer (const Integer& a);





  explicit Integer (const RationalNumber& a);





  explicit Integer (const ComplexRationalNumber& a);





  explicit Integer (const SmallPrimeField& a);





  explicit Integer (const BigPrimeField& a);





  explicit Integer (const GeneralizedFermatPrimeField& a);





  explicit Integer (const DenseUnivariateIntegerPolynomial& a);





  explicit Integer (const DenseUnivariateRationalPolynomial& a);





  explicit Integer (const SparseUnivariatePolynomial<Integer>& a);





  explicit Integer (const SparseUnivariatePolynomial<RationalNumber>& a);





  explicit Integer (const SparseUnivariatePolynomial<ComplexRationalNumber>& a);





  template <class Ring>
  explicit Integer (const SparseUnivariatePolynomial<Ring>& a);

  inline mpz_class& get_mpz_ref() {
   return _m;
  }

  inline const mpz_class& get_mpz_ref() const {
   return _m;
  }

  inline mpz_class get_mpz () const {
   return _m;
  }

  inline mpz_ptr get_mpz_t() {
   return _m.get_mpz_t();
  }

  inline mpz_srcptr get_mpz_t() const {
   return _m.get_mpz_t();
  }


  inline double get_d() const {
   return _m.get_d();
  }

  inline long int get_si() const {
   return _m.get_si();
  }

  inline unsigned long int get_ui() const {
   return _m.get_ui();
  }






  inline bool isZero() const {
   return (_m == 0);
  }






  inline void zero() {
   _m = 0;
  }






  inline bool isOne() const {
   return (_m == 1);
  }






  inline void one() {
   _m = 1;
  }






  inline bool isNegativeOne() const {
   return (_m == -1);
  }






  inline void negativeOne() {
   _m = -1;
  }






  inline int isConstant() const {
   if (_m >= 0)
    return 1;
   else { return -1; }
  }






     Integer unitCanonical(Integer* u = 
# 228 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
                                       __null
# 228 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                                           , Integer* v = 
# 228 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
                                                          __null
# 228 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                                                              ) const;




  Integer& operator= (const Integer& a);




  inline Integer operator+ (const Integer& i) const {
   Integer ret = *this;
   ret += i;
   return ret;
  }




     inline Integer& operator+= (const Integer& i) {
      _m += i._m;
      return *this;
     }




     inline Integer operator- (const Integer& i) const {
      Integer ret = *this;
      ret -= i;
      return ret;
     }




     inline Integer& operator-= (const Integer& i) {
      _m -= i._m;
      return *this;
     }




     inline Integer operator- () const {
      Integer ret;
      
# 274 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
     __gmpz_neg
# 274 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
            (ret._m.get_mpz_t(), _m.get_mpz_t());
      return ret;
     }




     inline Integer operator* (const Integer& i) const {
      Integer ret = *this;
      ret *= i;
      return ret;
     }




     inline Integer& operator*= (const Integer& i) {
      _m *= i._m;
      return *this;
     }




     inline Integer operator^ (long long int e) const {
   Integer r;
   
# 300 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
  __gmpz_pow_ui
# 300 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
            (r._m.get_mpz_t(), _m.get_mpz_t(), (unsigned long int) e);
   return r;
     }




     inline Integer& operator^= (long long int e) {
      *this = *this ^ e;
      return *this;
     }






     inline bool operator== (const Integer& i) const {
      return (
# 318 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
             __gmpz_cmp
# 318 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                    (_m.get_mpz_t(), i._m.get_mpz_t()) == 0);
     }






     inline bool operator!= (const Integer& i) const {
      return (
# 327 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
             __gmpz_cmp
# 327 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                    (_m.get_mpz_t(), i._m.get_mpz_t()) != 0);
     }

     inline bool operator< (const Integer& r) const {
   return _m < r._m;
  }

  inline bool operator<= (const Integer& r) const {
   return _m <= r._m;
  }

  inline bool operator> (const Integer& r) const {
   return _m > r._m;
  }

  inline bool operator>= (const Integer& r) const {
   return _m >= r._m;
  }






  inline ExpressionTree convertToExpressionTree() const {
   return ExpressionTree(new ExprTreeNode(_m));

  }




  inline Integer operator/ (const Integer& i) const {

   Integer ret = *this;
   ret /= i;
   return ret;
  }




  inline Integer& operator/= (const Integer& i) {
   if (
# 370 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
      __gmpz_divisible_p
# 370 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                     (_m.get_mpz_t(), i._m.get_mpz_t())) {
    
# 371 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
   __gmpz_divexact
# 371 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
               (_m.get_mpz_t(), _m.get_mpz_t(), i._m.get_mpz_t());
   } else {
    std::cerr << "BPAS ERROR: Non-exact division in Integer: " << _m << " / " << i._m << std::endl;
    exit(1);
   }
   return *this;
  }

  inline Integer operator% (const Integer& r) const {
   Integer ret(this->_m % r._m);
   return ret;
  }

  inline Integer& operator%= (const Integer& r) {
   _m = _m % r._m;
   return *this;
  }




  inline Integer gcd(const Integer& other) const {
   Integer c;
   
# 394 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
  __gmpz_gcd
# 394 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
         (c._m.get_mpz_t(), _m.get_mpz_t(), other._m.get_mpz_t());
   return c;
  }



  inline Factors<Integer> squareFree() const {
   std::vector<Integer> ret;
   ret.push_back(*this);
   return ret;
  }




  inline Integer euclideanSize() const {
   if (*this < 0) {
    return -(*this);
   }
   return *this;
  }





  Integer euclideanDivision(const Integer& b, Integer* q = 
# 420 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
                                                          __null
# 420 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                                                              ) const;





  Integer extendedEuclidean(const Integer& b, Integer* s = 
# 426 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
                                                          __null
# 426 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                                                              , Integer* t = 
# 426 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp" 3 4
                                                                             __null
# 426 "../../include/RegularChain/../TriangularSet/../Ring/Integer.hpp"
                                                                                 ) const;




  Integer quotient(const Integer& b) const;




  Integer remainder(const Integer& b) const;


  inline friend Integer operator+(int a, const Integer& r) {
   return Integer(mpz_class(a) + r._m);
  }

  inline friend Integer operator-(int a, const Integer& r) {
   return Integer(mpz_class(a) - r._m);
  }

  inline friend Integer operator*(int a, const Integer& r) {
   return Integer(mpz_class(a) * r._m);
  }

  inline friend Integer operator/(int a, const Integer& r) {
   return Integer(mpz_class(a) / r._m);
  }

  inline friend bool operator<(int a, const Integer& r) {
   return r > a;
  }

  inline friend bool operator<=(int a, const Integer& r) {
   return r >= a;
  }

  inline friend bool operator>(int a, const Integer& r) {
   return r < a;
  }

  inline friend bool operator>=(int a, const Integer& r) {
   return r <= a;
  }

  inline friend Integer operator+(long int a, const Integer& r) {
   return Integer(mpz_class(a) + r._m);
  }

  inline friend Integer operator-(long int a, const Integer& r) {
   return Integer(mpz_class(a) - r._m);
  }

  inline friend Integer operator*(long int a, const Integer& r) {
   return Integer(mpz_class(a) * r._m);
  }

  inline friend Integer operator/(long int a, const Integer& r) {
   return Integer(mpz_class(a) / r._m);
  }

  inline friend Integer abs(const Integer& i) {
   return Integer(abs(i._m));
  }

  inline friend bool operator<(long int a, const Integer& r) {
   return r > a;
  }

  inline friend bool operator<=(long int a, const Integer& r) {
   return r >= a;
  }

  inline friend bool operator>(long int a, const Integer& r) {
   return r < a;
  }

  inline friend bool operator>=(long int a, const Integer& r) {
   return r <= a;
  }


};
# 14 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 1
# 10 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
class Integer;
class ComplexRationalNumber;
class SmallPrimeField;
class BigPrimeField;
class GeneralizedFermatPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;
class SparseMultivariateRationalPolynomial;




class RationalNumber : public BPASField<RationalNumber> {
 private:
   mpq_class _m;

 public:
  static mpz_class characteristic;
     static RingProperties properties;





  RationalNumber ();

  RationalNumber (int a, int b = 1);

  RationalNumber (const std::string& digits, int base = 10);

  RationalNumber (const mpq_t& q);

  RationalNumber (const mpq_class& a);

  RationalNumber (const mpz_class& a, const mpz_class& b = mpz_class(1));

  RationalNumber (const RationalNumber& a);

  explicit RationalNumber (const Integer& a);

  explicit RationalNumber (const ComplexRationalNumber& a);

  explicit RationalNumber (const SmallPrimeField& a);

  explicit RationalNumber (const BigPrimeField& a);

  explicit RationalNumber (const GeneralizedFermatPrimeField& a);

  explicit RationalNumber (const DenseUnivariateIntegerPolynomial& a);

  explicit RationalNumber (const DenseUnivariateRationalPolynomial& a);

  explicit RationalNumber (const SparseUnivariatePolynomial<Integer>& a);

  explicit RationalNumber (const SparseUnivariatePolynomial<RationalNumber>& a);

  explicit RationalNumber (const SparseUnivariatePolynomial<ComplexRationalNumber>& a);

  explicit RationalNumber (const SparseMultivariateRationalPolynomial& a);

  template <class Ring>
  explicit RationalNumber (const SparseUnivariatePolynomial<Ring>& a);

  RationalNumber* RNpointer(RationalNumber* a);

  RationalNumber* RNpointer(SmallPrimeField* a);

  RationalNumber* RNpointer(BigPrimeField* a);

  RationalNumber* RNpointer(GeneralizedFermatPrimeField* a);

  RationalNumber& set (int a, int b);

  inline mpq_class get_mpq() const {
   return _m;
  }

  inline mpq_class& get_mpq_ref() {
   return _m;
  }

  inline const mpq_class& get_mpq_ref() const {
   return _m;
  }

  inline mpq_ptr get_mpq_t() {
   return _m.get_mpq_t();
  }

  inline mpq_srcptr get_mpq_t() const {
   return _m.get_mpq_t();
  }

  inline Integer get_num() const {
   return Integer(_m.get_num());
  }

  double get_d() const {
   return _m.get_d();
  }

  inline Integer get_den() const {
   return Integer(_m.get_den());
  }






  inline bool isZero() const {
   return (_m == 0);
  }






  inline void zero() {
   _m = 0;
  }






  inline bool isOne() const {
   return (_m == 1);
  }






  inline void one() {
   _m = 1;
  }






  inline bool isNegativeOne() const {
   return (_m == -1);
  }






  inline void negativeOne() {
   _m = -1;
  }






  inline int isConstant() const {
   if (_m >= 0)
    return 1;
   else { return -1; }
  }






     RationalNumber unitCanonical(RationalNumber* u = 
# 187 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
                                                     __null
# 187 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
                                                         , RationalNumber* v = 
# 187 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
                                                                               __null
# 187 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
                                                                                   ) const;




  RationalNumber& operator= (const RationalNumber& a);




  inline RationalNumber operator+ (const RationalNumber& i) const {
   RationalNumber ret = *this;
   ret += i;
   return ret;
  }




     inline RationalNumber& operator+= (const RationalNumber& i) {
      _m += i._m;
      return *this;
     }




     inline RationalNumber operator- (const RationalNumber& i) const {
      RationalNumber ret = *this;
      ret -= i;
      return ret;
     }




     inline RationalNumber& operator-= (const RationalNumber& i) {
      _m -= i._m;
      return *this;
     }




     inline RationalNumber operator- () const {
      RationalNumber ret;
      
# 233 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
     __gmpq_neg
# 233 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
            (ret._m.get_mpq_t(), (*this)._m.get_mpq_t());
      return ret;
     }




     inline RationalNumber operator* (const RationalNumber& i) const {
      RationalNumber ret = *this;
      ret *= i;
      return ret;
     }




     inline RationalNumber& operator*= (const RationalNumber& i) {
      _m *= i._m;
      return *this;
     }






     inline bool operator== (const RationalNumber& i) const {
      return (_m == i._m);
     }






     inline bool operator!= (const RationalNumber& i) const {
      return (_m != i._m);
     }

     inline ExpressionTree convertToExpressionTree() const {
      return ExpressionTree(new ExprTreeNode(_m));
     }




  inline RationalNumber operator/ (const RationalNumber& i) const {

   RationalNumber ret = *this;
   ret /= i;
   return ret;
  }




  inline RationalNumber& operator/= (const RationalNumber& i) {
   _m /= i._m;
   return *this;
  }

  inline bool operator< (const RationalNumber& r) const {
   return _m < r._m;
  }

  inline bool operator<= (const RationalNumber& r) const {
   return _m <= r._m;
  }

  inline bool operator> (const RationalNumber& r) const {
   return _m > r._m;
  }

  inline bool operator>= (const RationalNumber& r) const {
   return _m >= r._m;
  }






  inline RationalNumber gcd (const RationalNumber& b) const {
   RationalNumber c;
   if (this->isZero() && b.isZero())
    c = 0;
   else
    c = 1;
   return c;
  }




  inline Factors<RationalNumber> squareFree() const {
   std::vector<RationalNumber> ret;
   ret.push_back(*this);
   return ret;
  }




  inline RationalNumber euclideanSize() const {
   std::cerr << "RationalNumber::euclideanSize NOT YET IMPLMENETED" << std::endl;
   exit(1);
   return *this;
  }





  RationalNumber euclideanDivision(const RationalNumber& b, RationalNumber* q = 
# 346 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
                                                                               __null
# 346 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
                                                                                   ) const;





  RationalNumber extendedEuclidean(const RationalNumber& b, RationalNumber* s = 
# 352 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
                                                                               __null
# 352 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
                                                                                   , RationalNumber* t = 
# 352 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
                                                                                                         __null
# 352 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
                                                                                                             ) const;




  RationalNumber quotient(const RationalNumber& b) const;




  RationalNumber remainder(const RationalNumber& b) const;
# 371 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
  inline RationalNumber operator^ (long long int e) const {
   RationalNumber r;
   
# 373 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
  __gmpz_pow_ui
# 373 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
            (r._m.get_num_mpz_t(), _m.get_num_mpz_t(), (unsigned long int) e);
   
# 374 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
  __gmpz_pow_ui
# 374 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
            (r._m.get_den_mpz_t(), _m.get_den_mpz_t(), (unsigned long int) e);
   return r;
  }

  inline RationalNumber& operator^= (long long int e) {
   *this = *this ^ e;
   return *this;
  }

  inline RationalNumber operator% (const RationalNumber& r) const {
   return 0;
  }

  inline RationalNumber& operator%= (const RationalNumber& r) {
   *this = 0;
   return *this;
  }

  inline RationalNumber inverse() const {
   RationalNumber ret;
   
# 394 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
  __gmpz_set
# 394 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
         (ret._m.get_den_mpz_t(), _m.get_num_mpz_t());
   
# 395 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp" 3 4
  __gmpz_set
# 395 "../../include/RegularChain/../TriangularSet/../Ring/RationalNumber.hpp"
         (ret._m.get_num_mpz_t(), _m.get_den_mpz_t());
   ret._m.canonicalize();
   return ret;
  }





  inline friend RationalNumber operator+(int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) + r._m);
  }

  inline friend RationalNumber operator-(int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) - r._m);
  }

  inline friend RationalNumber operator*(int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) * r._m);
  }

  inline friend RationalNumber operator/(int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) / r._m);
  }

  inline friend RationalNumber operator+(long int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) + r._m);
  }

  inline friend RationalNumber operator-(long int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) - r._m);
  }

  inline friend RationalNumber operator*(long int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) * r._m);
  }

  inline friend RationalNumber operator/(long int a, const RationalNumber& r) {
   return RationalNumber(mpq_class(a) / r._m);
  }

  inline friend RationalNumber abs(const RationalNumber& i) {
   return RationalNumber(abs(i._m));
  }





};
# 15 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
class Integer;
class RationalNumber;
class SmallPrimeField;
class BigPrimeField;
class GeneralizedFermatPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;





class ComplexRationalNumber : public BPASField<ComplexRationalNumber> {

private:

 mpq_class a;
 mpq_class b;

public:

 static mpz_class characteristic;
    static RingProperties properties;





 ComplexRationalNumber ();

 ComplexRationalNumber (const mpq_class& _a, const mpq_class& _b = mpq_class(1));

 ComplexRationalNumber (const ComplexRationalNumber& c);

 ComplexRationalNumber(int _a, int _b = 1, int _c = 0, int _d = 1);

 explicit ComplexRationalNumber (const Integer& c);

 explicit ComplexRationalNumber (const RationalNumber& c);

 explicit ComplexRationalNumber (const SmallPrimeField& c);

 explicit ComplexRationalNumber (const BigPrimeField& c);

 explicit ComplexRationalNumber (const GeneralizedFermatPrimeField& c);

 explicit ComplexRationalNumber (const DenseUnivariateIntegerPolynomial& c);

 explicit ComplexRationalNumber (const DenseUnivariateRationalPolynomial& c);

 explicit ComplexRationalNumber (const SparseUnivariatePolynomial<Integer>& c);

 explicit ComplexRationalNumber (const SparseUnivariatePolynomial<RationalNumber>& c);

 explicit ComplexRationalNumber (const SparseUnivariatePolynomial<ComplexRationalNumber>& c);

 template <class Ring>
 explicit ComplexRationalNumber (const SparseUnivariatePolynomial<Ring>& c);

 ComplexRationalNumber& operator= (const ComplexRationalNumber& c);

 ComplexRationalNumber& operator= (const mpq_class& k);

 ComplexRationalNumber& operator= (int k);

 ComplexRationalNumber& setRealPart (const RationalNumber& r);

 ComplexRationalNumber& setRealPart (const mpq_class& k);

 ComplexRationalNumber& setRealPart (int k);

 ComplexRationalNumber& setImaginaryPart (const RationalNumber& r);

 ComplexRationalNumber& setImaginaryPart (const mpq_class& k);

 ComplexRationalNumber& setImaginaryPart (int k);

 ComplexRationalNumber& set (const RationalNumber& ka, const RationalNumber& kb);

 ComplexRationalNumber& set (const mpq_class& ka, const mpq_class& kb);

 ComplexRationalNumber& set (const mpq_class& ka, int kb);

 ComplexRationalNumber& set (int ka, const mpq_class& kb);

 ComplexRationalNumber& set (int ka, int kb);






 inline bool isZero() const {
  return (a == 0 && b == 0);
 }






 inline void zero() {
  a = 0;
  b = 0;
 }






 inline bool isOne() const {
  return (a == 1 && b == 0);
 }






 inline void one() {
  a = 1;
  b = 0;
 }






 inline bool isNegativeOne() const {
  return (a == -1 && b == 0);
 }






 inline void negativeOne() {
  a = -1;
  b = 0;
 }






 inline int isConstant() const {
   if (a >= 0)
  return 1;
   else { return -1; }
 }

 ComplexRationalNumber unitCanonical(ComplexRationalNumber* u = 
# 166 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 3 4
                                                               __null
# 166 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
                                                                   , ComplexRationalNumber* v = 
# 166 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 3 4
                                                                                                __null
# 166 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
                                                                                                    ) const;

 inline bool operator== (const ComplexRationalNumber& c) const {
  if (a == c.a && b == c.b)
   return 1;
  else { return 0; }
 }

 inline bool operator== (const mpq_class& k) const {
  if (a == k && b == 0)
   return 1;
  else { return 0; }
 }

 inline bool operator== (int k) const {
  if (a == k && b == 0)
   return 1;
  else { return 0; }
 }

 inline bool operator!= (const ComplexRationalNumber& c) const {
  if (a == c.a && b == c.b)
   return 0;
  else { return 1; }
 }

 inline bool operator!= (const mpq_class& k) const {
  if (a == k && b == 0)
   return 1;
  else { return 0; }
 }

 inline bool operator!= (int k) const {
  if (a == k && b == 0)
   return 1;
  else { return 0; }
 }

 inline ComplexRationalNumber operator+ (const ComplexRationalNumber& c) const {
  ComplexRationalNumber r (*this);
  return (r += c);
 }

 inline ComplexRationalNumber& operator+= (const ComplexRationalNumber& c) {
  a += c.a;
  b += c.b;
  return *this;
 }

 inline ComplexRationalNumber operator- (const ComplexRationalNumber& c) const {
   ComplexRationalNumber r (*this);
  return (r -= c);
 }

 inline ComplexRationalNumber& operator-= (const ComplexRationalNumber& c) {
  a -= c.a;
  b -= c.b;
  return *this;
 }

 inline ComplexRationalNumber operator- () const {
  ComplexRationalNumber r (-a, -b);
  return r;
 }

 inline ComplexRationalNumber operator* (const ComplexRationalNumber& c) const {
  ComplexRationalNumber r (*this);
  return (r *= c);
 }

 inline ComplexRationalNumber& operator*= (const ComplexRationalNumber& c) {
  mpq_class t = a*c.a - b*c.b;
  mpq_class e = a*c.b + c.a*b;
  a = t;
  b = e;
  return *this;
 }

 inline ComplexRationalNumber& operator*= (const mpq_class& c) {
  a *= c;
  b *= c;
  return *this;
 }

 inline ComplexRationalNumber& operator*= (int c) {
  a *= c;
  b *= c;
  return *this;
 }







 inline ComplexRationalNumber operator^ (long long int e) const {
  ComplexRationalNumber r;
  if (isZero() || isOne() || e == 1)
   r = *this;
  else if (e == 2) {
   r = *this * *this;
  }
  else if (e > 2) {
   ComplexRationalNumber x (*this);
   r.one();

   while (e != 0) {
    if (e % 2)
     r *= x;
    x = x * x;
    e >>= 1;
   }
  }
  else if (e == 0) {
   r.one();
  }
  else {
   r = *this ^ (-e);
   r.inverse();
  }
  return r;
 }

 inline ComplexRationalNumber& operator^= (long long int e) {
  *this = *this ^ e;
  return *this;
 }

 inline ExpressionTree convertToExpressionTree() const {
  std::cerr << "ComplexRationalNumber::convertToExpressionTree NOT YET IMPLEMENTED" << std::endl;
  exit(1);
  return ExpressionTree();
 }

 inline ComplexRationalNumber operator/ (const ComplexRationalNumber& c) const {
  ComplexRationalNumber r (*this);
  return (r /= c);
 }

 inline ComplexRationalNumber& operator/= (const ComplexRationalNumber& c) {
  if (c.isZero()) {
   std::cout << "BPAS: error, dividend is zero from ComplexRationalNumber."<< std::endl;
         exit(1);
  }
  mpq_class r = c.a*c.a + c.b*c.b;
  mpq_class t = (a*c.a+b*c.b)/r;
  mpq_class e = (b*c.a-c.b*a)/r;
  a = t;
  b = e;
  return *this;
 }

 inline ComplexRationalNumber operator% (const ComplexRationalNumber& c) const {
  return 0;
 }

 inline ComplexRationalNumber& operator%= (const ComplexRationalNumber& c) {
  *this = 0;
  return *this;
 }






 inline ComplexRationalNumber gcd (const ComplexRationalNumber& c) const {
  ComplexRationalNumber e;
  if (isZero() && c.isZero())
   e.zero();
  else
   e.one();
  return e;
 }




 inline Factors<ComplexRationalNumber> squareFree() const {
  std::vector<ComplexRationalNumber> ret;
  ret.push_back(*this);
  return ret;
 }




 inline ComplexRationalNumber euclideanSize() const {

  std::cerr << "ComplexRationalNumber::euclideanSize NOT YET IMPLEMENTED" << std::endl;
  exit(1);
  return ComplexRationalNumber();
 }





 ComplexRationalNumber euclideanDivision(const ComplexRationalNumber& b, ComplexRationalNumber* q = 
# 365 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 3 4
                                                                                                   __null
# 365 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
                                                                                                       ) const;





 ComplexRationalNumber extendedEuclidean(const ComplexRationalNumber& b, ComplexRationalNumber* s = 
# 371 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 3 4
                                                                                                   __null
# 371 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
                                                                                                       , ComplexRationalNumber* t = 
# 371 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp" 3 4
                                                                                                                                    __null
# 371 "../../include/RegularChain/../TriangularSet/../Ring/ComplexRationalNumber.hpp"
                                                                                                                                        ) const;




 ComplexRationalNumber quotient(const ComplexRationalNumber& b) const;




 ComplexRationalNumber remainder(const ComplexRationalNumber& b) const;

 inline ComplexRationalNumber inverse() const {
  ComplexRationalNumber r;
  mpq_class e = a * a + b * b;
  r.a = a/e;
  r.b = -b/e;
  return r;
 }

 inline RationalNumber realPart() const {
  return RationalNumber(a);
 }

 inline RationalNumber imaginaryPart() const {
  return RationalNumber(b);
 }

 inline ComplexRationalNumber conjugate() const {
  ComplexRationalNumber r(a, -b);
  return r;
 }

 void print(std::ostream& out) const;

};
# 16 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/BPASFiniteField.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/../Ring/BPASField.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/BPASFiniteField.hpp" 2





template<class Derived>
class BPASFiniteField : public virtual BPASField<Derived> {

public:

 virtual Derived findPrimitiveRootOfUnity(long int) const = 0;
};
# 17 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 1




# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/BPASFiniteField.hpp" 1
# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 2

# 1 "/usr/include/c++/7/sstream" 1 3
# 36 "/usr/include/c++/7/sstream" 3
       
# 37 "/usr/include/c++/7/sstream" 3





# 41 "/usr/include/c++/7/sstream" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 64 "/usr/include/c++/7/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 99 "/usr/include/c++/7/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 112 "/usr/include/c++/7/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }


      basic_stringbuf(const basic_stringbuf&) = delete;

      basic_stringbuf(basic_stringbuf&& __rhs)
      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }



      basic_stringbuf&
      operator=(const basic_stringbuf&) = delete;

      basic_stringbuf&
      operator=(basic_stringbuf&& __rhs)
      {
 __xfer_bufptrs __st{__rhs, this};
 const __streambuf_type& __base = __rhs;
 __streambuf_type::operator=(__base);
 this->pubimbue(__rhs.getloc());
 _M_mode = __rhs._M_mode;
 _M_string = std::move(__rhs._M_string);
 __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 return *this;
      }

      void
      swap(basic_stringbuf& __rhs)
      {
 __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 __xfer_bufptrs __r_st{__rhs, this};
 __streambuf_type& __base = __rhs;
 __streambuf_type::swap(__base);
 __rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 std::swap(_M_mode, __rhs._M_mode);
 std::swap(_M_string, __rhs._M_string);
      }
# 165 "/usr/include/c++/7/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 189 "/usr/include/c++/7/sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 242 "/usr/include/c++/7/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:




      struct __xfer_bufptrs
      {
 __xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 : _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 {
   const _CharT* const __str = __from._M_string.data();
   const _CharT* __end = nullptr;
   if (__from.eback())
     {
       _M_goff[0] = __from.eback() - __str;
       _M_goff[1] = __from.gptr() - __str;
       _M_goff[2] = __from.egptr() - __str;
       __end = __from.egptr();
     }
   if (__from.pbase())
     {
       _M_poff[0] = __from.pbase() - __str;
       _M_poff[1] = __from.pptr() - __from.pbase();
       _M_poff[2] = __from.epptr() - __str;
       if (__from.pptr() > __end)
  __end = __from.pptr();
     }


   if (__end)
     {


       auto& __mut_from = const_cast<basic_stringbuf&>(__from);
       __mut_from._M_string._M_length(__end - __str);
     }
 }

 ~__xfer_bufptrs()
 {
   char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
   if (_M_goff[0] != -1)
     _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
   if (_M_poff[0] != -1)
     _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 }

 basic_stringbuf* _M_to;
 off_type _M_goff[3];
 off_type _M_poff[3];
      };
# 356 "/usr/include/c++/7/sstream" 3
      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
      { }

    };
# 379 "/usr/include/c++/7/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 415 "/usr/include/c++/7/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 433 "/usr/include/c++/7/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }


      basic_istringstream(const basic_istringstream&) = delete;

      basic_istringstream(basic_istringstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __istream_type::set_rdbuf(&_M_stringbuf); }



      basic_istringstream&
      operator=(const basic_istringstream&) = delete;

      basic_istringstream&
      operator=(basic_istringstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_istringstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 484 "/usr/include/c++/7/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 523 "/usr/include/c++/7/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 559 "/usr/include/c++/7/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 577 "/usr/include/c++/7/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }


      basic_ostringstream(const basic_ostringstream&) = delete;

      basic_ostringstream(basic_ostringstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __ostream_type::set_rdbuf(&_M_stringbuf); }



      basic_ostringstream&
      operator=(const basic_ostringstream&) = delete;

      basic_ostringstream&
      operator=(basic_ostringstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_ostringstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 628 "/usr/include/c++/7/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 667 "/usr/include/c++/7/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 702 "/usr/include/c++/7/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 718 "/usr/include/c++/7/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }


      basic_stringstream(const basic_stringstream&) = delete;

      basic_stringstream(basic_stringstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __iostream_type::set_rdbuf(&_M_stringbuf); }



      basic_stringstream&
      operator=(const basic_stringstream&) = delete;

      basic_stringstream&
      operator=(basic_stringstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_stringstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 769 "/usr/include/c++/7/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };



  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,
  basic_stringbuf<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,
  basic_istringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,
  basic_ostringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,
  basic_stringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


}

}

# 1 "/usr/include/c++/7/bits/sstream.tcc" 1 3
# 37 "/usr/include/c++/7/bits/sstream.tcc" 3
       
# 38 "/usr/include/c++/7/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();


      if ((this->epptr() - this->pbase()) < __capacity)
 {

   char_type* __base = const_cast<char_type*>(_M_string.data());
   _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());
   if (_M_mode & ios_base::in)
     {
       const __size_type __nget = this->gptr() - this->eback();
       const __size_type __eget = this->egptr() - this->eback();
       this->setg(__base, __base + __nget, __base + __eget + 1);
     }
   *this->pptr() = traits_type::to_char_type(__c);
   this->pbump(1);
   return __c;
 }


      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 129 "/usr/include/c++/7/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 827 "/usr/include/c++/7/sstream" 2 3
# 8 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 2
# 1 "/usr/include/c++/7/math.h" 1 3
# 36 "/usr/include/c++/7/math.h" 3
# 1 "/usr/include/c++/7/cmath" 1 3
# 39 "/usr/include/c++/7/cmath" 3
       
# 40 "/usr/include/c++/7/cmath" 3





# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;




extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ()
                               ;


extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int totalorder (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;




extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ()
                               ;


extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;




extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ()
                               ;


extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


 extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

 extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ()
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





 extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


 extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32 __nanf32 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


 extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

 extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ()
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





 extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


 extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64 __nanf64 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) throw ();


extern int __issignalingf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) throw (); extern _Float128 __acosf128 (_Float128 __x) throw ();

extern _Float128 asinf128 (_Float128 __x) throw (); extern _Float128 __asinf128 (_Float128 __x) throw ();

extern _Float128 atanf128 (_Float128 __x) throw (); extern _Float128 __atanf128 (_Float128 __x) throw ();

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) throw (); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) throw ();


 extern _Float128 cosf128 (_Float128 __x) throw (); extern _Float128 __cosf128 (_Float128 __x) throw ();

 extern _Float128 sinf128 (_Float128 __x) throw (); extern _Float128 __sinf128 (_Float128 __x) throw ();

extern _Float128 tanf128 (_Float128 __x) throw (); extern _Float128 __tanf128 (_Float128 __x) throw ();




extern _Float128 coshf128 (_Float128 __x) throw (); extern _Float128 __coshf128 (_Float128 __x) throw ();

extern _Float128 sinhf128 (_Float128 __x) throw (); extern _Float128 __sinhf128 (_Float128 __x) throw ();

extern _Float128 tanhf128 (_Float128 __x) throw (); extern _Float128 __tanhf128 (_Float128 __x) throw ();



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw (); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw ()
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) throw (); extern _Float128 __acoshf128 (_Float128 __x) throw ();

extern _Float128 asinhf128 (_Float128 __x) throw (); extern _Float128 __asinhf128 (_Float128 __x) throw ();

extern _Float128 atanhf128 (_Float128 __x) throw (); extern _Float128 __atanhf128 (_Float128 __x) throw ();





 extern _Float128 expf128 (_Float128 __x) throw (); extern _Float128 __expf128 (_Float128 __x) throw ();


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) throw (); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) throw ();


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) throw (); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) throw ();


 extern _Float128 logf128 (_Float128 __x) throw (); extern _Float128 __logf128 (_Float128 __x) throw ();


extern _Float128 log10f128 (_Float128 __x) throw (); extern _Float128 __log10f128 (_Float128 __x) throw ();


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) throw (); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) throw (); extern _Float128 __exp10f128 (_Float128 __x) throw ();




extern _Float128 expm1f128 (_Float128 __x) throw (); extern _Float128 __expm1f128 (_Float128 __x) throw ();


extern _Float128 log1pf128 (_Float128 __x) throw (); extern _Float128 __log1pf128 (_Float128 __x) throw ();


extern _Float128 logbf128 (_Float128 __x) throw (); extern _Float128 __logbf128 (_Float128 __x) throw ();




extern _Float128 exp2f128 (_Float128 __x) throw (); extern _Float128 __exp2f128 (_Float128 __x) throw ();


extern _Float128 log2f128 (_Float128 __x) throw (); extern _Float128 __log2f128 (_Float128 __x) throw ();






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 sqrtf128 (_Float128 __x) throw (); extern _Float128 __sqrtf128 (_Float128 __x) throw ();



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) throw ();




extern _Float128 cbrtf128 (_Float128 __x) throw (); extern _Float128 __cbrtf128 (_Float128 __x) throw ();






extern _Float128 ceilf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float128 __nanf128 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) throw (); extern _Float128 __j0f128 (_Float128) throw ();
extern _Float128 j1f128 (_Float128) throw (); extern _Float128 __j1f128 (_Float128) throw ();
extern _Float128 jnf128 (int, _Float128) throw (); extern _Float128 __jnf128 (int, _Float128) throw ();
extern _Float128 y0f128 (_Float128) throw (); extern _Float128 __y0f128 (_Float128) throw ();
extern _Float128 y1f128 (_Float128) throw (); extern _Float128 __y1f128 (_Float128) throw ();
extern _Float128 ynf128 (int, _Float128) throw (); extern _Float128 __ynf128 (int, _Float128) throw ();





extern _Float128 erff128 (_Float128) throw (); extern _Float128 __erff128 (_Float128) throw ();
extern _Float128 erfcf128 (_Float128) throw (); extern _Float128 __erfcf128 (_Float128) throw ();
extern _Float128 lgammaf128 (_Float128) throw (); extern _Float128 __lgammaf128 (_Float128) throw ();




extern _Float128 tgammaf128 (_Float128) throw (); extern _Float128 __tgammaf128 (_Float128) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) throw (); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) throw ();






extern _Float128 rintf128 (_Float128 __x) throw (); extern _Float128 __rintf128 (_Float128 __x) throw ();


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) throw ();






extern _Float128 nextdownf128 (_Float128 __x) throw (); extern _Float128 __nextdownf128 (_Float128 __x) throw ();

extern _Float128 nextupf128 (_Float128 __x) throw (); extern _Float128 __nextupf128 (_Float128 __x) throw ();



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) throw ();



extern _Float128 scalbnf128 (_Float128 __x, int __n) throw (); extern _Float128 __scalbnf128 (_Float128 __x, int __n) throw ();



extern int ilogbf128 (_Float128 __x) throw (); extern int __ilogbf128 (_Float128 __x) throw ();




extern long int llogbf128 (_Float128 __x) throw (); extern long int __llogbf128 (_Float128 __x) throw ();




extern _Float128 scalblnf128 (_Float128 __x, long int __n) throw (); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) throw ();



extern _Float128 nearbyintf128 (_Float128 __x) throw (); extern _Float128 __nearbyintf128 (_Float128 __x) throw ();



extern _Float128 roundf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) throw () __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw (); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw ();






extern long int lrintf128 (_Float128 __x) throw (); extern long int __lrintf128 (_Float128 __x) throw ();
__extension__
extern long long int llrintf128 (_Float128 __x) throw (); extern long long int __llrintf128 (_Float128 __x) throw ();



extern long int lroundf128 (_Float128 __x) throw (); extern long int __lroundf128 (_Float128 __x) throw ();
__extension__
extern long long int llroundf128 (_Float128 __x) throw (); extern long long int __llroundf128 (_Float128 __x) throw ();



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw (); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw ();




extern _Float128 roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern int totalorderf128 (_Float128 __x, _Float128 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf128 (_Float128 __x, _Float128 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) throw ();


extern _Float128 getpayloadf128 (const _Float128 *__x) throw (); extern _Float128 __getpayloadf128 (const _Float128 *__x) throw ();


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) throw ();


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) throw ();
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


 extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

 extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ()
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





 extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


 extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32x __nanf32x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


 extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

 extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ()
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





 extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


 extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64x __nanf64x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 489 "/usr/include/math.h" 3 4
extern int signgam;
# 569 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 684 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }

inline int iscanonical (_Float128 __val) { return ((void) (__typeof (__val)) (__val), 1); }

}
# 685 "/usr/include/math.h" 2 3 4
# 696 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}

inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }

}
# 725 "/usr/include/math.h" 3 4
extern "C++" {
# 754 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1205 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (double __x, double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};


template<> struct __iseqsig_type<_Float128>
{
  static int __call (_Float128 __x, _Float128 __y) throw ()
  {
    return __iseqsigf128 (__x, __y);
  }
};


template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/usr/include/c++/7/cmath" 2 3
# 77 "/usr/include/c++/7/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/usr/include/c++/7/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 536 "/usr/include/c++/7/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 957 "/usr/include/c++/7/cmath" 3

}
# 1075 "/usr/include/c++/7/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }



}
# 1917 "/usr/include/c++/7/cmath" 3
}
# 37 "/usr/include/c++/7/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 9 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 2


# 10 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
using std::cout;
using std::endl;


class Integer;
class RationalNumber;
class ComplexRationalNumber;
class BigPrimeField;
class GeneralizedFermatPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;
# 449 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
class SmallPrimeField : public BPASFiniteField<SmallPrimeField> {

private:

 long long int a;
 static long long int prime;

 static unsigned long long int Pp;







public:

 static RingProperties properties;
 static mpz_class characteristic;




 SmallPrimeField ();


 SmallPrimeField (long long int _a);

 SmallPrimeField (const SmallPrimeField& c);

 explicit SmallPrimeField (const Integer& c);

 explicit SmallPrimeField (const RationalNumber& c);

 explicit SmallPrimeField (const ComplexRationalNumber& c);

 explicit SmallPrimeField (const BigPrimeField& c);

 explicit SmallPrimeField (const GeneralizedFermatPrimeField& c);

 explicit SmallPrimeField (const DenseUnivariateIntegerPolynomial& c);

 explicit SmallPrimeField (const DenseUnivariateRationalPolynomial& c);

 explicit SmallPrimeField (const SparseUnivariatePolynomial<Integer>& c);

 explicit SmallPrimeField (const SparseUnivariatePolynomial<RationalNumber>& c);

 explicit SmallPrimeField (const SparseUnivariatePolynomial<ComplexRationalNumber>& c);

 template <class Ring>
 explicit SmallPrimeField (const SparseUnivariatePolynomial<Ring>& c);

 SmallPrimeField* SPFpointer(SmallPrimeField* b);

 SmallPrimeField* SPFpointer(RationalNumber* a);

 SmallPrimeField* SPFpointer(BigPrimeField* a);

 SmallPrimeField* SPFpointer(GeneralizedFermatPrimeField* a);


 long long int number() const;

 void whichprimefield();

 static void setPrime(long long int p){

  prime = p;

  std::ostringstream ss;
  ss << p;
  std::string sp = ss.str();




  mpz_class w(sp);

    SmallPrimeField::characteristic = w;
# 539 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
      long long int t, A, B, C, D, u, v,q;
    __asm__(

        "xor %%rax,%%rax\n\t"
        "movq $1,%%rdx\n\t"
        "divq %2\n\t"



        : "=&d" (v),"=&a" (q)
        : "b"(prime)
        :"rsi","rdi");
    A = 1;
    B = 0;
    C = 0;
    D = 1;

    u = prime;

    t = A;
    A = B;
    B = t - q * B;
    t = C;
    C = D;
    D = t - q * D;

    while (v != 0){
      q = u / v;
      t = u;
      u = v;
      v = t - q * v;
      t = A;
      A = B;
      B = t - q * B;
      t = C;
      C = D;
      D = t - q * D;

    }

    if(C < 0){
      C = 0-C;
      Pp = (unsigned long long int)C;
    }
    else{
      __asm__(

        "xor %%rax,%%rax\n\t"
        "movq $1,%%rdx\n\t"
        "sub %1,%%rax\n\t"
        "sbb $0,%%rdx\n\t"


        "movq %%rax,%%rdx\n\t"
        : "=&d" (Pp)
        : "b"((unsigned long long int)C)
        :"rsi","rdi");
    }

 }

 long long int Prime();

 SmallPrimeField& operator= (const SmallPrimeField& c);

 SmallPrimeField& operator= (long long int k);

 SmallPrimeField findPrimitiveRootOfUnity(long int n) const {
  return SmallPrimeField::findPrimitiveRootofUnity(n);
 }


 static SmallPrimeField findPrimitiveRootofUnity(long long int n){
  if ( ((prime - 1) % n != 0)){
   cout << "ERROR: n does not divide prime - 1." << endl;
   return -1;
  }
  bool flag = false;
  long long int q = (prime - 1) / n;
  SmallPrimeField p1 (prime - 1);
  SmallPrimeField c;
  int i = 0;
  long long int test = q * n / 2;
  srand (time(
# 622 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
             __null
# 622 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                 ));
  while(i < 20){
   c = rand();
   if ((c^test) == p1) {
    flag = true;
    return (c^q);
   }
   i ++;
  }
  if (!flag ){
   cout << "No primitive root found!"<< endl;
   return 0;
  }

 }

 inline bool isZero() const {
  return (a == 0);
 }

 inline void zero() {
  a = 0;
 }

 inline bool isOne() const {
    SmallPrimeField b(1);
  return (a == b.a);
 }

 inline void one() {
    SmallPrimeField b(1);
  a = b.a;
 }

 inline bool isNegativeOne() {
    SmallPrimeField b(-1);
    return (a == b.a);
 }
 inline void negativeOne() {
    SmallPrimeField b(-1);
    a = b.a;
 }

 inline int isConstant() {
  if (a >= 0)
   return 1;
  else { return -1; }
 }

  SmallPrimeField unitCanonical(SmallPrimeField* u = 
# 671 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
                                                    __null
# 671 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                                                        , SmallPrimeField* v = 
# 671 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
                                                                               __null
# 671 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                                                                                   ) const ;

 inline SmallPrimeField operator+ (const SmallPrimeField& c) const {
  SmallPrimeField r (*this);
  return (r += c);
 }

 inline SmallPrimeField operator+ (const long long int& c) const {
  SmallPrimeField r (*this);
  SmallPrimeField b (c);
  return (r += b);
 }
 inline SmallPrimeField operator+ (const int& c) const {
  SmallPrimeField r (*this);
  SmallPrimeField b (c);
  return (r += b);
 }
 inline SmallPrimeField operator+= (const long long int& c) {
  SmallPrimeField r (*this);
  SmallPrimeField b (c);
  return (r += b);
 }

 inline SmallPrimeField& operator+= (const SmallPrimeField& c) {


    a = a + c.a;
    a -= prime;
    a += (a >> 63) & prime;
    return *this;
 }

 inline SmallPrimeField operator- (const SmallPrimeField& c) const {
  SmallPrimeField r (*this);
  return (r -= c);
 }

 inline SmallPrimeField operator- (const long long int& c) const {
  SmallPrimeField r (*this);
  SmallPrimeField b (c);
  return (r -= b);
 }
 inline SmallPrimeField operator-= (const long long int& c) {
  SmallPrimeField r (*this);
  SmallPrimeField b (c);
  return (r -= b);
 }

 inline SmallPrimeField& operator-= (const SmallPrimeField& c) {







    a = a - c.a;
    a += (a >> 63) & prime;
    return *this;
 }
 inline SmallPrimeField operator- () const {
  SmallPrimeField ret (*this);
  ret.a = prime - a;
  return ret;
 }

 inline SmallPrimeField operator* (const SmallPrimeField& c) const {
   SmallPrimeField r (*this);

  r*=c;

  return r;
 }

 inline SmallPrimeField operator* (long long int c) const {
  SmallPrimeField r (*this);
  SmallPrimeField b(c);
  return (r *= b);
 }


 inline SmallPrimeField& operator*= (const SmallPrimeField& c) {
# 762 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
    long long int _a = a;
  __asm__(
      "mulq %2\n\t"
      "movq %%rax,%%rsi\n\t"
      "movq %%rdx,%%rdi\n\t"
      "imulq %3,%%rax\n\t"
      "mulq %4\n\t"
      "add %%rsi,%%rax\n\t"
      "adc %%rdi,%%rdx\n\t"
      "subq %4,%%rdx\n\t"
      "mov %%rdx,%%rax\n\t"
      "sar $63,%%rax\n\t"
      "andq %4,%%rax\n\t"
      "addq %%rax,%%rdx\n\t"
      : "=&d" (_a)
      : "a"(_a),"rm"(c.a),"b"((unsigned long long int)Pp),"c"(prime)
      :"rsi","rdi");
  a = _a;
    return *this;
 }


 long long int* pinverse();



 static long long int Mont(long long int b, long long int c);
  static long long int getRsquare();

 inline SmallPrimeField inverse() const {
   SmallPrimeField r(*this);

     long long int rsquare = getRsquare();
# 805 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
      if (r.a == 0)
      {
        printf("Not invertible!\n");
        return 0;
      }

    long long int* result = r.pinverse();
    if(result[1] < 64){
      result[0] = Mont(result[0], rsquare);
      result[1] += 64;
    }
    result[0] = Mont(result[0], rsquare);
    long long int tmp;
    if(result[1] != 64){
      r.a = 1L << (128 - result[1]);
      result[0] = Mont(result[0], r.a);
    }
    r.a = result[0];
    free(result);
    return r;
 }


 SmallPrimeField inverse2();

 inline SmallPrimeField operator^ (long long int e) const {
  SmallPrimeField r;
  if (isZero() || isOne() || e == 1)
   r = *this;
  else if (e == 2) {
   r = *this * *this;
  }
  else if (e > 2) {
   SmallPrimeField x (*this);
   r.one();

   while (e != 0) {
    if (e % 2)
     r *= x;
    x = x * x;
    e >>= 1;
   }
  }
  else if (e == 0) {
   r.one();
  }
  else {
   r = *this ^ (-e);
   r=r.inverse();
  }
  return r;

 }

 inline SmallPrimeField& operator^= (long long int e) {
  *this = *this ^ e;
  return *this;
 }

 inline bool operator== (const SmallPrimeField& c) const {
  if ((*this).number() == c.number())
   return 1;
  else { return 0; }
 }

 inline bool operator== (long long int k) const {
  SmallPrimeField r (*this);
  SmallPrimeField b (k);
  if (b.number() == r.number()){
   return 1;
  }
  else {
   return 0;
  }
 }

 inline bool operator!= (const SmallPrimeField& c) const {
  if ((*this).number() == c.number())
   return 0;
  else { return 1; }
 }


 inline bool operator!= (long long int k) const {
  SmallPrimeField r (*this);
  SmallPrimeField b (k);
  if (b.number() == r.number()){
   return 0;
  }
  else {
   return 1;
  }
 }

 inline ExpressionTree convertToExpressionTree() const {
  return ExpressionTree(new ExprTreeNode(this->number()));
 }

 inline SmallPrimeField operator/ (const SmallPrimeField& c) const {
  SmallPrimeField r (*this);
  r /= c;
  return r;
 }

 inline SmallPrimeField operator/ (long long int c) const {
  SmallPrimeField r (*this);
  SmallPrimeField b(c);
  return (r /= b);
 }

 inline SmallPrimeField& operator/= (const SmallPrimeField& c) {
  if (c.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SmallPrimeField."<< std::endl;
   exit(1);
  }

  SmallPrimeField inv = c.inverse();
  SmallPrimeField r (*this);
  r *= inv;
    (*this).a = r.a;
  return *this;
 }

  inline SmallPrimeField operator% (const SmallPrimeField& c) const {
    return *this % c;
  }

  inline SmallPrimeField& operator%= (const SmallPrimeField& c) {
    (*this).a = (*this).a % c.a;
    return *this;
  }

 inline SmallPrimeField gcd (const SmallPrimeField& other) const {
  SmallPrimeField q (0);
  SmallPrimeField r (0);
  SmallPrimeField b (*this);
  SmallPrimeField c (other);
  if(b.a < c.a){
   return c.gcd(b);
  }
  while (c.a > 0) {
   q.a = b.a / c.a;
   r.a = b.a % c.a;
   b = c;
   c = r;
  }
  return b;
 }




 inline Factors<SmallPrimeField> squareFree() const {
  std::vector<SmallPrimeField> ret;
  ret.push_back(*this);
  return ret;
 }




 inline SmallPrimeField euclideanSize() const {
  return (*this).number();
 }





 SmallPrimeField euclideanDivision(const SmallPrimeField& b, SmallPrimeField* q = 
# 974 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
                                                                                 __null
# 974 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                                                                                     ) const;





 SmallPrimeField extendedEuclidean(const SmallPrimeField& b, SmallPrimeField* s = 
# 980 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
                                                                                 __null
# 980 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                                                                                     , SmallPrimeField* t = 
# 980 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp" 3 4
                                                                                                            __null
# 980 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField.hpp"
                                                                                                                ) const;




 SmallPrimeField quotient(const SmallPrimeField& b) const;




 SmallPrimeField remainder(const SmallPrimeField& b) const;

};
# 18 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
using std::endl;
using std::cout;


class Integer;
class RationalNumber;
class ComplexRationalNumber;
class SmallPrimeField;
class GeneralizedFermatPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;





class BigPrimeField : public BPASFiniteField<BigPrimeField> {

private:

 static mpz_class prime;
 mpz_class a;

public:

 static mpz_class characteristic;
    static RingProperties properties;




 BigPrimeField ();

 BigPrimeField (mpz_class _a);

 BigPrimeField (long int _a);

 BigPrimeField (const BigPrimeField& c);

 explicit BigPrimeField (const Integer& c);

 explicit BigPrimeField (const RationalNumber& c);

 explicit BigPrimeField (const ComplexRationalNumber& c);

 explicit BigPrimeField (const SmallPrimeField& c);

 explicit BigPrimeField (const GeneralizedFermatPrimeField& c);

 explicit BigPrimeField (const DenseUnivariateIntegerPolynomial& c);

 explicit BigPrimeField (const DenseUnivariateRationalPolynomial& c);

 explicit BigPrimeField (const SparseUnivariatePolynomial<Integer>& c);

 explicit BigPrimeField (const SparseUnivariatePolynomial<RationalNumber>& c);

 explicit BigPrimeField (const SparseUnivariatePolynomial<ComplexRationalNumber>& c);

 template <class Ring>
 explicit BigPrimeField (const SparseUnivariatePolynomial<Ring>& c);

 BigPrimeField* BPFpointer(BigPrimeField* b);

 BigPrimeField* BPFpointer(RationalNumber* a);

 BigPrimeField* BPFpointer(SmallPrimeField* a);

 BigPrimeField* BPFpointer(GeneralizedFermatPrimeField* a);

 static void setPrime(mpz_class p){
  prime = p;

 }

 mpz_class Prime() const;

 mpz_class number() const;

 void whichprimefield();

 BigPrimeField findPrimitiveRootOfUnity(long int n) const {
  return BigPrimeField::findPrimitiveRootofUnity(mpz_class(n));
 }


 static BigPrimeField findPrimitiveRootofUnity(mpz_class n){
  if ( ((prime - 1) % n != 0)){
   cout << "ERROR: n does not divide prime - 1." << endl;
   return -1;
  }
  bool flag = false;
  mpz_class q = (prime - 1) / n;
  BigPrimeField p1 (prime - 1);
  BigPrimeField c;
  int i = 0;
  mpz_class test = q * n / 2;
  srand (time(
# 108 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
             __null
# 108 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                 ));
  while(i < 20){
   c = rand();
   if ((c^test) == p1) {
    flag = true;
    return (c^q);
   }
   i++;
  }
  if (!flag ){
   cout << "No primitive root found!"<< endl;
   return 0;
  }

 }

   BigPrimeField unitCanonical(BigPrimeField* u = 
# 124 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
                                                 __null
# 124 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                                                     , BigPrimeField* v = 
# 124 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
                                                                          __null
# 124 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                                                                              ) const;

 BigPrimeField& operator= (const BigPrimeField& c);

 BigPrimeField& operator= (long int k);

 BigPrimeField& operator= (const mpz_class& k);

 inline bool isZero() const {
  return (a == 0);
 }

 inline void zero() {
  a = 0;
 }

 inline bool isOne() const {
  return (a == 1);
 }

 inline void one() {
  a = 1;
 }

 inline bool isNegativeOne() const {
  return (a == (prime - 1));
 }

 inline void negativeOne() {
  a = prime - 1;
 }

 inline int isConstant() const {
  if (a >= 0)
   return 1;
  else { return -1; }
 }

 inline bool operator== (const BigPrimeField& c) const {
  if (a == c.a)
   return 1;
  else { return 0; }
 }

 inline bool operator== (const mpz_class& k) const {
  BigPrimeField r (*this);
  BigPrimeField b (k);
  if (b == r){
   return 1;
  }
  else {
   return 0;
  }
 }

 inline bool operator== (long int k) const {
  BigPrimeField r (*this);
  BigPrimeField b (k);
  if (b == r){
   return 1;
  }
  else {
   return 0;
  }
 }

 inline bool operator!= (const BigPrimeField& c) const {
  if (a == c.a)
   return 0;
  else { return 1; }
 }

 inline bool operator!= (const mpz_class& k) const {
  BigPrimeField r (*this);
  BigPrimeField b (k);
  if (b == r){
   return 0;
  }
  else {
   return 1;
  }
 }

 inline bool operator!= (long int k) const {
  BigPrimeField r (*this);
  BigPrimeField b (k);
  if (b == r){
   return 0;
  }
  else {
   return 1;
  }
 }

 inline BigPrimeField operator+ (const BigPrimeField& c) const {
  BigPrimeField r (*this);
  return (r += c);
 }

 inline BigPrimeField operator+ (long int c) const {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r += b);
 }

 inline BigPrimeField operator+ (const mpz_class& c) const {
  BigPrimeField r (*this);
  BigPrimeField b(c);
  return (r += b);
 }

 inline BigPrimeField& operator+= (const BigPrimeField& c) {
  a = (a + c.a);
  if(a>prime)
   a -= prime;
  return *this;
 }

 inline BigPrimeField operator+= (long int c) {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r += b);
 }

 inline BigPrimeField operator+= (const mpz_class& c) {
  BigPrimeField r (*this);
  BigPrimeField b(c);
  return (r += b);
 }

 inline BigPrimeField operator- (const BigPrimeField& c) const {
  BigPrimeField r (*this);
  return (r -= c);
 }

 inline BigPrimeField operator- (long int c) const {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r += b);
 }

 inline BigPrimeField operator- (const mpz_class& c) const {
  BigPrimeField r (*this);
  BigPrimeField b(c);
  return (r += b);
 }

 inline BigPrimeField& operator-= (const BigPrimeField& c) {
  if ((a - c.a)<0){
   a = prime+(a - c.a);
  }
  else{
   a = a - c.a;
  }
  return *this;
 }

 inline BigPrimeField operator-= (long int c) {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r += b);
 }

 inline BigPrimeField operator-= (const mpz_class& c) {
  BigPrimeField r (*this);
  BigPrimeField b(c);
  return (r += b);
 }

 inline BigPrimeField operator- () const {
  BigPrimeField ret = *this;
  ret.a = prime - a;
  return ret;
 }

 inline BigPrimeField operator* (const BigPrimeField& c) const {
  BigPrimeField r (*this);
  return (r *= c);
 }

 inline BigPrimeField operator* (const mpz_class& c) const {
  BigPrimeField r (*this);
  return (r *= c);
 }

 inline BigPrimeField operator* (long int c) const {
  BigPrimeField r (*this);
  return (r *= c);
 }

 inline BigPrimeField& operator*= (const BigPrimeField& c) {
  a = (a * c.a)%prime;
  return *this;
 }

 inline BigPrimeField& operator*= (const mpz_class& m) {
  mpz_class c(m);
  while(c<0){
   c=c+prime;
  }
  a = (a * c)%prime;
  return *this;
 }

 inline BigPrimeField& operator*= (long int c) {
  mpz_class b = c;
  while(b<0){
   b=b+prime;
  }
  a = (a * b)%prime;
  return *this;
 }

 inline BigPrimeField operator^ (long long int c) const {
  BigPrimeField r (*this);
  mpz_class b(std::to_string(c), 10);
  return (r ^ b);
 }

 inline BigPrimeField operator^ (const mpz_class& exp) const {
  BigPrimeField r;
  mpz_class e = exp;
  if (isZero() || isOne() || e == 1)
   r = *this;
  else if (e == 2) {
   r = *this * *this;
  }
  else if (e > 2) {
   BigPrimeField x (*this);
   r.one();

   while (e != 0) {
    if ((e % 2) == 1)
     r *= x;
    x = x * x;
    e >>= 1;
   }
  }
  else if (e == 0) {
   r.one();
  }
  else {
   r = *this ^ (-e);
   r=r.inverse();
  }
  return r;
 }

 inline BigPrimeField& operator^= (long long int c) {
  *this = *this ^ c;
  return *this;
 }

 inline BigPrimeField& operator^= (const mpz_class& e) {
  *this = *this ^ e;
  return *this;
 }

 inline ExpressionTree convertToExpressionTree() const {
  return ExpressionTree(new ExprTreeNode(a));
 }

 inline BigPrimeField operator/ (const BigPrimeField& c) const {
  BigPrimeField r (*this);
  return (r /= c);
 }

 inline BigPrimeField operator/ (long int c) const {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r /= b);
 }

 inline BigPrimeField operator/ (const mpz_class& c) const {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return (r /= b);
 }

 inline BigPrimeField& operator/= (const BigPrimeField& c) {
  if (c.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SmallPrimeField."<< std::endl;
   exit(1);
  }
  BigPrimeField inv = c.inverse();
  *this *= inv;
  return *this;
 }

 inline BigPrimeField& operator/= (long int c) {
  BigPrimeField b (c);
  return (*this /= b);
 }

 inline BigPrimeField& operator/= (const mpz_class& c) {
  BigPrimeField b (c);
  return (*this /= b);
 }

 inline BigPrimeField operator% (const BigPrimeField& c) const {
  return 0;
 }

 inline BigPrimeField& operator%= (const BigPrimeField& c) {
  *this = 0;
  return *this;
 }

 inline BigPrimeField gcd (const BigPrimeField& other) const {
  BigPrimeField q (0);
  BigPrimeField r (0);
  BigPrimeField c (other);
  BigPrimeField b (*this);
  if(b.a < c.a){
   return c.gcd(b);
  }
  while (c.a > 0) {
   q.a = b.a / c.a;
   r.a = b.a % c.a;
   b = c;
   c = r;
  }
  return b;
 }

 inline BigPrimeField gcd (long int c){
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return r.gcd(b);
 }

 inline BigPrimeField gcd (const mpz_class& c) const {
  BigPrimeField r (*this);
  BigPrimeField b (c);
  return r.gcd(b);
 }




 inline Factors<BigPrimeField> squareFree() const {
  std::vector<BigPrimeField> ret;
  ret.push_back(*this);
  return ret;
 }




 inline BigPrimeField euclideanSize() const {
  return (*this).number();
 }





 BigPrimeField euclideanDivision(const BigPrimeField& b, BigPrimeField* q = 
# 481 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
                                                                           __null
# 481 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                                                                               ) const;





 BigPrimeField extendedEuclidean(const BigPrimeField& b, BigPrimeField* s = 
# 487 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
                                                                           __null
# 487 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                                                                               , BigPrimeField* t = 
# 487 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
                                                                                                    __null
# 487 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                                                                                                        ) const;




 BigPrimeField quotient(const BigPrimeField& b) const;




 BigPrimeField remainder(const BigPrimeField& b) const;

 inline BigPrimeField inverse() const {
  BigPrimeField r(0);
  mpz_t temp;
  
# 502 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
 __gmpz_init
# 502 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
         (temp);
  if (!
# 503 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
      __gmpz_invert
# 503 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
                (temp, a.get_mpz_t(), prime.get_mpz_t()))
   
# 504 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
  __gmpz_set_si
# 504 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
            (temp, 0);
  mpz_class temp_class(temp);
  
# 506 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp" 3 4
 __gmpz_clear
# 506 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField.hpp"
          (temp);
  r = temp_class;
  return r;
 }

};
# 19 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 1







typedef unsigned long long int usfixn64;







class Integer;
class RationalNumber;
class ComplexRationalNumber;
class SmallPrimeField;
class BigPrimeField;
class DenseUnivariateIntegerPolynomial;
class DenseUnivariateRationalPolynomial;
template <class Ring>
class SparseUnivariatePolynomial;

using std::endl;
using std::cout;
# 36 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
class GeneralizedFermatPrimeField : public BPASFiniteField<GeneralizedFermatPrimeField> {

private:
 static mpz_class& prime;

public:
 usfixn64 *x;

 static mpz_class characteristic;
 static RingProperties properties;

 static usfixn64 r;
 static int k;




 GeneralizedFermatPrimeField ();

 GeneralizedFermatPrimeField (mpz_class a);

 GeneralizedFermatPrimeField (int a);

 GeneralizedFermatPrimeField (const GeneralizedFermatPrimeField& c);

 explicit GeneralizedFermatPrimeField (const Integer& c);

 explicit GeneralizedFermatPrimeField (const RationalNumber& c);

 explicit GeneralizedFermatPrimeField (const SmallPrimeField& c);

 explicit GeneralizedFermatPrimeField (const BigPrimeField& c);

 explicit GeneralizedFermatPrimeField (const DenseUnivariateIntegerPolynomial& c);

 explicit GeneralizedFermatPrimeField (const DenseUnivariateRationalPolynomial& c);

 explicit GeneralizedFermatPrimeField (const SparseUnivariatePolynomial<Integer>& c);

 explicit GeneralizedFermatPrimeField (const SparseUnivariatePolynomial<RationalNumber>& c);

 explicit GeneralizedFermatPrimeField (const SparseUnivariatePolynomial<ComplexRationalNumber>& c);

 template <class Ring>
 explicit GeneralizedFermatPrimeField (const SparseUnivariatePolynomial<Ring>& c);

 GeneralizedFermatPrimeField* GPFpointer(GeneralizedFermatPrimeField* a);

 GeneralizedFermatPrimeField* GPFpointer(RationalNumber* a);

 GeneralizedFermatPrimeField* GPFpointer(SmallPrimeField* a);

 GeneralizedFermatPrimeField* GPFpointer(BigPrimeField* a);

 static void setPrime (mpz_class p,usfixn64 R, int K){
  prime = p;

  r = R;
  k = K;
 }

 void setX (mpz_class a);

 mpz_class Prime() const;

 mpz_class number() const;

 GeneralizedFermatPrimeField unitCanonical(GeneralizedFermatPrimeField* u = 
# 103 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
                                                                           __null
# 103 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                                                                               , GeneralizedFermatPrimeField* v = 
# 103 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
                                                                                                                  __null
# 103 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                                                                                                                      ) const;

 static mpz_class power(mpz_class xi, mpz_class yi) {
  mpz_class res = 1;

  xi = xi % prime;


  while (yi > 0){

   if ((yi % 2) == 1){
    res = (res*xi) % prime;
    yi = yi - 1;
   }


  yi = yi / 2;
  xi = (xi*xi) % prime;
  }
  return res;
 }

 GeneralizedFermatPrimeField findPrimitiveRootOfUnity(long int n) const {
  return GeneralizedFermatPrimeField::findPrimitiveRootofUnity(n);
 }

 static mpz_class findPrimitiveRootofUnity_plain(mpz_class n){
  if ( ((prime - 1) % n != 0)){
   cout << "ERROR: n does not divide prime - 1." << endl;
   return -1;
  }
  bool flag = false;
  mpz_class q = (prime - 1) / n;
  mpz_class p1 = prime - 1;
  mpz_class c;
  int i = 0;
  mpz_class test = q * n / 2;


  srand (time(
# 142 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
             __null
# 142 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                 ));

  while(i < 20){

   c = rand();

   if (power(c,test) == p1) {
    flag = true;
    return power(c,q);
   }
   i++;

  }
  if (!flag ){
   cout << "No primitive root found!"<< endl;
   return 0;
  }

 }


 static GeneralizedFermatPrimeField findPrimitiveRootofUnity(mpz_class n){
  if(n<(2*k)){
   throw std::invalid_argument( "findPrimitiveRootofUnity error: N is less than 2k");
  }
  mpz_class g = findPrimitiveRootofUnity_plain(n);
  mpz_class n2k = n / (2 * k);
  mpz_class a = power(g, n2k);
  mpz_class b = a;
  std::stringstream str;
  str << r;
  mpz_class r_mpz (str.str());
  int j = 1;
  while (b != r_mpz){
   b = (a * b)%prime;
   j++;
  }
  GeneralizedFermatPrimeField result(power(g,j));
  return result;
 }

 GeneralizedFermatPrimeField& operator= (const GeneralizedFermatPrimeField& c);

 GeneralizedFermatPrimeField& operator= (const mpz_class& c);

 GeneralizedFermatPrimeField& operator= (int c);

 inline bool isZero() const {
  for (int i = 0; i < k; i++) {
   if (x[i] != 0) {
    return 0;
   }
  }
  return 1;
 }

 inline void zero() {
  memset(x, 0x00, (k) * sizeof(usfixn64));
 }

 inline bool isOne() const {
  for (int i = k - 1;i > 0; i --){
   if (x[i]!=0){
    return 0;
   }
  }

  if (x[0] == 1){
   return 1;
  }
  else {return 0;}
 }

 inline void one() {
  for (int i = k - 1;i > 0; i --){
   x[i] = 0;
  }

  x[0] = 1;
 }

 inline bool isNegativeOne() const {
  for (int i = 0; i < (k - 1);i ++){
   if (x[i] != 0){
    return 0;
   }
  }
  if (x[k - 1] != r){
   return 0;
  }
  else {return 1;}
 }

 inline void negativeOne() {
  for (int i = 0; i < (k - 1); i ++){
   x[i] = 0;
  }
  x[k - 1] = r;
 }

 inline int isConstant() const {
  return 1;
 }

 inline bool operator== (const GeneralizedFermatPrimeField& c) const {
  for (int i = 0; i < k; i++) {
   if (x[i] != c.x[i]) {
    return 0;
   }
  }

  return 1;
 }

 inline bool operator== (const mpz_class& c) const {
  GeneralizedFermatPrimeField b (c);
  for (int i = 0; i < k; i++) {
   if (x[i] != b.x[i]) {
    return 0;
   }
  }

  return 1;
 }

 inline bool operator!= (const GeneralizedFermatPrimeField& c) const {
  for (int i = 0; i < k; i++) {
   if (x[i] != c.x[i]) {
    return 1;
   }
  }
  return 0;
 }

 inline bool operator!= (const mpz_class& c) const {
  GeneralizedFermatPrimeField b (c);
  for (int i = 0; i < k; i++) {
   if (x[i] != b.x[i]) {
    return 1;
   }
  }

  return 0;
 }

 inline GeneralizedFermatPrimeField operator+ (const GeneralizedFermatPrimeField& c) const {
  GeneralizedFermatPrimeField t (*this);
  return (t += c);
 }

 inline GeneralizedFermatPrimeField operator+ (const mpz_class& c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t += b);
 }

 inline GeneralizedFermatPrimeField& operator+= (const mpz_class& c) {
  GeneralizedFermatPrimeField b (c);
  *this += b;
  return *this;
 }

 inline GeneralizedFermatPrimeField operator+ (int c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t += b);
 }

 inline GeneralizedFermatPrimeField& operator+= (int c) {
  GeneralizedFermatPrimeField b (c);
  *this += b;
  return *this;
 }







 GeneralizedFermatPrimeField& operator+= (const GeneralizedFermatPrimeField& y);

 inline GeneralizedFermatPrimeField operator- (const GeneralizedFermatPrimeField& c) const {
  GeneralizedFermatPrimeField t (*this);
  return (t -= c);
 }

 inline GeneralizedFermatPrimeField operator- (const mpz_class& c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t -= b);
 }


 inline GeneralizedFermatPrimeField& operator-= (const mpz_class& c) {
  GeneralizedFermatPrimeField b (c);
  *this -= b;
  return *this;
 }

 inline GeneralizedFermatPrimeField operator- (int c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t -= b);
 }

 inline GeneralizedFermatPrimeField& operator-= (int c) {
  GeneralizedFermatPrimeField b (c);
  *this -= b;
  return *this;
 }


 GeneralizedFermatPrimeField& operator-= (const GeneralizedFermatPrimeField& y);

 inline GeneralizedFermatPrimeField operator- () const {
  GeneralizedFermatPrimeField b (0);
  return (b - *this);
 }


 void smallAdd2 (usfixn64 *xm, usfixn64* ym, short & c);

 void oneShiftRight (usfixn64 * xs);


 void mulLong_2 (usfixn64 x, usfixn64 y, usfixn64 &s0,usfixn64 &s1, usfixn64 &s2);


 void mulLong_3 (usfixn64 const &x, usfixn64 const &y, usfixn64 &s0,
  usfixn64 &s1, usfixn64 &s2);

 void multiplication (usfixn64* __restrict__ xs, const usfixn64* __restrict__ ys,
  usfixn64 permutationStride, usfixn64* lVector,
  usfixn64 *hVector, usfixn64* cVector,
  usfixn64* lVectorSub,
  usfixn64 *hVectorSub, usfixn64* cVectorSub );

 void multiplication_step2 (usfixn64* __restrict__ xs, usfixn64 permutationStride,
  usfixn64* __restrict__ lVector,
  usfixn64 * __restrict__ hVector,
  usfixn64* __restrict__ cVector);

 inline GeneralizedFermatPrimeField operator* (const GeneralizedFermatPrimeField& c) const {
  GeneralizedFermatPrimeField t (*this);
  return (t *= c);
 }

 inline GeneralizedFermatPrimeField operator* (const mpz_class& c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t *= b);
 }

 inline GeneralizedFermatPrimeField& operator*= (const mpz_class& c) {
  GeneralizedFermatPrimeField b (c);
  *this *= b;
  return *this;
 }

 inline GeneralizedFermatPrimeField operator* (int c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t *= b);
 }

 inline GeneralizedFermatPrimeField& operator*= (int c) {
  GeneralizedFermatPrimeField b (c);
  *this *= c;
  return *this;
 }


 inline GeneralizedFermatPrimeField& operator*= (const GeneralizedFermatPrimeField& c){
  mpz_class xi = number();
  mpz_class yi = c.number();
  *this = xi*yi;
  return *this;
 }




 GeneralizedFermatPrimeField MultiP3 (GeneralizedFermatPrimeField ys);



 GeneralizedFermatPrimeField MulPowR(int s);


 void egcd (const mpz_class& x, const mpz_class& y, mpz_class *ao, mpz_class *bo, mpz_class *vo, mpz_class P);

 inline GeneralizedFermatPrimeField inverse2(){
  mpz_class a, n, b, v;
  GeneralizedFermatPrimeField t(*this);
  a = t.number();
  egcd (a, prime, &n, &b, &v, prime);
  if (b < 0)
   b += prime;
  GeneralizedFermatPrimeField R (b);
  return R;
 }

 inline GeneralizedFermatPrimeField operator^ (long long int c) const {
  GeneralizedFermatPrimeField t (*this);
  mpz_class b (std::to_string(c), 10);
  return (t ^ b);
 }

 inline GeneralizedFermatPrimeField operator^ (const mpz_class& exp) const {
  GeneralizedFermatPrimeField t;
  mpz_class e(exp);

  if (isZero() || isOne() || e == 1)
   t = *this;
  else if (e == 2) {
   t = *this * *this;
  }
  else if (e > 2) {
   GeneralizedFermatPrimeField x (*this);
   t.one();

   while (e != 0) {
    if ((e % 2) == 1)
     t = t * x;
    x = x * x;
    e >>= 1;
   }
  }
  else if (e == 0) {
   t.one();
  }
  else {
   t = *this ^ (-e);
   t=t.inverse();
  }
  return t;
 }

 inline GeneralizedFermatPrimeField& operator^= (long long int c) {
  *this = *this ^ c;
  return *this;
 }

 inline GeneralizedFermatPrimeField& operator^= (const mpz_class& c) {
  *this = *this ^ c;
  return *this;
 }

 ExpressionTree convertToExpressionTree() const {
  return ExpressionTree(new ExprTreeNode(this->number()));
 }

 inline GeneralizedFermatPrimeField operator/ (const GeneralizedFermatPrimeField& c) const {
  GeneralizedFermatPrimeField t (*this);
  return (t /= c);
 }

 inline GeneralizedFermatPrimeField operator/ (long int c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t /= b);
 }

 inline GeneralizedFermatPrimeField operator/ (const mpz_class& c) const {
  GeneralizedFermatPrimeField t (*this);
  GeneralizedFermatPrimeField b (c);
  return (t /= b);
 }

 inline GeneralizedFermatPrimeField& operator/= (const GeneralizedFermatPrimeField& c) {
  if (c.isZero()) {
   std::cout << "BPAS: error, dividend is zero from GeneralizedFermatPrimeField."<< std::endl;
   exit(1);
  }
  GeneralizedFermatPrimeField inv = c.inverse();
  *this *= c;
  return *this;
 }

 inline GeneralizedFermatPrimeField& operator/= (long int c) {
  GeneralizedFermatPrimeField b (c);
  *this /= b;
  return *this;
 }

 inline GeneralizedFermatPrimeField& operator/= (const mpz_class& c) {
  GeneralizedFermatPrimeField b (c);
  *this /= b;
  return *this;
 }

 inline GeneralizedFermatPrimeField operator% (const GeneralizedFermatPrimeField& c) const {
  return 0;
 }

 inline GeneralizedFermatPrimeField& operator%= (const GeneralizedFermatPrimeField& c) {
  *this = 0;
  return *this;
 }

 inline GeneralizedFermatPrimeField gcd(const GeneralizedFermatPrimeField& a) const {
  std::cerr << "GeneralizedFermatPrimeField::gcd NOT YET IMPLEMENTED" << std::endl;
  exit(1);
  return GeneralizedFermatPrimeField();
 }




 inline Factors<GeneralizedFermatPrimeField> squareFree() const {
  std::vector<GeneralizedFermatPrimeField> ret;
  ret.push_back(*this);
  return ret;
 }




 inline GeneralizedFermatPrimeField euclideanSize() const {
  return (*this).number();
 }





 GeneralizedFermatPrimeField euclideanDivision(const GeneralizedFermatPrimeField& b, GeneralizedFermatPrimeField* q = 
# 569 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
                                                                                                                     __null
# 569 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                                                                                                                         ) const;





 GeneralizedFermatPrimeField extendedEuclidean(const GeneralizedFermatPrimeField& b, GeneralizedFermatPrimeField* s = 
# 575 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
                                                                                                                     __null
# 575 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                                                                                                                         , GeneralizedFermatPrimeField* t = 
# 575 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp" 3 4
                                                                                                                                                            __null
# 575 "../../include/RegularChain/../TriangularSet/../FiniteFields/GeneralizedFermatPrimeField.hpp"
                                                                                                                                                                ) const;




 GeneralizedFermatPrimeField quotient(const GeneralizedFermatPrimeField& b) const;




 GeneralizedFermatPrimeField remainder(const GeneralizedFermatPrimeField& b) const;


 GeneralizedFermatPrimeField inverse() const;


};
# 20 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/GFPF_Support.h" 1



extern "C" {





# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 1
# 11 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h"
# 1 "/usr/include/c++/7/math.h" 1 3
# 12 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 2
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 36 "/usr/include/c++/7/stdlib.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 37 "/usr/include/c++/7/stdlib.h" 2 3


# 38 "/usr/include/c++/7/stdlib.h" 3
using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 13 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 1






# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
typedef unsigned short usfixn16;
typedef unsigned int usfixn32;
typedef unsigned long long int usfixn64;
# 31 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
typedef struct
{
  int k;
  usfixn64 radix;
} srgfn_prime;





static char const *quadline = "------------------\n";
static char const *shortline = "----------------------------------\n";
static char const *longline =
    "---------------------------------------------------------------\n";




static void
print_verification_msg (const char * msg, int status)
{
  if (msg == 
# 52 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 3 4
            __null
# 52 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
                )
    {
      printf ("ERROR: in print_verification_msg; msg is NULL!\n");
      exit (
# 55 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 3 4
           1
# 55 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
                       );
    }
  printf ("[verifying %s]...", msg);
  if (status == 
# 58 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 3 4
               1
# 58 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
                           )
    {
      printf ("FAILED!\n");
      exit (
# 61 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 3 4
           1
# 61 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
                       );
    }
  else
    printf ("VERIFIED!\n");
  printf ("%s", quadline);
}



static void
printVector (usfixn64 * vector, int vectorSize, int coefficientSize,
      const char* vectorName)
{
  for (int i = 0; i < vectorSize; i++)
    {
      for (int j = 0; j < coefficientSize; j++)



 printf ("%s[%d,%d] = %llu \n", vectorName, i, j,
  vector[i * coefficientSize + j]);
      printf ("\n");

    }
}



static void
compare_vectors (usfixn64 * x, usfixn64 * y, int vectorSize,
   int coefficientSize, const char* x_name, const char* y_name)
{
  int idx = 0;
  for (int i = 0; i < vectorSize; i++)
    {
      for (int j = 0; j < coefficientSize; j++)
 {



   printf ("[%s,%s][%d,%d] = [%llu\t,\t%llu]", x_name, y_name, i, j,
    x[idx], y[idx]);
   if (x[idx] != y[idx])
     printf ("... MISMATCH");
   printf ("\n");
   idx++;

 }
    }
}



static void
printVectorToFile (usfixn64 * vector, int vectorSize, int coefficientSize,
     const char* fileName, int mode)
{
  FILE * writeFile;


  if (mode == 0)
    writeFile = fopen (fileName, "w");

  else if (mode == 1)
    {
      writeFile = fopen (fileName, "a");
    }

  usfixn32 idx = 0;
  for (int i = 0; i < vectorSize; i++)
    {
      for (int j = 0; j < coefficientSize; j++)
 {
   fprintf (writeFile, "%llu\n", vector[idx++]);
 }
      fprintf (writeFile, "\n");
    }

  fclose (writeFile);
}



static usfixn64*
readVectorFromFile (usfixn64 *vector, int vectorSize, int coefficientSize,
      const char *fileName)
{
  FILE * readFile = fopen (fileName, "r");
  for (int i = 0; i < vectorSize; i++)
    for (int j = 0; j < coefficientSize; j++)
      {

In file included from ../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h:9:0,
                 from ../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h:15,
                 from ../../include/RegularChain/../TriangularSet/../FiniteFields/GFPF_Support.h:10,
                 from ../../include/RegularChain/../TriangularSet/../ring.h:20,
                 from ../../include/RegularChain/../TriangularSet/../polynomial.h:8,
                 from ../../include/RegularChain/../TriangularSet/triangularset.hpp:5,
                 from ../../include/RegularChain/regularchain.hpp:4,
                 from zerodimensionalregularchain.cpp:3:
/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h:70:9: warning: #warning Cilk API is being used with non-Cilk compiler (or Cilk is disabled) [-Wcpp]
 #       warning Cilk API is being used with non-Cilk compiler (or Cilk is disabled)
         ^~~~~~~
 if (fscanf (readFile, "%llu", &vector[i * coefficientSize + j]) == 
# 153 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h" 3 4
                                                                   (-1)
# 153 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_types.h"
                                                                      )
   break;
      }

  fclose (readFile);
  return vector;
}
# 15 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h" 1




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk.h" 1 3 4
# 9 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 1 3 4
# 74 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 1 3 4
# 66 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 3 4

# 66 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 3 4
namespace cilk {



    namespace internal {}
}







# 1 "/usr/include/c++/7/cassert" 1 3 4
# 41 "/usr/include/c++/7/cassert" 3 4
       
# 42 "/usr/include/c++/7/cassert" 3


# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/include/c++/7/cassert" 2 3
# 80 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 2 3 4
# 342 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 3 4
extern "C" {


    struct __cilkrts_worker;



    typedef struct __cilkrts_worker __cilkrts_worker;



    typedef struct __cilkrts_worker *__cilkrts_worker_ptr;



    __cilkrts_worker_ptr __attribute__((nothrow)) __cilkrts_get_tls_worker(void);



    typedef void * __cilkrts_void_ptr;

}
# 372 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/common.h" 3 4
typedef struct __cilkrts_pedigree
{

    uint64_t rank;


    const struct __cilkrts_pedigree *parent;
} __cilkrts_pedigree;
# 75 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 2 3 4


# 1 "/usr/include/c++/7/cstddef" 1 3 4
# 42 "/usr/include/c++/7/cstddef" 3 4
       
# 43 "/usr/include/c++/7/cstddef" 3







# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 51 "/usr/include/c++/7/cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 78 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 2 3 4
# 93 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
extern "C" {



enum __cilkrts_set_param_status {
    __CILKRTS_SET_PARAM_SUCCESS = 0,
    __CILKRTS_SET_PARAM_UNIMP = 1,
    __CILKRTS_SET_PARAM_XRANGE = 2,
    __CILKRTS_SET_PARAM_INVALID = 3,
    __CILKRTS_SET_PARAM_LATE = 4
};
# 173 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 int __attribute__((nothrow)) __cilkrts_set_param(const char *param, const char *value);
# 191 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 void __attribute__((nothrow)) __cilkrts_end_cilk(void);



 void __attribute__((nothrow)) __cilkrts_init(void);




 int __attribute__((nothrow)) __cilkrts_get_nworkers(void);
# 210 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 int __attribute__((nothrow)) __cilkrts_get_total_workers(void);
# 222 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 int __attribute__((nothrow)) __cilkrts_get_worker_number(void);





 int __attribute__((nothrow)) __cilkrts_get_force_reduce(void);



 void __attribute__((nothrow))
    __cilkrts_metacall(unsigned int tool, unsigned int code, void *data);
# 271 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 __cilkrts_pedigree __attribute__((nothrow))
__cilkrts_get_pedigree_internal(__cilkrts_worker *w);



 int __attribute__((nothrow))
__cilkrts_bump_worker_rank_internal(__cilkrts_worker* w);
# 293 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
inline
__cilkrts_pedigree __cilkrts_get_pedigree(void)
{
    return __cilkrts_get_pedigree_internal(__cilkrts_get_tls_worker());
}
# 310 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
typedef struct
{
    std:: size_t size;
    void *data[3];
} __cilkrts_pedigree_context_t;
# 337 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
 int __attribute__((nothrow))
__cilkrts_get_pedigree_info( __cilkrts_pedigree_context_t *context,
                                         uint64_t *sf_birthrank);
# 349 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
inline
int __cilkrts_get_worker_rank(uint64_t *rank)
{
    *rank = __cilkrts_get_pedigree().rank;
    return 0;
}






inline
int __cilkrts_bump_worker_rank(void)
{
    return __cilkrts_bump_worker_rank_internal(__cilkrts_get_tls_worker());
}
# 376 "/usr/lib/gcc/x86_64-linux-gnu/7/include/cilk/cilk_api.h" 3 4
inline
int __cilkrts_bump_loop_rank(void)
{
    return 0;
}





}
# 10 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h" 2
# 19 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"

# 19 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
int
min_three (int a, int b, int c);



void
mpz_set_u64 (mpz_t xn, usfixn64 x);



usfixn64
mpz_get_u64 (mpz_t n);



void
u32vector_to_bigint_gmp (mpz_t bigint, usfixn32 *vector, int input_vector_size);
# 49 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
void
u32vector_to_radix_based_bigint_gmp (mpz_t bigint, usfixn32 *vector,
         usfixn32 radix, int input_vector_size);


void
u64vector_to_radix_based_bigint_gmp (mpz_t bigint, usfixn64 *vector,
         usfixn64 radix, int input_vector_size);


void
u32vector_to_bigint_gmp_via_str (mpz_t bigint, usfixn32 *vector,
     int input_vector_size);







void
bigint_to_u32vector_gmp (usfixn32 *vector, mpz_t bigint,
    int max_input_vector_size);


void
bigint_to_u32vector_radixbased_gmp (usfixn32 *vector, const mpz_t bigint,
        usfixn32 radix, int max_input_vector_size);



void
bigint_to_u64vector_radixbased_gmp (usfixn64 *vector, const mpz_t bigint,
        usfixn64 radix, int max_input_vector_size);



void
bigint_to_u64vector_gmp (usfixn64 *vector, mpz_t bigint,
    int max_input_vector_size);
# 100 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
void
cpu_generate_big_0xff_residue_list_vector_u32 (usfixn32* residue_list,
            usfixn32* prime_list,
            int n_primes, int n_instances);
# 115 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
void
cpu_generate_single_0xff_residue_list_vector_u32 (usfixn32* residue_list,
        usfixn32* prime_list,
        int n_primes,
        int n_instances);
# 133 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
int
verify_crt_u32vector_gmp (usfixn32* crt_result, usfixn32* residue_list,
     usfixn32* prime_list, int n_primes, int verbose);



void
gmp_print_mpz (mpz_t bignum, const char* name, int base);



void
gmp_bigint_to_radix_based_vec_u32 (usfixn32 *vec, mpz_t bigint, usfixn32 r,
       int k);




void
gmp_compute_srgfn (mpz_t p, usfixn32 r, int k);




void
gmp_compute_srgfn_u64 (mpz_t p, usfixn64 r, int k);





void
gmp_add_modp_u32 (usfixn32* x_vector, usfixn32* y_vector, mpz_t p, int k,
    usfixn64 r);





void
gmp_sub_modp_u32 (usfixn32* x_vector, usfixn32* y_vector, mpz_t p, int k,
    usfixn32 r);






void
gmp_mult_modp_u32 (usfixn32* x_vector, usfixn32* y_vector, mpz_t p, int k,
     usfixn32 r);





void
gmp_mult_pow_r_modp_u32 (usfixn32* x_vector, usfixn32 sn, mpz_t p, int k,
    usfixn32 r);



void
gmp_mult_modp_u32_specific (usfixn32* x_vector, usfixn32* y_vector, usfixn32 r,
       int k, mpz_t p);



void
print_big_field_element_u32 (usfixn32* bigFieldElement,
        usfixn32 coefficientSize);
# 212 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_tools_decl.h"
void
bigint_to_bigprime_field_element_u32_gmp (usfixn32 *bigFieldElement,
       mpz_t bigint, mpz_t p, mpz_t radix,
       usfixn32 coefficientSize);



void
vector_to_bigint_radix_based_u32 (mpz_t bigint, usfixn32* vector, mpz_t radix,
      int coefficient_size);





void
gmp_plain_poly_mult_u32 (usfixn32* host_vector_x, usfixn32* host_vector_y,
    int n, usfixn32 radix, int coefficient_size);





void
gmp_plain_poly_mult_u64 (usfixn64* host_vector_x, usfixn64* host_vector_y,
    int n, usfixn64 radix, int coefficient_size);





void
gmp_karatsuba_poly_mult_u32 (usfixn32* host_vector_x, usfixn32* host_vector_y,
        int n, usfixn32 radix, int coefficient_size);





void
gmp_karatsuba_poly_mult_u64 (usfixn64* host_vector_x, usfixn64* host_vector_y,
        int n, usfixn64 radix, int coefficient_size);



void
gmp_inv_mod_p (mpz_t inv, mpz_t x, mpz_t p);



void
gmp_inv_mod_p_u64 (usfixn64 * inv, const usfixn64 x, const usfixn64 p);



int
gmp_inv_radix_based_bigint_modp_u64 (usfixn64* result_vector,
         usfixn64* x_vector, usfixn64 radix, int k,
         mpz_t p);



int
gmp_mult_radix_based_bigint_by_scalar_modp_u64 (usfixn64* result_vector,
      const mpz_t scalar_zz,
      usfixn64 radix, int k, mpz_t p);



void
compute_srgfn_p_gmp (mpz_t p, usfixn64 radix, int coefficient_size);



int
compute_nth_root_of_unity_for_small_prime (usfixn64 prime, usfixn64* omega,
        int n);



int
compute_nth_root_of_unity_for_srgfn (srgfn_prime prime, usfixn64* omega, int n);
# 16 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/cpu_timer.h" 1
# 12 "../../include/RegularChain/../TriangularSet/../FiniteFields/cpu_timer.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 186 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 13 "../../include/RegularChain/../TriangularSet/../FiniteFields/cpu_timer.h" 2



# 15 "../../include/RegularChain/../TriangularSet/../FiniteFields/cpu_timer.h"
typedef struct cpu_timer
{
  struct timeval start_time, stop_time;
  double elapsed_time;

} cpu_timer;



void
timer_record_start (cpu_timer *t);



void
timer_record_stop (cpu_timer *t);



void
timer_get_elapsed_time (cpu_timer *t, const char* msg, int n_iterations);



void
timer_print_time (float elapsed_time, char* msg);




void
print_quantity(int q, char* msg);




void
timer_print_time_percentage (float elapsed_time, char* msg,
        float total_elapsed_time);
# 17 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_gmp_fft_decl.h" 2







static int global_gmp_profiling_ongoing = 0;

static int n_dft2_gmp_called = 0;
static int n_swap_gmp_called = 0;
static int n_DFTK_gmp_called = 0;


static int n_stride_permutation_gmp_called = 0;
static int stride_permutation_gmp_called_dims[256][2];

static int n_twiddle_gmp_called = 0;
static int twiddle_gmp_called_dims[256][2];

static int n_basecase_mult_gmp_called = 0;




void
add_gmp (mpz_t X, mpz_t Y, mpz_t P);



void
sub_gmp (mpz_t X, mpz_t Y, mpz_t P);



void
mult_gmp (mpz_t X, mpz_t Y, mpz_t P);



void
convolution_mult_gmp (mpz_t *X, mpz_t *Y, int n, mpz_t P);


void
mult_gmp_big_elements (usfixn64 *x, usfixn64 *y, const int k, const usfixn64 r,
         const mpz_t prime);



void
swap_gmp (mpz_t a, mpz_t b);



void
DFT2_gmp (mpz_t a0, mpz_t a1, mpz_t prime);



void
DFT_8_gmp (mpz_t* a, mpz_t omega, mpz_t prime, mpz_t * precompute_pow_omega);



void
DFT_16_gmp (mpz_t* a, mpz_t omega, mpz_t prime, mpz_t * omega_pow);



void
DFT_32_gmp (mpz_t* A, mpz_t omega, mpz_t prime, mpz_t * omega_pow);



void
DFT_64_gmp (mpz_t* A, mpz_t omega, mpz_t prime, mpz_t * precompute_pow_omega);



void
stride_permutation_gmp (int n_permutations, mpz_t* A, int m, int n);







void
precompute_sequential_powers_of_omega_gmp (mpz_t* precomputed_pow_omega_vec,
        const int K, const int b,
        const mpz_t omega, const mpz_t p);



void
mult_gmp_for_profiling_only (mpz_t X, mpz_t Y, mpz_t omega, mpz_t P);



void
twiddle_gmp (int n_permutations, mpz_t* vector, int K, int J, const mpz_t * omega_w,
      const mpz_t *omega_base_precomputed_vec, const mpz_t prime,
      float * t_twiddle_values, int * n_twiddle_mult);



void
DFT_general_gmp (mpz_t* vector, int K, int e, const mpz_t omega_zz, mpz_t prime,
   int verbose);
# 11 "../../include/RegularChain/../TriangularSet/../FiniteFields/GFPF_Support.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h" 1






# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 8 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h" 2
# 16 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h"
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h" 1




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h" 2




# 1 "/usr/include/c++/7/math.h" 1 3
# 11 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h" 2






# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/fourier_primes_u64.h" 1





static unsigned long long int fourier_primes_u64_table[10000]
={
4179340454199820289UL,
1945555039024054273UL,
4179340454199820289UL,
6269010681299730433UL,
180143985094819841UL,
1261007895663738881UL,
1945555039024054273UL,
2053641430080946177UL,
2485986994308513793UL,
4179340454199820289UL,
4719772409484279809UL,
6269010681299730433UL,
7097673012735901697UL,
180143985094819841UL,
882705526964617217UL,
1261007895663738881UL,
1945555039024054273UL,
2053641430080946177UL,
2287828610704211969UL,
2485986994308513793UL,
2936346957045563393UL,
3188548536178311169UL,
4179340454199820289UL,
4719772409484279809UL,
5998794703657500673UL,
6269010681299730433UL,
7097673012735901697UL,
7728176960567771137UL,
7908320945662590977UL,
8592868089022906369UL,
9097271247288401921UL,
180143985094819841UL,
459367161991790593UL,
855683929200394241UL,
882705526964617217UL,
891712726219358209UL,
1261007895663738881UL,
1288029493427961857UL,
1450159080013299713UL,
1945555039024054273UL,
2053641430080946177UL,
2098677426354651137UL,
2287828610704211969UL,
2422936599525326849UL,
2485986994308513793UL,
2747195772696002561UL,
2783224569714966529UL,
2936346957045563393UL,
3161526938414088193UL,
3188548536178311169UL,
3377699720527872001UL,
3774016487736475649UL,
4044232465378705409UL,
4134304457926115329UL,
4179340454199820289UL,
4242390848983007233UL,
4512606826625236993UL,
4719772409484279809UL,
4782822804267466753UL,
4854880398305394689UL,
5071053180419178497UL,
5179139571476070401UL,
5323254759551926273UL,
5395312353589854209UL,
5503398744646746113UL,
5998794703657500673UL,
6151917090988097537UL,
6269010681299730433UL,
6566248256706183169UL,
6782421038819966977UL,
6962565023914786817UL,
7097673012735901697UL,
7557040174727692289UL,
7728176960567771137UL,
7908320945662590977UL,
8295630513616453633UL,
8583860889768165377UL,
8592868089022906369UL,
8691947280825057281UL,
9097271247288401921UL,
31525197391593473UL,
112589990684262401UL,
180143985094819841UL,
418834765345456129UL,
459367161991790593UL,
734086739261390849UL,
788129934789836801UL,
855683929200394241UL,
882705526964617217UL,
891712726219358209UL,
1067353111686807553UL,
1139410705724735489UL,
1261007895663738881UL,
1288029493427961857UL,
1328561890074296321UL,
1450159080013299713UL,
1787929052066086913UL,
1945555039024054273UL,
2004101834179870721UL,
2013109033434611713UL,
2053641430080946177UL,
2098677426354651137UL,
2287828610704211969UL,
2391411402133733377UL,
2422936599525326849UL,
2485986994308513793UL,
2499497793190625281UL,
2706663376049668097UL,
2733684973813891073UL,
2747195772696002561UL,
2783224569714966529UL,
2936346957045563393UL,
3161526938414088193UL,
3188548536178311169UL,
3274116929098350593UL,
3377699720527872001UL,
3445253714938429441UL,
3774016487736475649UL,
3904620876930220033UL,
4030721666496593921UL,
4039728865751334913UL,
4044232465378705409UL,
4134304457926115329UL,
4179340454199820289UL,
4219872850846154753UL,
4242390848983007233UL,
4472074429978902529UL,
4512606826625236993UL,
4661225614328463361UL,
4719772409484279809UL,
4733283208366391297UL,
4782822804267466753UL,
4854880398305394689UL,
4922434392715952129UL,
4976477588244398081UL,
5071053180419178497UL,
5179139571476070401UL,
5300736761415073793UL,
5323254759551926273UL,
5390808753962483713UL,
5395312353589854209UL,
5503398744646746113UL,
5606981536076267521UL,
5787125521171087361UL,
5958262307011166209UL,
5998794703657500673UL,
6111384694341763073UL,
6147413491360727041UL,
6151917090988097537UL,
6269010681299730433UL,
6309543077946064897UL,
6363586273474510849UL,
6552737457824071681UL,
6566248256706183169UL,
6597773454097776641UL,
6606780653352517633UL,
6782421038819966977UL,
6958061424287416321UL,
6962565023914786817UL,
7003097420561121281UL,
7097673012735901697UL,
7147212608636977153UL,
7273313398203351041UL,
7309342195222315009UL,
7435442984788688897UL,
7462464582552911873UL,
7552536575100321793UL,
7557040174727692289UL,
7624594169138249729UL,
7728176960567771137UL,
7903817346035220481UL,
7908320945662590977UL,
8228076519205896193UL,
8246090917715378177UL,
8295630513616453633UL,
8583860889768165377UL,
8592868089022906369UL,
8691947280825057281UL,
8921630861820952577UL,
9056738850642067457UL,
9097271247288401921UL,
31525197391593473UL,
38280596832649217UL,
112589990684262401UL,
168884986026393601UL,
180143985094819841UL,
294985775592767489UL,
303992974847508481UL,
362539770003324929UL,
371546969258065921UL,
403072166649659393UL,
418834765345456129UL,
459367161991790593UL,
493144159197069313UL,
511158557706551297UL,
695806142428741633UL,
734086739261390849UL,
788129934789836801UL,
855683929200394241UL,
857935729014079489UL,
882705526964617217UL,
891712726219358209UL,
939000522306748417UL,
979532918953082881UL,
1033576114481528833UL,
1067353111686807553UL,
1139410705724735489UL,
1146166105165791233UL,
1261007895663738881UL,
1263259695477424129UL,
1281274093986906113UL,
1288029493427961857UL,
1294784892869017601UL,
1328561890074296321UL,
1450159080013299713UL,
1551490071629135873UL,
1587518868648099841UL,
1749648455233437697UL,
1787929052066086913UL,
1817202449643995137UL,
1902770842564034561UL,
1911778041818775553UL,
1938799639582998529UL,
1945555039024054273UL,
1997346434738814977UL,
2004101834179870721UL,
2013109033434611713UL,
2053641430080946177UL,
2098677426354651137UL,
2254051613498933249UL,
2276569611635785729UL,
2287828610704211969UL,
2308094809027379201UL,
2375648803437936641UL,
2384656002692677633UL,
2391411402133733377UL,
2411677600456900609UL,
2422936599525326849UL,
2452209997103235073UL,
2465720795985346561UL,
2479231594867458049UL,
2485986994308513793UL,
2499497793190625281UL,
2533274790395904001UL,
2578310786669608961UL,
2654871980334907393UL,
2706663376049668097UL,
2733684973813891073UL,
2747195772696002561UL,
2749447572509687809UL,
2783224569714966529UL,
2862037563193950209UL,
2936346957045563393UL,
2943102356486619137UL,
3037677948661399553UL,
3064699546425622529UL,
3161526938414088193UL,
3188548536178311169UL,
3274116929098350593UL,
3289879527794147329UL,
3343922723322593281UL,
3357433522204704769UL,
3375447920714186753UL,
3377699720527872001UL,
3397965918851039233UL,
3445253714938429441UL,
3492541511025819649UL,
3681692695375380481UL,
3774016487736475649UL,
3821304283823865857UL,
3904620876930220033UL,
4010455468173426689UL,
4030721666496593921UL,
4039728865751334913UL,
4044232465378705409UL,
4114038259602948097UL,
4134304457926115329UL,
4141059857367171073UL,
4168081455131394049UL,
4179340454199820289UL,
4186095853640876033UL,
4219872850846154753UL,
4226628250287210497UL,
4242390848983007233UL,
4276167846188285953UL,
4384254237245177857UL,
4472074429978902529UL,
4512606826625236993UL,
4546383823830515713UL,
4661225614328463361UL,
4719772409484279809UL,
4733283208366391297UL,
4782822804267466753UL,
4794081803335892993UL,
4854880398305394689UL,
4897664594765414401UL,
4922434392715952129UL,
4929189792157007873UL,
4976477588244398081UL,
5071053180419178497UL,
5131851775388680193UL,
5154369773525532673UL,
5179139571476070401UL,
5300736761415073793UL,
5323254759551926273UL,
5370542555639316481UL,
5390808753962483713UL,
5395312353589854209UL,
5465118147814096897UL,
5503398744646746113UL,
5606981536076267521UL,
5787125521171087361UL,
5888456512786923521UL,
5958262307011166209UL,
5969521306079592449UL,
5998794703657500673UL,
6059593298627002369UL,
6111384694341763073UL,
6147413491360727041UL,
6151917090988097537UL,
6158672490429153281UL,
6226226484839710721UL,
6248744482976563201UL,
6269010681299730433UL,
6307291278132379649UL,
6309543077946064897UL,
6363586273474510849UL,
6388356071425048577UL,
6518960460618792961UL,
6552737457824071681UL,
6566248256706183169UL,
6597773454097776641UL,
6606780653352517633UL,
6782421038819966977UL,
6861234032298950657UL,
6924284427082137601UL,
6958061424287416321UL,
6962565023914786817UL,
6982831222237954049UL,
7003097420561121281UL,
7023363618884288513UL,
7097673012735901697UL,
7147212608636977153UL,
7253047199880183809UL,
7273313398203351041UL,
7289075996899147777UL,
7309342195222315009UL,
7320601194290741249UL,
7356629991309705217UL,
7410673186838151169UL,
7428687585347633153UL,
7435442984788688897UL,
7462464582552911873UL,
7552536575100321793UL,
7557040174727692289UL,
7624594169138249729UL,
7631349568579305473UL,
7653867566716157953UL,
7728176960567771137UL,
7861033149575200769UL,
7903817346035220481UL,
7908320945662590977UL,
8032169935415279617UL,
8059191533179502593UL,
8072702332061614081UL,
8228076519205896193UL,
8246090917715378177UL,
8252846317156433921UL,
8295630513616453633UL,
8401465104859660289UL,
8455508300388106241UL,
8559091091817627649UL,
8583860889768165377UL,
8592868089022906369UL,
8658170283619778561UL,
8691947280825057281UL,
8883350264988303361UL,
8896861063870414849UL,
8914875462379896833UL,
8921630861820952577UL,
8941897060144119809UL,
8995940255672565761UL,
9031969052691529729UL,
9056738850642067457UL,
9097271247288401921UL,
9113033845984198657UL,
9158069842257903617UL,
9198602238904238081UL,
7881299347898369UL,
30399297484750849UL,
31525197391593473UL,
38280596832649217UL,
77687093572141057UL,
112589990684262401UL,
168884986026393601UL,
180143985094819841UL,
280349076803813377UL,
284852676431183873UL,
294985775592767489UL,
303992974847508481UL,
362539770003324929UL,
371546969258065921UL,
374924668978593793UL,
381680068419649537UL,
401946266742816769UL,
403072166649659393UL,
418834765345456129UL,
459367161991790593UL,
467248461339688961UL,
493144159197069313UL,
503277258358652929UL,
511158557706551297UL,
523543456681820161UL,
537054255563931649UL,
550565054446043137UL,
582090251837636609UL,
622622648483971073UL,
695806142428741633UL,
719450040472436737UL,
734086739261390849UL,
753227037677715457UL,
788129934789836801UL,
814025632647217153UL,
855683929200394241UL,
857935729014079489UL,
861313428734607361UL,
882705526964617217UL,
891712726219358209UL,
939000522306748417UL,
960392620536758273UL,
979532918953082881UL,
1033576114481528833UL,
1043709213643112449UL,
1067353111686807553UL,
1102256008798928897UL,
1139410705724735489UL,
1146166105165791233UL,
1165306403582115841UL,
1246371196874784769UL,
1259881995756896257UL,
1261007895663738881UL,
1263259695477424129UL,
1277896394266378241UL,
1281274093986906113UL,
1288029493427961857UL,
1294784892869017601UL,
1328561890074296321UL,
1358961187559047169UL,
1406248983646437377UL,
1449033180106457089UL,
1450159080013299713UL,
1551490071629135873UL,
1563874970604404737UL,
1568378570231775233UL,
1587518868648099841UL,
1696731159611834369UL,
1705738358866575361UL,
1716997357935001601UL,
1749648455233437697UL,
1773292353277132801UL,
1787929052066086913UL,
1804817550668726273UL,
1817202449643995137UL,
1827335548805578753UL,
1838594547874004993UL,
1902770842564034561UL,
1911778041818775553UL,
1921911140980359169UL,
1933170140048785409UL,
1938799639582998529UL,
1945555039024054273UL,
1989465135390916609UL,
1997346434738814977UL,
2000724134459342849UL,
2004101834179870721UL,
2013109033434611713UL,
2020990332782510081UL,
2041256531105677313UL,
2053641430080946177UL,
2098677426354651137UL,
2158350121417310209UL,
2171860920299421697UL,
2192127118622588929UL,
2254051613498933249UL,
2276569611635785729UL,
2287828610704211969UL,
2308094809027379201UL,
2375648803437936641UL,
2384656002692677633UL,
2391411402133733377UL,
2394789101854261249UL,
2406048100922687489UL,
2411677600456900609UL,
2422936599525326849UL,
2439825098127966209UL,
2452209997103235073UL,
2465720795985346561UL,
2479231594867458049UL,
2485986994308513793UL,
2499497793190625281UL,
2514134491979579393UL,
2516386291793264641UL,
2533274790395904001UL,
2554666888625913857UL,
2563674087880654849UL,
2578310786669608961UL,
2654871980334907393UL,
2706663376049668097UL,
2733684973813891073UL,
2747195772696002561UL,
2749447572509687809UL,
2777595070180753409UL,
2783224569714966529UL,
2845149064591310849UL,
2862037563193950209UL,
2867667062728163329UL,
2936346957045563393UL,
2943102356486619137UL,
3037677948661399553UL,
3064699546425622529UL,
3068077246146150401UL,
3104106043165114369UL,
3161526938414088193UL,
3178415437016727553UL,
3188548536178311169UL,
3230206832731488257UL,
3250473031054655489UL,
3257228430495711233UL,
3274116929098350593UL,
3289879527794147329UL,
3343922723322593281UL,
3357433522204704769UL,
3374322020807344129UL,
3375447920714186753UL,
3377699720527872001UL,
3387832819689455617UL,
3397965918851039233UL,
3445253714938429441UL,
3492541511025819649UL,
3529696207951626241UL,
3608509201430609921UL,
3681692695375380481UL,
3730106391369613313UL,
3774016487736475649UL,
3793156786152800257UL,
3821304283823865857UL,
3847199981681246209UL,
3894487777768636417UL,
3904620876930220033UL,
3948530973297082369UL,
4010455468173426689UL,
4016084967707639809UL,
4030721666496593921UL,
4039728865751334913UL,
4044232465378705409UL,
4097149761000308737UL,
4114038259602948097UL,
4134304457926115329UL,
4141059857367171073UL,
4148941156715069441UL,
4164703755410866177UL,
4168081455131394049UL,
4175962754479292417UL,
4179340454199820289UL,
4186095853640876033UL,
4219872850846154753UL,
4226628250287210497UL,
4242390848983007233UL,
4250272148330905601UL,
4276167846188285953UL,
4331336941623574529UL,
4344847740505686017UL,
4374121138083594241UL,
4384254237245177857UL,
4472074429978902529UL,
4479955729326800897UL,
4488962928581541889UL,
4500221927649968129UL,
4512606826625236993UL,
4522739925786820609UL,
4546383823830515713UL,
4601552919265804289UL,
4615063718147915777UL,
4661225614328463361UL,
4719772409484279809UL,
4733283208366391297UL,
4782822804267466753UL,
4794081803335892993UL,
4824481100820643841UL,
4854880398305394689UL,
4897664594765414401UL,
4912301293554368513UL,
4919056692995424257UL,
4922434392715952129UL,
4929189792157007873UL,
4946078290759647233UL,
4968596288896499713UL,
4973099888523870209UL,
4976477588244398081UL,
5071053180419178497UL,
5083438079394447361UL,
5103704277717614593UL,
5131851775388680193UL,
5154369773525532673UL,
5179139571476070401UL,
5198279869892395009UL,
5245567665979785217UL,
5277092863371378689UL,
5283848262812434433UL,
5290603662253490177UL,
5300736761415073793UL,
5323254759551926273UL,
5367164855918788609UL,
5370542555639316481UL,
5385179254428270593UL,
5390808753962483713UL,
5395312353589854209UL,
5414452652006178817UL,
5432467050515660801UL,
5465118147814096897UL,
5503398744646746113UL,
5533798042131496961UL,
5542805241386237953UL,
5556316040268349441UL,
5581085838218887169UL,
5587841237659942913UL,
5606981536076267521UL,
5610359235796795393UL,
5614862835424165889UL,
5662150631511556097UL,
5704934827971575809UL,
5718445626853687297UL,
5787125521171087361UL,
5871568014184284161UL,
5888456512786923521UL,
5905345011389562881UL,
5952632807476953089UL,
5958262307011166209UL,
5961640006731694081UL,
5969521306079592449UL,
5998794703657500673UL,
6020186801887510529UL,
6059593298627002369UL,
6111384694341763073UL,
6123769593317031937UL,
6130524992758087681UL,
6147413491360727041UL,
6151917090988097537UL,
6158672490429153281UL,
6177812788845477889UL,
6198078987168645121UL,
6222848785119182849UL,
6226226484839710721UL,
6236359584001294337UL,
6243114983442350081UL,
6248744482976563201UL,
6269010681299730433UL,
6303913578411851777UL,
6307291278132379649UL,
6309543077946064897UL,
6353453174312927233UL,
6363586273474510849UL,
6388356071425048577UL,
6427762568164540417UL,
6466043164997189633UL,
6518960460618792961UL,
6526841759966691329UL,
6552737457824071681UL,
6566248256706183169UL,
6583136755308822529UL,
6597773454097776641UL,
6603402953631989761UL,
6606780653352517633UL,
6668705148228861953UL,
6691223146365714433UL,
6709237544875196417UL,
6718244744129937409UL,
6749769941521530881UL,
6758777140776271873UL,
6782421038819966977UL,
6861234032298950657UL,
6887129730156331009UL,
6905144128665812993UL,
6920906727361609729UL,
6924284427082137601UL,
6932165726430035969UL,
6954683724566888449UL,
6958061424287416321UL,
6961439124007944193UL,
6962565023914786817UL,
6965942723635314689UL,
6982831222237954049UL,
7003097420561121281UL,
7023363618884288513UL,
7069525515064836097UL,
7080784514133262337UL,
7097673012735901697UL,
7103302512270114817UL,
7123568710593282049UL,
7147212608636977153UL,
7170856506680672257UL,
7211388903327006721UL,
7245165900532285441UL,
7253047199880183809UL,
7265432098855452673UL,
7269935698482823169UL,
7273313398203351041UL,
7289075996899147777UL,
7290201896805990401UL,
7309342195222315009UL,
7320601194290741249UL,
7323978894011269121UL,
7326230693824954369UL,
7356629991309705217UL,
7410673186838151169UL,
7425309885627105281UL,
7427561685440790529UL,
7428687585347633153UL,
7435442984788688897UL,
7462464582552911873UL,
7501871079292403713UL,
7552536575100321793UL,
7557040174727692289UL,
7560417874448220161UL,
7594194871653498881UL,
7624594169138249729UL,
7631349568579305473UL,
7636979068113518593UL,
7653867566716157953UL,
7675259664946167809UL,
7715792061592502273UL,
7728176960567771137UL,
7738310059729354753UL,
7742813659356725249UL,
7783346056003059713UL,
7861033149575200769UL,
7866662649109413889UL,
7873418048550469633UL,
7903817346035220481UL,
7908320945662590977UL,
7920705844637859841UL,
8001770637930528769UL,
8032169935415279617UL,
8035547635135807489UL,
8059191533179502593UL,
8072702332061614081UL,
8103101629546364929UL,
8114360628614791169UL,
8143634026192699393UL,
8184166422839033857UL,
8228076519205896193UL,
8246090917715378177UL,
8252846317156433921UL,
8262979416318017537UL,
8269734815759073281UL,
8295630513616453633UL,
8350799609051742209UL,
8401465104859660289UL,
8455508300388106241UL,
8508425596009709569UL,
8559091091817627649UL,
8582734989861322753UL,
8583860889768165377UL,
8592868089022906369UL,
8607504787811860481UL,
8623267386507657217UL,
8658170283619778561UL,
8677310582036103169UL,
8691947280825057281UL,
8708835779427696641UL,
8735857377191919617UL,
8883350264988303361UL,
8896861063870414849UL,
8900238763590942721UL,
8914875462379896833UL,
8921630861820952577UL,
8925008561541480449UL,
8941897060144119809UL,
8967792758001500161UL,
8995940255672565761UL,
9031969052691529729UL,
9056738850642067457UL,
9097271247288401921UL,
9113033845984198657UL,
9158069842257903617UL,
9198602238904238081UL,
7881299347898369UL,
12947848928690177UL,
19703248369745921UL,
30399297484750849UL,
31525197391593473UL,
38280596832649217UL,
59109745109237761UL,
77687093572141057UL,
112589990684262401UL,
136796838681378817UL,
168884986026393601UL,
180143985094819841UL,
211106232532992001UL,
275282527223021569UL,
278660226943549441UL,
280349076803813377UL,
284852676431183873UL,
294985775592767489UL,
298926425266716673UL,
303992974847508481UL,
315814923869356033UL,
362539770003324929UL,
371546969258065921UL,
374924668978593793UL,
381680068419649537UL,
401946266742816769UL,
403072166649659393UL,
404761016509923329UL,
418834765345456129UL,
421649515112562689UL,
423901314926247937UL,
445293413156257793UL,
457678312131526657UL,
459367161991790593UL,
467248461339688961UL,
493144159197069313UL,
503277258358652929UL,
509469707846287361UL,
511158557706551297UL,
523543456681820161UL,
537054255563931649UL,
550565054446043137UL,
565764703188418561UL,
582090251837636609UL,
593912200859484161UL,
602919400114225153UL,
619807898716864513UL,
622622648483971073UL,
688487793034264577UL,
695806142428741633UL,
704250391730061313UL,
719450040472436737UL,
734086739261390849UL,
744782788376395777UL,
753227037677715457UL,
788129934789836801UL,
814025632647217153UL,
833728881016963073UL,
839358380551176193UL,
855683929200394241UL,
857935729014079489UL,
861313428734607361UL,
877638977383825409UL,
879890777197510657UL,
882705526964617217UL,
891712726219358209UL,
917045474123317249UL,
937311672446484481UL,
939000522306748417UL,
950822471328595969UL,
954200171049123841UL,
960392620536758273UL,
965459170117550081UL,
979532918953082881UL,
1033576114481528833UL,
1043709213643112449UL,
1052153462944432129UL,
1055531162664960001UL,
1067353111686807553UL,
1075797360988127233UL,
1092685859590766593UL,
1100567158938664961UL,
1102256008798928897UL,
1102818958752350209UL,
1103944858659192833UL,
1139410705724735489UL,
1146166105165791233UL,
1165306403582115841UL,
1171498853069750273UL,
1227793848411881473UL,
1244682347014520833UL,
1246371196874784769UL,
1259881995756896257UL,
1261007895663738881UL,
1263259695477424129UL,
1277896394266378241UL,
1281274093986906113UL,
1288029493427961857UL,
1294784892869017601UL,
1320117640772976641UL,
1328561890074296321UL,
1337006139375616001UL,
1347139238537199617UL,
1358961187559047169UL,
1359524137512468481UL,
1376412636115107841UL,
1389923434997219329UL,
1406248983646437377UL,
1407937833506701313UL,
1414693232947757057UL,
1418070932668284929UL,
1423700432202498049UL,
1449033180106457089UL,
1450159080013299713UL,
1458603329314619393UL,
1494632126333583361UL,
1508142925215694849UL,
1525031423818334209UL,
1551490071629135873UL,
1563874970604404737UL,
1568378570231775233UL,
1587518868648099841UL,
1595963117949419521UL,
1603844417297317889UL,
1612851616552058881UL,
1622984715713642497UL,
1624110615620485121UL,
1637621414502596609UL,
1657887612825763841UL,
1683783310683144193UL,
1684909210589986817UL,
1696731159611834369UL,
1705738358866575361UL,
1716997357935001601UL,
1728819306956849153UL,
1734448806491062273UL,
1749648455233437697UL,
1758092704534757377UL,
1773292353277132801UL,
1779484802764767233UL,
1787929052066086913UL,
1804817550668726273UL,
1812135900063203329UL,
1817202449643995137UL,
1818891299504259073UL,
1820017199411101697UL,
1827335548805578753UL,
1838594547874004993UL,
1843661097454796801UL,
1860549596057436161UL,
1874060394939547649UL,
1880815794380603393UL,
1902770842564034561UL,
1907837392144826369UL,
1911778041818775553UL,
1921911140980359169UL,
1926977690561150977UL,
1933170140048785409UL,
1938799639582998529UL,
1945555039024054273UL,
1950621588604846081UL,
1965258287393800193UL,
1967510087207485441UL,
1977643186369069057UL,
1989465135390916609UL,
1997346434738814977UL,
2000724134459342849UL,
2004101834179870721UL,
2012546083481190401UL,
2013109033434611713UL,
2020990332782510081UL,
2026056882363301889UL,
2029434582083829761UL,
2041256531105677313UL,
2053641430080946177UL,
2072218778543849473UL,
2076722378171219969UL,
2098677426354651137UL,
2149905872115990529UL,
2158350121417310209UL,
2171860920299421697UL,
2181431069507584001UL,
2192127118622588929UL,
2198319568110223361UL,
2254051613498933249UL,
2276569611635785729UL,
2282762061123420161UL,
2287828610704211969UL,
2299650559726059521UL,
2308094809027379201UL,
2316539058328698881UL,
2325546257583439873UL,
2336805256651866113UL,
2375648803437936641UL,
2384656002692677633UL,
2391411402133733377UL,
2394789101854261249UL,
2399855651435053057UL,
2406048100922687489UL,
2411677600456900609UL,
2417870049944535041UL,
2422936599525326849UL,
2423499549478748161UL,
2438136248267702273UL,
2439825098127966209UL,
2450521147242971137UL,
2452209997103235073UL,
2461780146311397377UL,
2465720795985346561UL,
2479231594867458049UL,
2485986994308513793UL,
2499497793190625281UL,
2504564342771417089UL,
2514134491979579393UL,
2516386291793264641UL,
2533274790395904001UL,
2549600339045122049UL,
2554666888625913857UL,
2563674087880654849UL,
2578310786669608961UL,
2585629136064086017UL,
2600265834853040129UL,
2603643534573568001UL,
2613776633735151617UL,
2639672331592531969UL,
2647553630940430337UL,
2654871980334907393UL,
2691463727307292673UL,
2706663376049668097UL,
2707226326003089409UL,
2713981725444145153UL,
2715107625350987777UL,
2725240724512571393UL,
2733684973813891073UL,
2747195772696002561UL,
2749447572509687809UL,
2755640021997322241UL,
2771402620693118977UL,
2777595070180753409UL,
2783224569714966529UL,
2832201215662620673UL,
2845149064591310849UL,
2860348713333686273UL,
2862037563193950209UL,
2867667062728163329UL,
2936346957045563393UL,
2943102356486619137UL,
2951546605787938817UL,
2985323602993217537UL,
3005589801316384769UL,
3031485499173765121UL,
3034863198894292993UL,
3037677948661399553UL,
3064699546425622529UL,
3068077246146150401UL,
3104106043165114369UL,
3123809291534860289UL,
3129438791069073409UL,
3159838088553824257UL,
3161526938414088193UL,
3178415437016727553UL,
3181230186783834113UL,
3188548536178311169UL,
3211629484268584961UL,
3230206832731488257UL,
3250473031054655489UL,
3254413680728604673UL,
3257228430495711233UL,
3271302179331244033UL,
3274116929098350593UL,
3282561178399670273UL,
3289879527794147329UL,
3312960475884421121UL,
3323093575046004737UL,
3326471274766532609UL,
3343922723322593281UL,
3357433522204704769UL,
3365877771506024449UL,
3374322020807344129UL,
3375447920714186753UL,
3377699720527872001UL,
3379388570388135937UL,
3380514470294978561UL,
3383892170015506433UL,
3387832819689455617UL,
3397965918851039233UL,
3407536068059201537UL,
3445253714938429441UL,
3468334663028703233UL,
3473964162562916353UL,
3480719562003972097UL,
3492541511025819649UL,
3502111660233981953UL,
3519000158836621313UL,
3525755558277677057UL,
3529696207951626241UL,
3566287954924011521UL,
3569665654644539393UL,
3608509201430609921UL,
3652982247750893569UL,
3681692695375380481UL,
3686759244956172289UL,
3710403142999867393UL,
3718284442347765761UL,
3730106391369613313UL,
3767824038248841217UL,
3774016487736475649UL,
3789216136478851073UL,
3793156786152800257UL,
3806104635081490433UL,
3812860034522546177UL,
3821304283823865857UL,
3847199981681246209UL,
3870280929771520001UL,
3894487777768636417UL,
3904620876930220033UL,
3914191026138382337UL,
3917568725858910209UL,
3941212623902605313UL,
3948530973297082369UL,
3974989621107884033UL,
4004263018685792257UL,
4010455468173426689UL,
4016084967707639809UL,
4030721666496593921UL,
4039728865751334913UL,
4044232465378705409UL,
4048173115052654593UL,
4061683913934766081UL,
4097149761000308737UL,
4098838610860572673UL,
4114038259602948097UL,
4126986108531638273UL,
4134304457926115329UL,
4140496907413749761UL,
4141059857367171073UL,
4148941156715069441UL,
4160763105736916993UL,
4164703755410866177UL,
4168081455131394049UL,
4175962754479292417UL,
4179340454199820289UL,
4186095853640876033UL,
4193414203035353089UL,
4219872850846154753UL,
4226628250287210497UL,
4227191200240631809UL,
4242390848983007233UL,
4245205598750113793UL,
4247457398563799041UL,
4250272148330905601UL,
4276167846188285953UL,
4295871094558031873UL,
4306004193719615489UL,
4331336941623574529UL,
4344847740505686017UL,
4345410690459107329UL,
4374121138083594241UL,
4384254237245177857UL,
4385943087105441793UL,
4390446686732812289UL,
4393824386453340161UL,
4453497081515999233UL,
4471511480025481217UL,
4472074429978902529UL,
4479955729326800897UL,
4480518679280222209UL,
4481644579187064833UL,
4487274078721277953UL,
4488962928581541889UL,
4491777678348648449UL,
4495155378069176321UL,
4500221927649968129UL,
4505288477230759937UL,
4512606826625236993UL,
4522739925786820609UL,
4532310074994982913UL,
4545820873877094401UL,
4546383823830515713UL,
4576220171361845249UL,
4582975570802900993UL,
4595360469778169857UL,
4601552919265804289UL,
4615063718147915777UL,
4652781365027143681UL,
4661225614328463361UL,
4673047563350310913UL,
4700069161114533889UL,
4713579959996645377UL,
4719772409484279809UL,
4724838959065071617UL,
4733283208366391297UL,
4737223858040340481UL,
4740601557760868353UL,
4758615956270350337UL,
4765371355711406081UL,
4782822804267466753UL,
4791267053568786433UL,
4794081803335892993UL,
4804777852450897921UL,
4812659151798796289UL,
4814910951612481537UL,
4824481100820643841UL,
4843058449283547137UL,
4853191548445130753UL,
4854880398305394689UL,
4868954147140927489UL,
4893723945091465217UL,
4897664594765414401UL,
4912301293554368513UL,
4919056692995424257UL,
4922434392715952129UL,
4929189792157007873UL,
4946078290759647233UL,
4950018940433596417UL,
4968033338943078401UL,
4968596288896499713UL,
4973099888523870209UL,
4973662838477291521UL,
4976477588244398081UL,
5054727631769960449UL,
5071053180419178497UL,
5071616130372599809UL,
5083438079394447361UL,
5091882328695767041UL,
5103704277717614593UL,
5131851775388680193UL,
5136918324969472001UL,
5150429123851583489UL,
5152680923665268737UL,
5154369773525532673UL,
5179139571476070401UL,
5184206121056862209UL,
5197716919938973697UL,
5198279869892395009UL,
5217983118262140929UL,
5245567665979785217UL,
5247256515840049153UL,
5260767314722160641UL,
5277092863371378689UL,
5283848262812434433UL,
5290603662253490177UL,
5300736761415073793UL,
5322691809598504961UL,
5323254759551926273UL,
5339580308201144321UL,
5349713407362727937UL,
5367164855918788609UL,
5370542555639316481UL,
5372231405499580417UL,
5385179254428270593UL,
5390808753962483713UL,
5395312353589854209UL,
5409386102425387009UL,
5414452652006178817UL,
5432467050515660801UL,
5465118147814096897UL,
5476940096835944449UL,
5503398744646746113UL,
5508465294227537921UL,
5533798042131496961UL,
5542805241386237953UL,
5556316040268349441UL,
5581085838218887169UL,
5587841237659942913UL,
5598537286774947841UL,
5606981536076267521UL,
5610359235796795393UL,
5614862835424165889UL,
5623307084725485569UL,
5643573283048652801UL,
5662150631511556097UL,
5697616478577098753UL,
5704934827971575809UL,
5718445626853687297UL,
5787125521171087361UL,
5805702869633990657UL,
5814710068888731649UL,
5815835968795574273UL,
5831598567491371009UL,
5859746065162436609UL,
5868753264417177601UL,
5871568014184284161UL,
5883389963206131713UL,
5888456512786923521UL,
5899152561901928449UL,
5905345011389562881UL,
5905907961342984193UL,
5952632807476953089UL,
5958262307011166209UL,
5961640006731694081UL,
5969521306079592449UL,
5998794703657500673UL,
6020186801887510529UL,
6028631051188830209UL,
6047771349605154817UL,
6059593298627002369UL,
6096185045599387649UL,
6111384694341763073UL,
6118703043736240129UL,
6123769593317031937UL,
6130524992758087681UL,
6146850541407305729UL,
6147413491360727041UL,
6151917090988097537UL,
6158672490429153281UL,
6169368539544158209UL,
6177812788845477889UL,
6198078987168645121UL,
6203145536749436929UL,
6206523236469964801UL,
6211026836097335297UL,
6222848785119182849UL,
6226226484839710721UL,
6236359584001294337UL,
6236922533954715649UL,
6240300233675243521UL,
6243114983442350081UL,
6244803833302614017UL,
6248744482976563201UL,
6269010681299730433UL,
6285336229948948481UL,
6303913578411851777UL,
6307291278132379649UL,
6307854228085800961UL,
6309543077946064897UL,
6334875825850023937UL,
6339379425477394433UL,
6353453174312927233UL,
6363586273474510849UL,
6372030522775830529UL,
6386667221564784641UL,
6388356071425048577UL,
6405807519981109249UL,
6427762568164540417UL,
6442962216906915841UL,
6466043164997189633UL,
6467732014857453569UL,
6498131312342204417UL,
6518960460618792961UL,
6526841759966691329UL,
6547670908243279873UL,
6552174507870650369UL,
6552737457824071681UL,
6564559406845919233UL,
6566248256706183169UL,
6583136755308822529UL,
6597773454097776641UL,
6603402953631989761UL,
6606780653352517633UL,
6608469503212781569UL,
6668705148228861953UL,
6687282496691765249UL,
6689534296505450497UL,
6691223146365714433UL,
6709237544875196417UL,
6718244744129937409UL,
6737947992499683329UL,
6749769941521530881UL,
6758777140776271873UL,
6760465990636535809UL,
6782421038819966977UL,
6807753786723926017UL,
6812257386351296513UL,
6814509186164981761UL,
6817886885885509633UL,
6824642285326565377UL,
6861234032298950657UL,
6887129730156331009UL,
6905144128665812993UL,
6906832978526076929UL,
6910210678246604801UL,
6920906727361609729UL,
6924284427082137601UL,
6932165726430035969UL,
6943987675451883521UL,
6949617174986096641UL,
6954683724566888449UL,
6958061424287416321UL,
6961439124007944193UL,
6962565023914786817UL,
6965942723635314689UL,
6982831222237954049UL,
7003097420561121281UL,
7017171169396654081UL,
7023363618884288513UL,
7025052468744552449UL,
7067836665204572161UL,
7069525515064836097UL,
7080784514133262337UL,
7084725163807211521UL,
7097673012735901697UL,
7099361862596165633UL,
7103302512270114817UL,
7104991362130378753UL,
7123568710593282049UL,
7147212608636977153UL,
7152279158217768961UL,
7169167656820408321UL,
7170856506680672257UL,
7211388903327006721UL,
7216455452907798529UL,
7233343951510437889UL,
7245165900532285441UL,
7247980650299392001UL,
7253047199880183809UL,
7261491449181503489UL,
7263743248995188737UL,
7265432098855452673UL,
7269935698482823169UL,
7273313398203351041UL,
7289075996899147777UL,
7290201896805990401UL,
7309342195222315009UL,
7320601194290741249UL,
7323978894011269121UL,
7326230693824954369UL,
7352689341635756033UL,
7356629991309705217UL,
7366200140517867521UL,
7379710939399979009UL,
7381962739213664257UL,
7385340438934192129UL,
7392095838375247873UL,
7399977137723146241UL,
7405606637257359361UL,
7410673186838151169UL,
7425309885627105281UL,
7427561685440790529UL,
7428687585347633153UL,
7435442984788688897UL,
7447264933810536449UL,
7462464582552911873UL,
7467531132133703681UL,
7469782931947388929UL,
7501871079292403713UL,
7506937628873195521UL,
7511441228500566017UL,
7514818928221093889UL,
7527203827196362753UL,
7552536575100321793UL,
7557040174727692289UL,
7560417874448220161UL,
7582372922631651329UL,
7585750622352179201UL,
7594194871653498881UL,
7606016820675346433UL,
7611646320209559553UL,
7624594169138249729UL,
7631349568579305473UL,
7636979068113518593UL,
7639793817880625153UL,
7652178716855894017UL,
7653867566716157953UL,
7673570815085903873UL,
7675259664946167809UL,
7697214713129598977UL,
7715792061592502273UL,
7728176960567771137UL,
7738310059729354753UL,
7742813659356725249UL,
7783346056003059713UL,
7791790305304379393UL,
7861033149575200769UL,
7866662649109413889UL,
7873418048550469633UL,
7903817346035220481UL,
7908320945662590977UL,
7908883895616012289UL,
7916765194963910657UL,
7920705844637859841UL,
7925772394218651649UL,
7959549391423930369UL,
7962927091144458241UL,
7991074588815523841UL,
7994452288536051713UL,
8001770637930528769UL,
8023725686113959937UL,
8032169935415279617UL,
8035547635135807489UL,
8045117784343969793UL,
8059191533179502593UL,
8072702332061614081UL,
8103101629546364929UL,
8114360628614791169UL,
8118301278288740353UL,
8143634026192699393UL,
8175722173537714177UL,
8184166422839033857UL,
8195988371860881409UL,
8209499170742992897UL,
8224135869531947009UL,
8227513569252474881UL,
8228076519205896193UL,
8243276167948271617UL,
8246090917715378177UL,
8252846317156433921UL,
8262979416318017537UL,
8269734815759073281UL,
8293941663756189697UL,
8295630513616453633UL,
8298445263383560193UL,
8305200662824615937UL,
8317585561799884801UL,
8350799609051742209UL,
8354740258725691393UL,
8362621558073589761UL,
8365999257794117633UL,
8385139556210442241UL,
8401465104859660289UL,
8455508300388106241UL,
8469582049223639041UL,
8508425596009709569UL,
8520247545031557121UL,
8524751144658927617UL,
8530380644193140737UL,
8551772742423150593UL,
8559091091817627649UL,
8581046140001058817UL,
8582734989861322753UL,
8583860889768165377UL,
8592868089022906369UL,
8597934638603698177UL,
8607504787811860481UL,
8623267386507657217UL,
8658170283619778561UL,
8677310582036103169UL,
8682377131616894977UL,
8689132531057950721UL,
8691947280825057281UL,
8693636130685321217UL,
8706021029660590081UL,
8708835779427696641UL,
8717280028729016321UL,
8730790827611127809UL,
8735857377191919617UL,
8815233320624324609UL,
8855765717270659073UL,
8883350264988303361UL,
8889542714475937793UL,
8896861063870414849UL,
8900238763590942721UL,
8914875462379896833UL,
8921630861820952577UL,
8925008561541480449UL,
8925571511494901761UL,
8930075111122272257UL,
8941897060144119809UL,
8967792758001500161UL,
8987496006371246081UL,
8995940255672565761UL,
9001006805253357569UL,
9031406102738108417UL,
9031969052691529729UL,
9051672301061275649UL,
9056738850642067457UL,
9075316199104970753UL,
9087701098080239617UL,
9097271247288401921UL,
9097834197241823233UL,
9113033845984198657UL,
9115848595751305217UL,
9121478095285518337UL,
9122603995192360961UL,
9142870193515528193UL,
9158069842257903617UL,
9165388191652380673UL,
9166514091559223297UL,
9172143591093436417UL,
9198602238904238081UL,
4222124650659841UL,
7881299347898369UL,
12947848928690177UL,
16044073672507393UL,
17169973579350017UL,
19703248369745921UL,
22799473113563137UL,
30399297484750849UL,
31525197391593473UL,
38280596832649217UL,
49821070877786113UL,
52635820644892673UL,
59109745109237761UL,
71213169107795969UL,
77687093572141057UL,
103301316452810753UL,
112589990684262401UL,
119063915148607489UL,
127508164449927169UL,
136796838681378817UL,
156218612074414081UL,
159033361841520641UL,
164099911422312449UL,
168884986026393601UL,
174795960537317377UL,
180143985094819841UL,
186617909559164929UL,
191684459139956737UL,
197876908627591169UL,
201817558301540353UL,
211106232532992001UL,
228839156065763329UL,
252483054109458433UL,
259238453550514177UL,
265993852991569921UL,
275282527223021569UL,
278660226943549441UL,
280349076803813377UL,
282319401640787969UL,
284571201454473217UL,
284852676431183873UL,
294704300616056833UL,
294985775592767489UL,
298926425266716673UL,
303992974847508481UL,
315814923869356033UL,
328481297821335553UL,
335236697262391297UL,
344806846470553601UL,
362539770003324929UL,
371546969258065921UL,
374924668978593793UL,
381680068419649537UL,
384213343210045441UL,
388716942837415937UL,
401946266742816769UL,
403072166649659393UL,
404761016509923329UL,
412360840881111041UL,
417990340415324161UL,
418834765345456129UL,
421649515112562689UL,
423901314926247937UL,
439382438645334017UL,
445293413156257793UL,
446700788039811073UL,
451767337620602881UL,
457678312131526657UL,
459367161991790593UL,
467248461339688961UL,
473159435850612737UL,
477100085524561921UL,
488922034546409473UL,
493144159197069313UL,
498492183754571777UL,
503277258358652929UL,
509469707846287361UL,
510314132776419329UL,
511158557706551297UL,
515380682357211137UL,
523543456681820161UL,
537054255563931649UL,
548031779655647233UL,
550565054446043137UL,
565764703188418561UL,
576179277326712833UL,
581808776860925953UL,
582090251837636609UL,
593912200859484161UL,
602919400114225153UL,
608267424671727617UL,
619807898716864513UL,
622622648483971073UL,
624030023367524353UL,
626844773134630913UL,
647673921411219457UL,
656118170712539137UL,
685954518243868673UL,
688487793034264577UL,
695806142428741633UL,
696087617405452289UL,
704250391730061313UL,
704531866706771969UL,
719450040472436737UL,
733242314331258881UL,
734086739261390849UL,
744782788376395777UL,
749004913027055617UL,
753227037677715457UL,
767019311536537601UL,
769271111350222849UL,
770397011257065473UL,
772648811070750721UL,
788129934789836801UL,
809240558043136001UL,
814025632647217153UL,
814307107623927809UL,
814870057577349121UL,
818247757297876993UL,
821062507064983553UL,
833728881016963073UL,
836825105760780289UL,
839358380551176193UL,
848084104829206529UL,
855683929200394241UL,
857091304083947521UL,
857935729014079489UL,
861313428734607361UL,
877638977383825409UL,
879890777197510657UL,
882705526964617217UL,
891712726219358209UL,
898749600637124609UL,
901001400450809857UL,
917045474123317249UL,
922393498680819713UL,
927460048261611521UL,
937311672446484481UL,
938156097376616449UL,
939000522306748417UL,
944348546864250881UL,
950822471328595969UL,
954200171049123841UL,
960392620536758273UL,
965459170117550081UL,
966866545001103361UL,
969681294768209921UL,
979532918953082881UL,
987132743324270593UL,
991636342951641089UL,
993888142765326337UL,
1000080592252960769UL,
1005710091787173889UL,
1022598590389813249UL,
1033576114481528833UL,
1037798239132188673UL,
1043709213643112449UL,
1052153462944432129UL,
1055531162664960001UL,
1067353111686807553UL,
1075797360988127233UL,
1076641785918259201UL,
1092685859590766593UL,
1100567158938664961UL,
1102256008798928897UL,
1102818958752350209UL,
1103663383682482177UL,
1103944858659192833UL,
1105352233542746113UL,
1108166983309852673UL,
1113233532890644481UL,
1121677782191964161UL,
1123929582005649409UL,
1137440380887760897UL,
1139410705724735489UL,
1146166105165791233UL,
1147010530095923201UL,
1165306403582115841UL,
1168965578279354369UL,
1171498853069750273UL,
1172906227953303553UL,
1188105876695678977UL,
1202742575484633089UL,
1227793848411881473UL,
1230327123202277377UL,
1231453023109120001UL,
1244682347014520833UL,
1245526771944652801UL,
1246371196874784769UL,
1259881995756896257UL,
1261007895663738881UL,
1263259695477424129UL,
1270296569895190529UL,
1275363119475982337UL,
1277896394266378241UL,
1281274093986906113UL,
1288029493427961857UL,
1294784892869017601UL,
1297881117612834817UL,
1318147315936002049UL,
1319273215842844673UL,
1320117640772976641UL,
1321525015656529921UL,
1326591565237321729UL,
1328561890074296321UL,
1329406315004428289UL,
1337006139375616001UL,
1347139238537199617UL,
1348546613420752897UL,
1350235463281016833UL,
1358961187559047169UL,
1359524137512468481UL,
1359805612489179137UL,
1366561011930234881UL,
1376412636115107841UL,
1389923434997219329UL,
1406248983646437377UL,
1407937833506701313UL,
1414693232947757057UL,
1418070932668284929UL,
1418915357598416897UL,
1423700432202498049UL,
1434677956294213633UL,
1443122205595533313UL,
1448188755176325121UL,
1449033180106457089UL,
1450159080013299713UL,
1451566454896852993UL,
1458603329314619393UL,
1461136604105015297UL,
1494632126333583361UL,
1498854250984243201UL,
1508142925215694849UL,
1525031423818334209UL,
1538823697677156353UL,
1547267946978476033UL,
1551490071629135873UL,
1557963996093480961UL,
1563874970604404737UL,
1568378570231775233UL,
1571474794975592449UL,
1576541344556384257UL,
1577667244463226881UL,
1586674443717967873UL,
1587518868648099841UL,
1595963117949419521UL,
1603844417297317889UL,
1606377692087713793UL,
1612851616552058881UL,
1620451440923246593UL,
1622140290783510529UL,
1622984715713642497UL,
1624110615620485121UL,
1628895690224566273UL,
1635651089665622017UL,
1637339939525885953UL,
1637621414502596609UL,
1638465839432728577UL,
1641843539153256449UL,
1648598938594312193UL,
1657887612825763841UL,
1672242836638007297UL,
1672805786591428609UL,
1683783310683144193UL,
1684909210589986817UL,
1689131335240646657UL,
1693071984914595841UL,
1696449684635123713UL,
1696731159611834369UL,
1705738358866575361UL,
1715027033098027009UL,
1716997357935001601UL,
1728819306956849153UL,
1734448806491062273UL,
1743174530769092609UL,
1749648455233437697UL,
1758092704534757377UL,
1760063029371731969UL,
1762314829185417217UL,
1773292353277132801UL,
1774136778207264769UL,
1779484802764767233UL,
1787929052066086913UL,
1794402976530432001UL,
1804817550668726273UL,
1807913775412543489UL,
1811291475133071361UL,
1812135900063203329UL,
1817202449643995137UL,
1818891299504259073UL,
1820017199411101697UL,
1827335548805578753UL,
1833246523316502529UL,
1838594547874004993UL,
1839438972804136961UL,
1843661097454796801UL,
1849572071965720577UL,
1852949771686248449UL,
1855201571499933697UL,
1860549596057436161UL,
1874060394939547649UL,
1880815794380603393UL,
1898548717913374721UL,
1902770842564034561UL,
1907837392144826369UL,
1908681817074958337UL,
1911778041818775553UL,
1921911140980359169UL,
1926977690561150977UL,
1933170140048785409UL,
1935703414839181313UL,
1937955214652866561UL,
1938799639582998529UL,
1940769964419973121UL,
1945555039024054273UL,
1950621588604846081UL,
1965258287393800193UL,
1967510087207485441UL,
1976235811485515777UL,
1977643186369069057UL,
1980176461159464961UL,
1988057760507363329UL,
1988620710460784641UL,
1989465135390916609UL,
1991435460227891201UL,
1997346434738814977UL,
2000724134459342849UL,
2004101834179870721UL,
2010575758644215809UL,
2012546083481190401UL,
2013109033434611713UL,
2020990332782510081UL,
2022397707666063361UL,
2026056882363301889UL,
2029434582083829761UL,
2032530806827646977UL,
2035908506548174849UL,
2041256531105677313UL,
2050545205337128961UL,
2053641430080946177UL,
2072218778543849473UL,
2076722378171219969UL,
2087699902262935553UL,
2091640551936884737UL,
2098677426354651137UL,
2129921148769533953UL,
2145120797511909377UL,
2149905872115990529UL,
2152439146906386433UL,
2158350121417310209UL,
2171860920299421697UL,
2176083044950081537UL,
2177208944856924161UL,
2181431069507584001UL,
2192127118622588929UL,
2198319568110223361UL,
2199163993040355329UL,
2210985942062202881UL,
2211548892015624193UL,
2221119041223786497UL,
2252081288661958657UL,
2254051613498933249UL,
2276569611635785729UL,
2278539936472760321UL,
2280228786333024257UL,
2282762061123420161UL,
2287828610704211969UL,
2292050735354871809UL,
2292613685308293121UL,
2299650559726059521UL,
2300494984656191489UL,
2308094809027379201UL,
2316539058328698881UL,
2321324132932780033UL,
2322450032839622657UL,
2325546257583439873UL,
2336805256651866113UL,
2349471630603845633UL,
2357915879905165313UL,
2359604729765429249UL,
2375648803437936641UL,
2384656002692677633UL,
2388878127343337473UL,
2391411402133733377UL,
2394789101854261249UL,
2396759426691235841UL,
2399011226504921089UL,
2399855651435053057UL,
2405766625945976833UL,
2406048100922687489UL,
2410270225573347329UL,
2411677600456900609UL,
2417870049944535041UL,
2422936599525326849UL,
2423499549478748161UL,
2438136248267702273UL,
2439825098127966209UL,
2446299022592311297UL,
2450521147242971137UL,
2452209997103235073UL,
2453054422033367041UL,
2460935721381265409UL,
2461780146311397377UL,
2465720795985346561UL,
2475009470216798209UL,
2479231594867458049UL,
2483453719518117889UL,
2485986994308513793UL,
2493023868726280193UL,
2499497793190625281UL,
2504564342771417089UL,
2514134491979579393UL,
2516386291793264641UL,
2529052665745244161UL,
2533274790395904001UL,
2536933965093142529UL,
2545941164347883521UL,
2547630014208147457UL,
2549600339045122049UL,
2552133613835517953UL,
2554666888625913857UL,
2556074263509467137UL,
2557763113369731073UL,
2562266712997101569UL,
2563674087880654849UL,
2578310786669608961UL,
2585629136064086017UL,
2600265834853040129UL,
2603643534573568001UL,
2609554509084491777UL,
2613776633735151617UL,
2623628257920024577UL,
2630383657361080321UL,
2639672331592531969UL,
2647553630940430337UL,
2654871980334907393UL,
2655153455311618049UL,
2659094104985567233UL,
2672604903867678721UL,
2691463727307292673UL,
2697937651771637761UL,
2706663376049668097UL,
2707226326003089409UL,
2713981725444145153UL,
2715107625350987777UL,
2719329750001647617UL,
2725240724512571393UL,
2733684973813891073UL,
2741847748138500097UL,
2743536597998764033UL,
2747195772696002561UL,
2749447572509687809UL,
2753106747206926337UL,
2754795597067190273UL,
2755640021997322241UL,
2771402620693118977UL,
2777595070180753409UL,
2783224569714966529UL,
2790824394086154241UL,
2807712892688793601UL,
2812779442269585409UL,
2832201215662620673UL,
2845149064591310849UL,
2860348713333686273UL,
2861756088217239553UL,
2862037563193950209UL,
2867667062728163329UL,
2886525886167777281UL,
2897221935282782209UL,
2913547483932000257UL,
2915236333792264193UL,
2936346957045563393UL,
2940569081696223233UL,
2943102356486619137UL,
2951546605787938817UL,
2954079880578334721UL,
2959709380112547841UL,
2962524129879654401UL,
2967590679460446209UL,
2985323602993217537UL,
2996301127084933121UL,
2997989976945197057UL,
3005589801316384769UL,
3023322724849156097UL,
3028952224383369217UL,
3031485499173765121UL,
3034863198894292993UL,
3035144673871003649UL,
3037677948661399553UL,
3040211223451795457UL,
3064699546425622529UL,
3068077246146150401UL,
3072299370796810241UL,
3072862320750231553UL,
3074551170610495489UL,
3075677070517338113UL,
3104106043165114369UL,
3123809291534860289UL,
3125216666418413569UL,
3129438791069073409UL,
3144919914788159489UL,
3158993663623692289UL,
3159838088553824257UL,
3161526938414088193UL,
3174193312366067713UL,
3178415437016727553UL,
3181230186783834113UL,
3188548536178311169UL,
3198963110316605441UL,
3202340810037133313UL,
3210785059338452993UL,
3211629484268584961UL,
3218103408732930049UL,
3224295858220564481UL,
3229362407801356289UL,
3230206832731488257UL,
3250473031054655489UL,
3251880405938208769UL,
3254413680728604673UL,
3257228430495711233UL,
3268205954587426817UL,
3271302179331244033UL,
3274116929098350593UL,
3276650203888746497UL,
3277213153842167809UL,
3282561178399670273UL,
3289879527794147329UL,
3297479352165335041UL,
3303671801652969473UL,
3312960475884421121UL,
3323093575046004737UL,
3326471274766532609UL,
3327878649650085889UL,
3343922723322593281UL,
3352648447600623617UL,
3354337297460887553UL,
3356026147321151489UL,
3357433522204704769UL,
3365877771506024449UL,
3366722196436156417UL,
3374322020807344129UL,
3375447920714186753UL,
3377699720527872001UL,
3378544145458003969UL,
3379388570388135937UL,
3380514470294978561UL,
3383892170015506433UL,
3387832819689455617UL,
3393743794200379393UL,
3397965918851039233UL,
3407254593082490881UL,
3407536068059201537UL,
3419076542104338433UL,
3442720440148033537UL,
3445253714938429441UL,
3448912889635667969UL,
3468334663028703233UL,
3473964162562916353UL,
3480719562003972097UL,
3481001036980682753UL,
3482689886840946689UL,
3492541511025819649UL,
3499578385443586049UL,
3501830185257271297UL,
3502111660233981953UL,
3504644935024377857UL,
3510274434558590977UL,
3519000158836621313UL,
3520407533720174593UL,
3524911133347545089UL,
3525755558277677057UL,
3529696207951626241UL,
3537296032322813953UL,
3550806831204925441UL,
3555873380785717249UL,
3566287954924011521UL,
3569665654644539393UL,
3576139579108884481UL,
3599220527199158273UL,
3608509201430609921UL,
3622864425242853377UL,
3647071273239969793UL,
3652137822820761601UL,
3652982247750893569UL,
3663959771842609153UL,
3681692695375380481UL,
3685351870072619009UL,
3686759244956172289UL,
3708995768116314113UL,
3710403142999867393UL,
3718284442347765761UL,
3730106391369613313UL,
3732639666160009217UL,
3733202616113430529UL,
3736580315833958401UL,
3742772765321592833UL,
3757972414063968257UL,
3765290763458445313UL,
3767824038248841217UL,
3774016487736475649UL,
3778238612387135489UL,
3787245811641876481UL,
3789216136478851073UL,
3793156786152800257UL,
3806104635081490433UL,
3812860034522546177UL,
3821304283823865857UL,
3842414907077165057UL,
3847199981681246209UL,
3858177505772961793UL,
3870280929771520001UL,
3875066004375601153UL,
3876191904282443777UL,
3894487777768636417UL,
3904620876930220033UL,
3905465301860352001UL,
3914191026138382337UL,
3917568725858910209UL,
3933612799531417601UL,
3935301649391681537UL,
3938679349112209409UL,
3941212623902605313UL,
3943745898693001217UL,
3948530973297082369UL,
3953878997854584833UL,
3974989621107884033UL,
3976396995991437313UL,
4004263018685792257UL,
4010455468173426689UL,
4016084967707639809UL,
4018618242498035713UL,
4028188391706198017UL,
4030721666496593921UL,
4039728865751334913UL,
4044232465378705409UL,
4045076890308837377UL,
4048173115052654593UL,
4061683913934766081UL,
4077165037653852161UL,
4078853887514116097UL,
4097149761000308737UL,
4098838610860572673UL,
4103060735511232513UL,
4111504984812552193UL,
4114038259602948097UL,
4116571534393344001UL,
4126986108531638273UL,
4131208233182298113UL,
4134304457926115329UL,
4136837732716511233UL,
4140496907413749761UL,
4141059857367171073UL,
4146407881924673537UL,
4148941156715069441UL,
4153726231319150593UL,
4160763105736916993UL,
4164703755410866177UL,
4168081455131394049UL,
4175962754479292417UL,
4179340454199820289UL,
4186095853640876033UL,
4193414203035353089UL,
4206080576987332609UL,
4217902526009180161UL,
4219872850846154753UL,
4226628250287210497UL,
4227191200240631809UL,
4234791024611819521UL,
4240983474099453953UL,
4242390848983007233UL,
4245205598750113793UL,
4247457398563799041UL,
4250272148330905601UL,
4251116573261037569UL,
4254494272981565441UL,
4262938522282885121UL,
4264627372143149057UL,
4270256871677362177UL,
4276167846188285953UL,
4291648969907372033UL,
4295871094558031873UL,
4306004193719615489UL,
4315292867951067137UL,
4316981717811331073UL,
4327114816972914689UL,
4329366616786599937UL,
4331055466646863873UL,
4331336941623574529UL,
4336122016227655681UL,
4337810866087919617UL,
4344847740505686017UL,
4345410690459107329UL,
4347381015296081921UL,
4359202964317929473UL,
4374121138083594241UL,
4381158012501360641UL,
4384254237245177857UL,
4384535712221888513UL,
4385943087105441793UL,
4388476361895837697UL,
4390446686732812289UL,
4391291111662944257UL,
4393824386453340161UL,
4395231761336893441UL,
4396920611197157377UL,
4400298310917685249UL,
4434075308122963969UL,
4453497081515999233UL,
4471511480025481217UL,
4472074429978902529UL,
4479955729326800897UL,
4480518679280222209UL,
4481644579187064833UL,
4487274078721277953UL,
4488962928581541889UL,
4491777678348648449UL,
4494310953139044353UL,
4495155378069176321UL,
4500221927649968129UL,
4505288477230759937UL,
4509510601881419777UL,
4512606826625236993UL,
4522739925786820609UL,
4532310074994982913UL,
4540472849319591937UL,
4545820873877094401UL,
4546383823830515713UL,
4576220171361845249UL,
4582975570802900993UL,
4585508845593296897UL,
4595360469778169857UL,
4601552919265804289UL,
4615063718147915777UL,
4619848792751996929UL,
4651373990143590401UL,
4652781365027143681UL,
4654751689864118273UL,
4661225614328463361UL,
4662070039258595329UL,
4663195939165437953UL,
4671640188466757633UL,
4673047563350310913UL,
4678958537861234689UL,
4684025087442026497UL,
4692469336743346177UL,
4700069161114533889UL,
4713579959996645377UL,
4715550284833619969UL,
4716113234787041281UL,
4719772409484279809UL,
4724838959065071617UL,
4729624033669152769UL,
4733283208366391297UL,
4737223858040340481UL,
4740601557760868353UL,
4743134832551264257UL,
4758615956270350337UL,
4765371355711406081UL,
4766778730594959361UL,
4772971180082593793UL,
4782822804267466753UL,
4791267053568786433UL,
4793800328359182337UL,
4794081803335892993UL,
4804777852450897921UL,
4812659151798796289UL,
4814910951612481537UL,
4816881276449456129UL,
4820821926123405313UL,
4824481100820643841UL,
4827577325564461057UL,
4837710424726044673UL,
4843058449283547137UL,
4846154674027364353UL,
4851221223608156161UL,
4853191548445130753UL,
4854880398305394689UL,
4855724823235526657UL,
4865857922397110273UL,
4868954147140927489UL,
4879931671232643073UL,
4884435270860013569UL,
4893723945091465217UL,
4897664594765414401UL,
4906953268996866049UL,
4912301293554368513UL,
4913145718484500481UL,
4914834568344764417UL,
4919056692995424257UL,
4922434392715952129UL,
4923841767599505409UL,
4929189792157007873UL,
4940167316248723457UL,
4941856166108987393UL,
4946078290759647233UL,
4950018940433596417UL,
4952552215223992321UL,
4960433514571890689UL,
4966063014106103809UL,
4968033338943078401UL,
4968596288896499713UL,
4973099888523870209UL,
4973662838477291521UL,
4976477588244398081UL,
4977884963127951361UL,
4988018062289534977UL,
4994773461730590721UL,
4999840011311382529UL,
5021795059494813697UL,
5026298659122184193UL,
5049942557165879297UL,
5050505507119300609UL,
5053883206839828481UL,
5054727631769960449UL,
5071053180419178497UL,
5071616130372599809UL,
5076964154930102273UL,
5083438079394447361UL,
5084282504324579329UL,
5085408404231421953UL,
5091882328695767041UL,
5093852653532741633UL,
5102296902834061313UL,
5103704277717614593UL,
5107363452414853121UL,
5109615252228538369UL,
5124251951017492481UL,
5124814900970913793UL,
5131851775388680193UL,
5133259150272233473UL,
5136918324969472001UL,
5137762749899603969UL,
5140014549713289217UL,
5143392249433817089UL,
5150429123851583489UL,
5152680923665268737UL,
5152962398641979393UL,
5154369773525532673UL,
5158591898176192513UL,
5179139571476070401UL,
5182235796219887617UL,
5184206121056862209UL,
5195183645148577793UL,
5197716919938973697UL,
5198279869892395009UL,
5202501994543054849UL,
5213760993611481089UL,
5217983118262140929UL,
5218827543192272897UL,
5224457042726486017UL,
5245567665979785217UL,
5245849140956495873UL,
5247256515840049153UL,
5247537990816759809UL,
5250915690537287681UL,
5260767314722160641UL,
5277092863371378689UL,
5283848262812434433UL,
5290603662253490177UL,
5300455286438363137UL,
5300736761415073793UL,
5322691809598504961UL,
5323254759551926273UL,
5326913934249164801UL,
5337047033410748417UL,
5339580308201144321UL,
5340424733131276289UL,
5349713407362727937UL,
5359565031547600897UL,
5367164855918788609UL,
5370542555639316481UL,
5372231405499580417UL,
5377579430057082881UL,
5385179254428270593UL,
5390808753962483713UL,
5395030878613143553UL,
5395312353589854209UL,
5409386102425387009UL,
5414452652006178817UL,
5432467050515660801UL,
5456955373489487873UL,
5462584873023700993UL,
5465118147814096897UL,
5467088472651071489UL,
5476940096835944449UL,
5484539921207132161UL,
5490732370694766593UL,
5496361870228979713UL,
5498050720089243649UL,
5503398744646746113UL,
5504243169576878081UL,
5508465294227537921UL,
5521131668179517441UL,
5533798042131496961UL,
5536894266875314177UL,
5542805241386237953UL,
5543086716362948609UL,
5556316040268349441UL,
5565041764546379777UL,
5581085838218887169UL,
5587841237659942913UL,
5596004011984551937UL,
5598537286774947841UL,
5598818761751658497UL,
5606981536076267521UL,
5610359235796795393UL,
5614581360447455233UL,
5614862835424165889UL,
5623307084725485569UL,
5625840359515881473UL,
5629781009189830657UL,
5643573283048652801UL,
5662150631511556097UL,
5664683906301952001UL,
5691705504066174977UL,
5697616478577098753UL,
5704090403041443841UL,
5704934827971575809UL,
5707468102761971713UL,
5708594002668814337UL,
5717038251970134017UL,
5718445626853687297UL,
5718727101830397953UL,
5737867400246722561UL,
5739556250106986497UL,
5774459147219107841UL,
5781777496613584897UL,
5787125521171087361UL,
5794725345542275073UL,
5805702869633990657UL,
5813865643958599681UL,
5814710068888731649UL,
5815554493818863617UL,
5815835968795574273UL,
5831598567491371009UL,
5838635441909137409UL,
5840887241722822657UL,
5842013141629665281UL,
5845390841350193153UL,
5850457390930984961UL,
5852709190744670209UL,
5859746065162436609UL,
5861153440045989889UL,
5868753264417177601UL,
5871568014184284161UL,
5877478988695207937UL,
5883389963206131713UL,
5888456512786923521UL,
5892678637437583361UL,
5899152561901928449UL,
5905345011389562881UL,
5905907961342984193UL,
5916885485434699777UL,
5927018584596283393UL,
5929833334363389953UL,
5945595933059186689UL,
5948410682826293249UL,
5948973632779714561UL,
5952632807476953089UL,
5953477232407085057UL,
5955166082267348993UL,
5958262307011166209UL,
5961640006731694081UL,
5969521306079592449UL,
5970928680963145729UL,
5974306380683673601UL,
5984439479845257217UL,
5998794703657500673UL,
6020186801887510529UL,
6026660726351855617UL,
6027786626258698241UL,
6028631051188830209UL,
6035104975653175297UL,
6037919725420281857UL,
6046363974721601537UL,
6047771349605154817UL,
6053119374162657281UL,
6059593298627002369UL,
6070007872765296641UL,
6071696722625560577UL,
6085770471461093377UL,
6087459321321357313UL,
6096185045599387649UL,
6111103219365052417UL,
6111384694341763073UL,
6118703043736240129UL,
6123769593317031937UL,
6127991717967691777UL,
6129680567827955713UL,
6130524992758087681UL,
6136435967269011457UL,
6142628416756645889UL,
6146850541407305729UL,
6147413491360727041UL,
6151917090988097537UL,
6157828065499021313UL,
6158672490429153281UL,
6169368539544158209UL,
6177812788845477889UL,
6189916212844036097UL,
6195545712378249217UL,
6198078987168645121UL,
6203145536749436929UL,
6206523236469964801UL,
6211026836097335297UL,
6215811910701416449UL,
6222848785119182849UL,
6223693210049314817UL,
6226226484839710721UL,
6236359584001294337UL,
6236922533954715649UL,
6240300233675243521UL,
6243114983442350081UL,
6244803833302614017UL,
6248744482976563201UL,
6259159057114857473UL,
6264788556649070593UL,
6266477406509334529UL,
6269010681299730433UL,
6279988205391446017UL,
6285336229948948481UL,
6303913578411851777UL,
6307291278132379649UL,
6307854228085800961UL,
6309543077946064897UL,
6334875825850023937UL,
6339379425477394433UL,
6345290399988318209UL,
6353453174312927233UL,
6357112349010165761UL,
6363586273474510849UL,
6366119548264906753UL,
6372030522775830529UL,
6374563797566226433UL,
6386667221564784641UL,
6388356071425048577UL,
6393141146029129729UL,
6405807519981109249UL,
6406651944911241217UL,
6424666343420723201UL,
6427762568164540417UL,
6442962216906915841UL,
6455628590858895361UL,
6466043164997189633UL,
6467732014857453569UL,
6471954139508113409UL,
6477020689088905217UL,
6487153788250488833UL,
6488842638110752769UL,
6492783287784701953UL,
6494472137644965889UL,
6498131312342204417UL,
6510797686294183937UL,
6518960460618792961UL,
6526841759966691329UL,
6528249134850244609UL,
6541759933732356097UL,
6542885833639198721UL,
6546263533359726593UL,
6547670908243279873UL,
6552174507870650369UL,
6552737457824071681UL,
6560337282195259393UL,
6563152031962365953UL,
6564559406845919233UL,
6566248256706183169UL,
6581729380425269249UL,
6583136755308822529UL,
6585107080145797121UL,
6595240179307380737UL,
6597773454097776641UL,
6598617879027908609UL,
6603402953631989761UL,
6606780653352517633UL,
6607625078282649601UL,
6608469503212781569UL,
6611002778003177473UL,
6630706026372923393UL,
6643090925348192257UL,
6644216825255034881UL,
6661105323857674241UL,
6662794173717938177UL,
6668705148228861953UL,
6676867922553470977UL,
6680245622273998849UL,
6687282496691765249UL,
6688126921621897217UL,
6689534296505450497UL,
6691223146365714433UL,
6705015420224536577UL,
6705578370177957889UL,
6709237544875196417UL,
6713459669525856257UL,
6714022619479277569UL,
6718244744129937409UL,
6720215068966912001UL,
6730911118081916929UL,
6737666517522972673UL,
6737947992499683329UL,
6747799616684556289UL,
6748925516591398913UL,
6749769941521530881UL,
6751177316405084161UL,
6758777140776271873UL,
6760465990636535809UL,
6762999265426931713UL,
6774258264495357953UL,
6775947114355621889UL,
6782421038819966977UL,
6786643163470626817UL,
6788332013330890753UL,
6801842812213002241UL,
6806346411840372737UL,
6807753786723926017UL,
6812257386351296513UL,
6814509186164981761UL,
6817886885885509633UL,
6824642285326565377UL,
6833368009604595713UL,
6850256508207235073UL,
6861234032298950657UL,
6863767307089346561UL,
6882344655552249857UL,
6885722355272777729UL,
6887129730156331009UL,
6889663004946726913UL,
6896418404387782657UL,
6904862653689102337UL,
6905144128665812993UL,
6906832978526076929UL,
6910210678246604801UL,
6920906727361609729UL,
6924284427082137601UL,
6924565902058848257UL,
6927943601779376129UL,
6931884251453325313UL,
6932165726430035969UL,
6933010151360167937UL,
6943987675451883521UL,
6949617174986096641UL,
6954683724566888449UL,
6958061424287416321UL,
6958342899264126977UL,
6961439124007944193UL,
6962565023914786817UL,
6965661248658604033UL,
6965942723635314689UL,
6982831222237954049UL,
6987616296842035201UL,
6990993996562563073UL,
6993808746329669633UL,
7003097420561121281UL,
7007319545211781121UL,
7007882495165202433UL,
7009008395072045057UL,
7017171169396654081UL,
7017452644373364737UL,
7023363618884288513UL,
7025052468744552449UL,
7063614540553912321UL,
7067836665204572161UL,
7069525515064836097UL,
7080784514133262337UL,
7084725163807211521UL,
7088384338504450049UL,
7097673012735901697UL,
7099361862596165633UL,
7103302512270114817UL,
7104991362130378753UL,
7107524636920774657UL,
7115968886222094337UL,
7118783635989200897UL,
7123568710593282049UL,
7126101985383677953UL,
7147212608636977153UL,
7152279158217768961UL,
7169167656820408321UL,
7170856506680672257UL,
7181834030772387841UL,
7211388903327006721UL,
7216455452907798529UL,
7218425777744773121UL,
7221803477465300993UL,
7233343951510437889UL,
7245165900532285441UL,
7247980650299392001UL,
7251076875043209217UL,
7253047199880183809UL,
7255580474670579713UL,
7257269324530843649UL,
7261491449181503489UL,
7263743248995188737UL,
7265432098855452673UL,
7269091273552691201UL,
7269654223506112513UL,
7269935698482823169UL,
7273313398203351041UL,
7287668622015594497UL,
7289075996899147777UL,
7290201896805990401UL,
7294986971410071553UL,
7304557120618233857UL,
7308497770292183041UL,
7309342195222315009UL,
7316379069640081409UL,
7320601194290741249UL,
7323978894011269121UL,
7326230693824954369UL,
7329889868522192897UL,
7343963617357725697UL,
7346778367124832257UL,
7352689341635756033UL,
7356629991309705217UL,
7366200140517867521UL,
7373799964889055233UL,
7379429464423268353UL,
7379710939399979009UL,
7381962739213664257UL,
7382244214190374913UL,
7385340438934192129UL,
7386184863864324097UL,
7387310763771166721UL,
7392095838375247873UL,
7392940263305379841UL,
7394629113165643777UL,
7399977137723146241UL,
7404762212327227393UL,
7405606637257359361UL,
7407576962094333953UL,
7410673186838151169UL,
7417710061255917569UL,
7425309885627105281UL,
7427561685440790529UL,
7428687585347633153UL,
7435442984788688897UL,
7447264933810536449UL,
7452050008414617601UL,
7462464582552911873UL,
7467531132133703681UL,
7469782931947388929UL,
7501871079292403713UL,
7506937628873195521UL,
7508907953710170113UL,
7511441228500566017UL,
7514818928221093889UL,
7527203827196362753UL,
7552536575100321793UL,
7557040174727692289UL,
7560417874448220161UL,
7570269498633093121UL,
7580402597794676737UL,
7582372922631651329UL,
7585750622352179201UL,
7594194871653498881UL,
7595602246537052161UL,
7604046495838371841UL,
7606016820675346433UL,
7611646320209559553UL,
7614179594999955457UL,
7623749744208117761UL,
7624594169138249729UL,
7626001544021803009UL,
7631349568579305473UL,
7632193993509437441UL,
7636979068113518593UL,
7639793817880625153UL,
7649082492112076801UL,
7652178716855894017UL,
7653867566716157953UL,
7654149041692868609UL,
7663156240947609601UL,
7665970990714716161UL,
7673570815085903873UL,
7675259664946167809UL,
7697214713129598977UL,
7708755187174735873UL,
7715792061592502273UL,
7728176960567771137UL,
7738310059729354753UL,
7742813659356725249UL,
7759420682982653953UL,
7760546582889496577UL,
7763924282610024449UL,
7776309181585293313UL,
7780812781212663809UL,
7781375731166085121UL,
7783346056003059713UL,
7787568180653719553UL,
7791790305304379393UL,
7801641929489252353UL,
7811775028650835969UL,
7840485476275322881UL,
7861033149575200769UL,
7861877574505332737UL,
7863566424365596673UL,
7866662649109413889UL,
7872010673666916353UL,
7873418048550469633UL,
7886084422502449153UL,
7901284071244824577UL,
7903817346035220481UL,
7908039470685880321UL,
7908320945662590977UL,
7908883895616012289UL,
7916765194963910657UL,
7920705844637859841UL,
7924927969288519681UL,
7925772394218651649UL,
7958704966493798401UL,
7959549391423930369UL,
7960393816354062337UL,
7961519716260904961UL,
7962927091144458241UL,
7967149215795118081UL,
7969963965562224641UL,
7978408214863544321UL,
7980097064723808257UL,
7989104263978549249UL,
7991074588815523841UL,
7994452288536051713UL,
8001770637930528769UL,
8012185212068823041UL,
8013874061929086977UL,
8023725686113959937UL,
8029636660624883713UL,
8032169935415279617UL,
8035547635135807489UL,
8038080909926203393UL,
8039206809833046017UL,
8045117784343969793UL,
8056658258389106689UL,
8059191533179502593UL,
8059473008156213249UL,
8072702332061614081UL,
8072983807038324737UL,
8088183455780700161UL,
8090435255594385409UL,
8093250005361491969UL,
8100005404802547713UL,
8103101629546364929UL,
8112390303777816577UL,
8114360628614791169UL,
8118301278288740353UL,
8120834553079136257UL,
8124212252799664129UL,
8143634026192699393UL,
8150670900610465793UL,
8161366949725470721UL,
8167559399213105153UL,
8175722173537714177UL,
8184166422839033857UL,
8195143946930749441UL,
8195988371860881409UL,
8209499170742992897UL,
8213721295393652737UL,
8222165544694972417UL,
8224135869531947009UL,
8226669144322342913UL,
8227513569252474881UL,
8228076519205896193UL,
8228920944136028161UL,
8241868793064718337UL,
8243276167948271617UL,
8246090917715378177UL,
8248624192505774081UL,
8252846317156433921UL,
8262979416318017537UL,
8269734815759073281UL,
8270579240689205249UL,
8274519890363154433UL,
8285778889431580673UL,
8289719539105529857UL,
8293941663756189697UL,
8295630513616453633UL,
8298445263383560193UL,
8305200662824615937UL,
8309422787475275777UL,
8317585561799884801UL,
8321244736497123329UL,
8338696185053184001UL,
8340385034913447937UL,
8346577484401082369UL,
8350799609051742209UL,
8354740258725691393UL,
8362621558073589761UL,
8365999257794117633UL,
8370221382444777473UL,
8375287932025569281UL,
8382606281420046337UL,
8385139556210442241UL,
8401465104859660289UL,
8416383278625325057UL,
8428205227647172609UL,
8455508300388106241UL,
8469582049223639041UL,
8482248423175618561UL,
8505329371265892353UL,
8508425596009709569UL,
8517714270241161217UL,
8520247545031557121UL,
8520529020008267777UL,
8524751144658927617UL,
8530380644193140737UL,
8530662119169851393UL,
8534602768843800577UL,
8544735868005384193UL,
8551772742423150593UL,
8559091091817627649UL,
8570068615909343233UL,
8575135165490135041UL,
8581046140001058817UL,
8582734989861322753UL,
8583860889768165377UL,
8585268264651718657UL,
8588083014418825217UL,
8592868089022906369UL,
8597934638603698177UL,
8599904963440672769UL,
8600467913394094081UL,
8607504787811860481UL,
8620171161763840001UL,
8623267386507657217UL,
8658170283619778561UL,
8659577658503331841UL,
8664081258130702337UL,
8676466157105971201UL,
8677310582036103169UL,
8682377131616894977UL,
8689132531057950721UL,
8691947280825057281UL,
8693636130685321217UL,
8703487754870194177UL,
8706021029660590081UL,
8706302504637300737UL,
8708835779427696641UL,
8709680204357828609UL,
8717280028729016321UL,
8718687403612569601UL,
8726568702960467969UL,
8730790827611127809UL,
8735857377191919617UL,
8740642451796000769UL,
8741768351702843393UL,
8743457201563107329UL,
8760908650119168001UL,
8771041749280751617UL,
8777797148721807361UL,
8781174848442335233UL,
8805944646392872961UL,
8815233320624324609UL,
8816640695507877889UL,
8831277394296832001UL,
8853232442480263169UL,
8855765717270659073UL,
8856610142200791041UL,
8866743241362374657UL,
8883350264988303361UL,
8885320589825277953UL,
8887009439685541889UL,
8889261239499227137UL,
8889542714475937793UL,
8896861063870414849UL,
8900238763590942721UL,
8914875462379896833UL,
8916282837263450113UL,
8921630861820952577UL,
8923038236704505857UL,
8925008561541480449UL,
8925571511494901761UL,
8930075111122272257UL,
8932608385912668161UL,
8934860185726353409UL,
8941897060144119809UL,
8951185734375571457UL,
8957941133816627201UL,
8963007683397419009UL,
8967792758001500161UL,
8973703732512423937UL,
8977081432232951809UL,
8978207332139794433UL,
8987496006371246081UL,
8990592231115063297UL,
8995940255672565761UL,
9000725330276646913UL,
9001006805253357569UL,
9001851230183489537UL,
9018739728786128897UL,
9019302678739550209UL,
9026058078180605953UL,
9031406102738108417UL,
9031969052691529729UL,
9044635426643509249UL,
9051672301061275649UL,
9056738850642067457UL,
9058146225525620737UL,
9069405224594046977UL,
9073345874267996161UL,
9075316199104970753UL,
9087701098080239617UL,
9095300922451427329UL,
9097271247288401921UL,
9097834197241823233UL,
9103182221799325697UL,
9113033845984198657UL,
9115567120774594561UL,
9115848595751305217UL,
9121478095285518337UL,
9122603995192360961UL,
9129077919656706049UL,
9142870193515528193UL,
9144277568399081473UL,
9158069842257903617UL,
9159477217141456897UL,
9165388191652380673UL,
9166514091559223297UL,
9171299166163304449UL,
9172143591093436417UL,
9184809965045415937UL,
9198602238904238081UL,
9202824363554897921UL,
9203387313508319233UL,
9214646312576745473UL,
3799912185593857UL,
4222124650659841UL,
4925812092436481UL,
7881299347898369UL,
9147936743096321UL,
12947848928690177UL,
14214486323888129UL,
15621861207441409UL,
16044073672507393UL,
17169973579350017UL,
19703248369745921UL,
22799473113563137UL,
30399297484750849UL,
31525197391593473UL,
38280596832649217UL,
48554433482588161UL,
49821070877786113UL,
50524758319562753UL,
52635820644892673UL,
59109745109237761UL,
60657857481146369UL,
62065232364699649UL,
66287357015359489UL,
71213169107795969UL,
73324231433125889UL,
74168656363257857UL,
77687093572141057UL,
92746004826161153UL,
103301316452810753UL,
103723528917876737UL,
105412378778140673UL,
106256803708272641UL,
112589990684262401UL,
113856628079460353UL,
114701053009592321UL,
117797277753409537UL,
119063915148607489UL,
120612027520516097UL,
123145302310912001UL,
127508164449927169UL,
136796838681378817UL,
138907901006708737UL,
139189375983419393UL,
141722650773815297UL,
147633625284739073UL,
152700174865530881UL,
156218612074414081UL,
159033361841520641UL,
164099911422312449UL,
165929498770931713UL,
168884986026393601UL,
170433098398302209UL,
172966373188698113UL,
174795960537317377UL,
178877347699621889UL,
180143985094819841UL,
182817997373571073UL,
185632747140677633UL,
186617909559164929UL,
190699296721469441UL,
191684459139956737UL,
197876908627591169UL,
199987970952921089UL,
201817558301540353UL,
203365670673448961UL,
208432220254240769UL,
209839595137794049UL,
211106232532992001UL,
221661544159641601UL,
221943019136352257UL,
223631868996616193UL,
228839156065763329UL,
230387268437671937UL,
233764968158199809UL,
234327918111621121UL,
234609393088331777UL,
247838716993732609UL,
250653466760839169UL,
252483054109458433UL,
253186741551235073UL,
259238453550514177UL,
262475415782686721UL,
263038365736108033UL,
263882790666240001UL,
265993852991569921UL,
267260490386767873UL,
271764090014138369UL,
275282527223021569UL,
278660226943549441UL,
279363914385326081UL,
280349076803813377UL,
282319401640787969UL,
284571201454473217UL,
284852676431183873UL,
286682263779803137UL,
294704300616056833UL,
294985775592767489UL,
298926425266716673UL,
301037487592046593UL,
301881912522178561UL,
303992974847508481UL,
310607636800208897UL,
315814923869356033UL,
316518611311132673UL,
318207461171396609UL,
320459260985081857UL,
322992535775477761UL,
324962860612452353UL,
328481297821335553UL,
335236697262391297UL,
339881034378117121UL,
344806846470553601UL,
351702983399964673UL,
356769532980756481UL,
357051007957467137UL,
362539770003324929UL,
362961982468390913UL,
368028532049182721UL,
371406231769710593UL,
371546969258065921UL,
374924668978593793UL,
381680068419649537UL,
384072605721690113UL,
384213343210045441UL,
388716942837415937UL,
398990779487354881UL,
401946266742816769UL,
403072166649659393UL,
403494379114725377UL,
404761016509923329UL,
405183228974989313UL,
406872078835253249UL,
408279453718806529UL,
412360840881111041UL,
417990340415324161UL,
418834765345456129UL,
419256977810522113UL,
421649515112562689UL,
423901314926247937UL,
439382438645334017UL,
444871200691191809UL,
445293413156257793UL,
446700788039811073UL,
449093325341851649UL,
451767337620602881UL,
457678312131526657UL,
459367161991790593UL,
466826248874622977UL,
467248461339688961UL,
473159435850612737UL,
474989023199232001UL,
477100085524561921UL,
488922034546409473UL,
491033096871739393UL,
493144159197069313UL,
496381121429241857UL,
496944071382663169UL,
497788496312795137UL,
498492183754571777UL,
500321771103191041UL,
503277258358652929UL,
505388320683982849UL,
506232745614114817UL,
509469707846287361UL,
510314132776419329UL,
510736345241485313UL,
511158557706551297UL,
515380682357211137UL,
523543456681820161UL,
529313693704388609UL,
537054255563931649UL,
541698592679657473UL,
548031779655647233UL,
550142841980977153UL,
550565054446043137UL,
550987266911109121UL,
556053816491900929UL,
559712991189139457UL,
565764703188418561UL,
566468390630195201UL,
567875765513748481UL,
569564615374012417UL,
573786740024672257UL,
576179277326712833UL,
576601489791778817UL,
581808776860925953UL,
582090251837636609UL,
592364088487575553UL,
593489988394418177UL,
593912200859484161UL,
602919400114225153UL,
608267424671727617UL,
609252587090214913UL,
615163561601138689UL,
617978311368245249UL,
619807898716864513UL,
620230111181930497UL,
622622648483971073UL,
624030023367524353UL,
626844773134630913UL,
626985510622986241UL,
635711234901016577UL,
647673921411219457UL,
648377608852996097UL,
652318258526945281UL,
654288583363919873UL,
655695958247473153UL,
656118170712539137UL,
664140207548792833UL,
664421682525503489UL,
667799382246031361UL,
669488232106295297UL,
673428881780244481UL,
682717556011696129UL,
685532305778802689UL,
685954518243868673UL,
686095255732224001UL,
688487793034264577UL,
695806142428741633UL,
696087617405452289UL,
704250391730061313UL,
704531866706771969UL,
704954079171837953UL,
713116853496446977UL,
718464878053949441UL,
719450040472436737UL,
724375852564873217UL,
729160927168954369UL,
730005352099086337UL,
732538626889482241UL,
733242314331258881UL,
734086739261390849UL,
734508951726456833UL,
735916326610010113UL,
741264351167512577UL,
744782788376395777UL,
745205000841461761UL,
749004913027055617UL,
753227037677715457UL,
759560224653705217UL,
764908249211207681UL,
765752674141339649UL,
767019311536537601UL,
769271111350222849UL,
770397011257065473UL,
772648811070750721UL,
773915448465948673UL,
779263473023451137UL,
787426247348060161UL,
787707722324770817UL,
788129934789836801UL,
792492796928851969UL,
797840821486354433UL,
801781471160303617UL,
809240558043136001UL,
811914570321887233UL,
814025632647217153UL,
814307107623927809UL,
814870057577349121UL,
816981119902679041UL,
818247757297876993UL,
820640294599917569UL,
821062507064983553UL,
821484719530049537UL,
824580944273866753UL,
828803068924526593UL,
831336343714922497UL,
833728881016963073UL,
833869618505318401UL,
836825105760780289UL,
839358380551176193UL,
848084104829206529UL,
848224842317561857UL,
855683929200394241UL,
857091304083947521UL,
857935729014079489UL,
861313428734607361UL,
874683490128363521UL,
876935289942048769UL,
877638977383825409UL,
879890777197510657UL,
882705526964617217UL,
888194289010475009UL,
890446088824160257UL,
891712726219358209UL,
894949688451530753UL,
898749600637124609UL,
900016238032322561UL,
901001400450809857UL,
904801312636403713UL,
905645737566535681UL,
907334587426799617UL,
911838187054170113UL,
917045474123317249UL,
918312111518515201UL,
922393498680819713UL,
927460048261611521UL,
932948810307469313UL,
937170934958129153UL,
937311672446484481UL,
938156097376616449UL,
939000522306748417UL,
941393059608788993UL,
944348546864250881UL,
949837308910108673UL,
950822471328595969UL,
952089108723793921UL,
954200171049123841UL,
954903858490900481UL,
959688933094981633UL,
960392620536758273UL,
960814833001824257UL,
965459170117550081UL,
966866545001103361UL,
969681294768209921UL,
979532918953082881UL,
986147580905783297UL,
987132743324270593UL,
990369705556443137UL,
990932655509864449UL,
991636342951641089UL,
993888142765326337UL,
1000080592252960769UL,
1005710091787173889UL,
1006413779228950529UL,
1014858028530270209UL,
1019924578111062017UL,
1022598590389813249UL,
1031746527132909569UL,
1032590952063041537UL,
1033576114481528833UL,
1036813076713701377UL,
1037798239132188673UL,
1043709213643112449UL,
1046664700898574337UL,
1052153462944432129UL,
1052575675409498113UL,
1055531162664960001UL,
1060456974757396481UL,
1066086474291609601UL,
1066930899221741569UL,
1067353111686807553UL,
1075797360988127233UL,
1076641785918259201UL,
1089167422381883393UL,
1091419222195568641UL,
1092685859590766593UL,
1097330196706492417UL,
1097611671683203073UL,
1099019046566756353UL,
1100567158938664961UL,
1100707896427020289UL,
1102256008798928897UL,
1102818958752350209UL,
1103663383682482177UL,
1103944858659192833UL,
1104367071124258817UL,
1105352233542746113UL,
1108166983309852673UL,
1111685420518735873UL,
1113233532890644481UL,
1113374270378999809UL,
1120411144796766209UL,
1121677782191964161UL,
1122662944610451457UL,
1123929582005649409UL,
1124633269447426049UL,
1125196219400847361UL,
1137440380887760897UL,
1139410705724735489UL,
1146166105165791233UL,
1147010530095923201UL,
1149684542374674433UL,
1156721416792440833UL,
1162350916326653953UL,
1164039766186917889UL,
1165306403582115841UL,
1168965578279354369UL,
1171498853069750273UL,
1172906227953303553UL,
1179520889906003969UL,
1183743014556663809UL,
1185994814370349057UL,
1188105876695678977UL,
1198942663299039233UL,
1202038888042856449UL,
1202742575484633089UL,
1202883312972988417UL,
1206261012693516289UL,
1215549686924967937UL,
1215831161901678593UL,
1218927386645495809UL,
1219771811575627777UL,
1225964261063262209UL,
1227793848411881473UL,
1230327123202277377UL,
1231453023109120001UL,
1231593760597475329UL,
1239475059945373697UL,
1240882434828926977UL,
1244682347014520833UL,
1245386034456297473UL,
1245526771944652801UL,
1246371196874784769UL,
1247074884316561409UL,
1247637834269982721UL,
1250452584037089281UL,
1252704383850774529UL,
1259881995756896257UL,
1261007895663738881UL,
1261148633152094209UL,
1263118957989068801UL,
1263259695477424129UL,
1267341082639728641UL,
1267904032593149953UL,
1270296569895190529UL,
1272407632220520449UL,
1275363119475982337UL,
1275785331941048321UL,
1277896394266378241UL,
1281274093986906113UL,
1283103681335525377UL,
1287607280962895873UL,
1288029493427961857UL,
1289859080776581121UL,
1291829405613555713UL,
1293518255473819649UL,
1294784892869017601UL,
1297458905147768833UL,
1297881117612834817UL,
1299992179938164737UL,
1301962504775139329UL,
1302525454728560641UL,
1318147315936002049UL,
1319273215842844673UL,
1320117640772976641UL,
1321102803191463937UL,
1321525015656529921UL,
1326591565237321729UL,
1328561890074296321UL,
1329406315004428289UL,
1332080327283179521UL,
1333769177143443457UL,
1337006139375616001UL,
1341369001514631169UL,
1347139238537199617UL,
1348546613420752897UL,
1349813250815950849UL,
1350235463281016833UL,
1358961187559047169UL,
1359524137512468481UL,
1359805612489179137UL,
1360790774907666433UL,
1363324049698062337UL,
1365012899558326273UL,
1366561011930234881UL,
1367827649325432833UL,
1370360924115828737UL,
1376412636115107841UL,
1382745823091097601UL,
1386967947741757441UL,
1388656797602021377UL,
1389923434997219329UL,
1396256621973209089UL,
1399071371740315649UL,
1400478746623868929UL,
1402449071460843521UL,
1406248983646437377UL,
1407937833506701313UL,
1411737745692295169UL,
1414693232947757057UL,
1418070932668284929UL,
1418915357598416897UL,
1420744944947036161UL,
1421026419923746817UL,
1422433794807300097UL,
1423559694714142721UL,
1423700432202498049UL,
1424122644667564033UL,
1434677956294213633UL,
1443122205595533313UL,
1446077692850995201UL,
1447766542711259137UL,
1448188755176325121UL,
1449033180106457089UL,
1450159080013299713UL,
1451566454896852993UL,
1458603329314619393UL,
1461136604105015297UL,
1462121766523502593UL,
1467188316104294401UL,
1472254865685086209UL,
1477602890242588673UL,
1479291740102852609UL,
1486047139543908353UL,
1491958114054832129UL,
1492521064008253441UL,
1493365488938385409UL,
1494632126333583361UL,
1498854250984243201UL,
1501246788286283777UL,
1503780063076679681UL,
1508142925215694849UL,
1512224312377999361UL,
1525031423818334209UL,
1526579536190242817UL,
1538823697677156353UL,
1542623609862750209UL,
1544875409676435457UL,
1547267946978476033UL,
1549097534327095297UL,
1550223434233937921UL,
1551490071629135873UL,
1557541783628414977UL,
1557963996093480961UL,
1563874970604404737UL,
1568378570231775233UL,
1570489632557105153UL,
1571474794975592449UL,
1573585857300922369UL,
1575556182137896961UL,
1576541344556384257UL,
1577667244463226881UL,
1582030106602242049UL,
1586674443717967873UL,
1587518868648099841UL,
1591600255810404353UL,
1593007630693957633UL,
1595963117949419521UL,
1598355655251460097UL,
1603844417297317889UL,
1605674004645937153UL,
1606377692087713793UL,
1610740554226728961UL,
1612851616552058881UL,
1616933003714363393UL,
1620451440923246593UL,
1622140290783510529UL,
1622984715713642497UL,
1623406928178708481UL,
1624110615620485121UL,
1628895690224566273UL,
1635651089665622017UL,
1637339939525885953UL,
1637621414502596609UL,
1638465839432728577UL,
1641843539153256449UL,
1644799026408718337UL,
1648598938594312193UL,
1657887612825763841UL,
1672242836638007297UL,
1672665049103073281UL,
1672805786591428609UL,
1681953723334524929UL,
1683783310683144193UL,
1684205523148210177UL,
1684909210589986817UL,
1689131335240646657UL,
1693071984914595841UL,
1696449684635123713UL,
1696731159611834369UL,
1705738358866575361UL,
1713760395702829057UL,
1715027033098027009UL,
1715449245563092993UL,
1716997357935001601UL,
1717982520353488897UL,
1727552669561651201UL,
1728819306956849153UL,
1734026594025996289UL,
1734448806491062273UL,
1743174530769092609UL,
1745848543047843841UL,
1749648455233437697UL,
1750070667698503681UL,
1758092704534757377UL,
1760063029371731969UL,
1762314829185417217UL,
1763581466580615169UL,
1764707366487457793UL,
1773292353277132801UL,
1774136778207264769UL,
1777092265462726657UL,
1779484802764767233UL,
1784692089833914369UL,
1787929052066086913UL,
1788914214484574209UL,
1791447489274970113UL,
1794402976530432001UL,
1798484363692736513UL,
1804395338203660289UL,
1804817550668726273UL,
1806647138017345537UL,
1807913775412543489UL,
1811291475133071361UL,
1812135900063203329UL,
1816217287225507841UL,
1817202449643995137UL,
1818891299504259073UL,
1820017199411101697UL,
1823535636619984897UL,
1824661536526827521UL,
1825505961456959489UL,
1826350386387091457UL,
1827335548805578753UL,
1833246523316502529UL,
1836202010571964417UL,
1838594547874004993UL,
1839438972804136961UL,
1843661097454796801UL,
1847179534663680001UL,
1849572071965720577UL,
1852949771686248449UL,
1855201571499933697UL,
1855905258941710337UL,
1857312633825263617UL,
1859845908615659521UL,
1860549596057436161UL,
1865756883126583297UL,
1870260482753953793UL,
1873356707497771009UL,
1874060394939547649UL,
1880815794380603393UL,
1880956531868958721UL,
1889400781170278401UL,
1898548717913374721UL,
1898689455401730049UL,
1902348630098968577UL,
1902770842564034561UL,
1905726329819496449UL,
1907837392144826369UL,
1908681817074958337UL,
1911778041818775553UL,
1913326154190684161UL,
1914733529074237441UL,
1916422378934501377UL,
1918111228794765313UL,
1921911140980359169UL,
1924866628235821057UL,
1925148103212531713UL,
1926977690561150977UL,
1933170140048785409UL,
1935703414839181313UL,
1935844152327536641UL,
1936125627304247297UL,
1937955214652866561UL,
1938799639582998529UL,
1939221852048064513UL,
1940769964419973121UL,
1945555039024054273UL,
1950621588604846081UL,
1953014125906886657UL,
1959769525347942401UL,
1965258287393800193UL,
1967510087207485441UL,
1971591474369789953UL,
1974687699113607169UL,
1976235811485515777UL,
1977643186369069057UL,
1978065398834135041UL,
1980176461159464961UL,
1988057760507363329UL,
1988620710460784641UL,
1989465135390916609UL,
1991435460227891201UL,
1997346434738814977UL,
1999176022087434241UL,
2000724134459342849UL,
2002835196784672769UL,
2004101834179870721UL,
2010575758644215809UL,
2010997971109281793UL,
2012123871016124417UL,
2012546083481190401UL,
2013109033434611713UL,
2014657145806520321UL,
2020990332782510081UL,
2022397707666063361UL,
2023101395107840001UL,
2023945820037971969UL,
2024508769991393281UL,
2026056882363301889UL,
2029434582083829761UL,
2029575319572185089UL,
2030419744502317057UL,
2032530806827646977UL,
2035908506548174849UL,
2041256531105677313UL,
2041397268594032641UL,
2044212018361139201UL,
2050545205337128961UL,
2053500692592590849UL,
2053641430080946177UL,
2057441342266540033UL,
2059130192126803969UL,
2062789366824042497UL,
2065885591567859713UL,
2070952141148651521UL,
2072218778543849473UL,
2073766890915758081UL,
2076722378171219969UL,
2082774090170499073UL,
2084462940030763009UL,
2085588839937605633UL,
2087699902262935553UL,
2091640551936884737UL,
2092907189332082689UL,
2094033089238925313UL,
2095440464122478593UL,
2098677426354651137UL,
2104166188400508929UL,
2108388313051168769UL,
2115988137422356481UL,
2117395512305909761UL,
2124995336677097473UL,
2125839761607229441UL,
2129921148769533953UL,
2131750736118153217UL,
2132032211094863873UL,
2137943185605787649UL,
2143572685140000769UL,
2145120797511909377UL,
2146950384860528641UL,
2149905872115990529UL,
2152016934441320449UL,
2152439146906386433UL,
2157364958998822913UL,
2158350121417310209UL,
2159053808859086849UL,
2171860920299421697UL,
2172283132764487681UL,
2172564607741198337UL,
2176083044950081537UL,
2177208944856924161UL,
2178475582252122113UL,
2181431069507584001UL,
2192127118622588929UL,
2192830806064365569UL,
2195364080854761473UL,
2196208505784893441UL,
2196771455738314753UL,
2198319568110223361UL,
2199163993040355329UL,
2205215705039634433UL,
2209719304667004929UL,
2210985942062202881UL,
2211548892015624193UL,
2221119041223786497UL,
2224637478432669697UL,
2233363202710700033UL,
2234770577594253313UL,
2236459427454517249UL,
2237585327361359873UL,
2239837127175045121UL,
2241807452012019713UL,
2242651876942151681UL,
2252081288661958657UL,
2254051613498933249UL,
2259540375544791041UL,
2260384800474923009UL,
2264325450148872193UL,
2267140199915978753UL,
2276569611635785729UL,
2277273299077562369UL,
2278539936472760321UL,
2280228786333024257UL,
2282762061123420161UL,
2286561973309014017UL,
2287828610704211969UL,
2290502622982963201UL,
2290784097959673857UL,
2292050735354871809UL,
2292613685308293121UL,
2299650559726059521UL,
2300494984656191489UL,
2308094809027379201UL,
2311613246236262401UL,
2313583571073236993UL,
2316116845863632897UL,
2316539058328698881UL,
2317524220747186177UL,
2321324132932780033UL,
2322027820374556673UL,
2322450032839622657UL,
2325546257583439873UL,
2336805256651866113UL,
2349471630603845633UL,
2357915879905165313UL,
2358901042323652609UL,
2359604729765429249UL,
2362278742044180481UL,
2363967591904444417UL,
2364249066881155073UL,
2367345291624972289UL,
2370160041392078849UL,
2372411841205764097UL,
2375648803437936641UL,
2382544940367347713UL,
2384656002692677633UL,
2387892964924850177UL,
2388878127343337473UL,
2391411402133733377UL,
2394789101854261249UL,
2396759426691235841UL,
2399011226504921089UL,
2399855651435053057UL,
2401122288830251009UL,
2403655563620646913UL,
2405766625945976833UL,
2406048100922687489UL,
2410270225573347329UL,
2411677600456900609UL,
2414633087712362497UL,
2414914562689073153UL,
2417870049944535041UL,
2420544062223286273UL,
2421388487153418241UL,
2422936599525326849UL,
2423499549478748161UL,
2438136248267702273UL,
2438276985756057601UL,
2439825098127966209UL,
2444469435243692033UL,
2446299022592311297UL,
2447002710034087937UL,
2450521147242971137UL,
2452209997103235073UL,
2452913684545011713UL,
2453054422033367041UL,
2460935721381265409UL,
2461780146311397377UL,
2462202358776463361UL,
2465298583520280577UL,
2465720795985346561UL,
2473742832821600257UL,
2474868732728442881UL,
2475009470216798209UL,
2478246432448970753UL,
2479231594867458049UL,
2479653807332524033UL,
2479935282309234689UL,
2483453719518117889UL,
2485001831890026497UL,
2485986994308513793UL,
2491757231331082241UL,
2493023868726280193UL,
2497386730865295361UL,
2499357055702269953UL,
2499497793190625281UL,
2501608855515955201UL,
2504564342771417089UL,
2507801305003589633UL,
2510334579793985537UL,
2514134491979579393UL,
2516386291793264641UL,
2519341779048726529UL,
2523000953745965057UL,
2529052665745244161UL,
2533274790395904001UL,
2536933965093142529UL,
2537074702581497857UL,
2545941164347883521UL,
2547489276719792129UL,
2547630014208147457UL,
2548896651603345409UL,
2549600339045122049UL,
2550022551510188033UL,
2552133613835517953UL,
2554666888625913857UL,
2556074263509467137UL,
2557763113369731073UL,
2562266712997101569UL,
2563674087880654849UL,
2569444324903223297UL,
2571133174763487233UL,
2573666449553883137UL,
2575073824437436417UL,
2578310786669608961UL,
2585629136064086017UL,
2600265834853040129UL,
2603643534573568001UL,
2605754596898897921UL,
2606317546852319233UL,
2608006396712583169UL,
2609554509084491777UL,
2613776633735151617UL,
2620672770664562689UL,
2623628257920024577UL,
2627709645082329089UL,
2628272595035750401UL,
2629961444896014337UL,
2630383657361080321UL,
2632776194663120897UL,
2639672331592531969UL,
2641783393917861889UL,
2645442568615100417UL,
2647553630940430337UL,
2653605342939709441UL,
2654871980334907393UL,
2655153455311618049UL,
2659094104985567233UL,
2659797792427343873UL,
2663738442101293057UL,
2671338266472480769UL,
2672604903867678721UL,
2685130540331302913UL,
2691463727307292673UL,
2697937651771637761UL,
2706663376049668097UL,
2707226326003089409UL,
2713981725444145153UL,
2715107625350987777UL,
2719329750001647617UL,
2725240724512571393UL,
2729040636698165249UL,
2732418336418693121UL,
2733684973813891073UL,
2741847748138500097UL,
2743536597998764033UL,
2747195772696002561UL,
2749447572509687809UL,
2752403059765149697UL,
2752684534741860353UL,
2753106747206926337UL,
2754795597067190273UL,
2755640021997322241UL,
2757751084322652161UL,
2771402620693118977UL,
2777595070180753409UL,
2781957932319768577UL,
2783224569714966529UL,
2784491207110164481UL,
2790824394086154241UL,
2805883305340174337UL,
2807712892688793601UL,
2809823955014123521UL,
2812638704781230081UL,
2812779442269585409UL,
2825868028686630913UL,
2831779003197554689UL,
2832201215662620673UL,
2838534402638610433UL,
2840223252498874369UL,
2845149064591310849UL,
2850637826637168641UL,
2860348713333686273UL,
2860489450822041601UL,
2861756088217239553UL,
2862037563193950209UL,
2864148625519280129UL,
2867667062728163329UL,
2869215175100071937UL,
2869778125053493249UL,
2874844674634285057UL,
2885822198726000641UL,
2886525886167777281UL,
2892859073143767041UL,
2894266448027320321UL,
2894547923004030977UL,
2897221935282782209UL,
2913547483932000257UL,
2915236333792264193UL,
2919036245977858049UL,
2924102795558649857UL,
2925510170442203137UL,
2930013770069573633UL,
2933109994813390849UL,
2936346957045563393UL,
2937332119464050689UL,
2940569081696223233UL,
2940709819184578561UL,
2943102356486619137UL,
2949154068485898241UL,
2951546605787938817UL,
2954079880578334721UL,
2957035367833796609UL,
2959709380112547841UL,
2962524129879654401UL,
2965198142158405633UL,
2966324042065248257UL,
2967590679460446209UL,
2970264691739197441UL,
2972235016576172033UL,
2973079441506304001UL,
2980397790900781057UL,
2982931065691176961UL,
2985323602993217537UL,
2989123515178811393UL,
2996301127084933121UL,
2997989976945197057UL,
3005589801316384769UL,
3009108238525267969UL,
3010234138432110593UL,
3023322724849156097UL,
3024589362244354049UL,
3025996737127907329UL,
3028952224383369217UL,
3031485499173765121UL,
3034863198894292993UL,
3035144673871003649UL,
3037677948661399553UL,
3040211223451795457UL,
3045699985497653249UL,
3064699546425622529UL,
3067655033681084417UL,
3068077246146150401UL,
3072299370796810241UL,
3072862320750231553UL,
3074551170610495489UL,
3075677070517338113UL,
3077506657865957377UL,
3077788132842668033UL,
3088765656934383617UL,
3096365481305571329UL,
3101150555909652481UL,
3104106043165114369UL,
3112972504931500033UL,
3122261179162951681UL,
3123809291534860289UL,
3125216666418413569UL,
3128172153673875457UL,
3129438791069073409UL,
3132394278324535297UL,
3140838527625854977UL,
3141964427532697601UL,
3144919914788159489UL,
3147875402043621377UL,
3158993663623692289UL,
3159838088553824257UL,
3161526938414088193UL,
3163919475716128769UL,
3174193312366067713UL,
3177993224551661569UL,
3178415437016727553UL,
3181230186783834113UL,
3188548536178311169UL,
3198963110316605441UL,
3201074172641935361UL,
3201637122595356673UL,
3202340810037133313UL,
3208673997013123073UL,
3210785059338452993UL,
3211629484268584961UL,
3212614646687072257UL,
3213740546593914881UL,
3215429396454178817UL,
3218103408732930049UL,
3223873645755498497UL,
3224295858220564481UL,
3229362407801356289UL,
3229503145289711617UL,
3230206832731488257UL,
3230629045196554241UL,
3231473470126686209UL,
3234851169847214081UL,
3248080493752614913UL,
3250473031054655489UL,
3251880405938208769UL,
3253991468263538689UL,
3254413680728604673UL,
3256806218030645249UL,
3257228430495711233UL,
3259058017844330497UL,
3268205954587426817UL,
3271302179331244033UL,
3274116929098350593UL,
3274257666586705921UL,
3275946516446969857UL,
3276650203888746497UL,
3277213153842167809UL,
3282561178399670273UL,
3286361090585264129UL,
3289879527794147329UL,
3297479352165335041UL,
3302405164257771521UL,
3303671801652969473UL,
3312960475884421121UL,
3313945638302908417UL,
3319293662860410881UL,
3323093575046004737UL,
3324360212441202689UL,
3326471274766532609UL,
3327878649650085889UL,
3328300862115151873UL,
3343500510857527297UL,
3343922723322593281UL,
3351944760158846977UL,
3352648447600623617UL,
3354337297460887553UL,
3356026147321151489UL,
3357433522204704769UL,
3363203759227273217UL,
3364892609087537153UL,
3365877771506024449UL,
3366581458947801089UL,
3366722196436156417UL,
3374322020807344129UL,
3375025708249120769UL,
3375447920714186753UL,
3377699720527872001UL,
3378544145458003969UL,
3379247832899780609UL,
3379388570388135937UL,
3380514470294978561UL,
3383892170015506433UL,
3384314382480572417UL,
3387832819689455617UL,
3393743794200379393UL,
3395291906572288001UL,
3395854856525709313UL,
3397965918851039233UL,
3403736155873607681UL,
3407254593082490881UL,
3407536068059201537UL,
3411054505268084737UL,
3413587780058480641UL,
3416965479779008513UL,
3419076542104338433UL,
3422032029359800321UL,
3431320703591251969UL,
3438076103032307713UL,
3439764952892571649UL,
3442720440148033537UL,
3445253714938429441UL,
3448912889635667969UL,
3451586901914419201UL,
3452431326844551169UL,
3459186726285606913UL,
3460312626192449537UL,
3463690325912977409UL,
3464253275866398721UL,
3467068025633505281UL,
3467630975586926593UL,
3468334663028703233UL,
3471853100237586433UL,
3473964162562916353UL,
3480719562003972097UL,
3481001036980682753UL,
3481986199399170049UL,
3482689886840946689UL,
3483112099306012673UL,
3492541511025819649UL,
3498874698001809409UL,
3499578385443586049UL,
3501407972792205313UL,
3501830185257271297UL,
3502111660233981953UL,
3503096822652469249UL,
3504644935024377857UL,
3510274434558590977UL,
3512385496883920897UL,
3518577946371555329UL,
3519000158836621313UL,
3520407533720174593UL,
3524911133347545089UL,
3525755558277677057UL,
3529696207951626241UL,
3537296032322813953UL,
3537718244787879937UL,
3544755119205646337UL,
3549540193809727489UL,
3550806831204925441UL,
3552354943576834049UL,
3555873380785717249UL,
3566287954924011521UL,
3569665654644539393UL,
3576139579108884481UL,
3579939491294478337UL,
3581628341154742273UL,
3597953889803960321UL,
3599220527199158273UL,
3607805513988833281UL,
3608509201430609921UL,
3609775838825807873UL,
3611183213709361153UL,
3622864425242853377UL,
3626382862451736577UL,
3634827111753056257UL,
3640175136310558721UL,
3640738086263980033UL,
3644960210914639873UL,
3647071273239969793UL,
3648619385611878401UL,
3649182335565299713UL,
3652137822820761601UL,
3652982247750893569UL,
3663959771842609153UL,
3666915259098071041UL,
3681551957887025153UL,
3681692695375380481UL,
3682959332770578433UL,
3684648182630842369UL,
3685351870072619009UL,
3686759244956172289UL,
3705195855930720257UL,
3708995768116314113UL,
3710403142999867393UL,
3718284442347765761UL,
3726306479184019457UL,
3730106391369613313UL,
3731091553788100609UL,
3732639666160009217UL,
3733202616113430529UL,
3736158103368892417UL,
3736580315833958401UL,
3742772765321592833UL,
3743194977786658817UL,
3744602352670212097UL,
3753328076948242433UL,
3757972414063968257UL,
3759802001412587521UL,
3761772326249562113UL,
3764868550993379329UL,
3765290763458445313UL,
3767824038248841217UL,
3774016487736475649UL,
3776127550061805569UL,
3778238612387135489UL,
3782601474526150657UL,
3787245811641876481UL,
3789216136478851073UL,
3793156786152800257UL,
3802304722895896577UL,
3803993572756160513UL,
3806104635081490433UL,
3812860034522546177UL,
3818348796568403969UL,
3821304283823865857UL,
3830733695543672833UL,
3841711219635388417UL,
3842414907077165057UL,
3844244494425784321UL,
3846214819262758913UL,
3847199981681246209UL,
3848466619076444161UL,
3850436943913418753UL,
3857192343354474497UL,
3857755293307895809UL,
3858177505772961793UL,
3865355117679083521UL,
3870280929771520001UL,
3871266092190007297UL,
3874080841957113857UL,
3875066004375601153UL,
3875488216840667137UL,
3876191904282443777UL,
3885058366048829441UL,
3893502615350149121UL,
3894347040280281089UL,
3894487777768636417UL,
3895191465210413057UL,
3901102439721336833UL,
3904620876930220033UL,
3905465301860352001UL,
3912642913766473729UL,
3914191026138382337UL,
3917568725858910209UL,
3923057487904768001UL,
3933612799531417601UL,
3935301649391681537UL,
3936568286786879489UL,
3937131236740300801UL,
3938679349112209409UL,
3940790411437539329UL,
3941212623902605313UL,
3943745898693001217UL,
3944731061111488513UL,
3945856961018331137UL,
3948530973297082369UL,
3952612360459386881UL,
3953878997854584833UL,
3954019735342940161UL,
3962463984644259841UL,
3967530534225051649UL,
3974989621107884033UL,
3976396995991437313UL,
3984419032827691009UL,
3986952307618086913UL,
3998211306686513153UL,
4001307531430330369UL,
4002151956360462337UL,
4004263018685792257UL,
4008062930871386113UL,
4010455468173426689UL,
4010877680638492673UL,
4012566530498756609UL,
4016084967707639809UL,
4016507180172705793UL,
4017633080079548417UL,
4018618242498035713UL,
4020729304823365633UL,
4023262579613761537UL,
4025232904450736129UL,
4027484704264421377UL,
4028188391706198017UL,
4029173554124685313UL,
4030721666496593921UL,
4035084528635609089UL,
4039728865751334913UL,
4040432553193111553UL,
4044232465378705409UL,
4045076890308837377UL,
4048173115052654593UL,
4057321051795750913UL,
4059009901656014849UL,
4061683913934766081UL,
4062950551329964033UL,
4063794976260096001UL,
4077165037653852161UL,
4078853887514116097UL,
4079839049932603393UL,
4080964949839446017UL,
4090816574024318977UL,
4097149761000308737UL,
4098838610860572673UL,
4100386723232481281UL,
4103060735511232513UL,
4106297697743405057UL,
4111504984812552193UL,
4111927197277618177UL,
4114038259602948097UL,
4116571534393344001UL,
4126282421089861633UL,
4126986108531638273UL,
4131208233182298113UL,
4134304457926115329UL,
4136837732716511233UL,
4140496907413749761UL,
4141059857367171073UL,
4141482069832237057UL,
4144859769552764929UL,
4146407881924673537UL,
4148941156715069441UL,
4153726231319150593UL,
4154429918760927233UL,
4159496468341719041UL,
4160763105736916993UL,
4162874168062246913UL,
4164703755410866177UL,
4168081455131394049UL,
4169629567503302657UL,
4173570217177251841UL,
4175962754479292417UL,
4178073816804622337UL,
4179340454199820289UL,
4186095853640876033UL,
4192429040616865793UL,
4193414203035353089UL,
4196369690290814977UL,
4201717714848317441UL,
4203125089731870721UL,
4206080576987332609UL,
4211006389079769089UL,
4211569339033190401UL,
4212413763963322369UL,
4217902526009180161UL,
4219872850846154753UL,
4220013588334510081UL,
4224517187961880577UL,
4226206037822144513UL,
4226628250287210497UL,
4227191200240631809UL,
4228457837635829761UL,
4231272587402936321UL,
4234791024611819521UL,
4240279786657677313UL,
4240983474099453953UL,
4242390848983007233UL,
4245205598750113793UL,
4247457398563799041UL,
4248161086005575681UL,
4250272148330905601UL,
4251116573261037569UL,
4254494272981565441UL,
4257449760237027329UL,
4258857135120580609UL,
4259701560050712577UL,
4262938522282885121UL,
4264627372143149057UL,
4269271709258874881UL,
4270256871677362177UL,
4276167846188285953UL,
4276590058653351937UL,
4281938083210854401UL,
4290382332512174081UL,
4291648969907372033UL,
4295448882092965889UL,
4295871094558031873UL,
4296856256976519169UL,
4299671006743625729UL,
4302204281534021633UL,
4306004193719615489UL,
4315292867951067137UL,
4316981717811331073UL,
4327114816972914689UL,
4329366616786599937UL,
4331055466646863873UL,
4331336941623574529UL,
4336122016227655681UL,
4337810866087919617UL,
4338514553529696257UL,
4344847740505686017UL,
4345410690459107329UL,
4345832902924173313UL,
4346677327854305281UL,
4347381015296081921UL,
4350899452504965121UL,
4355403052132335617UL,
4359202964317929473UL,
4368632376037736449UL,
4372010075758264321UL,
4374121138083594241UL,
4379891375106162689UL,
4381158012501360641UL,
4384113499756822529UL,
4384254237245177857UL,
4384535712221888513UL,
4384957924686954497UL,
4385943087105441793UL,
4388476361895837697UL,
4390446686732812289UL,
4391291111662944257UL,
4393824386453340161UL,
4395231761336893441UL,
4396920611197157377UL,
4398187248592355329UL,
4399031673522487297UL,
4400298310917685249UL,
4400720523382751233UL,
4415920172125126657UL,
4417046072031969281UL,
4417890496962101249UL,
4420423771752497153UL,
4434075308122963969UL,
4437030795378425857UL,
4438156695285268481UL,
4445475044679745537UL,
4453497081515999233UL,
4455045193887907841UL,
4459267318538567681UL,
4464333868119359489UL,
4468555992770019329UL,
4471511480025481217UL,
4472074429978902529UL,
4475029917234364417UL,
4479955729326800897UL,
4480518679280222209UL,
4481644579187064833UL,
4487274078721277953UL,
4488962928581541889UL,
4489385141046607873UL,
4491777678348648449UL,
4494310953139044353UL,
4494733165604110337UL,
4495155378069176321UL,
4497266440394506241UL,
4498110865324638209UL,
4499518240208191489UL,
4500221927649968129UL,
4500644140115034113UL,
4505288477230759937UL,
4509510601881419777UL,
4512606826625236993UL,
4514154938997145601UL,
4515562313880698881UL,
4522739925786820609UL,
4529073112762810369UL,
4532310074994982913UL,
4537517362064130049UL,
4540472849319591937UL,
4545117186435317761UL,
4545820873877094401UL,
4546383823830515713UL,
4549620786062688257UL,
4551028160946241537UL,
4554405860666769409UL,
4555250285596901377UL,
4555531760573612033UL,
4558627985317429249UL,
4559753885224271873UL,
4566227809688616961UL,
4576220171361845249UL,
4582975570802900993UL,
4585508845593296897UL,
4591842032569286657UL,
4595360469778169857UL,
4601552919265804289UL,
4604226931544555521UL,
4605071356474687489UL,
4612952655822585857UL,
4615063718147915777UL,
4619848792751996929UL,
4622804280007458817UL,
4633218854145753089UL,
4639692778610098177UL,
4645603753121021953UL,
4651373990143590401UL,
4651514727631945729UL,
4652781365027143681UL,
4654751689864118273UL,
4655173902329184257UL,
4656862752189448193UL,
4661225614328463361UL,
4662070039258595329UL,
4663195939165437953UL,
4665307001490767873UL,
4670936501024980993UL,
4671217976001691649UL,
4671640188466757633UL,
4671780925955112961UL,
4673047563350310913UL,
4676003050605772801UL,
4678958537861234689UL,
4679380750326300673UL,
4680506650233143297UL,
4684025087442026497UL,
4687824999627620353UL,
4692469336743346177UL,
4694580399068676097UL,
4700069161114533889UL,
4703306123346706433UL,
4704713498230259713UL,
4707528247997366273UL,
4713579959996645377UL,
4715550284833619969UL,
4716113234787041281UL,
4716816922228817921UL,
4719772409484279809UL,
4719913146972635137UL,
4721039046879477761UL,
4723290846693163009UL,
4724838959065071617UL,
4729624033669152769UL,
4730327721110929409UL,
4733283208366391297UL,
4737083120551985153UL,
4737223858040340481UL,
4739616395342381057UL,
4740601557760868353UL,
4743134832551264257UL,
4746371794783436801UL,
4748623594597122049UL,
4755660469014888449UL,
4758615956270350337UL,
4759601118688837633UL,
4765371355711406081UL,
4766778730594959361UL,
4772971180082593793UL,
4773393392547659777UL,
4782822804267466753UL,
4786059766499639297UL,
4791267053568786433UL,
4793800328359182337UL,
4794081803335892993UL,
4797600240544776193UL,
4801259415242014721UL,
4802948265102278657UL,
4804777852450897921UL,
4812659151798796289UL,
4814910951612481537UL,
4815614639054258177UL,
4816881276449456129UL,
4820399713658339329UL,
4820821926123405313UL,
4824481100820643841UL,
4825747738215841793UL,
4827577325564461057UL,
4831377237750054913UL,
4837710424726044673UL,
4838132637191110657UL,
4839258537097953281UL,
4840102962028085249UL,
4843058449283547137UL,
4844325086678745089UL,
4846154674027364353UL,
4851221223608156161UL,
4852769335980064769UL,
4853191548445130753UL,
4854880398305394689UL,
4855724823235526657UL,
4856991460630724609UL,
4862620960164937729UL,
4865857922397110273UL,
4868954147140927489UL,
4876131759047049217UL,
4879509458767577089UL,
4879931671232643073UL,
4880635358674419713UL,
4884435270860013569UL,
4890768457836003329UL,
4893723945091465217UL,
4897664594765414401UL,
4903434831787982849UL,
4906953268996866049UL,
4912301293554368513UL,
4912442031042723841UL,
4913145718484500481UL,
4914834568344764417UL,
4916945630670094337UL,
4917508580623515649UL,
4919056692995424257UL,
4922434392715952129UL,
4923841767599505409UL,
4925108404994703361UL,
4929189792157007873UL,
4931019379505627137UL,
4935241504156286977UL,
4940167316248723457UL,
4941856166108987393UL,
4945374603317870593UL,
4946078290759647233UL,
4949033778015109121UL,
4950018940433596417UL,
4952552215223992321UL,
4958885402199982081UL,
4960433514571890689UL,
4966063014106103809UL,
4967329651501301761UL,
4968033338943078401UL,
4968596288896499713UL,
4973099888523870209UL,
4973662838477291521UL,
4976477588244398081UL,
4977884963127951361UL,
4979433075499859969UL,
4984218150103941121UL,
4987032899871047681UL,
4988018062289534977UL,
4990129124614864897UL,
4994773461730590721UL,
4999840011311382529UL,
5000262223776448513UL,
5008706473077768193UL,
5021795059494813697UL,
5023906121820143617UL,
5024187596796854273UL,
5026298659122184193UL,
5031505946191331329UL,
5034039220981727233UL,
5035728070841991169UL,
5049942557165879297UL,
5050505507119300609UL,
5053883206839828481UL,
5054727631769960449UL,
5066127368326742017UL,
5067816218187005953UL,
5071053180419178497UL,
5071475392884244481UL,
5071616130372599809UL,
5076964154930102273UL,
5079919642185564161UL,
5083015866929381377UL,
5083438079394447361UL,
5084282504324579329UL,
5085408404231421953UL,
5089771266370437121UL,
5091882328695767041UL,
5093852653532741633UL,
5101593215392284673UL,
5102296902834061313UL,
5103704277717614593UL,
5107363452414853121UL,
5108348614833340417UL,
5109615252228538369UL,
5117918764041502721UL,
5120170563855187969UL,
5124251951017492481UL,
5124814900970913793UL,
5131851775388680193UL,
5133259150272233473UL,
5136918324969472001UL,
5137762749899603969UL,
5140014549713289217UL,
5140436762178355201UL,
5143392249433817089UL,
5144658886829015041UL,
5150429123851583489UL,
5152258711200202753UL,
5152680923665268737UL,
5152962398641979393UL,
5154369773525532673UL,
5154791985990598657UL,
5156480835850862593UL,
5158591898176192513UL,
5166050985059024897UL,
5167458359942578177UL,
5171680484593238017UL,
5175058184313765889UL,
5176184084220608513UL,
5179139571476070401UL,
5181813583754821633UL,
5182235796219887617UL,
5184206121056862209UL,
5185472758452060161UL,
5186035708405481473UL,
5195183645148577793UL,
5195324382636933121UL,
5197716919938973697UL,
5198279869892395009UL,
5201516832124567553UL,
5202501994543054849UL,
5208835181519044609UL,
5213760993611481089UL,
5217983118262140929UL,
5218827543192272897UL,
5219249755657338881UL,
5223471880307998721UL,
5224457042726486017UL,
5225160730168262657UL,
5228538429888790529UL,
5239515953980506113UL,
5241204803840770049UL,
5245567665979785217UL,
5245849140956495873UL,
5247256515840049153UL,
5247537990816759809UL,
5250493478072221697UL,
5250915690537287681UL,
5257248877513277441UL,
5260345102257094657UL,
5260767314722160641UL,
5266256076768018433UL,
5267944926628282369UL,
5268789351558414337UL,
5274137376115916801UL,
5277092863371378689UL,
5278359500766576641UL,
5283848262812434433UL,
5290603662253490177UL,
5291588824671977473UL,
5293277674532241409UL,
5296092424299347969UL,
5296655374252769281UL,
5299470124019875841UL,
5300455286438363137UL,
5300736761415073793UL,
5305099623554088961UL,
5322691809598504961UL,
5323254759551926273UL,
5326913934249164801UL,
5337047033410748417UL,
5339580308201144321UL,
5340424733131276289UL,
5341691370526474241UL,
5346476445130555393UL,
5349009719920951297UL,
5349713407362727937UL,
5351542994711347201UL,
5353231844571611137UL,
5355765119362007041UL,
5359565031547600897UL,
5362801993779773441UL,
5363364943733194753UL,
5364490843640037377UL,
5367024118430433281UL,
5367164855918788609UL,
5368712968290697217UL,
5370542555639316481UL,
5372231405499580417UL,
5374623942801620993UL,
5377157217592016897UL,
5377579430057082881UL,
5381942292196098049UL,
5385179254428270593UL,
5388134741683732481UL,
5390808753962483713UL,
5395030878613143553UL,
5395312353589854209UL,
5403897340379529217UL,
5409386102425387009UL,
5411497164750716929UL,
5414452652006178817UL,
5417689614238351361UL,
5419941414052036609UL,
5423319113772564481UL,
5427541238423224321UL,
5432467050515660801UL,
5432607788004016129UL,
5433452212934148097UL,
5434578112840990721UL,
5435141062794412033UL,
5435985487724544001UL,
5436266962701254657UL,
5443022362142310401UL,
5447807436746391553UL,
5451466611443630081UL,
5456955373489487873UL,
5458784960838107137UL,
5462584873023700993UL,
5464977410325741569UL,
5465118147814096897UL,
5467088472651071489UL,
5467510685116137473UL,
5468918059999690753UL,
5472577234696929281UL,
5473140184650350593UL,
5473421659627061249UL,
5474829034510614529UL,
5476940096835944449UL,
5484539921207132161UL,
5490732370694766593UL,
5492561958043385857UL,
5494250807903649793UL,
5495095232833781761UL,
5496361870228979713UL,
5498050720089243649UL,
5503398744646746113UL,
5504243169576878081UL,
5505228331995365377UL,
5506354231902208001UL,
5508465294227537921UL,
5516487331063791617UL,
5521131668179517441UL,
5533798042131496961UL,
5536894266875314177UL,
5542805241386237953UL,
5543086716362948609UL,
5546042203618410497UL,
5549419903338938369UL,
5556316040268349441UL,
5558708577570390017UL,
5559271527523811329UL,
5565041764546379777UL,
5573908226312765441UL,
5577285926033293313UL,
5581085838218887169UL,
5587841237659942913UL,
5589952299985272833UL,
5591359674868826113UL,
5594174424635932673UL,
5596004011984551937UL,
5598115074309881857UL,
5598537286774947841UL,
5598818761751658497UL,
5606981536076267521UL,
5610359235796795393UL,
5614581360447455233UL,
5614862835424165889UL,
5617536847702917121UL,
5619225697563181057UL,
5623307084725485569UL,
5623729297190551553UL,
5625840359515881473UL,
5628795846771343361UL,
5629781009189830657UL,
5630203221654896641UL,
5643573283048652801UL,
5656380394488987649UL,
5660602519139647489UL,
5662150631511556097UL,
5662572843976622081UL,
5664683906301952001UL,
5664824643790307329UL,
5668483818487545857UL,
5682839042299789313UL,
5685935267043606529UL,
5691705504066174977UL,
5692690666484662273UL,
5693816566391504897UL,
5697616478577098753UL,
5697757216065454081UL,
5701416390762692609UL,
5701979340716113921UL,
5704090403041443841UL,
5704934827971575809UL,
5707468102761971713UL,
5708594002668814337UL,
5712112439877697537UL,
5713801289737961473UL,
5717038251970134017UL,
5718023414388621313UL,
5718445626853687297UL,
5718727101830397953UL,
5723934388899545089UL,
5733223063130996737UL,
5735193387967971329UL,
5737867400246722561UL,
5739556250106986497UL,
5747578286943240193UL,
5755459586291138561UL,
5762777935685615617UL,
5770377760056803329UL,
5774459147219107841UL,
5774599884707463169UL,
5781777496613584897UL,
5783888558938914817UL,
5787125521171087361UL,
5794725345542275073UL,
5795147558007341057UL,
5798525257727868929UL,
5801902957448396801UL,
5805702869633990657UL,
5812599006563401729UL,
5813865643958599681UL,
5814710068888731649UL,
5815554493818863617UL,
5815835968795574273UL,
5829487505166041089UL,
5831598567491371009UL,
5837087329537228801UL,
5838635441909137409UL,
5840887241722822657UL,
5842013141629665281UL,
5845390841350193153UL,
5845813053815259137UL,
5850457390930984961UL,
5851724028326182913UL,
5852709190744670209UL,
5854820253070000129UL,
5859746065162436609UL,
5861153440045989889UL,
5865234827208294401UL,
5866642202091847681UL,
5868753264417177601UL,
5871568014184284161UL,
5875930876323299329UL,
5877478988695207937UL,
5883389963206131713UL,
5887189875391725569UL,
5888456512786923521UL,
5892678637437583361UL,
5899152561901928449UL,
5901263624227258369UL,
5905345011389562881UL,
5905907961342984193UL,
5906611648784760833UL,
5909144923575156737UL,
5915900323016212481UL,
5916885485434699777UL,
5924344572317532161UL,
5924907522270953473UL,
5927018584596283393UL,
5929833334363389953UL,
5931944396688719873UL,
5940107171013328897UL,
5945595933059186689UL,
5948410682826293249UL,
5948973632779714561UL,
5952632807476953089UL,
5952773544965308417UL,
5953477232407085057UL,
5953899444872151041UL,
5955166082267348993UL,
5958262307011166209UL,
5961640006731694081UL,
5963188119103602689UL,
5966565818824130561UL,
5967128768777551873UL,
5967410243754262529UL,
5969521306079592449UL,
5970928680963145729UL,
5974306380683673601UL,
5984439479845257217UL,
5987676442077429761UL,
5998794703657500673UL,
6002031665889673217UL,
6004564940680069121UL,
6005972315563622401UL,
6011038865144414209UL,
6013009189981388801UL,
6014698039841652737UL,
6020186801887510529UL,
6023705239096393729UL,
6024831139003236353UL,
6026660726351855617UL,
6027786626258698241UL,
6028631051188830209UL,
6031586538444292097UL,
6035104975653175297UL,
6037919725420281857UL,
6038341937885347841UL,
6043127012489428993UL,
6043408487466139649UL,
6046363974721601537UL,
6047771349605154817UL,
6053119374162657281UL,
6059593298627002369UL,
6060859936022200321UL,
6062548785882464257UL,
6064237635742728193UL,
6066770910533124097UL,
6070007872765296641UL,
6071696722625560577UL,
6073526309974179841UL,
6081970559275499521UL,
6085770471461093377UL,
6087459321321357313UL,
6088163008763133953UL,
6089851858623397889UL,
6096185045599387649UL,
6107584782156169217UL,
6111103219365052417UL,
6111384694341763073UL,
6114903131550646273UL,
6117717881317752833UL,
6118703043736240129UL,
6120814106061570049UL,
6123769593317031937UL,
6127991717967691777UL,
6129680567827955713UL,
6130524992758087681UL,
6132636055083417601UL,
6134606379920392193UL,
6136435967269011457UL,
6138547029594341377UL,
6142628416756645889UL,
6144739479081975809UL,
6146850541407305729UL,
6147413491360727041UL,
6151917090988097537UL,
6153746678336716801UL,
6155435528196980737UL,
6157828065499021313UL,
6158672490429153281UL,
6169368539544158209UL,
6171479601869488129UL,
6177812788845477889UL,
6185271875728310273UL,
6189916212844036097UL,
6191745800192655361UL,
6195545712378249217UL,
6198078987168645121UL,
6201878899354238977UL,
6203004799261081601UL,
6203145536749436929UL,
6206523236469964801UL,
6208634298795294721UL,
6211026836097335297UL,
6215811910701416449UL,
6222848785119182849UL,
6223693210049314817UL,
6226226484839710721UL,
6235937371536228353UL,
6236359584001294337UL,
6236922533954715649UL,
6237626221396492289UL,
6240300233675243521UL,
6243114983442350081UL,
6244803833302614017UL,
6245788995721101313UL,
6248744482976563201UL,
6255359144929263617UL,
6259159057114857473UL,
6264788556649070593UL,
6266477406509334529UL,
6269010681299730433UL,
6273655018415456257UL,
6275625343252430849UL,
6279988205391446017UL,
6283788117577039873UL,
6285336229948948481UL,
6286321392367435777UL,
6286602867344146433UL,
6293358266785202177UL,
6297298916459151361UL,
6302365466039943169UL,
6303913578411851777UL,
6304898740830339073UL,
6307291278132379649UL,
6307854228085800961UL,
6308557915527577601UL,
6309543077946064897UL,
6310246765387841537UL,
6312780040178237441UL,
6317002164828897281UL,
6322631664363110401UL,
6334875825850023937UL,
6339379425477394433UL,
6340364587895881729UL,
6343742287616409601UL,
6345290399988318209UL,
6345431137476673537UL,
6347401462313648129UL,
6351623586964307969UL,
6353453174312927233UL,
6357112349010165761UL,
6359223411335495681UL,
6363586273474510849UL,
6365134385846419457UL,
6366119548264906753UL,
6372030522775830529UL,
6373297160171028481UL,
6374563797566226433UL,
6375267485008003073UL,
6377800759798398977UL,
6386667221564784641UL,
6387652383983271937UL,
6388356071425048577UL,
6391874508633931777UL,
6392155983610642433UL,
6393141146029129729UL,
6395252208354459649UL,
6404822357562621953UL,
6405807519981109249UL,
6406651944911241217UL,
6416362831607758849UL,
6419177581374865409UL,
6420584956258418689UL,
6424666343420723201UL,
6427340355699474433UL,
6427762568164540417UL,
6435221655047372801UL,
6439443779698032641UL,
6442962216906915841UL,
6450139828813037569UL,
6454361953463697409UL,
6455628590858895361UL,
6459709978021199873UL,
6462806202765017089UL,
6466043164997189633UL,
6467732014857453569UL,
6467872752345808897UL,
6471954139508113409UL,
6477020689088905217UL,
6481665026204631041UL,
6487153788250488833UL,
6488842638110752769UL,
6492783287784701953UL,
6493486975226478593UL,
6494472137644965889UL,
6498131312342204417UL,
6501649749551087617UL,
6503338599411351553UL,
6507842199038722049UL,
6510797686294183937UL,
6515442023409909761UL,
6518960460618792961UL,
6526841759966691329UL,
6528249134850244609UL,
6531204622105706497UL,
6541759933732356097UL,
6542885833639198721UL,
6546263533359726593UL,
6547670908243279873UL,
6552174507870650369UL,
6552737457824071681UL,
6553441145265848321UL,
6556818844986376193UL,
6559352119776772097UL,
6560337282195259393UL,
6563152031962365953UL,
6564559406845919233UL,
6566248256706183169UL,
6569485218938355713UL,
6571174068798619649UL,
6575114718472568833UL,
6575959143402700801UL,
6577929468239675393UL,
6580462743030071297UL,
6581729380425269249UL,
6583136755308822529UL,
6585107080145797121UL,
6590314367214944257UL,
6594536491865604097UL,
6595240179307380737UL,
6597773454097776641UL,
6597914191586131969UL,
6598617879027908609UL,
6603402953631989761UL,
6606780653352517633UL,
6607625078282649601UL,
6608469503212781569UL,
6611002778003177473UL,
6614239740235350017UL,
6614802690188771329UL,
6618180389909299201UL,
6621839564606537729UL,
6624372839396933633UL,
6630706026372923393UL,
6643090925348192257UL,
6644216825255034881UL,
6645483462650232833UL,
6647172312510496769UL,
6657868361625501697UL,
6661105323857674241UL,
6662794173717938177UL,
6668705148228861953UL,
6669127360693927937UL,
6670534735577481217UL,
6673068010367877121UL,
6674756860228141057UL,
6676867922553470977UL,
6680245622273998849UL,
6683482584506171393UL,
6687282496691765249UL,
6688126921621897217UL,
6689112084040384513UL,
6689534296505450497UL,
6691223146365714433UL,
6696993383388282881UL,
6705015420224536577UL,
6705437632689602561UL,
6705578370177957889UL,
6706282057619734529UL,
6709237544875196417UL,
6713459669525856257UL,
6713881881990922241UL,
6714022619479277569UL,
6716978106734739457UL,
6718104006641582081UL,
6718244744129937409UL,
6720215068966912001UL,
6725703831012769793UL,
6730911118081916929UL,
6732177755477114881UL,
6736399880127774721UL,
6737666517522972673UL,
6737947992499683329UL,
6740059054825013249UL,
6747799616684556289UL,
6748503304126332929UL,
6748925516591398913UL,
6749769941521530881UL,
6751177316405084161UL,
6757510503381073921UL,
6758777140776271873UL,
6760465990636535809UL,
6762999265426931713UL,
6764547377798840321UL,
6767925077519368193UL,
6774258264495357953UL,
6775243426913845249UL,
6775947114355621889UL,
6779465551564505089UL,
6782421038819966977UL,
6786643163470626817UL,
6788332013330890753UL,
6791568975563063297UL,
6793257825423327233UL,
6794102250353459201UL,
6794946675283591169UL,
6801842812213002241UL,
6806346411840372737UL,
6807753786723926017UL,
6808457474165702657UL,
6810990748956098561UL,
6811553698909519873UL,
6812257386351296513UL,
6814368448676626433UL,
6814509186164981761UL,
6817886885885509633UL,
6821686798071103489UL,
6822812697977946113UL,
6824642285326565377UL,
6827034822628605953UL,
6831256947279265793UL,
6833368009604595713UL,
6841952996394270721UL,
6847019545975062529UL,
6848145445881905153UL,
6850256508207235073UL,
6861234032298950657UL,
6863767307089346561UL,
6874322618715996161UL,
6881922443087183873UL,
6882344655552249857UL,
6884174242900869121UL,
6885722355272777729UL,
6887129730156331009UL,
6889663004946726913UL,
6894588817039163393UL,
6895996191922716673UL,
6896418404387782657UL,
6900218316573376513UL,
6903877491270615041UL,
6904862653689102337UL,
6905144128665812993UL,
6906832978526076929UL,
6910210678246604801UL,
6913166165502066689UL,
6920906727361609729UL,
6924143689593782273UL,
6924284427082137601UL,
6924565902058848257UL,
6925832539454046209UL,
6927943601779376129UL,
6931884251453325313UL,
6932165726430035969UL,
6933010151360167937UL,
6943987675451883521UL,
6949617174986096641UL,
6950883812381294593UL,
6951728237311426561UL,
6954683724566888449UL,
6955105937031954433UL,
6958061424287416321UL,
6958342899264126977UL,
6961016911542878209UL,
6961439124007944193UL,
6962565023914786817UL,
6965661248658604033UL,
6965942723635314689UL,
6968898210890776577UL,
6971431485681172481UL,
6980720159912624129UL,
6982831222237954049UL,
6984097859633152001UL,
6985786709493415937UL,
6987616296842035201UL,
6989164409213943809UL,
6989727359167365121UL,
6990993996562563073UL,
6993808746329669633UL,
7003097420561121281UL,
7005771432839872513UL,
7006052907816583169UL,
7007319545211781121UL,
7007882495165202433UL,
7009008395072045057UL,
7015341582048034817UL,
7017171169396654081UL,
7017452644373364737UL,
7021252556558958593UL,
7023363618884288513UL,
7025052468744552449UL,
7026319106139750401UL,
7027726481023303681UL,
7031104180743831553UL,
7035607780371202049UL,
7036452205301334017UL,
7037859580184887297UL,
7063614540553912321UL,
7067836665204572161UL,
7069525515064836097UL,
7072762477297008641UL,
7080784514133262337UL,
7084725163807211521UL,
7088384338504450049UL,
7091339825759911937UL,
7097673012735901697UL,
7099361862596165633UL,
7103302512270114817UL,
7104991362130378753UL,
7105413574595444737UL,
7107524636920774657UL,
7108791274315972609UL,
7115968886222094337UL,
7116391098687160321UL,
7117235523617292289UL,
7118079948547424257UL,
7118783635989200897UL,
7119205848454266881UL,
7123568710593282049UL,
7125679772918611969UL,
7126101985383677953UL,
7128213047709007873UL,
7128494522685718529UL,
7129057472639139841UL,
7129901897569271809UL,
7132716647336378369UL,
7133561072266510337UL,
7137783196917170177UL,
7138346146870591489UL,
7147212608636977153UL,
7152279158217768961UL,
7154390220543098881UL,
7154671695519809537UL,
7158612345193758721UL,
7162271519890997249UL,
7169026919332052993UL,
7169167656820408321UL,
7170856506680672257UL,
7174093468912844801UL,
7181834030772387841UL,
7184789518027849729UL,
7190137542585352193UL,
7199426216816803841UL,
7206744566211280897UL,
7211388903327006721UL,
7215470290489311233UL,
7216455452907798529UL,
7217159140349575169UL,
7218425777744773121UL,
7221803477465300993UL,
7233343951510437889UL,
7237988288626163713UL,
7239114188533006337UL,
7245025163043930113UL,
7245165900532285441UL,
7247980650299392001UL,
7251076875043209217UL,
7253047199880183809UL,
7255580474670579713UL,
7257269324530843649UL,
7259098911879462913UL,
7261491449181503489UL,
7261632186669858817UL,
7261913661646569473UL,
7263743248995188737UL,
7265432098855452673UL,
7267543161180782593UL,
7269091273552691201UL,
7269654223506112513UL,
7269935698482823169UL,
7272046760808153089UL,
7272609710761574401UL,
7273313398203351041UL,
7281335435039604737UL,
7284431659783421953UL,
7285557559690264577UL,
7287668622015594497UL,
7289075996899147777UL,
7290201896805990401UL,
7294986971410071553UL,
7299631308525797377UL,
7302446058292903937UL,
7304557120618233857UL,
7305542283036721153UL,
7308075557827117057UL,
7308497770292183041UL,
7309342195222315009UL,
7315675382198304769UL,
7316379069640081409UL,
7320601194290741249UL,
7321867831685939201UL,
7323978894011269121UL,
7325245531406467073UL,
7326230693824954369UL,
7326652906290020353UL,
7329467656057126913UL,
7329889868522192897UL,
7331156505917390849UL,
7332563880800944129UL,
7333689780707786753UL,
7343963617357725697UL,
7345230254752923649UL,
7346778367124832257UL,
7350578279310426113UL,
7352689341635756033UL,
7356629991309705217UL,
7364089078192537601UL,
7366200140517867521UL,
7370000052703461377UL,
7370563002656882689UL,
7371407427587014657UL,
7373799964889055233UL,
7377318402097938433UL,
7379429464423268353UL,
7379710939399979009UL,
7381962739213664257UL,
7382244214190374913UL,
7382384951678730241UL,
7385340438934192129UL,
7386184863864324097UL,
7387310763771166721UL,
7392095838375247873UL,
7392940263305379841UL,
7394488375677288449UL,
7394629113165643777UL,
7399977137723146241UL,
7403777049908740097UL,
7404762212327227393UL,
7405606637257359361UL,
7407576962094333953UL,
7407999174559399937UL,
7410673186838151169UL,
7416443423860719617UL,
7417710061255917569UL,
7420384073534668801UL,
7423198823301775361UL,
7424606198185328641UL,
7425309885627105281UL,
7427561685440790529UL,
7428687585347633153UL,
7432487497533227009UL,
7433894872416780289UL,
7435442984788688897UL,
7441494696787968001UL,
7447264933810536449UL,
7452050008414617601UL,
7454161070739947521UL,
7458664670367318017UL,
7462464582552911873UL,
7463449744971399169UL,
7467531132133703681UL,
7468797769528901633UL,
7469782931947388929UL,
7475271693993246721UL,
7485686268131540993UL,
7487375117991804929UL,
7494130517432860673UL,
7498352642083520513UL,
7500604441897205761UL,
7501871079292403713UL,
7503419191664312321UL,
7504826566547865601UL,
7506937628873195521UL,
7508907953710170113UL,
7511441228500566017UL,
7513270815849185281UL,
7514818928221093889UL,
7525092764871032833UL,
7527203827196362753UL,
7527907514638139393UL,
7540292413613408257UL,
7544514538264068097UL,
7546203388124332033UL,
7548736662914727937UL,
7552536575100321793UL,
7557040174727692289UL,
7560417874448220161UL,
7570269498633093121UL,
7580402597794676737UL,
7582372922631651329UL,
7585328409887113217UL,
7585750622352179201UL,
7586735784770666497UL,
7592646759281590273UL,
7594194871653498881UL,
7595602246537052161UL,
7604046495838371841UL,
7606016820675346433UL,
7611646320209559553UL,
7614179594999955457UL,
7614883282441732097UL,
7617416557232128001UL,
7618823932115681281UL,
7619105407092391937UL,
7623749744208117761UL,
7624594169138249729UL,
7626001544021803009UL,
7631349568579305473UL,
7632193993509437441UL,
7636979068113518593UL,
7637401280578584577UL,
7639793817880625153UL,
7640778980299112449UL,
7642749305136087041UL,
7643312255089508353UL,
7644438154996350977UL,
7649082492112076801UL,
7652037979367538689UL,
7652178716855894017UL,
7653867566716157953UL,
7654149041692868609UL,
7663156240947609601UL,
7665970990714716161UL,
7668926477970178049UL,
7669489427923599361UL,
7673570815085903873UL,
7675259664946167809UL,
7675681877411233793UL,
7676526302341365761UL,
7679904002061893633UL,
7686377926526238721UL,
7697214713129598977UL,
7699888725408350209UL,
7703266425128878081UL,
7708755187174735873UL,
7715792061592502273UL,
7717621648941121537UL,
7720154923731517441UL,
7723532623452045313UL,
7728176960567771137UL,
7734510147543760897UL,
7737324897310867457UL,
7738310059729354753UL,
7742813659356725249UL,
7759420682982653953UL,
7760546582889496577UL,
7763924282610024449UL,
7764065020098379777UL,
7770257469586014209UL,
7776309181585293313UL,
7780109093770887169UL,
7780812781212663809UL,
7781375731166085121UL,
7783346056003059713UL,
7787568180653719553UL,
7788553343072206849UL,
7791790305304379393UL,
7796153167443394561UL,
7801641929489252353UL,
7810508391255638017UL,
7811775028650835969UL,
7812478716092612609UL,
7825989514974724097UL,
7829367214695251969UL,
7836122614136307713UL,
7840485476275322881UL,
7841189163717099521UL,
7853011112738947073UL,
7853855537669079041UL,
7856107337482764289UL,
7859766512180002817UL,
7861033149575200769UL,
7861877574505332737UL,
7862862736923820033UL,
7863144211900530689UL,
7863566424365596673UL,
7866521911621058561UL,
7866662649109413889UL,
7871588461201850369UL,
7872010673666916353UL,
7873418048550469633UL,
7875529110875799553UL,
7880595660456591361UL,
7886084422502449153UL,
7888476959804489729UL,
7892417609478438913UL,
7894106459338702849UL,
7895232359245545473UL,
7896921209105809409UL,
7899454483896205313UL,
7900861858779758593UL,
7901284071244824577UL,
7903817346035220481UL,
7907898733197524993UL,
7908039470685880321UL,
7908320945662590977UL,
7908883895616012289UL,
7916765194963910657UL,
7920283632172793857UL,
7920705844637859841UL,
7924927969288519681UL,
7925772394218651649UL,
7928727881474113537UL,
7932105581194641409UL,
7934075906031616001UL,
7938860980635697153UL,
7947305229937016833UL,
7958704966493798401UL,
7959408653935575041UL,
7959549391423930369UL,
7960393816354062337UL,
7961519716260904961UL,
7962927091144458241UL,
7963630778586234881UL,
7967149215795118081UL,
7969963965562224641UL,
7977141577468346369UL,
7978408214863544321UL,
7980097064723808257UL,
7981082227142295553UL,
7983896976909402113UL,
7988119101560061953UL,
7989104263978549249UL,
7991074588815523841UL,
7994030076070985729UL,
7994452288536051713UL,
7997407775791513601UL,
8001770637930528769UL,
8002474325372305409UL,
8012185212068823041UL,
8013874061929086977UL,
8019362823974944769UL,
8023725686113959937UL,
8029214448159817729UL,
8029636660624883713UL,
8030340348066660353UL,
8032169935415279617UL,
8035547635135807489UL,
8036814272531005441UL,
8038080909926203393UL,
8038503122391269377UL,
8039206809833046017UL,
8045117784343969793UL,
8047228846669299713UL,
8055673095970619393UL,
8056658258389106689UL,
8057924895784304641UL,
8059191533179502593UL,
8059473008156213249UL,
8061584070481543169UL,
8072702332061614081UL,
8072983807038324737UL,
8073968969456812033UL,
8076783719223918593UL,
8078191094107471873UL,
8080724368897867777UL,
8086072393455370241UL,
8087479768338923521UL,
8088183455780700161UL,
8090435255594385409UL,
8092546317919715329UL,
8093250005361491969UL,
8100005404802547713UL,
8102116467127877633UL,
8103101629546364929UL,
8104368266941562881UL,
8112390303777816577UL,
8114360628614791169UL,
8117034640893542401UL,
8118301278288740353UL,
8120834553079136257UL,
8121538240520912897UL,
8122101190474334209UL,
8124212252799664129UL,
8131671339682496513UL,
8132515764612628481UL,
8142367388797501441UL,
8142648863774212097UL,
8143634026192699393UL,
8150670900610465793UL,
8158411462470008833UL,
8161366949725470721UL,
8162633587120668673UL,
8163478012050800641UL,
8166292761817907201UL,
8167559399213105153UL,
8167981611678171137UL,
8175722173537714177UL,
8182336835490414593UL,
8184166422839033857UL,
8186558960141074433UL,
8192469934651998209UL,
8195143946930749441UL,
8195847634372526081UL,
8195988371860881409UL,
8196410584325947393UL,
8197536484232790017UL,
8201477133906739201UL,
8207388108417662977UL,
8209499170742992897UL,
8213721295393652737UL,
8222165544694972417UL,
8224135869531947009UL,
8226669144322342913UL,
8227513569252474881UL,
8228076519205896193UL,
8228920944136028161UL,
8238068880879124481UL,
8241868793064718337UL,
8243276167948271617UL,
8246090917715378177UL,
8248624192505774081UL,
8252846317156433921UL,
8255520329435185153UL,
8260023929062555649UL,
8262979416318017537UL,
8265090478643347457UL,
8269734815759073281UL,
8270579240689205249UL,
8274519890363154433UL,
8279164227478880257UL,
8283667827106250753UL,
8285778889431580673UL,
8286764051850067969UL,
8289719539105529857UL,
8290986176500727809UL,
8293941663756189697UL,
8295630513616453633UL,
8298445263383560193UL,
8303089600499286017UL,
8305200662824615937UL,
8308719100033499137UL,
8309422787475275777UL,
8317585561799884801UL,
8321244736497123329UL,
8328422348403245057UL,
8328985298356666369UL,
8330111198263508993UL,
8332644473053904897UL,
8338696185053184001UL,
8340385034913447937UL,
8346577484401082369UL,
8350799609051742209UL,
8351221821516808193UL,
8354740258725691393UL,
8359384595841417217UL,
8362621558073589761UL,
8365999257794117633UL,
8370221382444777473UL,
8375287932025569281UL,
8382606281420046337UL,
8385139556210442241UL,
8385843243652218881UL,
8386687668582350849UL,
8387250618535772161UL,
8387532093512482817UL,
8401465104859660289UL,
8412583366439731201UL,
8416242541136969729UL,
8416383278625325057UL,
8422997940578025473UL,
8425531215368421377UL,
8426094165321842689UL,
8428205227647172609UL,
8432849564762898433UL,
8441293814064218113UL,
8444952988761456641UL,
8449175113412116481UL,
8455508300388106241UL,
8459871162527121409UL,
8469582049223639041UL,
8473381961409232897UL,
8474507861316075521UL,
8479292935920156673UL,
8481826210710552577UL,
8482248423175618561UL,
8484359485500948481UL,
8487737185221476353UL,
8491959309872136193UL,
8493085209778978817UL,
8496181434522796033UL,
8497870284383059969UL,
8505329371265892353UL,
8508284858521354241UL,
8508425596009709569UL,
8516729107822673921UL,
8517714270241161217UL,
8519825332566491137UL,
8520247545031557121UL,
8520529020008267777UL,
8520951232473333761UL,
8524751144658927617UL,
8526017782054125569UL,
8530380644193140737UL,
8530662119169851393UL,
8532491706518470657UL,
8534602768843800577UL,
8542624805680054273UL,
8544735868005384193UL,
8545439555447160833UL,
8551350529958084609UL,
8551772742423150593UL,
8559091091817627649UL,
8567957553584013313UL,
8570068615909343233UL,
8570490828374409217UL,
8573024103164805121UL,
8573305578141515777UL,
8575135165490135041UL,
8581046140001058817UL,
8582734989861322753UL,
8583860889768165377UL,
8585268264651718657UL,
8587660801953759233UL,
8588083014418825217UL,
8592868089022906369UL,
8593571776464683009UL,
8597934638603698177UL,
8599904963440672769UL,
8600467913394094081UL,
8602860450696134657UL,
8607504787811860481UL,
8608489950230347777UL,
8610178800090611713UL,
8620171161763840001UL,
8623267386507657217UL,
8624534023902855169UL,
8633822698134306817UL,
8634104173111017473UL,
8639733672645230593UL,
8645644647156154369UL,
8647614971993128961UL,
8658170283619778561UL,
8659577658503331841UL,
8664081258130702337UL,
8671821819990245377UL,
8676466157105971201UL,
8677310582036103169UL,
8681391969198407681UL,
8682377131616894977UL,
8689132531057950721UL,
8691947280825057281UL,
8693636130685321217UL,
8695465718033940481UL,
8697154567894204417UL,
8698280467801047041UL,
8702502592451706881UL,
8703487754870194177UL,
8706021029660590081UL,
8706302504637300737UL,
8708835779427696641UL,
8709680204357828609UL,
8714324541473554433UL,
8717280028729016321UL,
8718687403612569601UL,
8722768790774874113UL,
8724457640635138049UL,
8726568702960467969UL,
8727835340355665921UL,
8730790827611127809UL,
8734309264820011009UL,
8735857377191919617UL,
8740642451796000769UL,
8741346139237777409UL,
8741768351702843393UL,
8743457201563107329UL,
8743597939051462657UL,
8743879414028173313UL,
8749508913562386433UL,
8760908650119168001UL,
8763019712444497921UL,
8763301187421208577UL,
8771041749280751617UL,
8777797148721807361UL,
8781174848442335233UL,
8786945085464903681UL,
8804396534020964353UL,
8805944646392872961UL,
8808618658671624193UL,
8809744558578466817UL,
8815233320624324609UL,
8816640695507877889UL,
8817344382949654529UL,
8831277394296832001UL,
8834232881552293889UL,
8839017956156375041UL,
8850839905178222593UL,
8853232442480263169UL,
8855062029828882433UL,
8855765717270659073UL,
8856610142200791041UL,
8863506279130202113UL,
8866039553920598017UL,
8866743241362374657UL,
8876454128058892289UL,
8877861502942445569UL,
8883350264988303361UL,
8885320589825277953UL,
8885461327313633281UL,
8886305752243765249UL,
8887009439685541889UL,
8889261239499227137UL,
8889542714475937793UL,
8891372301824557057UL,
8896861063870414849UL,
8900238763590942721UL,
8901505400986140673UL,
8914875462379896833UL,
8916282837263450113UL,
8916986524705226753UL,
8917830949635358721UL,
8921630861820952577UL,
8923038236704505857UL,
8923460449169571841UL,
8925008561541480449UL,
8925571511494901761UL,
8930075111122272257UL,
8932608385912668161UL,
8934860185726353409UL,
8939785997818789889UL,
8941897060144119809UL,
8950482046933794817UL,
8951185734375571457UL,
8957237446374850561UL,
8957941133816627201UL,
8963007683397419009UL,
8967792758001500161UL,
8973703732512423937UL,
8974407419954200577UL,
8977081432232951809UL,
8978207332139794433UL,
8978629544604860417UL,
8984259044139073537UL,
8987073793906180097UL,
8987496006371246081UL,
8987636743859601409UL,
8990592231115063297UL,
8995940255672565761UL,
9000303117811580929UL,
9000725330276646913UL,
9001006805253357569UL,
9001851230183489537UL,
9003680817532108801UL,
9005369667392372737UL,
9005651142369083393UL,
9007902942182768641UL,
9010717691949875201UL,
9015502766553956353UL,
9015784241530667009UL,
9016347191484088321UL,
9018317516321062913UL,
9018739728786128897UL,
9019302678739550209UL,
9020569316134748161UL,
9026058078180605953UL,
9027606190552514561UL,
9030983890273042433UL,
9031406102738108417UL,
9031969052691529729UL,
9039146664597651457UL,
9041961414364758017UL,
9044635426643509249UL,
9050968613619499009UL,
9051672301061275649UL,
9056738850642067457UL,
9058146225525620737UL,
9058568437990686721UL,
9062790562641346561UL,
9064760887478321153UL,
9067294162268717057UL,
9067857112222138369UL,
9069405224594046977UL,
9072923661802930177UL,
9073345874267996161UL,
9075316199104970753UL,
9079116111290564609UL,
9087701098080239617UL,
9093189860126097409UL,
9095300922451427329UL,
9096849034823335937UL,
9097271247288401921UL,
9097834197241823233UL,
9103182221799325697UL,
9113033845984198657UL,
9115567120774594561UL,
9115848595751305217UL,
9118522608030056449UL,
9121478095285518337UL,
9122181782727294977UL,
9122603995192360961UL,
9122744732680716289UL,
9129077919656706049UL,
9129500132121772033UL,
9138788806353223681UL,
9142870193515528193UL,
9144277568399081473UL,
9153425505142177793UL,
9154269930072309761UL,
9158069842257903617UL,
9159477217141456897UL,
9163277129327050753UL,
9165388191652380673UL,
9166514091559223297UL,
9171299166163304449UL,
9171721378628370433UL,
9172143591093436417UL,
9175380553325608961UL,
9184809965045415937UL,
9185232177510481921UL,
9191143152021405697UL,
9194520851741933569UL,
9198602238904238081UL,
9202824363554897921UL,
9203387313508319233UL,
9211409350344572929UL,
9214646312576745473UL,
1337006139375617UL,
1899956092796929UL,
3799912185593857UL,
4222124650659841UL,
4925812092436481UL,
5559130790035457UL,
7881299347898369UL,
8655355533852673UL,
9147936743096321UL,
12947848928690177UL,
14214486323888129UL,
14566330044776449UL,
15621861207441409UL,
16044073672507393UL,
17169973579350017UL,
18788454695436289UL,
19703248369745921UL,
22799473113563137UL,
24136479252938753UL,
24558691718004737UL,
24980904183070721UL,
25121641671426049UL,
27654916461821953UL,
28499341391953921UL,
30399297484750849UL,
30469666228928513UL,
31525197391593473UL,
34832528367943681UL,
38210228088471553UL,
38280596832649217UL,
38913915530248193UL,
40743502878867457UL,
41869402785710081UL,
42432352739131393UL,
42854565204197377UL,
44965627529527297UL,
46935952366501889UL,
48554433482588161UL,
49821070877786113UL,
49891439621963777UL,
50524758319562753UL,
51298814505517057UL,
51580289482227713UL,
52635820644892673UL,
54113564272623617UL,
59109745109237761UL,
60657857481146369UL,
62065232364699649UL,
63824450969141249UL,
63965188457496577UL,
64387400922562561UL,
66287357015359489UL,
71213169107795969UL,
72268700270460929UL,
73324231433125889UL,
74168656363257857UL,
77335249851252737UL,
77687093572141057UL,
80431474595069953UL,
90423836268298241UL,
91268261198430209UL,
91408998686785537UL,
92746004826161153UL,
94645960918958081UL,
96053335802511361UL,
98164398127841281UL,
98868085569617921UL,
102245785290145793UL,
103301316452810753UL,
103723528917876737UL,
105412378778140673UL,
106256803708272641UL,
112097409475018753UL,
112589990684262401UL,
112941834405150721UL,
113856628079460353UL,
114701053009592321UL,
114912159242125313UL,
115334371707191297UL,
117797277753409537UL,
119063915148607489UL,
119275021381140481UL,
120612027520516097UL,
123145302310912001UL,
127508164449927169UL,
129830333007790081UL,
131800657844764673UL,
135319095053647873UL,
135600570030358529UL,
136796838681378817UL,
138907901006708737UL,
139189375983419393UL,
140244907146084353UL,
141722650773815297UL,
144185556820033537UL,
147422519052206081UL,
147633625284739073UL,
149533581377536001UL,
150518743796023297UL,
151222431237799937UL,
152629806121353217UL,
152700174865530881UL,
153052018586419201UL,
154740868446683137UL,
155444555888459777UL,
156218612074414081UL,
159033361841520641UL,
164099911422312449UL,
165929498770931713UL,
168884986026393601UL,
169377567235637249UL,
170221992165769217UL,
170433098398302209UL,
172896004444520449UL,
172966373188698113UL,
173740429374652417UL,
174795960537317377UL,
175429279234916353UL,
175710754211627009UL,
177821816536956929UL,
178666241467088897UL,
178877347699621889UL,
180143985094819841UL,
182606891141038081UL,
182817997373571073UL,
185632747140677633UL,
185984590861565953UL,
186617909559164929UL,
186688278303342593UL,
189643765558804481UL,
189784503047159809UL,
190699296721469441UL,
191684459139956737UL,
194006627697819649UL,
195554740069728257UL,
196821377464926209UL,
196962114953281537UL,
197876908627591169UL,
199987970952921089UL,
201606452069007361UL,
201817558301540353UL,
203365670673448961UL,
208432220254240769UL,
208784063975129089UL,
209839595137794049UL,
210895126300459009UL,
211106232532992001UL,
212161763695656961UL,
217087575788093441UL,
221661544159641601UL,
221943019136352257UL,
222294862857240577UL,
223631868996616193UL,
228628049833230337UL,
228839156065763329UL,
230387268437671937UL,
233764968158199809UL,
234327918111621121UL,
234609393088331777UL,
235242711785930753UL,
237072299134550017UL,
238198199041392641UL,
241998111226986497UL,
246783185831067649UL,
247838716993732609UL,
247909085737910273UL,
248753510668042241UL,
250020148063240193UL,
250653466760839169UL,
251005310481727489UL,
251849735411859457UL,
252483054109458433UL,
253186741551235073UL,
257197759969361921UL,
259238453550514177UL,
260997672154955777UL,
261560622108377089UL,
261982834573443073UL,
262475415782686721UL,
263038365736108033UL,
263882790666240001UL,
265993852991569921UL,
267260490386767873UL,
268597496526143489UL,
270004871409696769UL,
271764090014138369UL,
275282527223021569UL,
277604695780884481UL,
278660226943549441UL,
279363914385326081UL,
280349076803813377UL,
282319401640787969UL,
284571201454473217UL,
284852676431183873UL,
286682263779803137UL,
287737794942468097UL,
289426644802732033UL,
290552544709574657UL,
294493194383523841UL,
294704300616056833UL,
294985775592767489UL,
296041306755432449UL,
297870894104051713UL,
298926425266716673UL,
300404168894447617UL,
300826381359513601UL,
301037487592046593UL,
301881912522178561UL,
303781868614975489UL,
303992974847508481UL,
305892930940305409UL,
310607636800208897UL,
312929805358071809UL,
315814923869356033UL,
316518611311132673UL,
318207461171396609UL,
320459260985081857UL,
322992535775477761UL,
324962860612452353UL,
326018391775117313UL,
326862816705249281UL,
327003554193604609UL,
328481297821335553UL,
328551666565513217UL,
331647891309330433UL,
331929366286041089UL,
333336741169594369UL,
333758953634660353UL,
335236697262391297UL,
336714440890122241UL,
337418128331898881UL,
339881034378117121UL,
341218040517492737UL,
342625415401046017UL,
344806846470553601UL,
347129015028416513UL,
351702983399964673UL,
353039989539340289UL,
353180727027695617UL,
356417689259868161UL,
356558426748223489UL,
356769532980756481UL,
357051007957467137UL,
362539770003324929UL,
362961982468390913UL,
364439726096121857UL,
367113738374873089UL,
367958163305005057UL,
368028532049182721UL,
369928488141979649UL,
370069225630334977UL,
370491438095400961UL,
371406231769710593UL,
371546969258065921UL,
374924668978593793UL,
376824625071390721UL,
379217162373431297UL,
381680068419649537UL,
382594862093959169UL,
384072605721690113UL,
384213343210045441UL,
385972561814487041UL,
387239199209684993UL,
388716942837415937UL,
391039111395278849UL,
391461323860344833UL,
391883536325410817UL,
398990779487354881UL,
399905573161664513UL,
401946266742816769UL,
403072166649659393UL,
403494379114725377UL,
403846222835613697UL,
404761016509923329UL,
405183228974989313UL,
406872078835253249UL,
408279453718806529UL,
411305309718446081UL,
412149734648578049UL,
412360840881111041UL,
412571947113644033UL,
417990340415324161UL,
418201446647857153UL,
418834765345456129UL,
419256977810522113UL,
419327346554699777UL,
421649515112562689UL,
423901314926247937UL,
424112421158780929UL,
426223483484110849UL,
426645695949176833UL,
429601183204638721UL,
433401095390232577UL,
435512157715562497UL,
435793632692273153UL,
437482482552537089UL,
438045432505958401UL,
438889857436090369UL,
439382438645334017UL,
442126819668262913UL,
442267557156618241UL,
443815669528526849UL,
444871200691191809UL,
445293413156257793UL,
446348944318922753UL,
446700788039811073UL,
448037794179186689UL,
449093325341851649UL,
450993281434648577UL,
451767337620602881UL,
451978443853135873UL,
452682131294912513UL,
457678312131526657UL,
459015318270902273UL,
459367161991790593UL,
466826248874622977UL,
467248461339688961UL,
469289154920841217UL,
471681692222881793UL,
472526117153013761UL,
473159435850612737UL,
474989023199232001UL,
477100085524561921UL,
479703729059135489UL,
481533316407754753UL,
482237003849531393UL,
488570190825521153UL,
488922034546409473UL,
491033096871739393UL,
493144159197069313UL,
496381121429241857UL,
496944071382663169UL,
497788496312795137UL,
498492183754571777UL,
499969927382302721UL,
500321771103191041UL,
503066152126119937UL,
503277258358652929UL,
504192052032962561UL,
505388320683982849UL,
506232745614114817UL,
509469707846287361UL,
510314132776419329UL,
510736345241485313UL,
511158557706551297UL,
515380682357211137UL,
516999163473297409UL,
523543456681820161UL,
528398900030078977UL,
529313693704388609UL,
531776599750606849UL,
534591349517713409UL,
534732087006068737UL,
537054255563931649UL,
539376424121794561UL,
541698592679657473UL,
543880023749165057UL,
544302236214231041UL,
545287398632718337UL,
548031779655647233UL,
550142841980977153UL,
550565054446043137UL,
550635423190220801UL,
550987266911109121UL,
554013122910748673UL,
554153860399104001UL,
556053816491900929UL,
559642622444961793UL,
559712991189139457UL,
563301797142200321UL,
563442534630555649UL,
565764703188418561UL,
566468390630195201UL,
567523921792860161UL,
567875765513748481UL,
569564615374012417UL,
569775721606545409UL,
571042359001743361UL,
573786740024672257UL,
576108908582535169UL,
576179277326712833UL,
576601489791778817UL,
581175458163326977UL,
581808776860925953UL,
582090251837636609UL,
589619707464646657UL,
592364088487575553UL,
592434457231753217UL,
593489988394418177UL,
593912200859484161UL,
594967732022149121UL,
602919400114225153UL,
603974931276890113UL,
604256406253600769UL,
608267424671727617UL,
609252587090214913UL,
610308118252879873UL,
615163561601138689UL,
617978311368245249UL,
619807898716864513UL,
620230111181930497UL,
621285642344595457UL,
622622648483971073UL,
624030023367524353UL,
626844773134630913UL,
626985510622986241UL,
631418741506179073UL,
632122428947955713UL,
635711234901016577UL,
642677740574605313UL,
644366590434869249UL,
647673921411219457UL,
648377608852996097UL,
650840514899214337UL,
652318258526945281UL,
652810839736188929UL,
654288583363919873UL,
655695958247473153UL,
656118170712539137UL,
656188539456716801UL,
664140207548792833UL,
664421682525503489UL,
667729013501853697UL,
667799382246031361UL,
669488232106295297UL,
669840075827183617UL,
673428881780244481UL,
673639988012777473UL,
682084237314097153UL,
682717556011696129UL,
684476774616137729UL,
685532305778802689UL,
685954518243868673UL,
686095255732224001UL,
687995211825020929UL,
688487793034264577UL,
688698899266797569UL,
689543324196929537UL,
690950699080482817UL,
692639548940746753UL,
693061761405812737UL,
694328398801010689UL,
695595036196208641UL,
695806142428741633UL,
696087617405452289UL,
699817160846868481UL,
704250391730061313UL,
704531866706771969UL,
704883710427660289UL,
704954079171837953UL,
708261410148188161UL,
708965097589964801UL,
713116853496446977UL,
714031647170756609UL,
715861234519375873UL,
716987134426218497UL,
718464878053949441UL,
719450040472436737UL,
720505571635101697UL,
721209259076878337UL,
724375852564873217UL,
728527608471355393UL,
729160927168954369UL,
730005352099086337UL,
732538626889482241UL,
733242314331258881UL,
734086739261390849UL,
734438582982279169UL,
734508951726456833UL,
735916326610010113UL,
741264351167512577UL,
742882832283598849UL,
744782788376395777UL,
745205000841461761UL,
749004913027055617UL,
752452981491761153UL,
753227037677715457UL,
753297406421893121UL,
757097318607486977UL,
759208380932816897UL,
759560224653705217UL,
760475018328014849UL,
761037968281436161UL,
763008293118410753UL,
763993455536898049UL,
764908249211207681UL,
765752674141339649UL,
767019311536537601UL,
768074842699202561UL,
769271111350222849UL,
769341480094400513UL,
770397011257065473UL,
772296967349862401UL,
772648811070750721UL,
772859917303283713UL,
773141392279994369UL,
773915448465948673UL,
778630154325852161UL,
779193104279273473UL,
779263473023451137UL,
779615316744339457UL,
784118916371709953UL,
785104078790197249UL,
785807766231973889UL,
785948503720329217UL,
787426247348060161UL,
787707722324770817UL,
788129934789836801UL,
790592840836055041UL,
792492796928851969UL,
797840821486354433UL,
800585202509283329UL,
801781471160303617UL,
805229539625009153UL,
807340601950339073UL,
809170189298958337UL,
809240558043136001UL,
811914570321887233UL,
813392313949618177UL,
814025632647217153UL,
814307107623927809UL,
814870057577349121UL,
816981119902679041UL,
818247757297876993UL,
818318126042054657UL,
819584763437252609UL,
820640294599917569UL,
821062507064983553UL,
821484719530049537UL,
823103200646135809UL,
824369838041333761UL,
824580944273866753UL,
826058687901597697UL,
827325325296795649UL,
828169750226927617UL,
828803068924526593UL,
831336343714922497UL,
831406712459100161UL,
832814087342653441UL,
833728881016963073UL,
833869618505318401UL,
834784412179628033UL,
836825105760780289UL,
837317686970023937UL,
839358380551176193UL,
844636036364500993UL,
845339723806277633UL,
847591523619962881UL,
848084104829206529UL,
848224842317561857UL,
855683929200394241UL,
857091304083947521UL,
857583885293191169UL,
857935729014079489UL,
859413472641810433UL,
860117160083587073UL,
861313428734607361UL,
863917072269180929UL,
867294771989708801UL,
872361321570500609UL,
874683490128363521UL,
876935289942048769UL,
877638977383825409UL,
879890777197510657UL,
882705526964617217UL,
886435070406033409UL,
887701707801231361UL,
888194289010475009UL,
888968345196429313UL,
890446088824160257UL,
890657195056693249UL,
891712726219358209UL,
894949688451530753UL,
895583007149129729UL,
898749600637124609UL,
900016238032322561UL,
901001400450809857UL,
901916194125119489UL,
902338406590185473UL,
904801312636403713UL,
904871681380581377UL,
905645737566535681UL,
907334587426799617UL,
907404956170977281UL,
911838187054170113UL,
913315930681901057UL,
914301093100388353UL,
916834367890784257UL,
917045474123317249UL,
918312111518515201UL,
922393498680819713UL,
923026817378418689UL,
926545254587301889UL,
927460048261611521UL,
927671154494144513UL,
927811891982499841UL,
928093366959210497UL,
930626641749606401UL,
931471066679738369UL,
932034016633159681UL,
932948810307469313UL,
937170934958129153UL,
937311672446484481UL,
938156097376616449UL,
938367203609149441UL,
939000522306748417UL,
941393059608788993UL,
941744903329677313UL,
944348546864250881UL,
949837308910108673UL,
950822471328595969UL,
951033577561128961UL,
952089108723793921UL,
953003902398103553UL,
954200171049123841UL,
954903858490900481UL,
957226027048763393UL,
957366764537118721UL,
958633401932316673UL,
959688933094981633UL,
960392620536758273UL,
960814833001824257UL,
965459170117550081UL,
966866545001103361UL,
967077651233636353UL,
969470188535676929UL,
969681294768209921UL,
972847888256204801UL,
972988625744560129UL,
975099688069890049UL,
977210750395219969UL,
979532918953082881UL,
980588450115747841UL,
982558774952722433UL,
984669837278052353UL,
985654999696539649UL,
986147580905783297UL,
986499424626671617UL,
987132743324270593UL,
989736386858844161UL,
989877124347199489UL,
990369705556443137UL,
990580811788976129UL,
990932655509864449UL,
991003024254042113UL,
991636342951641089UL,
991847449184174081UL,
993888142765326337UL,
994521461462925313UL,
995647361369767937UL,
1000080592252960769UL,
1002543498299179009UL,
1003810135694376961UL,
1005710091787173889UL,
1006413779228950529UL,
1014646922297737217UL,
1014858028530270209UL,
1016335772158001153UL,
1018024622018265089UL,
1019291259413463041UL,
1019924578111062017UL,
1020980109273726977UL,
1022246746668924929UL,
1022598590389813249UL,
1022668959133990913UL,
1023091171599056897UL,
1031746527132909569UL,
1032590952063041537UL,
1033576114481528833UL,
1034068695690772481UL,
1036813076713701377UL,
1037798239132188673UL,
1037868607876366337UL,
1039698195224985601UL,
1042090732527026177UL,
1043709213643112449UL,
1043920319875645441UL,
1045186957270843393UL,
1046664700898574337UL,
1046875807131107329UL,
1047298019596173313UL,
1049690556898213889UL,
1051942356711899137UL,
1052153462944432129UL,
1052575675409498113UL,
1055531162664960001UL,
1055742268897492993UL,
1060456974757396481UL,
1066086474291609601UL,
1066930899221741569UL,
1067353111686807553UL,
1069253067779604481UL,
1070801180151513089UL,
1075797360988127233UL,
1076641785918259201UL,
1082623129173360641UL,
1083608291591847937UL,
1086141566382243841UL,
1089167422381883393UL,
1090645166009614337UL,
1091208115963035649UL,
1091419222195568641UL,
1092474753358233601UL,
1092685859590766593UL,
1094445078195208193UL,
1096274665543827457UL,
1097330196706492417UL,
1097611671683203073UL,
1098244990380802049UL,
1099019046566756353UL,
1100567158938664961UL,
1100707896427020289UL,
1100919002659553281UL,
1101200477636263937UL,
1102256008798928897UL,
1102467115031461889UL,
1102818958752350209UL,
1103663383682482177UL,
1103944858659192833UL,
1104367071124258817UL,
1105352233542746113UL,
1107111452147187713UL,
1107955877077319681UL,
1108166983309852673UL,
1111685420518735873UL,
1113233532890644481UL,
1113374270378999809UL,
1119496351122456577UL,
1119918563587522561UL,
1120411144796766209UL,
1120762988517654529UL,
1121677782191964161UL,
1122662944610451457UL,
1123929582005649409UL,
1124633269447426049UL,
1124844375679959041UL,
1125196219400847361UL,
1127096175493644289UL,
1127940600423776257UL,
1129066500330618881UL,
1129629450284040193UL,
1130333137725816833UL,
1130755350190882817UL,
1133851574934700033UL,
1134555262376476673UL,
1135540424794963969UL,
1137440380887760897UL,
1138355174562070529UL,
1138918124515491841UL,
1139199599492202497UL,
1139410705724735489UL,
1145110574003126273UL,
1146095736421613569UL,
1146166105165791233UL,
1147010530095923201UL,
1149473436142141441UL,
1149684542374674433UL,
1149754911118852097UL,
1153977035769511937UL,
1154962198187999233UL,
1156721416792440833UL,
1161999072605765633UL,
1162139810094120961UL,
1162350916326653953UL,
1164039766186917889UL,
1164532347396161537UL,
1164954559861227521UL,
1165306403582115841UL,
1168050784605044737UL,
1168965578279354369UL,
1171498853069750273UL,
1172906227953303553UL,
1179520889906003969UL,
1179731996138536961UL,
1181983795952222209UL,
1183743014556663809UL,
1184798545719328769UL,
1185994814370349057UL,
1187472557998080001UL,
1188105876695678977UL,
1188176245439856641UL,
1189020670369988609UL,
1190850257718607873UL,
1193383532509003777UL,
1197605657159663617UL,
1198027869624729601UL,
1198309344601440257UL,
1198942663299039233UL,
1202038888042856449UL,
1202742575484633089UL,
1202883312972988417UL,
1203938844135653377UL,
1204642531577430017UL,
1206261012693516289UL,
1208442443763023873UL,
1208864656228089857UL,
1212664568413683713UL,
1212805305902039041UL,
1215549686924967937UL,
1215831161901678593UL,
1216183005622566913UL,
1218575542924607489UL,
1218927386645495809UL,
1219771811575627777UL,
1220405130273226753UL,
1221953242645135361UL,
1222093980133490689UL,
1222938405063622657UL,
1223219880040333313UL,
1225964261063262209UL,
1227793848411881473UL,
1229130854551257089UL,
1230327123202277377UL,
1231453023109120001UL,
1231593760597475329UL,
1232508554271784961UL,
1234197404132048897UL,
1239475059945373697UL,
1239826903666262017UL,
1240882434828926977UL,
1241797228503236609UL,
1243063865898434561UL,
1243204603386789889UL,
1244682347014520833UL,
1245174928223764481UL,
1245386034456297473UL,
1245526771944652801UL,
1246371196874784769UL,
1247074884316561409UL,
1247637834269982721UL,
1250452584037089281UL,
1252704383850774529UL,
1252774752594952193UL,
1258685727105875969UL,
1259881995756896257UL,
1260937526919561217UL,
1261007895663738881UL,
1261148633152094209UL,
1261641214361337857UL,
1263118957989068801UL,
1263259695477424129UL,
1263470801709957121UL,
1267341082639728641UL,
1267904032593149953UL,
1267974401337327617UL,
1269663251197591553UL,
1270296569895190529UL,
1271492838546210817UL,
1272407632220520449UL,
1273603900871540737UL,
1274307588313317377UL,
1275363119475982337UL,
1275714963196870657UL,
1275785331941048321UL,
1277896394266378241UL,
1278107500498911233UL,
1281274093986906113UL,
1282751837614637057UL,
1283103681335525377UL,
1286692487288586241UL,
1287607280962895873UL,
1288029493427961857UL,
1289859080776581121UL,
1291829405613555713UL,
1293518255473819649UL,
1294292311659773953UL,
1294784892869017601UL,
1295840424031682561UL,
1297458905147768833UL,
1297881117612834817UL,
1298795911287144449UL,
1299992179938164737UL,
1301047711100829697UL,
1301962504775139329UL,
1302525454728560641UL,
1305973523193266177UL,
1312728922634321921UL,
1315684409889783809UL,
1317795472215113729UL,
1318147315936002049UL,
1319273215842844673UL,
1320117640772976641UL,
1321102803191463937UL,
1321173171935641601UL,
1321525015656529921UL,
1322158334354128897UL,
1324691609144524801UL,
1324973084121235457UL,
1326591565237321729UL,
1327506358911631361UL,
1328561890074296321UL,
1329406315004428289UL,
1330884058632159233UL,
1332080327283179521UL,
1332713645980778497UL,
1333417333422555137UL,
1333769177143443457UL,
1336513558166372353UL,
1337006139375616001UL,
1338906095468412929UL,
1341369001514631169UL,
1342283795188940801UL,
1343691170072494081UL,
1345239282444402689UL,
1345661494909468673UL,
1347139238537199617UL,
1348194769699864577UL,
1348546613420752897UL,
1349813250815950849UL,
1350235463281016833UL,
1358961187559047169UL,
1359313031279935489UL,
1359524137512468481UL,
1359805612489179137UL,
1360157456210067457UL,
1360790774907666433UL,
1362127781047042049UL,
1363324049698062337UL,
1363394418442240001UL,
1365012899558326273UL,
1366561011930234881UL,
1367827649325432833UL,
1370360924115828737UL,
1373949730068889601UL,
1376412636115107841UL,
1380282917044879361UL,
1381127341975011329UL,
1382745823091097601UL,
1386967947741757441UL,
1388656797602021377UL,
1389923434997219329UL,
1391682653601660929UL,
1393512240950280193UL,
1394356665880412161UL,
1395060353322188801UL,
1396256621973209089UL,
1397734365600940033UL,
1399071371740315649UL,
1400478746623868929UL,
1402449071460843521UL,
1404349027553640449UL,
1406248983646437377UL,
1407937833506701313UL,
1409134102157721601UL,
1411737745692295169UL,
1413215489320026113UL,
1414693232947757057UL,
1417156138993975297UL,
1418070932668284929UL,
1418915357598416897UL,
1420744944947036161UL,
1421026419923746817UL,
1422433794807300097UL,
1423067113504899073UL,
1423559694714142721UL,
1423700432202498049UL,
1424122644667564033UL,
1427992925597335553UL,
1429400300480888833UL,
1430526200387731457UL,
1432355787736350721UL,
1433903900108259329UL,
1434677956294213633UL,
1437422337317142529UL,
1443122205595533313UL,
1443755524293132289UL,
1445022161688330241UL,
1446077692850995201UL,
1447766542711259137UL,
1448188755176325121UL,
1449033180106457089UL,
1450159080013299713UL,
1451214611175964673UL,
1451566454896852993UL,
1457547798151954433UL,
1458603329314619393UL,
1461136604105015297UL,
1462121766523502593UL,
1465992047453274113UL,
1466414259918340097UL,
1467188316104294401UL,
1468947534708736001UL,
1472254865685086209UL,
1472465971917619201UL,
1474858509219659777UL,
1477602890242588673UL,
1479291740102852609UL,
1484710133404532737UL,
1485413820846309377UL,
1486047139543908353UL,
1486398983264796673UL,
1487243408194928641UL,
1489635945496969217UL,
1490621107915456513UL,
1491958114054832129UL,
1492521064008253441UL,
1493013645217497089UL,
1493365488938385409UL,
1494632126333583361UL,
1495969132472958977UL,
1498854250984243201UL,
1499346832193486849UL,
1501246788286283777UL,
1503780063076679681UL,
1506946656564674561UL,
1508142925215694849UL,
1511731731168755713UL,
1512224312377999361UL,
1516657543261192193UL,
1517501968191324161UL,
1518487130609811457UL,
1518768605586522113UL,
1518909343074877441UL,
1523975892655669249UL,
1525031423818334209UL,
1526579536190242817UL,
1531012767073435649UL,
1531434979538501633UL,
1532842354422054913UL,
1533264566887120897UL,
1537908904002846721UL,
1538612591444623361UL,
1538823697677156353UL,
1542412503630217217UL,
1542623609862750209UL,
1544242090978836481UL,
1544523565955547137UL,
1544875409676435457UL,
1547267946978476033UL,
1549097534327095297UL,
1550223434233937921UL,
1551490071629135873UL,
1552686340280156161UL,
1553530765210288129UL,
1556908464930816001UL,
1557541783628414977UL,
1557963996093480961UL,
1560286164651343873UL,
1563874970604404737UL,
1566056401673912321UL,
1568378570231775233UL,
1570489632557105153UL,
1571263688743059457UL,
1571474794975592449UL,
1571967376184836097UL,
1573585857300922369UL,
1574641388463587329UL,
1575556182137896961UL,
1576541344556384257UL,
1577667244463226881UL,
1582030106602242049UL,
1583930062695038977UL,
1586674443717967873UL,
1587518868648099841UL,
1588152187345698817UL,
1588433662322409473UL,
1591600255810404353UL,
1593007630693957633UL,
1593640949391556609UL,
1595963117949419521UL,
1598355655251460097UL,
1598988973949059073UL,
1599833398879191041UL,
1602788886134652929UL,
1603844417297317889UL,
1604618473483272193UL,
1605322160925048833UL,
1605674004645937153UL,
1606377692087713793UL,
1610740554226728961UL,
1612077560366104577UL,
1612851616552058881UL,
1614751572644855809UL,
1616299685016764417UL,
1616721897481830401UL,
1616933003714363393UL,
1620240334690713601UL,
1620451440923246593UL,
1622140290783510529UL,
1622632871992754177UL,
1622984715713642497UL,
1623406928178708481UL,
1624110615620485121UL,
1626010571713282049UL,
1628121634038611969UL,
1628895690224566273UL,
1635299245944733697UL,
1635651089665622017UL,
1635721458409799681UL,
1637339939525885953UL,
1637621414502596609UL,
1638465839432728577UL,
1639239895618682881UL,
1641843539153256449UL,
1642054645385789441UL,
1643321282780987393UL,
1644799026408718337UL,
1648598938594312193UL,
1651061844640530433UL,
1657395031616520193UL,
1657887612825763841UL,
1659083881476784129UL,
1659787568918560769UL,
1666542968359616513UL,
1670483618033565697UL,
1671750255428763649UL,
1672242836638007297UL,
1672665049103073281UL,
1672805786591428609UL,
1675409430126002177UL,
1681953723334524929UL,
1683783310683144193UL,
1684205523148210177UL,
1684909210589986817UL,
1689131335240646657UL,
1691594241286864897UL,
1691875716263575553UL,
1692297928728641537UL,
1693071984914595841UL,
1694408991053971457UL,
1695394153472458753UL,
1696097840914235393UL,
1696238578402590721UL,
1696449684635123713UL,
1696731159611834369UL,
1696942265844367361UL,
1697083003332722689UL,
1699194065658052609UL,
1702431027890225153UL,
1703416190308712449UL,
1705738358866575361UL,
1705949465099108353UL,
1710593802214834177UL,
1713760395702829057UL,
1715027033098027009UL,
1715238139330560001UL,
1715449245563092993UL,
1716997357935001601UL,
1717982520353488897UL,
1718897314027798529UL,
1721852801283260417UL,
1727060088352407553UL,
1727552669561651201UL,
1727904513282539521UL,
1728819306956849153UL,
1730297050584580097UL,
1732408112909910017UL,
1733393275328397313UL,
1734026594025996289UL,
1734448806491062273UL,
1738459824909189121UL,
1743174530769092609UL,
1744793011885178881UL,
1745848543047843841UL,
1747748499140640769UL,
1748452186582417409UL,
1749648455233437697UL,
1750070667698503681UL,
1750703986396102657UL,
1750985461372813313UL,
1751407673837879297UL,
1756052010953605121UL,
1758092704534757377UL,
1760063029371731969UL,
1762314829185417217UL,
1762385197929594881UL,
1763581466580615169UL,
1764074047789858817UL,
1764707366487457793UL,
1768859122393939969UL,
1770970184719269889UL,
1773081247044599809UL,
1773292353277132801UL,
1774136778207264769UL,
1774629359416508417UL,
1777092265462726657UL,
1778007059137036289UL,
1778147796625391617UL,
1779484802764767233UL,
1779836646485655553UL,
1780540333927432193UL,
1784692089833914369UL,
1787929052066086913UL,
1788562370763685889UL,
1788914214484574209UL,
1788984583228751873UL,
1791447489274970113UL,
1794402976530432001UL,
1797428832530071553UL,
1798413994948558849UL,
1798484363692736513UL,
1799962107320467457UL,
1801369482204020737UL,
1804395338203660289UL,
1804817550668726273UL,
1806647138017345537UL,
1807561931691655169UL,
1807913775412543489UL,
1810517418947117057UL,
1811080368900538369UL,
1811291475133071361UL,
1812135900063203329UL,
1812628481272446977UL,
1816217287225507841UL,
1817202449643995137UL,
1817272818388172801UL,
1818891299504259073UL,
1819383880713502721UL,
1820017199411101697UL,
1822057892992253953UL,
1823535636619984897UL,
1824661536526827521UL,
1825294855224426497UL,
1825505961456959489UL,
1825857805177847809UL,
1826350386387091457UL,
1827335548805578753UL,
1833246523316502529UL,
1836202010571964417UL,
1837116804246274049UL,
1838594547874004993UL,
1839227866571603969UL,
1839438972804136961UL,
1839650079036669953UL,
1843661097454796801UL,
1844012941175685121UL,
1846827690942791681UL,
1847179534663680001UL,
1848938753268121601UL,
1849572071965720577UL,
1851612765546872833UL,
1852949771686248449UL,
1855201571499933697UL,
1855905258941710337UL,
1857312633825263617UL,
1857945952522862593UL,
1859845908615659521UL,
1860549596057436161UL,
1862871764615299073UL,
1865756883126583297UL,
1870260482753953793UL,
1870612326474842113UL,
1873356707497771009UL,
1874060394939547649UL,
1875678876055633921UL,
1877226988427542529UL,
1877367725915897857UL,
1880182475683004417UL,
1880815794380603393UL,
1880956531868958721UL,
1881167638101491713UL,
1884123125356953601UL,
1886515662658994177UL,
1887500825077481473UL,
1887923037542547457UL,
1889400781170278401UL,
1889611887402811393UL,
1891159999774720001UL,
1895382124425379841UL,
1895945074378801153UL,
1896367286843867137UL,
1896789499308933121UL,
1898548717913374721UL,
1898689455401730049UL,
1901011623959592961UL,
1902348630098968577UL,
1902770842564034561UL,
1904670798656831489UL,
1905726329819496449UL,
1907837392144826369UL,
1908681817074958337UL,
1909033660795846657UL,
1909737348237623297UL,
1911778041818775553UL,
1911848410562953217UL,
1912833572981440513UL,
1913326154190684161UL,
1914522422841704449UL,
1914733529074237441UL,
1915648322748547073UL,
1916422378934501377UL,
1916492747678679041UL,
1918111228794765313UL,
1919588972422496257UL,
1921911140980359169UL,
1924866628235821057UL,
1925148103212531713UL,
1926344371863552001UL,
1926977690561150977UL,
1929722071584079873UL,
1932255346374475777UL,
1933170140048785409UL,
1934225671211450369UL,
1934366408699805697UL,
1935492308606648321UL,
1935633046095003649UL,
1935703414839181313UL,
1935844152327536641UL,
1936125627304247297UL,
1937181158466912257UL,
1937955214652866561UL,
1938799639582998529UL,
1939221852048064513UL,
1940277383210729473UL,
1940769964419973121UL,
1943092132977836033UL,
1944499507861389313UL,
1945555039024054273UL,
1947032782651785217UL,
1949003107488759809UL,
1950621588604846081UL,
1951958594744221697UL,
1953014125906886657UL,
1953647444604485633UL,
1955899244418170881UL,
1959276944138698753UL,
1959769525347942401UL,
1961388006464028673UL,
1962232431394160641UL,
1963499068789358593UL,
1963921281254424577UL,
1965047181161267201UL,
1965258287393800193UL,
1966313818556465153UL,
1966454556044820481UL,
1967510087207485441UL,
1971380368137256961UL,
1971591474369789953UL,
1974687699113607169UL,
1976165442741338113UL,
1976235811485515777UL,
1976869130183114753UL,
1977643186369069057UL,
1978065398834135041UL,
1979965354926931969UL,
1980176461159464961UL,
1981513467298840577UL,
1987846654274830337UL,
1988057760507363329UL,
1988620710460784641UL,
1989465135390916609UL,
1989676241623449601UL,
1991435460227891201UL,
1991787303948779521UL,
1995587216134373377UL,
1997346434738814977UL,
1997698278459703297UL,
1997979753436413953UL,
1998824178366545921UL,
1999176022087434241UL,
2000724134459342849UL,
2000935240691875841UL,
2001498190645297153UL,
2002835196784672769UL,
2003187040505561089UL,
2004101834179870721UL,
2006142527761022977UL,
2006846215202799617UL,
2007268427667865601UL,
2008675802551418881UL,
2010364652411682817UL,
2010575758644215809UL,
2010997971109281793UL,
2012123871016124417UL,
2012546083481190401UL,
2013109033434611713UL,
2014657145806520321UL,
2016275626922606593UL,
2019090376689713153UL,
2020990332782510081UL,
2021623651480109057UL,
2022397707666063361UL,
2023101395107840001UL,
2023945820037971969UL,
2024508769991393281UL,
2026056882363301889UL,
2026830938549256193UL,
2027956838456098817UL,
2029434582083829761UL,
2029575319572185089UL,
2030419744502317057UL,
2032530806827646977UL,
2033164125525245953UL,
2035908506548174849UL,
2039778787477946369UL,
2041256531105677313UL,
2041397268594032641UL,
2044212018361139201UL,
2044563862082027521UL,
2045267549523804161UL,
2050545205337128961UL,
2052585898918281217UL,
2053500692592590849UL,
2053641430080946177UL,
2054978436220321793UL,
2055822861150453761UL,
2057441342266540033UL,
2059130192126803969UL,
2060044985801113601UL,
2060607935754534913UL,
2061311623196311553UL,
2062789366824042497UL,
2065885591567859713UL,
2066518910265458689UL,
2067363335195590657UL,
2067785547660656641UL,
2070178084962697217UL,
2070600297427763201UL,
2070952141148651521UL,
2071444722357895169UL,
2071585459846250497UL,
2072218778543849473UL,
2073766890915758081UL,
2074822422078423041UL,
2076722378171219969UL,
2078340859287306241UL,
2082774090170499073UL,
2083266671379742721UL,
2084462940030763009UL,
2085588839937605633UL,
2087629533518757889UL,
2087699902262935553UL,
2091640551936884737UL,
2092907189332082689UL,
2094033089238925313UL,
2095440464122478593UL,
2095933045331722241UL,
2098677426354651137UL,
2100295907470737409UL,
2101844019842646017UL,
2102266232307712001UL,
2103110657237843969UL,
2104166188400508929UL,
2106066144493305857UL,
2108388313051168769UL,
2115988137422356481UL,
2116199243654889473UL,
2117395512305909761UL,
2120843580770615297UL,
2122673168119234561UL,
2124995336677097473UL,
2125839761607229441UL,
2127598980211671041UL,
2129921148769533953UL,
2131750736118153217UL,
2132032211094863873UL,
2133509954722594817UL,
2137309866908188673UL,
2137943185605787649UL,
2142376416488980481UL,
2142517153977335809UL,
2143572685140000769UL,
2145120797511909377UL,
2145754116209508353UL,
2146950384860528641UL,
2148287390999904257UL,
2149905872115990529UL,
2150961403278655489UL,
2152016934441320449UL,
2152439146906386433UL,
2152931728115630081UL,
2155183527929315329UL,
2157364958998822913UL,
2158350121417310209UL,
2158842702626553857UL,
2159053808859086849UL,
2163064827277213697UL,
2171860920299421697UL,
2172283132764487681UL,
2172564607741198337UL,
2175027513787416577UL,
2176083044950081537UL,
2176997838624391169UL,
2177208944856924161UL,
2178475582252122113UL,
2179108900949721089UL,
2179953325879853057UL,
2181431069507584001UL,
2192127118622588929UL,
2192830806064365569UL,
2193041912296898561UL,
2195364080854761473UL,
2196208505784893441UL,
2196771455738314753UL,
2198319568110223361UL,
2198952886807822337UL,
2199163993040355329UL,
2200219524203020289UL,
2202893536481771521UL,
2205215705039634433UL,
2207819348574208001UL,
2209719304667004929UL,
2210985942062202881UL,
2211197048294735873UL,
2211548892015624193UL,
2212182210713223169UL,
2213308110620065793UL,
2218374660200857601UL,
2218937610154278913UL,
2220485722526187521UL,
2221048672479608833UL,
2221119041223786497UL,
2223863422246715393UL,
2224637478432669697UL,
2228085546897375233UL,
2231041034152837121UL,
2231181771641192449UL,
2232307671548035073UL,
2233363202710700033UL,
2233996521408299009UL,
2234418733873364993UL,
2234770577594253313UL,
2236459427454517249UL,
2237585327361359873UL,
2238640858524024833UL,
2239626020942512129UL,
2239837127175045121UL,
2241807452012019713UL,
2242651876942151681UL,
2243848145593171969UL,
2245818470430146561UL,
2246803632848633857UL,
2249618382615740417UL,
2251447969964359681UL,
2252081288661958657UL,
2252996082336268289UL,
2254051613498933249UL,
2258484844382126081UL,
2259540375544791041UL,
2260384800474923009UL,
2263269918986207233UL,
2263551393962917889UL,
2263692131451273217UL,
2264325450148872193UL,
2264818031358115841UL,
2265803193776603137UL,
2267140199915978753UL,
2269884580938907649UL,
2274669655542988801UL,
2276358505403252737UL,
2276569611635785729UL,
2277062192845029377UL,
2277273299077562369UL,
2278539936472760321UL,
2279595467635425281UL,
2280228786333024257UL,
2282762061123420161UL,
2285224967169638401UL,
2286561973309014017UL,
2287828610704211969UL,
2290502622982963201UL,
2290784097959673857UL,
2291839629122338817UL,
2292050735354871809UL,
2292613685308293121UL,
2293528478982602753UL,
2295780278796288001UL,
2297891341121617921UL,
2299650559726059521UL,
2300494984656191489UL,
2301972728283922433UL,
2308024440283201537UL,
2308094809027379201UL,
2310135502608531457UL,
2310557715073597441UL,
2311261402515374081UL,
2311613246236262401UL,
2312246564933861377UL,
2313583571073236993UL,
2314216889770835969UL,
2316046477119455233UL,
2316116845863632897UL,
2316539058328698881UL,
2317524220747186177UL,
2319846389305049089UL,
2320972289211891713UL,
2321324132932780033UL,
2321957451630379009UL,
2322027820374556673UL,
2322450032839622657UL,
2323505564002287617UL,
2324772201397485569UL,
2325546257583439873UL,
2327727688652947457UL,
2334483088094003201UL,
2335468250512490497UL,
2335890462977556481UL,
2336171937954267137UL,
2336734887907688449UL,
2336805256651866113UL,
2342223649953546241UL,
2344616187255586817UL,
2349471630603845633UL,
2353060436556906497UL,
2357915879905165313UL,
2358549198602764289UL,
2358901042323652609UL,
2359393623532896257UL,
2359604729765429249UL,
2362278742044180481UL,
2362771323253424129UL,
2362912060741779457UL,
2363334273206845441UL,
2363967591904444417UL,
2364249066881155073UL,
2367345291624972289UL,
2370160041392078849UL,
2371637785019809793UL,
2372411841205764097UL,
2375648803437936641UL,
2379659821856063489UL,
2380504246786195457UL,
2382544940367347713UL,
2384656002692677633UL,
2385993008832053249UL,
2387892964924850177UL,
2388878127343337473UL,
2390778083436134401UL,
2391411402133733377UL,
2391622508366266369UL,
2394789101854261249UL,
2396759426691235841UL,
2399011226504921089UL,
2399855651435053057UL,
2399926020179230721UL,
2401122288830251009UL,
2401192657574428673UL,
2401614870039494657UL,
2403655563620646913UL,
2403725932364824577UL,
2405766625945976833UL,
2405836994690154497UL,
2406048100922687489UL,
2409636906875748353UL,
2410270225573347329UL,
2411677600456900609UL,
2414633087712362497UL,
2414914562689073153UL,
2417658943712002049UL,
2417870049944535041UL,
2420192218502397953UL,
2420544062223286273UL,
2421388487153418241UL,
2421881068362661889UL,
2422936599525326849UL,
2423499549478748161UL,
2424414343153057793UL,
2426525405478387713UL,
2434265967337930753UL,
2434688179802996737UL,
2434969654779707393UL,
2437221454593392641UL,
2438136248267702273UL,
2438276985756057601UL,
2438769566965301249UL,
2439613991895433217UL,
2439825098127966209UL,
2440880629290631169UL,
2444469435243692033UL,
2446299022592311297UL,
2446510128824844289UL,
2446932341289910273UL,
2447002710034087937UL,
2450521147242971137UL,
2452209997103235073UL,
2452913684545011713UL,
2453054422033367041UL,
2453687740730966017UL,
2456924702963138561UL,
2457487652916559873UL,
2458332077846691841UL,
2460935721381265409UL,
2461780146311397377UL,
2462202358776463361UL,
2465298583520280577UL,
2465720795985346561UL,
2469731814403473409UL,
2471842876728803329UL,
2473742832821600257UL,
2474657626495909889UL,
2474868732728442881UL,
2475009470216798209UL,
2477613113751371777UL,
2478246432448970753UL,
2479231594867458049UL,
2479653807332524033UL,
2479935282309234689UL,
2482398188355452929UL,
2483242613285584897UL,
2483453719518117889UL,
2484509250680782849UL,
2485001831890026497UL,
2485986994308513793UL,
2488590637843087361UL,
2489857275238285313UL,
2491757231331082241UL,
2491968337563615233UL,
2492953499982102529UL,
2493023868726280193UL,
2493375712447168513UL,
2494923824819077121UL,
2497034887144407041UL,
2497386730865295361UL,
2497879312074539009UL,
2499357055702269953UL,
2499497793190625281UL,
2499708899423158273UL,
2501608855515955201UL,
2504564342771417089UL,
2504634711515594753UL,
2507730936259411969UL,
2507801305003589633UL,
2510334579793985537UL,
2511812323421716481UL,
2513219698305269761UL,
2513923385747046401UL,
2514134491979579393UL,
2516175185560731649UL,
2516386291793264641UL,
2518708460351127553UL,
2519341779048726529UL,
2522930585001787393UL,
2523000953745965057UL,
2527997134582579201UL,
2529052665745244161UL,
2533274790395904001UL,
2536722858860609537UL,
2536933965093142529UL,
2537074702581497857UL,
2537285808814030849UL,
2540522771046203393UL,
2541367195976335361UL,
2542633833371533313UL,
2543478258301665281UL,
2543618995790020609UL,
2545941164347883521UL,
2547489276719792129UL,
2547630014208147457UL,
2548896651603345409UL,
2549107757835878401UL,
2549600339045122049UL,
2550022551510188033UL,
2552133613835517953UL,
2554666888625913857UL,
2556074263509467137UL,
2557763113369731073UL,
2558818644532396033UL,
2560366756904304641UL,
2562266712997101569UL,
2563674087880654849UL,
2564166669089898497UL,
2565433306485096449UL,
2569444324903223297UL,
2570922068530954241UL,
2571133174763487233UL,
2571907230949441537UL,
2573173868344639489UL,
2573596080809705473UL,
2573666449553883137UL,
2575073824437436417UL,
2578240417925431297UL,
2578310786669608961UL,
2580773692715827201UL,
2582040330111025153UL,
2584151392436355073UL,
2585629136064086017UL,
2587106879691816961UL,
2593299329179451393UL,
2596254816434913281UL,
2599351041178730497UL,
2600265834853040129UL,
2601884315969126401UL,
2603150953364324353UL,
2603643534573568001UL,
2605754596898897921UL,
2606317546852319233UL,
2606810128061562881UL,
2608006396712583169UL,
2608076765456760833UL,
2609554509084491777UL,
2613776633735151617UL,
2619476502013542401UL,
2620320926943674369UL,
2620461664432029697UL,
2620672770664562689UL,
2623276414199136257UL,
2623628257920024577UL,
2625809688989532161UL,
2627217063873085441UL,
2627709645082329089UL,
2628272595035750401UL,
2629961444896014337UL,
2630383657361080321UL,
2631298451035389953UL,
2631720663500455937UL,
2632776194663120897UL,
2636365000616181761UL,
2636927950569603073UL,
2639672331592531969UL,
2641783393917861889UL,
2642698187592171521UL,
2645442568615100417UL,
2647553630940430337UL,
2647905474661318657UL,
2649172112056516609UL,
2649594324521582593UL,
2650438749451714561UL,
2653605342939709441UL,
2654871980334907393UL,
2655153455311618049UL,
2657616361357836289UL,
2659094104985567233UL,
2659586686194810881UL,
2659797792427343873UL,
2663738442101293057UL,
2664653235775602689UL,
2669719785356394497UL,
2671338266472480769UL,
2672604903867678721UL,
2677460347215937537UL,
2681260259401531393UL,
2683371321726861313UL,
2685130540331302913UL,
2686608283959033857UL,
2689282296237785089UL,
2690830408609693697UL,
2691252621074759681UL,
2691463727307292673UL,
2696037695678840833UL,
2697937651771637761UL,
2699837607864434689UL,
2700963507771277313UL,
2701807932701409281UL,
2706170794840424449UL,
2706663376049668097UL,
2707226326003089409UL,
2713207669258190849UL,
2713629881723256833UL,
2713981725444145153UL,
2715107625350987777UL,
2716726106467074049UL,
2717852006373916673UL,
2719329750001647617UL,
2721370443582799873UL,
2725029618280038401UL,
2725240724512571393UL,
2726296255675236353UL,
2729040636698165249UL,
2729392480419053569UL,
2730940592790962177UL,
2731503542744383489UL,
2732418336418693121UL,
2732629442651226113UL,
2733684973813891073UL,
2734740504976556033UL,
2737836729720373249UL,
2738540417162149889UL,
2738681154650505217UL,
2739384842092281857UL,
2741847748138500097UL,
2743536597998764033UL,
2744592129161428993UL,
2746280979021692929UL,
2746984666463469569UL,
2747195772696002561UL,
2748392041347022849UL,
2749447572509687809UL,
2749517941253865473UL,
2752051216044261377UL,
2752403059765149697UL,
2752684534741860353UL,
2753106747206926337UL,
2754795597067190273UL,
2755428915764789249UL,
2755640021997322241UL,
2757751084322652161UL,
2759791777903804417UL,
2760213990368870401UL,
2763873165066108929UL,
2768658239670190081UL,
2770206352042098689UL,
2771402620693118977UL,
2772739626832494593UL,
2773584051762626561UL,
2774850689157824513UL,
2776680276506443777UL,
2777595070180753409UL,
2779213551296839681UL,
2780902401157103617UL,
2781957932319768577UL,
2782028301063946241UL,
2783224569714966529UL,
2784491207110164481UL,
2785406000784474113UL,
2790472550365265921UL,
2790824394086154241UL,
2793568775109083137UL,
2803701874270666753UL,
2805883305340174337UL,
2806657361526128641UL,
2807712892688793601UL,
2809612848781590529UL,
2809823955014123521UL,
2812638704781230081UL,
2812779442269585409UL,
2814679398362382337UL,
2818479310547976193UL,
2823545860128768001UL,
2824249547570544641UL,
2825868028686630913UL,
2826360609895874561UL,
2829316097151336449UL,
2830160522081468417UL,
2831779003197554689UL,
2832201215662620673UL,
2834382646732128257UL,
2834945596685549569UL,
2838534402638610433UL,
2840223252498874369UL,
2844937958358777857UL,
2845149064591310849UL,
2845500908312199169UL,
2846767545707397121UL,
2848878608032727041UL,
2849582295474503681UL,
2850637826637168641UL,
2850989670358056961UL,
2853100732683386881UL,
2855071057520361473UL,
2857322857334046721UL,
2859293182171021313UL,
2860348713333686273UL,
2860489450822041601UL,
2860982032031285249UL,
2861756088217239553UL,
2862037563193950209UL,
2864148625519280129UL,
2866611531565498369UL,
2867667062728163329UL,
2867878168960696321UL,
2869215175100071937UL,
2869778125053493249UL,
2870270706262736897UL,
2874844674634285057UL,
2879700117982543873UL,
2880122330447609857UL,
2885822198726000641UL,
2886525886167777281UL,
2892859073143767041UL,
2894266448027320321UL,
2894477554259853313UL,
2894547923004030977UL,
2897221935282782209UL,
2897433041515315201UL,
2898981153887223809UL,
2901936641142685697UL,
2903625491002949633UL,
2908832778072096769UL,
2909958677978939393UL,
2910803102909071361UL,
2913547483932000257UL,
2915236333792264193UL,
2918543664768614401UL,
2919036245977858049UL,
2922765789419274241UL,
2924102795558649857UL,
2924454639279538177UL,
2925510170442203137UL,
2926424964116512769UL,
2930013770069573633UL,
2930787826255527937UL,
2931913726162370561UL,
2933109994813390849UL,
2936346957045563393UL,
2937332119464050689UL,
2937402488208228353UL,
2937543225696583681UL,
2938387650626715649UL,
2939091338068492289UL,
2939232075556847617UL,
2940569081696223233UL,
2940709819184578561UL,
2943102356486619137UL,
2945424525044482049UL,
2947957799834877953UL,
2948942962253365249UL,
2949154068485898241UL,
2951546605787938817UL,
2954079880578334721UL,
2956402049136197633UL,
2957035367833796609UL,
2957809424019750913UL,
2959709380112547841UL,
2961468598716989441UL,
2962524129879654401UL,
2965198142158405633UL,
2966324042065248257UL,
2966675885786136577UL,
2966957360762847233UL,
2967098098251202561UL,
2967590679460446209UL,
2970264691739197441UL,
2972235016576172033UL,
2973079441506304001UL,
2974134972668968961UL,
2977512672389496833UL,
2980045947179892737UL,
2980397790900781057UL,
2981875534528512001UL,
2982719959458643969UL,
2982931065691176961UL,
2984831021783973889UL,
2985323602993217537UL,
2987364296574369793UL,
2989123515178811393UL,
2992712321131872257UL,
2994401170992136193UL,
2996301127084933121UL,
2997989976945197057UL,
3003830582711943169UL,
3005589801316384769UL,
3009108238525267969UL,
3010023032199577601UL,
3010234138432110593UL,
3010585982152998913UL,
3013541469408460801UL,
3015230319268724737UL,
3017200644105699329UL,
3023322724849156097UL,
3024589362244354049UL,
3025996737127907329UL,
3026911530802216961UL,
3028952224383369217UL,
3029163330615902209UL,
3031274392941232129UL,
3031485499173765121UL,
3032822505313140737UL,
3034863198894292993UL,
3034933567638470657UL,
3035144673871003649UL,
3036622417498734593UL,
3037677948661399553UL,
3038311267358998529UL,
3038733479824064513UL,
3040211223451795457UL,
3041266754614460417UL,
3042251917032947713UL,
3045699985497653249UL,
3055340503449993217UL,
3059984840565719041UL,
3060688528007495681UL,
3062799590332825601UL,
3064699546425622529UL,
3067162452471840769UL,
3067655033681084417UL,
3068077246146150401UL,
3068429089867038721UL,
3070117939727302657UL,
3070821627169079297UL,
3071384577122500609UL,
3072299370796810241UL,
3072862320750231553UL,
3073354901959475201UL,
3074551170610495489UL,
3074762276843028481UL,
3075677070517338113UL,
3076028914238226433UL,
3077506657865957377UL,
3077788132842668033UL,
3079265876470398977UL,
3084050951074480129UL,
3087006438329942017UL,
3088273075725139969UL,
3088765656934383617UL,
3089398975631982593UL,
3089539713120337921UL,
3090384138050469889UL,
3094043312747708417UL,
3095028475166195713UL,
3096154375073038337UL,
3096365481305571329UL,
3096717325026459649UL,
3097843224933302273UL,
3100376499723698177UL,
3101150555909652481UL,
3102909774514094081UL,
3104106043165114369UL,
3104598624374358017UL,
3105865261769555969UL,
3110509598885281793UL,
3110650336373637121UL,
3112972504931500033UL,
3113042873675677697UL,
3114028036094164993UL,
3121064910511931393UL,
3122261179162951681UL,
3123809291534860289UL,
3125005560185880577UL,
3125216666418413569UL,
3127538834976276481UL,
3128172153673875457UL,
3128805472371474433UL,
3129438791069073409UL,
3130494322231738369UL,
3131198009673515009UL,
3132394278324535297UL,
3136686771719372801UL,
3140838527625854977UL,
3141964427532697601UL,
3144919914788159489UL,
3145131021020692481UL,
3145975445950824449UL,
3147875402043621377UL,
3148930933206286337UL,
3155264120182276097UL,
3157938132461027329UL,
3158993663623692289UL,
3159838088553824257UL,
3159908457298001921UL,
3161175094693199873UL,
3161526938414088193UL,
3163426894506885121UL,
3163919475716128769UL,
3169760081482874881UL,
3173559993668468737UL,
3174193312366067713UL,
3174263681110245377UL,
3175671055993798657UL,
3176937693388996609UL,
3177782118319128577UL,
3177993224551661569UL,
3178415437016727553UL,
3179752443156103169UL,
3181230186783834113UL,
3182707930411565057UL,
3187915217480712193UL,
3188548536178311169UL,
3193826191991635969UL,
3195937254316965889UL,
3198963110316605441UL,
3201074172641935361UL,
3201637122595356673UL,
3202340810037133313UL,
3203114866223087617UL,
3203818553664864257UL,
3205085191060062209UL,
3205648141013483521UL,
3207196253385392129UL,
3208673997013123073UL,
3210151740640854017UL,
3210714690594275329UL,
3210785059338452993UL,
3211629484268584961UL,
3212614646687072257UL,
3213740546593914881UL,
3214936815244935169UL,
3215429396454178817UL,
3215640502686711809UL,
3218103408732930049UL,
3223873645755498497UL,
3224295858220564481UL,
3225492126871584769UL,
3228729089103757313UL,
3229362407801356289UL,
3229503145289711617UL,
3230136463987310593UL,
3230206832731488257UL,
3230629045196554241UL,
3231473470126686209UL,
3233795638684549121UL,
3234851169847214081UL,
3236047438498234369UL,
3238580713288630273UL,
3239284400730406913UL,
3240691775613960193UL,
3240973250590670849UL,
3241817675520802817UL,
3243225050404356097UL,
3243647262869422081UL,
3246462012636528641UL,
3248080493752614913UL,
3249558237380345857UL,
3250473031054655489UL,
3251880405938208769UL,
3253991468263538689UL,
3254413680728604673UL,
3254906261937848321UL,
3256595111798112257UL,
3256806218030645249UL,
3257228430495711233UL,
3259058017844330497UL,
3260535761472061441UL,
3262646823797391361UL,
3263491248727523329UL,
3268205954587426817UL,
3271091073098711041UL,
3271302179331244033UL,
3274116929098350593UL,
3274257666586705921UL,
3275946516446969857UL,
3276016885191147521UL,
3276650203888746497UL,
3277213153842167809UL,
3277283522586345473UL,
3282561178399670273UL,
3284601871980822529UL,
3285446296910954497UL,
3286361090585264129UL,
3287979571701350401UL,
3288823996631482369UL,
3289879527794147329UL,
3290372109003390977UL,
3292905383793786881UL,
3296283083514314753UL,
3297479352165335041UL,
3297690458397868033UL,
3302405164257771521UL,
3303671801652969473UL,
3304727332815634433UL,
3306838395140964353UL,
3308245770024517633UL,
3308949457466294273UL,
3309090194954649601UL,
3312960475884421121UL,
3313945638302908417UL,
3317112231790903297UL,
3319293662860410881UL,
3323023206301827073UL,
3323093575046004737UL,
3324360212441202689UL,
3326471274766532609UL,
3327526805929197569UL,
3327878649650085889UL,
3328300862115151873UL,
3330904505649725441UL,
3333578517928476673UL,
3335126630300385281UL,
3339348754951045121UL,
3340193179881177089UL,
3340756129834598401UL,
3343500510857527297UL,
3343922723322593281UL,
3344415304531836929UL,
3345259729461968897UL,
3351944760158846977UL,
3352648447600623617UL,
3354126191228354561UL,
3354337297460887553UL,
3356026147321151489UL,
3356800203507105793UL,
3357433522204704769UL,
3359192740809146369UL,
3361022328157765633UL,
3361866753087897601UL,
3363133390483095553UL,
3363203759227273217UL,
3363837077924872193UL,
3364892609087537153UL,
3365877771506024449UL,
3366088877738557441UL,
3366581458947801089UL,
3366722196436156417UL,
3370170264900861953UL,
3371859114761125889UL,
3374322020807344129UL,
3375025708249120769UL,
3375447920714186753UL,
3377699720527872001UL,
3378544145458003969UL,
3379247832899780609UL,
3379388570388135937UL,
3380514470294978561UL,
3382977376341196801UL,
3383892170015506433UL,
3384314382480572417UL,
3385792126108303361UL,
3387480975968567297UL,
3387832819689455617UL,
3387903188433633281UL,
3388888350852120577UL,
3392266050572648449UL,
3393743794200379393UL,
3393814162944557057UL,
3395291906572288001UL,
3395503012804820993UL,
3395854856525709313UL,
3397965918851039233UL,
3401132512339034113UL,
3403736155873607681UL,
3405636111966404609UL,
3407254593082490881UL,
3407465699315023873UL,
3407536068059201537UL,
3409576761640353793UL,
3410421186570485761UL,
3411054505268084737UL,
3412391511407460353UL,
3413587780058480641UL,
3416613636058120193UL,
3416965479779008513UL,
3418865435871805441UL,
3419076542104338433UL,
3420554285732069377UL,
3422032029359800321UL,
3424354197917663233UL,
3425057885359439873UL,
3428154110103257089UL,
3431320703591251969UL,
3434346559590891521UL,
3436035409451155457UL,
3438076103032307713UL,
3438709421729906689UL,
3439764952892571649UL,
3441664908985368577UL,
3441946383962079233UL,
3442720440148033537UL,
3444479658752475137UL,
3445253714938429441UL,
3448912889635667969UL,
3451586901914419201UL,
3452431326844551169UL,
3452642433077084161UL,
3454331282937348097UL,
3454753495402414081UL,
3456020132797612033UL,
3457568245169520641UL,
3459186726285606913UL,
3460312626192449537UL,
3463690325912977409UL,
3464253275866398721UL,
3467068025633505281UL,
3467630975586926593UL,
3468334663028703233UL,
3471853100237586433UL,
3473964162562916353UL,
3474597481260515329UL,
3475723381167357953UL,
3476145593632423937UL,
3477552968515977217UL,
3477975180981043201UL,
3480719562003972097UL,
3481001036980682753UL,
3481986199399170049UL,
3482689886840946689UL,
3483112099306012673UL,
3487123117724139521UL,
3488530492607692801UL,
3488811967584403457UL,
3492541511025819649UL,
3497256216885723137UL,
3497819166839144449UL,
3498874698001809409UL,
3498945066745987073UL,
3499578385443586049UL,
3499789491676119041UL,
3501056129071316993UL,
3501407972792205313UL,
3501830185257271297UL,
3501900554001448961UL,
3502111660233981953UL,
3503096822652469249UL,
3504011616326778881UL,
3504152353815134209UL,
3504644935024377857UL,
3506263416140464129UL,
3506685628605530113UL,
3506967103582240769UL,
3510274434558590977UL,
3510485540791123969UL,
3510907753256189953UL,
3512385496883920897UL,
3512596603116453889UL,
3517663152697245697UL,
3518577946371555329UL,
3519000158836621313UL,
3520407533720174593UL,
3520477902464352257UL,
3520900114929418241UL,
3524277814649946113UL,
3524911133347545089UL,
3525755558277677057UL,
3525966664510210049UL,
3526811089440342017UL,
3528922151765671937UL,
3529696207951626241UL,
3533144276416331777UL,
3535818288695083009UL,
3537296032322813953UL,
3537366401066991617UL,
3537718244787879937UL,
3544755119205646337UL,
3547218025251864577UL,
3548484662647062529UL,
3549329087577194497UL,
3549540193809727489UL,
3549610562553905153UL,
3550595724972392449UL,
3550806831204925441UL,
3552354943576834049UL,
3555873380785717249UL,
3558899236785356801UL,
3559039974273712129UL,
3562276936505884673UL,
3562699148970950657UL,
3566076848691478529UL,
3566217586179833857UL,
3566287954924011521UL,
3569665654644539393UL,
3570861923295559681UL,
3572832248132534273UL,
3575928472876351489UL,
3576139579108884481UL,
3579939491294478337UL,
3581628341154742273UL,
3586343047014645761UL,
3586483784503001089UL,
3588031896874909697UL,
3589017059293396993UL,
3589439271758462977UL,
3590705909153660929UL,
3591409596595437569UL,
3591831809060503553UL,
3596194671199518721UL,
3597742783571427329UL,
3597953889803960321UL,
3599220527199158273UL,
3599572370920046593UL,
3603372283105640449UL,
3603794495570706433UL,
3607805513988833281UL,
3608509201430609921UL,
3608720307663142913UL,
3609775838825807873UL,
3611183213709361153UL,
3612660957337092097UL,
3613364644778868737UL,
3621105206638411777UL,
3622371844033609729UL,
3622864425242853377UL,
3624482906358939649UL,
3624905118824005633UL,
3626382862451736577UL,
3627297656126046209UL,
3627438393614401537UL,
3631941993241772033UL,
3634827111753056257UL,
3638275180217761793UL,
3639119605147893761UL,
3640175136310558721UL,
3640738086263980033UL,
3644960210914639873UL,
3645593529612238849UL,
3647071273239969793UL,
3647704591937568769UL,
3648619385611878401UL,
3649182335565299713UL,
3649674916774543361UL,
3650941554169741313UL,
3652137822820761601UL,
3652982247750893569UL,
3653052616495071233UL,
3654037778913558529UL,
3656008103750533121UL,
3656852528680665089UL,
3658682116029284353UL,
3661215390819680257UL,
3663959771842609153UL,
3666915259098071041UL,
3670363327562776577UL,
3675007664678502401UL,
3677118727003832321UL,
3681551957887025153UL,
3681692695375380481UL,
3682959332770578433UL,
3684648182630842369UL,
3685140763840086017UL,
3685351870072619009UL,
3686759244956172289UL,
3688236988583903233UL,
3688518463560613889UL,
3690770263374299137UL,
3696259025420156929UL,
3705195855930720257UL,
3708995768116314113UL,
3710403142999867393UL,
3713147524022796289UL,
3715680798813192193UL,
3718284442347765761UL,
3718495548580298753UL,
3719480710998786049UL,
3722436198254247937UL,
3725250948021354497UL,
3726306479184019457UL,
3727362010346684417UL,
3728628647741882369UL,
3730106391369613313UL,
3731091553788100609UL,
3732639666160009217UL,
3733202616113430529UL,
3736158103368892417UL,
3736369209601425409UL,
3736580315833958401UL,
3742702396577415169UL,
3742772765321592833UL,
3743194977786658817UL,
3744602352670212097UL,
3751568858343800833UL,
3753328076948242433UL,
3753961395645841409UL,
3755228033041039361UL,
3757972414063968257UL,
3758746470249922561UL,
3759802001412587521UL,
3760294582621831169UL,
3761772326249562113UL,
3762968594900582401UL,
3763250069877293057UL,
3763813019830714369UL,
3764868550993379329UL,
3765290763458445313UL,
3766346294621110273UL,
3767824038248841217UL,
3770005469318348801UL,
3774016487736475649UL,
3775212756387495937UL,
3776127550061805569UL,
3777183081224470529UL,
3777605293689536513UL,
3778238612387135489UL,
3778449718619668481UL,
3779012668573089793UL,
3781827418340196353UL,
3782601474526150657UL,
3787245811641876481UL,
3789216136478851073UL,
3789849455176450049UL,
3790271667641516033UL,
3793156786152800257UL,
3793227154896977921UL,
3795338217222307841UL,
3797449279547637761UL,
3802304722895896577UL,
3803993572756160513UL,
3805189841407180801UL,
3806104635081490433UL,
3806737953779089409UL,
3807582378709221377UL,
3808145328662642689UL,
3812860034522546177UL,
3814900728103698433UL,
3818348796568403969UL,
3821233915079688193UL,
3821304283823865857UL,
3822359814986530817UL,
3822782027451596801UL,
3823767189870084097UL,
3830733695543672833UL,
3832633651636469761UL,
3836715038798774273UL,
3841711219635388417UL,
3842414907077165057UL,
3844244494425784321UL,
3844877813123383297UL,
3846214819262758913UL,
3847199981681246209UL,
3848466619076444161UL,
3849522150239109121UL,
3850436943913418753UL,
3850788787634307073UL,
3851492475076083713UL,
3851633212564439041UL,
3852336900006215681UL,
3855433124750032897UL,
3857192343354474497UL,
3857755293307895809UL,
3858177505772961793UL,
3858810824470560769UL,
3861344099260956673UL,
3865355117679083521UL,
3866410648841748481UL,
3869788348562276353UL,
3870280929771520001UL,
3871266092190007297UL,
3872321623352672257UL,
3874080841957113857UL,
3875066004375601153UL,
3875488216840667137UL,
3875558585584844801UL,
3876191904282443777UL,
3881469560095768577UL,
3885058366048829441UL,
3889210121955311617UL,
3893502615350149121UL,
3894347040280281089UL,
3894487777768636417UL,
3895191465210413057UL,
3896669208838144001UL,
3901102439721336833UL,
3904620876930220033UL,
3905465301860352001UL,
3906520833023016961UL,
3908913370325057537UL,
3911587382603808769UL,
3912009595068874753UL,
3912642913766473729UL,
3913557707440783361UL,
3914191026138382337UL,
3917568725858910209UL,
3918764994509930497UL,
3920453844370194433UL,
3923057487904768001UL,
3928898093671514113UL,
3932698005857107969UL,
3933612799531417601UL,
3935301649391681537UL,
3936568286786879489UL,
3937131236740300801UL,
3938679349112209409UL,
3939453405298163713UL,
3940790411437539329UL,
3941212623902605313UL,
3943675529948823553UL,
3943745898693001217UL,
3944097742413889537UL,
3944731061111488513UL,
3945364379809087489UL,
3945856961018331137UL,
3948530973297082369UL,
3949586504459747329UL,
3952612360459386881UL,
3953878997854584833UL,
3954019735342940161UL,
3955919691435737089UL,
3956341903900803073UL,
3962463984644259841UL,
3966334265574031361UL,
3967530534225051649UL,
3971541552643178497UL,
3971823027619889153UL,
3972808190038376449UL,
3974989621107884033UL,
3976045152270548993UL,
3976396995991437313UL,
3977452527154102273UL,
3980408014409564161UL,
3982519076734894081UL,
3984419032827691009UL,
3984630139060224001UL,
3986600463897198593UL,
3986952307618086913UL,
3992652175896477697UL,
3995466925663584257UL,
3998140937942335489UL,
3998211306686513153UL,
4000252000267665409UL,
4001307531430330369UL,
4001377900174508033UL,
4002151956360462337UL,
4002222325104640001UL,
4004263018685792257UL,
4005740762313523201UL,
4008062930871386113UL,
4009962886964183041UL,
4010455468173426689UL,
4010877680638492673UL,
4011651736824446977UL,
4012566530498756609UL,
4016084967707639809UL,
4016507180172705793UL,
4017562711335370753UL,
4017633080079548417UL,
4018618242498035713UL,
4019110823707279361UL,
4020729304823365633UL,
4020799673567543297UL,
4021362623520964609UL,
4022488523427807233UL,
4023262579613761537UL,
4023473685846294529UL,
4025232904450736129UL,
4027484704264421377UL,
4028188391706198017UL,
4028821710403796993UL,
4028962447892152321UL,
4029173554124685313UL,
4030721666496593921UL,
4035084528635609089UL,
4035154897379786753UL,
4036140059798274049UL,
4036843747240050689UL,
4038110384635248641UL,
4039728865751334913UL,
4040432553193111553UL,
4044232465378705409UL,
4045006521564659713UL,
4045076890308837377UL,
4048173115052654593UL,
4050776758587228161UL,
4052043395982426113UL,
4057321051795750913UL,
4059009901656014849UL,
4059783957841969153UL,
4060909857748811777UL,
4061683913934766081UL,
4062950551329964033UL,
4063794976260096001UL,
4066398619794669569UL,
4073154019235725313UL,
4074983606584344577UL,
4077165037653852161UL,
4078853887514116097UL,
4079487206211715073UL,
4079839049932603393UL,
4080964949839446017UL,
4083427855885664257UL,
4087227768071258113UL,
4090042517838364673UL,
4090816574024318977UL,
4093138742582181889UL,
4093842430023958529UL,
4096375704814354433UL,
4097149761000308737UL,
4097220129744486401UL,
4098064554674618369UL,
4098838610860572673UL,
4100386723232481281UL,
4101582991883501569UL,
4103060735511232513UL,
4104538479138963457UL,
4104819954115674113UL,
4106297697743405057UL,
4108619866301267969UL,
4111504984812552193UL,
4111575353556729857UL,
4111927197277618177UL,
4114038259602948097UL,
4115093790765613057UL,
4116571534393344001UL,
4117064115602587649UL,
4120441815323115521UL,
4121708452718313473UL,
4125226889927196673UL,
4126282421089861633UL,
4126986108531638273UL,
4130152702019633153UL,
4131208233182298113UL,
4134304457926115329UL,
4136485888995622913UL,
4136837732716511233UL,
4137471051414110209UL,
4138596951320952833UL,
4140496907413749761UL,
4141059857367171073UL,
4141482069832237057UL,
4144226450855165953UL,
4144859769552764929UL,
4144930138296942593UL,
4145070875785297921UL,
4146407881924673537UL,
4147885625552404481UL,
4148870787970891777UL,
4148941156715069441UL,
4151404062761287681UL,
4153726231319150593UL,
4154429918760927233UL,
4155907662388658177UL,
4156470612342079489UL,
4157174299783856129UL,
4157315037272211457UL,
4158440937179054081UL,
4159496468341719041UL,
4160763105736916993UL,
4162874168062246913UL,
4164703755410866177UL,
4164914861643399169UL,
4168081455131394049UL,
4168292561363927041UL,
4168996248805703681UL,
4169629567503302657UL,
4173570217177251841UL,
4174485010851561473UL,
4175962754479292417UL,
4176736810665246721UL,
4177018285641957377UL,
4178073816804622337UL,
4179129347967287297UL,
4179340454199820289UL,
4186095853640876033UL,
4192429040616865793UL,
4193414203035353089UL,
4193906784244596737UL,
4196369690290814977UL,
4201647346104139777UL,
4201717714848317441UL,
4203125089731870721UL,
4204462095871246337UL,
4205447258289733633UL,
4206080576987332609UL,
4209106432986972161UL,
4211006389079769089UL,
4211569339033190401UL,
4212413763963322369UL,
4213328557637632001UL,
4215017407497895937UL,
4217128469823225857UL,
4217550682288291841UL,
4217902526009180161UL,
4219872850846154753UL,
4220013588334510081UL,
4220506169543753729UL,
4220928382008819713UL,
4222335756892372993UL,
4223039444334149633UL,
4224517187961880577UL,
4226206037822144513UL,
4226628250287210497UL,
4227191200240631809UL,
4228457837635829761UL,
4231061481170403329UL,
4231272587402936321UL,
4234016968425865217UL,
4234579918379286529UL,
4234791024611819521UL,
4238802043029946369UL,
4240279786657677313UL,
4240913105355276289UL,
4240983474099453953UL,
4242390848983007233UL,
4245205598750113793UL,
4247457398563799041UL,
4248161086005575681UL,
4249779567121661953UL,
4250272148330905601UL,
4251116573261037569UL,
4254494272981565441UL,
4254705379214098433UL,
4256534966562717697UL,
4257449760237027329UL,
4258857135120580609UL,
4258927503864758273UL,
4259701560050712577UL,
4261179303678443521UL,
4262938522282885121UL,
4264627372143149057UL,
4264838478375682049UL,
4266668065724301313UL,
4267371753166077953UL,
4269271709258874881UL,
4270256871677362177UL,
4271171665351671809UL,
4275393790002331649UL,
4276167846188285953UL,
4276590058653351937UL,
4277927064792727553UL,
4279334439676280833UL,
4281445502001610753UL,
4281938083210854401UL,
4282289926931742721UL,
4284260251768717313UL,
4284400989257072641UL,
4286089839117336577UL,
4290382332512174081UL,
4291437863674839041UL,
4291648969907372033UL,
4295448882092965889UL,
4295871094558031873UL,
4296856256976519169UL,
4298615475580960769UL,
4299037688046026753UL,
4299671006743625729UL,
4300726537906290689UL,
4302204281534021633UL,
4305793087487082497UL,
4306004193719615489UL,
4313111436881559553UL,
4315292867951067137UL,
4316981717811331073UL,
4325355598368473089UL,
4326481498275315713UL,
4327114816972914689UL,
4329366616786599937UL,
4329577723019132929UL,
4330844360414330881UL,
4331055466646863873UL,
4331336941623574529UL,
4335347960041701377UL,
4335770172506767361UL,
4336122016227655681UL,
4337036809901965313UL,
4337810866087919617UL,
4338514553529696257UL,
4339570084692361217UL,
4341399672040980481UL,
4344847740505686017UL,
4345410690459107329UL,
4345621796691640321UL,
4345832902924173313UL,
4346677327854305281UL,
4347381015296081921UL,
4349421708877234177UL,
4350899452504965121UL,
4351954983667630081UL,
4352236458644340737UL,
4353925308504604673UL,
4355403052132335617UL,
4357443745713487873UL,
4359202964317929473UL,
4359977020503883777UL,
4361102920410726401UL,
4361243657899081729UL,
4366169469991518209UL,
4368632376037736449UL,
4369124957246980097UL,
4372010075758264321UL,
4374121138083594241UL,
4375880356688035841UL,
4378554368966787073UL,
4379891375106162689UL,
4380946906268827649UL,
4381158012501360641UL,
4384113499756822529UL,
4384254237245177857UL,
4384535712221888513UL,
4384957924686954497UL,
4385943087105441793UL,
4388476361895837697UL,
4390446686732812289UL,
4390657792965345281UL,
4391291111662944257UL,
4392909592779030529UL,
4393824386453340161UL,
4395231761336893441UL,
4396920611197157377UL,
4398187248592355329UL,
4399031673522487297UL,
4400298310917685249UL,
4400720523382751233UL,
4402057529522126849UL,
4408531453986471937UL,
4408953666451537921UL,
4411064728776867841UL,
4415920172125126657UL,
4417046072031969281UL,
4417890496962101249UL,
4418946028124766209UL,
4420423771752497153UL,
4428656914821283841UL,
4429219864774705153UL,
4430767977146613761UL,
4431330927100035073UL,
4434075308122963969UL,
4437030795378425857UL,
4437241901610958849UL,
4438156695285268481UL,
4442167713703395329UL,
4445475044679745537UL,
4446108363377344513UL,
4451878600399912961UL,
4453497081515999233UL,
4454974825143730177UL,
4455045193887907841UL,
4455397037608796161UL,
4458352524864258049UL,
4459196949794390017UL,
4459267318538567681UL,
4463278336956694529UL,
4463419074445049857UL,
4464333868119359489UL,
4465107924305313793UL,
4468555992770019329UL,
4469611523932684289UL,
4471511480025481217UL,
4472074429978902529UL,
4475029917234364417UL,
4475100285978542081UL,
4478196510722359297UL,
4479955729326800897UL,
4480307573047689217UL,
4480518679280222209UL,
4481644579187064833UL,
4483544535279861761UL,
4486218547558612993UL,
4487274078721277953UL,
4487766659930521601UL,
4488962928581541889UL,
4489385141046607873UL,
4491777678348648449UL,
4494310953139044353UL,
4494733165604110337UL,
4495155378069176321UL,
4497266440394506241UL,
4498110865324638209UL,
4498321971557171201UL,
4499518240208191489UL,
4500221927649968129UL,
4500644140115034113UL,
4501699671277699073UL,
4501840408766054401UL,
4505288477230759937UL,
4509510601881419777UL,
4512606826625236993UL,
4514154938997145601UL,
4514366045229678593UL,
4514788257694744577UL,
4515562313880698881UL,
4522528819554287617UL,
4522739925786820609UL,
4524639881879617537UL,
4525906519274815489UL,
4526610206716592129UL,
4526750944204947457UL,
4529073112762810369UL,
4530550856390541313UL,
4531254543832317953UL,
4531395281320673281UL,
4532310074994982913UL,
4537517362064130049UL,
4538572893226795009UL,
4539276580668571649UL,
4540472849319591937UL,
4545117186435317761UL,
4545820873877094401UL,
4546383823830515713UL,
4549620786062688257UL,
4550394842248642561UL,
4551028160946241537UL,
4551942954620551169UL,
4553350329504104449UL,
4554405860666769409UL,
4555250285596901377UL,
4555531760573612033UL,
4557994666619830273UL,
4558627985317429249UL,
4559120566526672897UL,
4559683516480094209UL,
4559753885224271873UL,
4563061216200622081UL,
4566227809688616961UL,
4571505465501941761UL,
4573616527827271681UL,
4573898002803982337UL,
4574460952757403649UL,
4576220171361845249UL,
4580794139733393409UL,
4582975570802900993UL,
4585508845593296897UL,
4591842032569286657UL,
4592475351266885633UL,
4595360469778169857UL,
4596275263452479489UL,
4596416000940834817UL,
4599652963173007361UL,
4601552919265804289UL,
4604226931544555521UL,
4605071356474687489UL,
4605986150148997121UL,
4610208274799656961UL,
4611615649683210241UL,
4612952655822585857UL,
4614008186985250817UL,
4615063718147915777UL,
4615274824380448769UL,
4617526624194134017UL,
4617948836659200001UL,
4619848792751996929UL,
4622452436286570497UL,
4622804280007458817UL,
4623719073681768449UL,
4625126448565321729UL,
4630615210611179521UL,
4632163322983088129UL,
4632585535448154113UL,
4633218854145753089UL,
4639692778610098177UL,
4640748309772763137UL,
4642014947167961089UL,
4642718634609737729UL,
4645603753121021953UL,
4648770346609016833UL,
4650459196469280769UL,
4651373990143590401UL,
4651514727631945729UL,
4652781365027143681UL,
4653836896189808641UL,
4654751689864118273UL,
4655173902329184257UL,
4656862752189448193UL,
4659607133212377089UL,
4659747870700732417UL,
4661225614328463361UL,
4662070039258595329UL,
4662140408002772993UL,
4662281145491128321UL,
4663195939165437953UL,
4663547782886326273UL,
4665236632746590209UL,
4665307001490767873UL,
4666503270141788161UL,
4666784745118498817UL,
4670936501024980993UL,
4671217976001691649UL,
4671429082234224641UL,
4671640188466757633UL,
4671780925955112961UL,
4673047563350310913UL,
4676003050605772801UL,
4678958537861234689UL,
4679380750326300673UL,
4680506650233143297UL,
4682969556279361537UL,
4683391768744427521UL,
4684025087442026497UL,
4687050943441666049UL,
4687824999627620353UL,
4692469336743346177UL,
4693806342882721793UL,
4694580399068676097UL,
4695917405208051713UL,
4700069161114533889UL,
4700139529858711553UL,
4700561742323777537UL,
4703306123346706433UL,
4703939442044305409UL,
4704713498230259713UL,
4707528247997366273UL,
4708724516648386561UL,
4710413366508650497UL,
4711539266415493121UL,
4713579959996645377UL,
4715550284833619969UL,
4716113234787041281UL,
4716816922228817921UL,
4718716878321614849UL,
4719772409484279809UL,
4719913146972635137UL,
4721039046879477761UL,
4721250153112010753UL,
4722235315530498049UL,
4723290846693163009UL,
4724838959065071617UL,
4727724077576355841UL,
4728427765018132481UL,
4729624033669152769UL,
4730327721110929409UL,
4732649889668792321UL,
4733283208366391297UL,
4736168326877675521UL,
4737083120551985153UL,
4737223858040340481UL,
4738560864179716097UL,
4739616395342381057UL,
4740249714039980033UL,
4740601557760868353UL,
4741234876458467329UL,
4743134832551264257UL,
4744049626225573889UL,
4746371794783436801UL,
4747990275899523073UL,
4748271750876233729UL,
4748623594597122049UL,
4750945763154984961UL,
4755660469014888449UL,
4756716000177553409UL,
4757982637572751361UL,
4758615956270350337UL,
4759601118688837633UL,
4761078862316568577UL,
4765371355711406081UL,
4766778730594959361UL,
4768678686687756289UL,
4771493436454862849UL,
4772056386408284161UL,
4772900811338416129UL,
4772971180082593793UL,
4773393392547659777UL,
4777545148454141953UL,
4777967360919207937UL,
4780782110686314497UL,
4782822804267466753UL,
4784722760360263681UL,
4785567185290395649UL,
4786059766499639297UL,
4789789309941055489UL,
4791267053568786433UL,
4793800328359182337UL,
4794081803335892993UL,
4794855859521847297UL,
4796122496917045249UL,
4797389134312243201UL,
4797600240544776193UL,
4798655771707441153UL,
4801048309009481729UL,
4801189046497837057UL,
4801259415242014721UL,
4802948265102278657UL,
4803581583799877633UL,
4804777852450897921UL,
4805411171148496897UL,
4807944445938892801UL,
4808225920915603457UL,
4812659151798796289UL,
4812870258031329281UL,
4814910951612481537UL,
4815544270310080513UL,
4815614639054258177UL,
4816881276449456129UL,
4818781232542253057UL,
4820399713658339329UL,
4820821926123405313UL,
4821455244821004289UL,
4824410732076466177UL,
4824481100820643841UL,
4825747738215841793UL,
4827577325564461057UL,
4830603181564100609UL,
4831377237750054913UL,
4837710424726044673UL,
4838132637191110657UL,
4838203005935288321UL,
4839258537097953281UL,
4840102962028085249UL,
4843058449283547137UL,
4844113980446212097UL,
4844325086678745089UL,
4846154674027364353UL,
4848899055050293249UL,
4851221223608156161UL,
4851713804817399809UL,
4852769335980064769UL,
4853191548445130753UL,
4853824867142729729UL,
4854880398305394689UL,
4855724823235526657UL,
4855935929468059649UL,
4856991460630724609UL,
4858469204258455553UL,
4860580266583785473UL,
4862620960164937729UL,
4862691328909115393UL,
4865857922397110273UL,
4868954147140927489UL,
4870713365745369089UL,
4871276315698790401UL,
4873668853000830977UL,
4875498440349450241UL,
4876131759047049217UL,
4876342865279582209UL,
4878876140069978113UL,
4879509458767577089UL,
4879931671232643073UL,
4880635358674419713UL,
4883379739697348609UL,
4884435270860013569UL,
4890768457836003329UL,
4893723945091465217UL,
4895764638672617473UL,
4896890538579460097UL,
4897664594765414401UL,
4902801513090383873UL,
4903434831787982849UL,
4905897737834201089UL,
4906953268996866049UL,
4907868062671175681UL,
4912301293554368513UL,
4912442031042723841UL,
4912934612251967489UL,
4913145718484500481UL,
4914834568344764417UL,
4915045674577297409UL,
4915890099507429377UL,
4916945630670094337UL,
4917508580623515649UL,
4919056692995424257UL,
4919690011693023233UL,
4920534436623155201UL,
4922434392715952129UL,
4923489923878617089UL,
4923841767599505409UL,
4925108404994703361UL,
4926867623599144961UL,
4929189792157007873UL,
4929823110854606849UL,
4931019379505627137UL,
4932356385645002753UL,
4932778598110068737UL,
4933341548063490049UL,
4935241504156286977UL,
4940167316248723457UL,
4941856166108987393UL,
4945374603317870593UL,
4946078290759647233UL,
4946430134480535553UL,
4947978246852444161UL,
4949033778015109121UL,
4949244884247642113UL,
4950018940433596417UL,
4950230046666129409UL,
4950933734107906049UL,
4952200371503104001UL,
4952552215223992321UL,
4952763321456525313UL,
4958885402199982081UL,
4960433514571890689UL,
4963600108059885569UL,
4964866745455083521UL,
4965711170385215489UL,
4966063014106103809UL,
4966555595315347457UL,
4967329651501301761UL,
4968033338943078401UL,
4968596288896499713UL,
4973099888523870209UL,
4973662838477291521UL,
4975985007035154433UL,
4976477588244398081UL,
4976688694476931073UL,
4977673856895418369UL,
4977884963127951361UL,
4978518281825550337UL,
4979433075499859969UL,
4983866306383052801UL,
4984218150103941121UL,
4987032899871047681UL,
4988018062289534977UL,
4989777280893976577UL,
4990129124614864897UL,
4991184655777529857UL,
4992451293172727809UL,
4992873505637793793UL,
4994773461730590721UL,
4996110467869966337UL,
4999206692613783553UL,
4999840011311382529UL,
5000262223776448513UL,
5003428817264443393UL,
5004976929636352001UL,
5007932416891813889UL,
5008073154380169217UL,
5008706473077768193UL,
5014265603867803649UL,
5016517403681488897UL,
5018206253541752833UL,
5019895103402016769UL,
5020739528332148737UL,
5021443215773925377UL,
5021795059494813697UL,
5023906121820143617UL,
5024187596796854273UL,
5026087552889651201UL,
5026298659122184193UL,
5027776402749915137UL,
5031294839958798337UL,
5031505946191331329UL,
5034039220981727233UL,
5035728070841991169UL,
5036642864516300801UL,
5040020564236828673UL,
5041005726655315969UL,
5045931538747752449UL,
5048605551026503681UL,
5049872188421701633UL,
5049942557165879297UL,
5050505507119300609UL,
5053883206839828481UL,
5054727631769960449UL,
5054938738002493441UL,
5056909062839468033UL,
5057894225257955329UL,
5064649624699011073UL,
5065353312140787713UL,
5065775524605853697UL,
5066127368326742017UL,
5067182899489406977UL,
5067816218187005953UL,
5069153224326381569UL,
5069997649256513537UL,
5071053180419178497UL,
5071475392884244481UL,
5071616130372599809UL,
5076964154930102273UL,
5078441898557833217UL,
5079919642185564161UL,
5080130748418097153UL,
5083015866929381377UL,
5083438079394447361UL,
5083930660603691009UL,
5084282504324579329UL,
5085408404231421953UL,
5085760247952310273UL,
5087871310277640193UL,
5089771266370437121UL,
5091882328695767041UL,
5092797122370076673UL,
5093852653532741633UL,
5100819159206330369UL,
5100959896694685697UL,
5101593215392284673UL,
5102296902834061313UL,
5103070959020015617UL,
5103704277717614593UL,
5107152346182320129UL,
5107363452414853121UL,
5107715296135741441UL,
5108348614833340417UL,
5109615252228538369UL,
5111937420786401281UL,
5112781845716533249UL,
5115315120506929153UL,
5117918764041502721UL,
5119959457622654977UL,
5120170563855187969UL,
5121929782459629569UL,
5122492732413050881UL,
5124251951017492481UL,
5124814900970913793UL,
5126151907110289409UL,
5129107394365751297UL,
5131851775388680193UL,
5133259150272233473UL,
5136003531295162369UL,
5136918324969472001UL,
5137129431202004993UL,
5137762749899603969UL,
5140014549713289217UL,
5140436762178355201UL,
5143392249433817089UL,
5143462618177994753UL,
5144447780596482049UL,
5144658886829015041UL,
5150429123851583489UL,
5152258711200202753UL,
5152680923665268737UL,
5152962398641979393UL,
5154369773525532673UL,
5154791985990598657UL,
5156480835850862593UL,
5157114154548461569UL,
5158591898176192513UL,
5158662266920370177UL,
5159084479385436161UL,
5166050985059024897UL,
5167458359942578177UL,
5168513891105243137UL,
5171680484593238017UL,
5175058184313765889UL,
5176184084220608513UL,
5179069202731892737UL,
5179139571476070401UL,
5179350677708603393UL,
5181813583754821633UL,
5181883952498999297UL,
5182235796219887617UL,
5182869114917486593UL,
5184206121056862209UL,
5184557964777750529UL,
5185472758452060161UL,
5186035708405481473UL,
5186528289614725121UL,
5188639351940055041UL,
5189202301893476353UL,
5189483776870187009UL,
5191313364218806273UL,
5192157789148938241UL,
5195183645148577793UL,
5195324382636933121UL,
5195816963846176769UL,
5196379913799598081UL,
5197083601241374721UL,
5197716919938973697UL,
5198279869892395009UL,
5199194663566704641UL,
5200602038450257921UL,
5201516832124567553UL,
5202501994543054849UL,
5202572363287232513UL,
5205105638077628417UL,
5205527850542694401UL,
5206513012961181697UL,
5208835181519044609UL,
5211157350076907521UL,
5213760993611481089UL,
5213972099844014081UL,
5217068324587831297UL,
5217983118262140929UL,
5218194224494673921UL,
5218757174448095233UL,
5218827543192272897UL,
5219249755657338881UL,
5221290449238491137UL,
5221994136680267777UL,
5223471880307998721UL,
5223682986540531713UL,
5224457042726486017UL,
5224668148959019009UL,
5225160730168262657UL,
5228538429888790529UL,
5230860598446653441UL,
5233956823190470657UL,
5234238298167181313UL,
5234660510632247297UL,
5235645673050734593UL,
5235927148027445249UL,
5239515953980506113UL,
5241204803840770049UL,
5244089922352054273UL,
5244793609793830913UL,
5244934347282186241UL,
5245567665979785217UL,
5245849140956495873UL,
5246482459654094849UL,
5247256515840049153UL,
5247537990816759809UL,
5250493478072221697UL,
5250915690537287681UL,
5251267534258176001UL,
5254223021513637889UL,
5255348921420480513UL,
5257178508769099777UL,
5257248877513277441UL,
5260345102257094657UL,
5260767314722160641UL,
5264215383186866177UL,
5264637595651932161UL,
5266256076768018433UL,
5267944926628282369UL,
5268789351558414337UL,
5269000457790947329UL,
5270267095186145281UL,
5270548570162855937UL,
5273222582441607169UL,
5274137376115916801UL,
5277092863371378689UL,
5277303969603911681UL,
5278289132022398977UL,
5278359500766576641UL,
5282370519184703489UL,
5283848262812434433UL,
5287014856300429313UL,
5289125918625759233UL,
5290603662253490177UL,
5291588824671977473UL,
5293066568299708417UL,
5293277674532241409UL,
5293770255741485057UL,
5296092424299347969UL,
5296655374252769281UL,
5297147955462012929UL,
5299470124019875841UL,
5300455286438363137UL,
5300736761415073793UL,
5303199667461292033UL,
5303621879926358017UL,
5305099623554088961UL,
5305592204763332609UL,
5306999579646885889UL,
5307421792111951873UL,
5314036454064652289UL,
5314599404018073601UL,
5322691809598504961UL,
5323254759551926273UL,
5324591765691301889UL,
5325858403086499841UL,
5326421353039921153UL,
5326913934249164801UL,
5332191590062489601UL,
5333176752480976897UL,
5333598964946042881UL,
5336413714713149441UL,
5337047033410748417UL,
5339580308201144321UL,
5340424733131276289UL,
5341691370526474241UL,
5343309851642560513UL,
5343591326619271169UL,
5346476445130555393UL,
5349009719920951297UL,
5349220826153484289UL,
5349713407362727937UL,
5351331888478814209UL,
5351542994711347201UL,
5353231844571611137UL,
5355765119362007041UL,
5359565031547600897UL,
5361746462617108481UL,
5362801993779773441UL,
5363364943733194753UL,
5364490843640037377UL,
5367024118430433281UL,
5367164855918788609UL,
5368712968290697217UL,
5370542555639316481UL,
5372231405499580417UL,
5374623942801620993UL,
5377086848847839233UL,
5377157217592016897UL,
5377579430057082881UL,
5378775698708103169UL,
5381942292196098049UL,
5383842248288894977UL,
5384968148195737601UL,
5385179254428270593UL,
5387923635451199489UL,
5388134741683732481UL,
5390456910241595393UL,
5390808753962483713UL,
5395030878613143553UL,
5395312353589854209UL,
5397775259636072449UL,
5399323372007981057UL,
5401997384286732289UL,
5402419596751798273UL,
5402701071728508929UL,
5403897340379529217UL,
5405375084007260161UL,
5408189833774366721UL,
5409174996192854017UL,
5409386102425387009UL,
5409456471169564673UL,
5411497164750716929UL,
5414452652006178817UL,
5415789658145554433UL,
5415930395633909761UL,
5417197033029107713UL,
5417689614238351361UL,
5419308095354437633UL,
5419941414052036609UL,
5421841370144833537UL,
5422122845121544193UL,
5423319113772564481UL,
5427541238423224321UL,
5428596769585889281UL,
5430707831911219201UL,
5432467050515660801UL,
5432607788004016129UL,
5433452212934148097UL,
5434085531631747073UL,
5434578112840990721UL,
5434929956561879041UL,
5435141062794412033UL,
5435985487724544001UL,
5436266962701254657UL,
5442951993398132737UL,
5443022362142310401UL,
5447807436746391553UL,
5449566655350833153UL,
5451466611443630081UL,
5453788780001492993UL,
5454210992466558977UL,
5456322054791888897UL,
5456955373489487873UL,
5457729429675442177UL,
5458784960838107137UL,
5460544179442548737UL,
5461529341861036033UL,
5462584873023700993UL,
5464977410325741569UL,
5465118147814096897UL,
5467088472651071489UL,
5467299578883604481UL,
5467510685116137473UL,
5468918059999690753UL,
5469410641208934401UL,
5469551378697289729UL,
5472577234696929281UL,
5473140184650350593UL,
5473421659627061249UL,
5474829034510614529UL,
5475884565673279489UL,
5476940096835944449UL,
5479262265393807361UL,
5479543740370518017UL,
5480528902789005313UL,
5484539921207132161UL,
5485454714881441793UL,
5485876927346507777UL,
5487284302230061057UL,
5490732370694766593UL,
5492210114322497537UL,
5492561958043385857UL,
5492632326787563521UL,
5494250807903649793UL,
5494743389112893441UL,
5495095232833781761UL,
5496361870228979713UL,
5498050720089243649UL,
5499950676182040577UL,
5503398744646746113UL,
5504243169576878081UL,
5505228331995365377UL,
5506354231902208001UL,
5507550500553228289UL,
5508465294227537921UL,
5508676400460070913UL,
5512898525110730753UL,
5513883687529218049UL,
5516487331063791617UL,
5519653924551786497UL,
5520639086970273793UL,
5521131668179517441UL,
5521342774412050433UL,
5522187199342182401UL,
5524298261667512321UL,
5529364811248304129UL,
5530772186131857409UL,
5531194398596923393UL,
5533798042131496961UL,
5536260948177715201UL,
5536894266875314177UL,
5540060860363309057UL,
5541186760270151681UL,
5542171922688638977UL,
5542805241386237953UL,
5543086716362948609UL,
5543297822595481601UL,
5546042203618410497UL,
5547519947246141441UL,
5549419903338938369UL,
5550193959524892673UL,
5550897646966669313UL,
5554416084175552513UL,
5556316040268349441UL,
5557653046407725057UL,
5558075258872791041UL,
5558708577570390017UL,
5559271527523811329UL,
5559764108733054977UL,
5561875171058384897UL,
5564549183337136129UL,
5565041764546379777UL,
5565252870778912769UL,
5570882370313125889UL,
5573697120080232449UL,
5573837857568587777UL,
5573908226312765441UL,
5575808182405562369UL,
5577285926033293313UL,
5578341457195958273UL,
5581085838218887169UL,
5581296944451420161UL,
5581859894404841473UL,
5582282106869907457UL,
5582985794311684097UL,
5583548744265105409UL,
5587841237659942913UL,
5589952299985272833UL,
5591359674868826113UL,
5594174424635932673UL,
5596004011984551937UL,
5598115074309881857UL,
5598537286774947841UL,
5598818761751658497UL,
5605081579983470593UL,
5606207479890313217UL,
5606981536076267521UL,
5610359235796795393UL,
5612962879331368961UL,
5613948041749856257UL,
5614370254214922241UL,
5614581360447455233UL,
5614862835424165889UL,
5615073941656698881UL,
5617536847702917121UL,
5619225697563181057UL,
5622673766027886593UL,
5623095978492952577UL,
5623307084725485569UL,
5623729297190551553UL,
5625840359515881473UL,
5626895890678546433UL,
5627318103143612417UL,
5628795846771343361UL,
5629781009189830657UL,
5629851377934008321UL,
5630203221654896641UL,
5631118015329206273UL,
5635058665003155457UL,
5642658489374343169UL,
5643573283048652801UL,
5644769551699673089UL,
5647584301466779649UL,
5647725038955134977UL,
5648991676350332929UL,
5651524951140728833UL,
5654761913372901377UL,
5655747075791388673UL,
5656380394488987649UL,
5658561825558495233UL,
5660602519139647489UL,
5662150631511556097UL,
5662502475232444417UL,
5662572843976622081UL,
5663769112627642369UL,
5664683906301952001UL,
5664824643790307329UL,
5667146812348170241UL,
5668483818487545857UL,
5672635574394028033UL,
5673339261835804673UL,
5675450324161134593UL,
5679250236346728449UL,
5681079823695347713UL,
5682839042299789313UL,
5685724160811073537UL,
5685935267043606529UL,
5686850060717916161UL,
5687835223136403457UL,
5689805547973378049UL,
5691072185368576001UL,
5691212922856931329UL,
5691635135321997313UL,
5691705504066174977UL,
5692690666484662273UL,
5693816566391504897UL,
5697616478577098753UL,
5697757216065454081UL,
5700501597088382977UL,
5701416390762692609UL,
5701979340716113921UL,
5702612659413712897UL,
5704090403041443841UL,
5704934827971575809UL,
5706834784064372737UL,
5707468102761971713UL,
5708594002668814337UL,
5710916171226677249UL,
5712112439877697537UL,
5712745758575296513UL,
5713801289737961473UL,
5715701245830758401UL,
5717038251970134017UL,
5718023414388621313UL,
5718445626853687297UL,
5718656733086220289UL,
5718727101830397953UL,
5719782632993062913UL,
5723301070201946113UL,
5723934388899545089UL,
5724849182573854721UL,
5730337944619712513UL,
5733223063130996737UL,
5734137856805306369UL,
5735193387967971329UL,
5735545231688859649UL,
5737867400246722561UL,
5739556250106986497UL,
5741033993734717441UL,
5743848743501824001UL,
5747226443222351873UL,
5747578286943240193UL,
5749478243036037121UL,
5749759718012747777UL,
5752292992803143681UL,
5755459586291138561UL,
5755811430012026881UL,
5759611342197620737UL,
5760315029639397377UL,
5762777935685615617UL,
5762848304429793281UL,
5764959366755123201UL,
5767070429080453121UL,
5770377760056803329UL,
5770588866289336321UL,
5773403616056442881UL,
5774459147219107841UL,
5774599884707463169UL,
5776077628335194113UL,
5777625740707102721UL,
5781425652892696577UL,
5781777496613584897UL,
5783888558938914817UL,
5784803352613224449UL,
5786632939961843713UL,
5786914414938554369UL,
5787125521171087361UL,
5787336627403620353UL,
5794725345542275073UL,
5795147558007341057UL,
5798314151495335937UL,
5798525257727868929UL,
5801902957448396801UL,
5805702869633990657UL,
5806054713354878977UL,
5809291675587051521UL,
5810980525447315457UL,
5812599006563401729UL,
5813865643958599681UL,
5814498962656198657UL,
5814710068888731649UL,
5815554493818863617UL,
5815835968795574273UL,
5822802474469163009UL,
5826320911678046209UL
};
# 18 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h" 2
# 69 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h"
static int supported_small_prime_DFT_K[5] =
  { 4, 8, 16, 32, 64 };



typedef struct montgomery_triple
{
  usfixn64 p;
  usfixn64 p_inv;
  usfixn64 R2_mod_p;
} montgomery_triple;



void
init_montgomery_triple (montgomery_triple*dest, usfixn64 prime);



usfixn64
AddModSpe (usfixn64 a, usfixn64 b, const usfixn64 MY_PRIME);



usfixn64
SubModSpe (const usfixn64 a, const usfixn64 b, const usfixn64 MY_PRIME);



usfixn64
mult_ab_mod_p (usfixn64 a, const usfixn64 b, const montgomery_triple * P);



void
mult_ab_mod_p_ptr (usfixn64 * __restrict__ a, const usfixn64 *__restrict__ b,
     const montgomery_triple * P);
# 131 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h"
usfixn64
convertIn_GLOBAL (const usfixn64 a, const montgomery_triple* P);




void
convertIn_GLOBAL_ptr (usfixn64 *a, const montgomery_triple* P);



usfixn64
convertOut_GLOBAL (const usfixn64 r, const montgomery_triple* P);



void
convertOut_GLOBAL_ptr (usfixn64 * r, const montgomery_triple* P);



usfixn64
exponent_mod_p_SPF (usfixn64 a, usfixn64 n, const montgomery_triple * P);



void
DFT_2_double_simple (usfixn64* a, const montgomery_triple* P);



void
DFT_2_double_plain (usfixn64* a0, usfixn64* a1, usfixn64* a2, usfixn64* a3,
      const usfixn64 prime);



void
DFT_2_double_array (usfixn64* a0, usfixn64* a1, usfixn64* a2, usfixn64* a3,
      const usfixn64 prime);



void
DFT_2_double (usfixn64* __restrict__ a0, usfixn64* __restrict__ a1,
       usfixn64* __restrict__ a2, usfixn64* __restrict__ a3,
       const montgomery_triple* P);




void
DFT_2_double_avx2 (usfixn64* a0, usfixn64* a1, usfixn64* a2, usfixn64* a3,
     const montgomery_triple* P);



void
swap (usfixn64* a, usfixn64* b);




void
precompute_pow_omega (usfixn64* pow_omega, const usfixn64 omega, int n,
        const montgomery_triple * P);



void
DFT_4 (int n, usfixn64* x, const usfixn64 *base_case_omega_vec,
       const montgomery_triple* P);



void
DFT_8 (int n, usfixn64* x, const usfixn64 *base_case_omega_vec,
       const montgomery_triple* P);



void
DFT_16 (int n, usfixn64* x, const usfixn64 * base_case_omega_vec,
 const montgomery_triple* P);



void
DFT_32 (int n, usfixn64* __restrict__ x,
 const usfixn64 * __restrict__ base_case_omega_vec,
 const montgomery_triple* P);



void
DFT_64 (int n, usfixn64* __restrict__ x,
 const usfixn64 * __restrict__ base_case_omega_vec,
 const montgomery_triple* P);
# 249 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h"
void
L_K_K (usfixn64*x, int K);




void
stride_permutation_small_elements_L_J_K (int n_permutations, usfixn64*x,
      const int J, const int K,
      usfixn64* aux_memory);



void
stride_permutation_small_elements_L_K_J (int n_permutations, usfixn64*x,
      const int K, const int J,
      usfixn64* aux_memory);







void
stride_permutation_small_elements (usfixn64*x, int n_permutations, int m, int n,
       usfixn64* aux_memory);
# 285 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h"
void
precompute_sequential_powers_of_omega_small_elements (
    usfixn64* precomputed_pow_omega_vec, int K, int b, usfixn64 omega,
    const montgomery_triple* P);
# 297 "../../include/RegularChain/../TriangularSet/../FiniteFields/small_prime_field_fft_decl.h"
void
twiddle_small_elements (usfixn64* vector, const int n_permutations, const int K,
   const int J, const usfixn64* precomputed_pow_omega_vec,
   const montgomery_triple* P);


usfixn64
pow_K_b (const int K_log2, const int b);



void
precompute_pow_omega_for_all_levels (usfixn64**precomputed_pow_omega_vec_2D,
         const int K, const int e,
         const usfixn64 omega,
         const montgomery_triple* P);





void
swap_ptr (usfixn64**x, usfixn64**y, int * check_bit);



void
DFT_general_small_elements (usfixn64* x, int K, int e, montgomery_triple * P,
       usfixn64 omega);



int
convolution_mult_small_elements (usfixn64* x_data, usfixn64* y_data, int n,
     const montgomery_triple *P);
# 17 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h" 2
# 30 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h"
extern montgomery_triple * global_P1, *global_P2;
extern usfixn64 *global_conv_omega1, *global_conv_omega2;
extern usfixn64 *global_conv_omega1_inv, *global_conv_omega2_inv;
extern usfixn64 *global_conv_omega1_inv, *global_conv_omega2_inv;
extern usfixn64 *global_conv_theta1, *global_conv_theta2;
extern usfixn64 *global_conv_theta1_inv, *global_conv_theta2_inv;
extern usfixn64 global_K1_inv, global_K2_inv;
# 95 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h"
typedef union
{
  struct
  {
    usfixn64 m1_mont;
    usfixn64 m2_mont;

    usfixn64 p1;
    usfixn64 p2;

    usfixn64 p1_inv_m;
    usfixn64 p1_inv_q;
    usfixn64 p2_inv_m;
    usfixn64 p2_inv_q;


    usfixn64 p1p2_q;
    usfixn64 p1p2_m;




    usfixn64 p1p2_a0;
    usfixn64 p1p2_a1;
    usfixn64 p1p2_b0;
    usfixn64 p1p2_b1;
  };
  usfixn64 memory[16];
} crt_u192_data;



typedef union
{
  struct
  {


    usfixn64 r_inv_0;
    usfixn64 r_inv_1;
    usfixn64 radix;


    usfixn64 qb;
    usfixn64 mb;
  };
  usfixn64 memory[5];
} lhc_u192_data;



extern crt_u192_data t_crt_data_global;
extern crt_u192_data *t_crt_data_global_ptr;

extern lhc_u192_data t_lhc_data_global;
extern lhc_u192_data *t_lhc_data_global_ptr;



int
verify_mult_u64_u128_gmp (const usfixn64 a, const usfixn64 b0,
     const usfixn64 b1, const usfixn64 s0,
     const usfixn64 s1);




int
verify_sub_u128_u128_gmp (const usfixn64 a0, const usfixn64 a1,
     const usfixn64 b0, const usfixn64 b1,
     const usfixn64 s0, const usfixn64 s1);




int
verify_add_u128_u128_gmp (const usfixn64 a0, const usfixn64 a1,
     const usfixn64 b0, const usfixn64 b1,
     const usfixn64 s0, const usfixn64 s1,
     const usfixn64 s2);




void
mult_u64_u64 (const usfixn64 *a, const usfixn64 *b, usfixn64 *s0_out,
       usfixn64 *s1_out);







void
mult_u64_u128 (const usfixn64 *a, const usfixn64 *b0, const usfixn64 *b1,
        usfixn64* s0, usfixn64 *s1);





void
sub_u128_u128 (const usfixn64 *y0, const usfixn64 *y1, usfixn64* x0,
        usfixn64 *x1);







void
u64_mod_u64 (usfixn64 *a, const usfixn64 n);






void
inv_p_mod_u128 (const usfixn64 * p, usfixn64 * p_inv_m, usfixn64 * p_inv_q);





int
verify_crt_mult_sub_u192_with_reduction_gmp (const usfixn64 a1,
          const usfixn64 a2,
          crt_u192_data data,
          const usfixn64 s0,
          const usfixn64 s1);




int
verify_div_by_const_R_gmp (const usfixn64 *x0_u64, const usfixn64 *x1_u64,
      const usfixn64 * q, const usfixn64 *m, usfixn64 R);




void
div_by_const_R (const usfixn64 *x0_u64, const usfixn64 *x1_u64,
  const usfixn64 *r0, const usfixn64 *r1, usfixn64 *q,
  usfixn64 *m, usfixn64 R);
# 251 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h"
void
div_by_const_R_ptr (usfixn64* div_values);
# 261 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_arithmetic_decl.h"
void
div_by_const_R_ptr_single_digit (usfixn64* div_values);





void
add_lhc_ptr (usfixn64 *__restrict__ lhc_0, const usfixn64* __restrict__ lhc_1,
      const usfixn64* __restrict__ lhc_2, usfixn64 * __restrict__ R);




void
crt_mult_sub_u192_with_reduction (usfixn64 *a1, usfixn64 *a2, int k,
      const crt_u192_data * t_crt_data,
      usfixn32 * sign_u32);





void
lhc_by_R_u128_ptr (usfixn64 * l_vec, usfixn64 * h_vec, usfixn64 * c_vec,
     usfixn32 * sign_u32, int k);





void
oneShiftRight (usfixn64 * xs, int k);




void
twoShiftRight (usfixn64 * xs, int k);



void
normalize_positive_negative_vector (usfixn64 *x, const int k, const usfixn64 r);







void
addition_hybrid_big_elements (usfixn64 * __restrict__ x,
         usfixn64 *__restrict__ y,
         usfixn64 *__restrict__ z, const int k,
         const usfixn64 r, usfixn64 *c_out,
         usfixn64*c_negative_out);






void
addition_big_element_with_single_digit (usfixn64 * x, usfixn64 digit, int plus,
     const int k, const usfixn64 r);






void
addition_big_elements_v0 (usfixn64 * x, usfixn64 *y, const int k,
     const usfixn64 r);






void
addition_big_elements (usfixn64 * x, usfixn64 *y, const int k,
         const usfixn64 r);






void
subtraction_big_elements_v0 (usfixn64 *x, usfixn64 *y, const int k,
        const usfixn64 r);






void
subtraction_big_elements (usfixn64 *x, usfixn64 *y, const int k,
     const usfixn64 r);






void
subtraction_from_zero_big_elements (usfixn64 *y, const int k, const usfixn64 r);






void
subtraction_upper_minus_lower_big_elements (usfixn64 *x, const int k,
         const usfixn64 r, int sn);






void
addition_subtraction_big_elements (usfixn64 * x, usfixn64 *y, const int k,
       const usfixn64 r);



void
shift_right_sn (usfixn64*x, int k, usfixn64 r, int s);





void
mult_pow_R (usfixn64 *x, int s, const int k, const usfixn64 r,
     int compute_inverse);





void
mult_pow_R_v0 (usfixn64 *x, int s, const int k, const usfixn64 r,
        int compute_inverse);




void
conv_k (usfixn64 *x, usfixn64 *y, const int k,
 const usfixn64 *base_case_pow_omega,
 const usfixn64 *base_case_pow_omega_inv,
 const usfixn64 *base_case_pow_theta,
 const usfixn64 *base_case_pow_theta_inv, const usfixn64 * K_inv,
 const montgomery_triple*P);



void
get_proper_conv_p1p2 (usfixn64 *conv_p1, usfixn64 *conv_p2, srgfn_prime prime);




void
init_gfpf_mult_data (crt_u192_data *t_crt_data, lhc_u192_data *t_lhc_data,
       usfixn64 r, const usfixn64 p1, const usfixn64 p2);




void
init_fft_based_bigint_mult (usfixn64 conv_p1, usfixn64 conv_p2, int k);




void
clear_gfpf_mult_data (crt_u192_data *t_crt_data, lhc_u192_data *t_lhc_data);




void
clear_fft_based_bigint_mult_data ();




void
GFPFMultiplication (usfixn64 *x, const usfixn64 *y, int k,
      const crt_u192_data *t_crt_data,
      const lhc_u192_data *t_lhc_data);




void
test_fft_based_arbitrary_mult (usfixn64 *x, usfixn64*y, int n,
          srgfn_prime prime);
# 13 "../../include/RegularChain/../TriangularSet/../FiniteFields/GFPF_Support.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h" 1
# 17 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h"
# 1 "/usr/include/c++/7/math.h" 1 3
# 18 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h" 2





# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 1




# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k2.h" 1



static srgfn_prime p_list_1[10] ={
{2, (1UL<<60)+(1UL<<58)+(1UL<<20)}
,{2, (1UL<<60)+(1UL<<57)+(1UL<<35)}
,{2, (1UL<<60)+(1UL<<57)+(1UL<<31)}
,{2, (1UL<<60)+(1UL<<57)+(1UL<<28)}
,{2, (1UL<<60)+(1UL<<57)+(1UL<<24)}
,{2, (1UL<<60)+(1UL<<57)+(1UL<<7)}
,{2, (1UL<<60)+(1UL<<56)+(1UL<<45)}
,{2, (1UL<<60)+(1UL<<53)+(1UL<<3)}
,{2, (1UL<<60)+(1UL<<52)+(1UL<<34)}
,{2, (1UL<<60)+(1UL<<52)+(1UL<<27)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k2.h"
};
# 6 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k4.h" 1



static srgfn_prime p_list_2[10] ={
{4, (1UL<<59)+(1UL<<58)+(1UL<<11)}
,{4, (1UL<<59)+(1UL<<58)+(1UL<<1)}
,{4, (1UL<<59)+(1UL<<57)+(1UL<<2)}
,{4, (1UL<<59)+(1UL<<56)+(1UL<<39)}
,{4, (1UL<<59)+(1UL<<56)+(1UL<<26)}
,{4, (1UL<<59)+(1UL<<56)+(1UL<<21)}
,{4, (1UL<<59)+(1UL<<56)+(1UL<<1)}
,{4, (1UL<<59)+(1UL<<54)+(1UL<<9)}
,{4, (1UL<<59)+(1UL<<52)+(1UL<<15)}
,{4, (1UL<<59)+(1UL<<51)+(1UL<<41)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k4.h"
};
# 8 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k8.h" 1



static srgfn_prime p_list_3[10] ={
{8, (1UL<<59)+(1UL<<57)+(1UL<<39)}
,{8, (1UL<<59)+(1UL<<57)+(1UL<<28)}
,{8, (1UL<<59)+(1UL<<52)+(1UL<<49)}
,{8, (1UL<<59)+(1UL<<51)+(1UL<<16)}
,{8, (1UL<<59)+(1UL<<50)+(1UL<<48)}
,{8, (1UL<<59)+(1UL<<45)+(1UL<<7)}
,{8, (1UL<<59)+(1UL<<41)+(1UL<<23)}
,{8, (1UL<<59)+(1UL<<40)+(1UL<<28)}
,{8, (1UL<<59)+(1UL<<40)+(1UL<<10)}
,{8, (1UL<<59)+(1UL<<32)+(1UL<<10)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k8.h"
};
# 10 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k16.h" 1



static srgfn_prime p_list_4[10] ={
{16, (1UL<<58)+(1UL<<55)+(1UL<<45)}
,{16, (1UL<<58)+(1UL<<53)+(1UL<<12)}
,{16, (1UL<<58)+(1UL<<50)+(1UL<<16)}
,{16, (1UL<<58)+(1UL<<50)+(1UL<<5)}
,{16, (1UL<<58)+(1UL<<48)+(1UL<<37)}
,{16, (1UL<<58)+(1UL<<48)+(1UL<<29)}
,{16, (1UL<<58)+(1UL<<44)+(1UL<<16)}
,{16, (1UL<<58)+(1UL<<41)+(1UL<<15)}
,{16, (1UL<<58)+(1UL<<36)+(1UL<<24)}
,{16, (1UL<<58)+(1UL<<34)+(1UL<<33)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k16.h"
};
# 12 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k32.h" 1



static srgfn_prime p_list_5[10] ={
{32, (1UL<<58)+(1UL<<55)+(1UL<<17)}
,{32, (1UL<<58)+(1UL<<54)+(1UL<<47)}
,{32, (1UL<<58)+(1UL<<46)+(1UL<<42)}
,{32, (1UL<<58)+(1UL<<44)+(1UL<<35)}
,{32, (1UL<<58)+(1UL<<39)+(1UL<<27)}
,{32, (1UL<<58)+(1UL<<31)+(1UL<<30)}
,{32, (1UL<<58)+(1UL<<29)+(1UL<<22)}
,{32, (1UL<<58)+(1UL<<25)+(1UL<<2)}
,{32, (1UL<<58)+(1UL<<16)+(1UL<<3)}
,{32, (1UL<<58)+(1UL<<12)+(1UL<<1)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k32.h"
};
# 14 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k64.h" 1



static srgfn_prime p_list_6[10] ={
{64, (1UL<<57)+(1UL<<56)+(1UL<<11)}
,{64, (1UL<<57)+(1UL<<49)+(1UL<<15)}
,{64, (1UL<<57)+(1UL<<47)+(1UL<<30)}
,{64, (1UL<<57)+(1UL<<29)+(1UL<<1)}
,{64, (1UL<<57)+(1UL<<3)+(1UL<<1)}
,{64, (1UL<<56)+(1UL<<26)+(1UL<<19)}
,{64, (1UL<<56)+(1UL<<15)+(1UL<<9)}
,{64, (1UL<<55)+(1UL<<53)+(1UL<<11)}
,{64, (1UL<<55)+(1UL<<40)+(1UL<<10)}
,{64, (1UL<<55)+(1UL<<19)+(1UL<<17)}
# 26 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes_dir/srgfn_prime_k64.h"
};
# 16 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h" 2
# 240 "../../include/RegularChain/../TriangularSet/../FiniteFields/srgfn_primes.h"
static srgfn_prime p_list_7[1] =
  {
    { 128, (1UL << 57) + (1UL << 45) } };
# 24 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h" 2
# 45 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h"
static int supported_gfpf_DFT_K[4] =
  { 8, 16, 32, 64 };



void __inline__
DFT2_big_elements (usfixn64* a0, usfixn64* a1, const int k, const usfixn64 r);




void
DFT2_big_elements_v0 (usfixn64* a0, usfixn64* a1, int k, usfixn64 r);



void __inline__
swap_big_elements (usfixn64* x, usfixn64* y, const int k);




void __inline__
swap_big_elements_v0 (usfixn64* a, usfixn64* b, int k);



void
DFT_4_big_elements (int n, usfixn64* x, const int k, const usfixn64 r,
      int compute_inverse);



void
DFT_8_big_elements (int n, usfixn64* x, const int k, const usfixn64 r,
      int compute_inverse);



void
DFT_16_big_elements (int n, usfixn64* x, const int k, const usfixn64 r,
       int compute_inverse);



void
DFT_32_big_elements (int n, usfixn64* x, const int k, const usfixn64 r,
       int compute_inverse);



void
DFT_64_big_elements (int n, usfixn64* x, const int k, const usfixn64 r,
       int compute_inverse);






void
stride_permutation_big_elements (usfixn64* A, usfixn64 *B, int m, int n,
     int n_permutations, int coefficient_size);



void
mult_pow_R_gmp (mpz_t x_zz, const int s, const usfixn64 k, const usfixn64 r,
  const mpz_t p_zz);
# 125 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h"
void
twiddle_big_elements (usfixn64* vector, int K, int J, int n_permutations,
        usfixn64* precomputed_pow_omega_vec, int k, usfixn64 r,
        mpz_t p, int fft_based_mult_enabled, int compute_inverse,
        float *t_mult_values, int* n_twiddle_mult);
# 138 "../../include/RegularChain/../TriangularSet/../FiniteFields/gfpf_six_step_fft_decl.h"
void
precompute_sequential_powers_of_omega_big_elements (
    usfixn64* precomputed_pow_omega_vec, int K, int b, usfixn64 radix,
    mpz_t omega, mpz_t p);






void
DFT_general_big_elements (usfixn64* vector_in, int K, int e, usfixn64 radix,
     mpz_t p, usfixn64* omega, int fft_based_mult_enabled,
     int compute_inverse, int verbose);



int
convolution_mult (usfixn64* x_data, usfixn64* y_data, int n, srgfn_prime *P,
    mpz_t p_zz, int fft_based_mult_enabled);



void
test_DFT2_big_elements (usfixn64* x, int K, int e, usfixn64 radix);



void
test_mult_pow_R_big_elements (usfixn64* x, int K, int e, usfixn64 radix);



void
test_swap_big_elements (usfixn64* x, int K, int e, usfixn64 radix);
# 14 "../../include/RegularChain/../TriangularSet/../FiniteFields/GFPF_Support.h" 2



}
# 21 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField_Support.h" 1
# 9 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField_Support.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 10 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField_Support.h" 2


# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;







}
# 13 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField_Support.h" 2


# 14 "../../include/RegularChain/../TriangularSet/../FiniteFields/BigPrimeField_Support.h"
void BigPrimeField_Add_inplace(mpz_t &X, mpz_t &Y, mpz_t &P);

void BigPrimeField_Sub_inplace(mpz_t &X, mpz_t &Y, mpz_t &P);

void BigPrimeField_Multiplication_inplace(mpz_t &X, mpz_t &Y, mpz_t &P);

void BigPrimeField_Division_inplace(mpz_t &X, mpz_t &Y, mpz_t &P);

void BigPrimeField_Inverse_inplace(mpz_t &X, mpz_t &P);

void BigPrimeField_Add(mpz_t &X, mpz_t &Y, mpz_t &P, mpz_t &Z);

void BigPrimeField_Sub(mpz_t &X, mpz_t &Y, mpz_t &P, mpz_t &Z);

void BigPrimeField_Multiplication(mpz_t &X, mpz_t &Y, mpz_t &P, mpz_t &Z);

void BigPrimeField_Division(mpz_t &X, mpz_t &Y, mpz_t &P, mpz_t &Z);

void BigPrimeField_Inverse(mpz_t &X, mpz_t &P, mpz_t &Z);
# 22 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 1 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField_Support.h" 1




    extern "C" {



# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 10 "../../include/RegularChain/../TriangularSet/../FiniteFields/SmallPrimeField_Support.h" 2




typedef struct Prime_64{
   long long int prime;
   unsigned long long int prime_inv;
   long long int rsquare;
} Prime_ptr;

typedef struct Prime_32{
   int prime;
   unsigned int prime_inv;
   int rsquare;
} Prime_ptr32;


long long int smallprimefield_convert_in(long long int a, Prime_ptr* Pptr);
long long int smallprimefield_convert_out(long long int a, Prime_ptr* Pptr);
long long int smallprimefield_add(long long int a, long long int b, Prime_ptr* Pptr);
long long int smallprimefield_sub( long long int a, long long int b, Prime_ptr* Pptr);
long long int smallprimefield_mul(long long int a, long long int b, Prime_ptr* Pptr);
long long int smallprimefield_inv(long long int a, Prime_ptr* Pptr);
long long int smallprimefield_div(long long int a, long long int b, Prime_ptr* Pptr);
long long int smallprimefield_PrimitiveRootofUnity(long long int n,Prime_ptr* Pptr);
long long int smallprimefield_exp(long long int a, long long int e,Prime_ptr* Pptr);
Prime_ptr* smallprimefield_get_prime_constants(long long int prime);


int smallprimefield_convert_in32(int a, Prime_ptr32* Pptr);
int smallprimefield_convert_out32(int a, Prime_ptr32* Pptr);
int smallprimefield_add32(int a, int b, Prime_ptr32* Pptr);
int smallprimefield_sub32(int a, int b, Prime_ptr32* Pptr);
int smallprimefield_mul32(int a, int b, Prime_ptr32* Pptr);
int smallprimefield_inv32(int a, Prime_ptr32* Pptr);
int smallprimefield_div32(int a, int b, Prime_ptr32* Pptr);
Prime_ptr32* smallprimefield_get_prime_constants32(int prime);
int smallprimefield_PrimitiveRootofUnity32(int n,Prime_ptr32* Pptr);
int smallprimefield_exp32(int a, int e,Prime_ptr32* Pptr);


}
# 23 "../../include/RegularChain/../TriangularSet/../ring.h" 2
# 9 "../../include/RegularChain/../TriangularSet/../polynomial.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp" 1



# 1 "/usr/include/c++/7/locale" 1 3
# 36 "/usr/include/c++/7/locale" 3
       
# 37 "/usr/include/c++/7/locale" 3




# 1 "/usr/include/c++/7/bits/locale_facets_nonio.h" 1 3
# 37 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
       
# 38 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3

# 1 "/usr/include/c++/7/ctime" 1 3
# 39 "/usr/include/c++/7/ctime" 3
       
# 40 "/usr/include/c++/7/ctime" 3
# 40 "/usr/include/c++/7/bits/locale_facets_nonio.h" 2 3


# 41 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  class time_base
  {
  public:
    enum dateorder { no_order, dmy, mdy, ymd, ydm };
  };

  template<typename _CharT>
    struct __timepunct_cache : public locale::facet
    {

      static const _CharT* _S_timezones[14];

      const _CharT* _M_date_format;
      const _CharT* _M_date_era_format;
      const _CharT* _M_time_format;
      const _CharT* _M_time_era_format;
      const _CharT* _M_date_time_format;
      const _CharT* _M_date_time_era_format;
      const _CharT* _M_am;
      const _CharT* _M_pm;
      const _CharT* _M_am_pm_format;


      const _CharT* _M_day1;
      const _CharT* _M_day2;
      const _CharT* _M_day3;
      const _CharT* _M_day4;
      const _CharT* _M_day5;
      const _CharT* _M_day6;
      const _CharT* _M_day7;


      const _CharT* _M_aday1;
      const _CharT* _M_aday2;
      const _CharT* _M_aday3;
      const _CharT* _M_aday4;
      const _CharT* _M_aday5;
      const _CharT* _M_aday6;
      const _CharT* _M_aday7;


      const _CharT* _M_month01;
      const _CharT* _M_month02;
      const _CharT* _M_month03;
      const _CharT* _M_month04;
      const _CharT* _M_month05;
      const _CharT* _M_month06;
      const _CharT* _M_month07;
      const _CharT* _M_month08;
      const _CharT* _M_month09;
      const _CharT* _M_month10;
      const _CharT* _M_month11;
      const _CharT* _M_month12;


      const _CharT* _M_amonth01;
      const _CharT* _M_amonth02;
      const _CharT* _M_amonth03;
      const _CharT* _M_amonth04;
      const _CharT* _M_amonth05;
      const _CharT* _M_amonth06;
      const _CharT* _M_amonth07;
      const _CharT* _M_amonth08;
      const _CharT* _M_amonth09;
      const _CharT* _M_amonth10;
      const _CharT* _M_amonth11;
      const _CharT* _M_amonth12;

      bool _M_allocated;

      __timepunct_cache(size_t __refs = 0) : facet(__refs),
      _M_date_format(0), _M_date_era_format(0), _M_time_format(0),
      _M_time_era_format(0), _M_date_time_format(0),
      _M_date_time_era_format(0), _M_am(0), _M_pm(0),
      _M_am_pm_format(0), _M_day1(0), _M_day2(0), _M_day3(0),
      _M_day4(0), _M_day5(0), _M_day6(0), _M_day7(0),
      _M_aday1(0), _M_aday2(0), _M_aday3(0), _M_aday4(0),
      _M_aday5(0), _M_aday6(0), _M_aday7(0), _M_month01(0),
      _M_month02(0), _M_month03(0), _M_month04(0), _M_month05(0),
      _M_month06(0), _M_month07(0), _M_month08(0), _M_month09(0),
      _M_month10(0), _M_month11(0), _M_month12(0), _M_amonth01(0),
      _M_amonth02(0), _M_amonth03(0), _M_amonth04(0),
      _M_amonth05(0), _M_amonth06(0), _M_amonth07(0),
      _M_amonth08(0), _M_amonth09(0), _M_amonth10(0),
      _M_amonth11(0), _M_amonth12(0), _M_allocated(false)
      { }

      ~__timepunct_cache();

    private:
      __timepunct_cache&
      operator=(const __timepunct_cache&);

      explicit
      __timepunct_cache(const __timepunct_cache&);
    };

  template<typename _CharT>
    __timepunct_cache<_CharT>::~__timepunct_cache()
    {
      if (_M_allocated)
 {

 }
    }


  template<>
    const char*
    __timepunct_cache<char>::_S_timezones[14];


  template<>
    const wchar_t*
    __timepunct_cache<wchar_t>::_S_timezones[14];



  template<typename _CharT>
    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];

  template<typename _CharT>
    class __timepunct : public locale::facet
    {
    public:

      typedef _CharT __char_type;
      typedef __timepunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;
      __c_locale _M_c_locale_timepunct;
      const char* _M_name_timepunct;

    public:

      static locale::id id;

      explicit
      __timepunct(size_t __refs = 0);

      explicit
      __timepunct(__cache_type* __cache, size_t __refs = 0);
# 206 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);



      void
      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,
      const tm* __tm) const throw ();

      void
      _M_date_formats(const _CharT** __date) const
      {

 __date[0] = _M_data->_M_date_format;
 __date[1] = _M_data->_M_date_era_format;
      }

      void
      _M_time_formats(const _CharT** __time) const
      {

 __time[0] = _M_data->_M_time_format;
 __time[1] = _M_data->_M_time_era_format;
      }

      void
      _M_date_time_formats(const _CharT** __dt) const
      {

 __dt[0] = _M_data->_M_date_time_format;
 __dt[1] = _M_data->_M_date_time_era_format;
      }

      void
      _M_am_pm_format(const _CharT* __ampm) const
      { __ampm = _M_data->_M_am_pm_format; }

      void
      _M_am_pm(const _CharT** __ampm) const
      {
 __ampm[0] = _M_data->_M_am;
 __ampm[1] = _M_data->_M_pm;
      }

      void
      _M_days(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_day1;
 __days[1] = _M_data->_M_day2;
 __days[2] = _M_data->_M_day3;
 __days[3] = _M_data->_M_day4;
 __days[4] = _M_data->_M_day5;
 __days[5] = _M_data->_M_day6;
 __days[6] = _M_data->_M_day7;
      }

      void
      _M_days_abbreviated(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_aday1;
 __days[1] = _M_data->_M_aday2;
 __days[2] = _M_data->_M_aday3;
 __days[3] = _M_data->_M_aday4;
 __days[4] = _M_data->_M_aday5;
 __days[5] = _M_data->_M_aday6;
 __days[6] = _M_data->_M_aday7;
      }

      void
      _M_months(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_month01;
 __months[1] = _M_data->_M_month02;
 __months[2] = _M_data->_M_month03;
 __months[3] = _M_data->_M_month04;
 __months[4] = _M_data->_M_month05;
 __months[5] = _M_data->_M_month06;
 __months[6] = _M_data->_M_month07;
 __months[7] = _M_data->_M_month08;
 __months[8] = _M_data->_M_month09;
 __months[9] = _M_data->_M_month10;
 __months[10] = _M_data->_M_month11;
 __months[11] = _M_data->_M_month12;
      }

      void
      _M_months_abbreviated(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_amonth01;
 __months[1] = _M_data->_M_amonth02;
 __months[2] = _M_data->_M_amonth03;
 __months[3] = _M_data->_M_amonth04;
 __months[4] = _M_data->_M_amonth05;
 __months[5] = _M_data->_M_amonth06;
 __months[6] = _M_data->_M_amonth07;
 __months[7] = _M_data->_M_amonth08;
 __months[8] = _M_data->_M_amonth09;
 __months[9] = _M_data->_M_amonth10;
 __months[10] = _M_data->_M_amonth11;
 __months[11] = _M_data->_M_amonth12;
      }

    protected:
      virtual
      ~__timepunct();


      void
      _M_initialize_timepunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id __timepunct<_CharT>::id;


  template<>
    void
    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const throw ();


  template<>
    void
    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,
     const tm*) const throw ();



}


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/time_members.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/7/bits/time_members.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(size_t __refs)
    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),
      _M_name_timepunct(_S_get_c_name())
    { _M_initialize_timepunct(); }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)
    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0),
      _M_name_timepunct(_S_get_c_name())
    { _M_initialize_timepunct(); }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,
         size_t __refs)
    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),
      _M_name_timepunct(0)
    {
      if (__builtin_strcmp(__s, _S_get_c_name()) != 0)
 {
   const size_t __len = __builtin_strlen(__s) + 1;
   char* __tmp = new char[__len];
   __builtin_memcpy(__tmp, __s, __len);
   _M_name_timepunct = __tmp;
 }
      else
 _M_name_timepunct = _S_get_c_name();

      try
 { _M_initialize_timepunct(__cloc); }
      catch(...)
 {
   if (_M_name_timepunct != _S_get_c_name())
     delete [] _M_name_timepunct;
   throw;
 }
    }

  template<typename _CharT>
    __timepunct<_CharT>::~__timepunct()
    {
      if (_M_name_timepunct != _S_get_c_name())
 delete [] _M_name_timepunct;
      delete _M_data;
      _S_destroy_c_locale(_M_c_locale_timepunct);
    }


}
# 345 "/usr/include/c++/7/bits/locale_facets_nonio.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


namespace __cxx11 {
# 365 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _InIter>
    class time_get : public locale::facet, public time_base
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 386 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      time_get(size_t __refs = 0)
      : facet (__refs) { }
# 403 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      dateorder
      date_order() const
      { return this->do_date_order(); }
# 427 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get_time(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_time(__beg, __end, __io, __err, __tm); }
# 452 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get_date(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_date(__beg, __end, __io, __err, __tm); }
# 480 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_weekday(__beg, __end, __io, __err, __tm); }
# 509 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_monthname(__beg, __end, __io, __err, __tm); }
# 535 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get_year(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_year(__beg, __end, __io, __err, __tm); }
# 556 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      inline
      iter_type get(iter_type __s, iter_type __end, ios_base& __io,
                    ios_base::iostate& __err, tm* __tm, char __format,
                    char __modifier = 0) const
      {
        return this->do_get(__s, __end, __io, __err, __tm, __format,
                            __modifier);
      }
# 583 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type get(iter_type __s, iter_type __end, ios_base& __io,
                    ios_base::iostate& __err, tm* __tm, const char_type* __fmt,
                    const char_type* __fmtend) const;


    protected:

      virtual
      ~time_get() { }
# 603 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual dateorder
      do_date_order() const;
# 621 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 640 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 659 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,
       ios_base::iostate& __err, tm* __tm) const;
# 678 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,
         ios_base::iostate& __err, tm* __tm) const;
# 697 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 720 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual

      iter_type
      do_get(iter_type __s, iter_type __end, ios_base& __f,
             ios_base::iostate& __err, tm* __tm,
             char __format, char __modifier) const;



      iter_type
      _M_extract_num(iter_type __beg, iter_type __end, int& __member,
       int __min, int __max, size_t __len,
       ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_name(iter_type __beg, iter_type __end, int& __member,
        const _CharT** __names, size_t __indexlen,
        ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,
          const _CharT** __names, size_t __indexlen,
          ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
       ios_base::iostate& __err, tm* __tm,
       const _CharT* __format) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id time_get<_CharT, _InIter>::id;


  template<typename _CharT, typename _InIter>
    class time_get_byname : public time_get<_CharT, _InIter>
    {
    public:

      typedef _CharT char_type;
      typedef _InIter iter_type;

      explicit
      time_get_byname(const char*, size_t __refs = 0)
      : time_get<_CharT, _InIter>(__refs) { }


      explicit
      time_get_byname(const string& __s, size_t __refs = 0)
      : time_get_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~time_get_byname() { }
    };

}
# 794 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _OutIter>
    class time_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 815 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      time_put(size_t __refs = 0)
      : facet(__refs) { }
# 834 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
   const _CharT* __beg, const _CharT* __end) const;
# 854 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const tm* __tm, char __format, char __mod = 0) const
      { return this->do_put(__s, __io, __fill, __tm, __format, __mod); }

    protected:

      virtual
      ~time_put()
      { }
# 881 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
      char __format, char __mod) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id time_put<_CharT, _OutIter>::id;


  template<typename _CharT, typename _OutIter>
    class time_put_byname : public time_put<_CharT, _OutIter>
    {
    public:

      typedef _CharT char_type;
      typedef _OutIter iter_type;

      explicit
      time_put_byname(const char*, size_t __refs = 0)
      : time_put<_CharT, _OutIter>(__refs)
      { };


      explicit
      time_put_byname(const string& __s, size_t __refs = 0)
      : time_put_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~time_put_byname() { }
    };
# 926 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  class money_base
  {
  public:
    enum part { none, space, symbol, sign, value };
    struct pattern { char field[4]; };

    static const pattern _S_default_pattern;

    enum
    {
      _S_minus,
      _S_zero,
      _S_end = 11
    };



    static const char* _S_atoms;



    __attribute__ ((__const__)) static pattern
    _S_construct_pattern(char __precedes, char __space, char __posn) throw ();
  };

  template<typename _CharT, bool _Intl>
    struct __moneypunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;
      const _CharT* _M_curr_symbol;
      size_t _M_curr_symbol_size;
      const _CharT* _M_positive_sign;
      size_t _M_positive_sign_size;
      const _CharT* _M_negative_sign;
      size_t _M_negative_sign_size;
      int _M_frac_digits;
      money_base::pattern _M_pos_format;
      money_base::pattern _M_neg_format;




      _CharT _M_atoms[money_base::_S_end];

      bool _M_allocated;

      __moneypunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(0), _M_grouping_size(0), _M_use_grouping(false),
      _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),
      _M_curr_symbol(0), _M_curr_symbol_size(0),
      _M_positive_sign(0), _M_positive_sign_size(0),
      _M_negative_sign(0), _M_negative_sign_size(0),
      _M_frac_digits(0),
      _M_pos_format(money_base::pattern()),
      _M_neg_format(money_base::pattern()), _M_allocated(false)
      { }

      ~__moneypunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __moneypunct_cache&
      operator=(const __moneypunct_cache&);

      explicit
      __moneypunct_cache(const __moneypunct_cache&);
    };

  template<typename _CharT, bool _Intl>
    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_curr_symbol;
   delete [] _M_positive_sign;
   delete [] _M_negative_sign;
 }
    }

namespace __cxx11 {
# 1021 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT, bool _Intl>
    class moneypunct : public locale::facet, public money_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

    private:
      __cache_type* _M_data;

    public:


      static const bool intl = _Intl;

      static locale::id id;
# 1050 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_moneypunct(); }
# 1063 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_moneypunct(); }
# 1078 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_moneypunct(__cloc, __s); }
# 1092 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1105 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1135 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1148 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      string_type
      curr_symbol() const
      { return this->do_curr_symbol(); }
# 1165 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      string_type
      positive_sign() const
      { return this->do_positive_sign(); }
# 1182 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      string_type
      negative_sign() const
      { return this->do_negative_sign(); }
# 1198 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      int
      frac_digits() const
      { return this->do_frac_digits(); }
# 1234 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      pattern
      pos_format() const
      { return this->do_pos_format(); }

      pattern
      neg_format() const
      { return this->do_neg_format(); }


    protected:

      virtual
      ~moneypunct();
# 1256 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1268 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1281 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1294 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_curr_symbol() const
      { return _M_data->_M_curr_symbol; }
# 1307 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_positive_sign() const
      { return _M_data->_M_positive_sign; }
# 1320 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_negative_sign() const
      { return _M_data->_M_negative_sign; }
# 1334 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual int
      do_frac_digits() const
      { return _M_data->_M_frac_digits; }
# 1348 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual pattern
      do_pos_format() const
      { return _M_data->_M_pos_format; }
# 1362 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual pattern
      do_neg_format() const
      { return _M_data->_M_neg_format; }


       void
       _M_initialize_moneypunct(__c_locale __cloc = 0,
    const char* __name = 0);
    };

  template<typename _CharT, bool _Intl>
    locale::id moneypunct<_CharT, _Intl>::id;

  template<typename _CharT, bool _Intl>
    const bool moneypunct<_CharT, _Intl>::intl;

  template<>
    moneypunct<char, true>::~moneypunct();

  template<>
    moneypunct<char, false>::~moneypunct();

  template<>
    void
    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);

  template<>
    void
    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);


  template<>
    moneypunct<wchar_t, true>::~moneypunct();

  template<>
    moneypunct<wchar_t, false>::~moneypunct();

  template<>
    void
    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,
       const char*);

  template<>
    void
    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,
        const char*);



  template<typename _CharT, bool _Intl>
    class moneypunct_byname : public moneypunct<_CharT, _Intl>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      static const bool intl = _Intl;

      explicit
      moneypunct_byname(const char* __s, size_t __refs = 0)
      : moneypunct<_CharT, _Intl>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_moneypunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      moneypunct_byname(const string& __s, size_t __refs = 0)
      : moneypunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~moneypunct_byname() { }
    };

  template<typename _CharT, bool _Intl>
    const bool moneypunct_byname<_CharT, _Intl>::intl;

}

namespace __cxx11 {
# 1465 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _InIter>
    class money_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 1487 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      money_get(size_t __refs = 0) : facet(__refs) { }
# 1517 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, long double& __units) const
      { return this->do_get(__s, __end, __intl, __io, __err, __units); }
# 1548 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, string_type& __digits) const
      { return this->do_get(__s, __end, __intl, __io, __err, __digits); }

    protected:

      virtual
      ~money_get() { }
# 1572 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, long double& __units) const;
# 1584 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, string_type& __digits) const;
# 1596 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      template<bool _Intl>
        iter_type
        _M_extract(iter_type __s, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, string& __digits) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id money_get<_CharT, _InIter>::id;
# 1618 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _OutIter>
    class money_put : public locale::facet
    {
    public:


      typedef _CharT char_type;
      typedef _OutIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 1639 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      money_put(size_t __refs = 0) : facet(__refs) { }
# 1659 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, long double __units) const
      { return this->do_put(__s, __intl, __io, __fill, __units); }
# 1682 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, const string_type& __digits) const
      { return this->do_put(__s, __intl, __io, __fill, __digits); }

    protected:

      virtual
      ~money_put() { }
# 1717 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      long double __units) const;
# 1741 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      const string_type& __digits) const;
# 1753 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      template<bool _Intl>
        iter_type
        _M_insert(iter_type __s, ios_base& __io, char_type __fill,
    const string_type& __digits) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id money_put<_CharT, _OutIter>::id;

}





  struct messages_base
  {
    typedef int catalog;
  };

namespace __cxx11 {
# 1796 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
  template<typename _CharT>
    class messages : public locale::facet, public messages_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_messages;
      const char* _M_name_messages;

    public:

      static locale::id id;
# 1824 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      messages(size_t __refs = 0);
# 1838 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      explicit
      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);
# 1851 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      catalog
      open(const basic_string<char>& __s, const locale& __loc) const
      { return this->do_open(__s, __loc); }
# 1869 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      catalog
      open(const basic_string<char>&, const locale&, const char*) const;
# 1887 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      string_type
      get(catalog __c, int __set, int __msgid, const string_type& __s) const
      { return this->do_get(__c, __set, __msgid, __s); }
# 1898 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      void
      close(catalog __c) const
      { return this->do_close(__c); }

    protected:

      virtual
      ~messages();
# 1918 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual catalog
      do_open(const basic_string<char>&, const locale&) const;
# 1937 "/usr/include/c++/7/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_get(catalog, int, int, const string_type& __dfault) const;






      virtual void
      do_close(catalog) const;


      char*
      _M_convert_to_char(const string_type& __msg) const
      {

 return reinterpret_cast<char*>(const_cast<_CharT*>(__msg.c_str()));
      }


      string_type
      _M_convert_from_char(char*) const
      {

 return string_type();
      }
     };

  template<typename _CharT>
    locale::id messages<_CharT>::id;


  template<>
    string
    messages<char>::do_get(catalog, int, int, const string&) const;


  template<>
    wstring
    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;



   template<typename _CharT>
    class messages_byname : public messages<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      messages_byname(const char* __s, size_t __refs = 0);


      explicit
      messages_byname(const string& __s, size_t __refs = 0)
      : messages_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~messages_byname()
      { }
    };

}


}


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/messages_members.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/messages_members.h" 3
# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 37 "/usr/include/x86_64-linux-gnu/c++/7/bits/messages_members.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    messages<_CharT>::messages(size_t __refs)
    : facet(__refs), _M_c_locale_messages(_S_get_c_locale()),
      _M_name_messages(_S_get_c_name())
    { }

  template<typename _CharT>
    messages<_CharT>::messages(__c_locale __cloc, const char* __s,
          size_t __refs)
    : facet(__refs), _M_c_locale_messages(0), _M_name_messages(0)
    {
      if (__builtin_strcmp(__s, _S_get_c_name()) != 0)
 {
   const size_t __len = __builtin_strlen(__s) + 1;
   char* __tmp = new char[__len];
   __builtin_memcpy(__tmp, __s, __len);
   _M_name_messages = __tmp;
 }
      else
 _M_name_messages = _S_get_c_name();


      _M_c_locale_messages = _S_clone_c_locale(__cloc);
    }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc,
      const char* __dir) const
    {
      bindtextdomain(__s.c_str(), __dir);
      return this->do_open(__s, __loc);
    }


  template<typename _CharT>
    messages<_CharT>::~messages()
    {
      if (_M_name_messages != _S_get_c_name())
 delete [] _M_name_messages;
      _S_destroy_c_locale(_M_c_locale_messages);
    }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::do_open(const basic_string<char>& __s,
         const locale&) const
    {


      textdomain(__s.c_str());
      return 0;
    }

  template<typename _CharT>
    void
    messages<_CharT>::do_close(catalog) const
    { }


  template<typename _CharT>
    messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)
    : messages<_CharT>(__refs)
    {
      if (this->_M_name_messages != locale::facet::_S_get_c_name())
 {
   delete [] this->_M_name_messages;
   if (__builtin_strcmp(__s, locale::facet::_S_get_c_name()) != 0)
     {
       const size_t __len = __builtin_strlen(__s) + 1;
       char* __tmp = new char[__len];
       __builtin_memcpy(__tmp, __s, __len);
       this->_M_name_messages = __tmp;
     }
   else
     this->_M_name_messages = locale::facet::_S_get_c_name();
 }

      if (__builtin_strcmp(__s, "C") != 0
   && __builtin_strcmp(__s, "POSIX") != 0)
 {
   this->_S_destroy_c_locale(this->_M_c_locale_messages);
   this->_S_create_c_locale(this->_M_c_locale_messages, __s);
 }
    }


  template<>
    typename messages<char>::catalog
    messages<char>::do_open(const basic_string<char>&,
       const locale&) const;

  template<>
    void
    messages<char>::do_close(catalog) const;


  template<>
    typename messages<wchar_t>::catalog
    messages<wchar_t>::do_open(const basic_string<char>&,
          const locale&) const;

  template<>
    void
    messages<wchar_t>::do_close(catalog) const;



}
# 2009 "/usr/include/c++/7/bits/locale_facets_nonio.h" 2 3


# 1 "/usr/include/c++/7/bits/codecvt.h" 1 3
# 39 "/usr/include/c++/7/bits/codecvt.h" 3
       
# 40 "/usr/include/c++/7/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/usr/include/c++/7/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/usr/include/c++/7/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/usr/include/c++/7/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/usr/include/c++/7/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/usr/include/c++/7/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 273 "/usr/include/c++/7/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 467 "/usr/include/c++/7/bits/codecvt.h" 3
  template<>
    class codecvt<char16_t, char, mbstate_t>
    : public __codecvt_abstract_base<char16_t, char, mbstate_t>
    {
    public:

      typedef char16_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<>
    class codecvt<char32_t, char, mbstate_t>
    : public __codecvt_abstract_base<char32_t, char, mbstate_t>
    {
    public:

      typedef char32_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }


      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~codecvt_byname() { }
    };


  template<>
    class codecvt_byname<char16_t, char, mbstate_t>
    : public codecvt<char16_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<char16_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };

  template<>
    class codecvt_byname<char32_t, char, mbstate_t>
    : public codecvt<char32_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<char32_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };





  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



  extern template class codecvt_byname<char16_t, char, mbstate_t>;
  extern template class codecvt_byname<char32_t, char, mbstate_t>;





}
# 2012 "/usr/include/c++/7/bits/locale_facets_nonio.h" 2 3

# 1 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 1 3
# 33 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 3
       
# 34 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, bool _Intl>
    struct __use_cache<__moneypunct_cache<_CharT, _Intl> >
    {
      const __moneypunct_cache<_CharT, _Intl>*
      operator() (const locale& __loc) const
      {
 const size_t __i = moneypunct<_CharT, _Intl>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __moneypunct_cache<_CharT, _Intl>* __tmp = 0;
     try
       {
  __tmp = new __moneypunct_cache<_CharT, _Intl>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<
   const __moneypunct_cache<_CharT, _Intl>*>(__caches[__i]);
      }
    };

  template<typename _CharT, bool _Intl>
    void
    __moneypunct_cache<_CharT, _Intl>::_M_cache(const locale& __loc)
    {
      const moneypunct<_CharT, _Intl>& __mp =
 use_facet<moneypunct<_CharT, _Intl> >(__loc);

      _M_decimal_point = __mp.decimal_point();
      _M_thousands_sep = __mp.thousands_sep();
      _M_frac_digits = __mp.frac_digits();

      char* __grouping = 0;
      _CharT* __curr_symbol = 0;
      _CharT* __positive_sign = 0;
      _CharT* __negative_sign = 0;
      try
 {
   const string& __g = __mp.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __cs = __mp.curr_symbol();
   _M_curr_symbol_size = __cs.size();
   __curr_symbol = new _CharT[_M_curr_symbol_size];
   __cs.copy(__curr_symbol, _M_curr_symbol_size);

   const basic_string<_CharT>& __ps = __mp.positive_sign();
   _M_positive_sign_size = __ps.size();
   __positive_sign = new _CharT[_M_positive_sign_size];
   __ps.copy(__positive_sign, _M_positive_sign_size);

   const basic_string<_CharT>& __ns = __mp.negative_sign();
   _M_negative_sign_size = __ns.size();
   __negative_sign = new _CharT[_M_negative_sign_size];
   __ns.copy(__negative_sign, _M_negative_sign_size);

   _M_pos_format = __mp.pos_format();
   _M_neg_format = __mp.neg_format();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(money_base::_S_atoms,
       money_base::_S_atoms + money_base::_S_end, _M_atoms);

   _M_grouping = __grouping;
   _M_curr_symbol = __curr_symbol;
   _M_positive_sign = __positive_sign;
   _M_negative_sign = __negative_sign;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __curr_symbol;
   delete [] __positive_sign;
   delete [] __negative_sign;
   throw;
 }
    }

namespace __cxx11 {

  template<typename _CharT, typename _InIter>
    template<bool _Intl>
      _InIter
      money_get<_CharT, _InIter>::
      _M_extract(iter_type __beg, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, string& __units) const
      {
 typedef char_traits<_CharT> __traits_type;
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;


 bool __negative = false;

 size_type __sign_size = 0;

 const bool __mandatory_sign = (__lc->_M_positive_sign_size
           && __lc->_M_negative_sign_size);

 string __grouping_tmp;
 if (__lc->_M_use_grouping)
   __grouping_tmp.reserve(32);

 int __last_pos = 0;

 int __n = 0;

 bool __testvalid = true;

 bool __testdecfound = false;


 string __res;
 __res.reserve(32);

 const char_type* __lit_zero = __lit + money_base::_S_zero;
 const money_base::pattern __p = __lc->_M_neg_format;
 for (int __i = 0; __i < 4 && __testvalid; ++__i)
   {
     const part __which = static_cast<part>(__p.field[__i]);
     switch (__which)
       {
       case money_base::symbol:




  if (__io.flags() & ios_base::showbase || __sign_size > 1
      || __i == 0
      || (__i == 1 && (__mandatory_sign
         || (static_cast<part>(__p.field[0])
      == money_base::sign)
         || (static_cast<part>(__p.field[2])
      == money_base::space)))
      || (__i == 2 && ((static_cast<part>(__p.field[3])
          == money_base::value)
         || (__mandatory_sign
      && (static_cast<part>(__p.field[3])
          == money_base::sign)))))
    {
      const size_type __len = __lc->_M_curr_symbol_size;
      size_type __j = 0;
      for (; __beg != __end && __j < __len
      && *__beg == __lc->_M_curr_symbol[__j];
    ++__beg, (void)++__j);
      if (__j != __len
   && (__j || __io.flags() & ios_base::showbase))
        __testvalid = false;
    }
  break;
       case money_base::sign:

  if (__lc->_M_positive_sign_size && __beg != __end
      && *__beg == __lc->_M_positive_sign[0])
    {
      __sign_size = __lc->_M_positive_sign_size;
      ++__beg;
    }
  else if (__lc->_M_negative_sign_size && __beg != __end
    && *__beg == __lc->_M_negative_sign[0])
    {
      __negative = true;
      __sign_size = __lc->_M_negative_sign_size;
      ++__beg;
    }
  else if (__lc->_M_positive_sign_size
    && !__lc->_M_negative_sign_size)


    __negative = true;
  else if (__mandatory_sign)
    __testvalid = false;
  break;
       case money_base::value:


  for (; __beg != __end; ++__beg)
    {
      const char_type __c = *__beg;
      const char_type* __q = __traits_type::find(__lit_zero,
              10, __c);
      if (__q != 0)
        {
   __res += money_base::_S_atoms[__q - __lit];
   ++__n;
        }
      else if (__c == __lc->_M_decimal_point
        && !__testdecfound)
        {
   if (__lc->_M_frac_digits <= 0)
     break;

   __last_pos = __n;
   __n = 0;
   __testdecfound = true;
        }
      else if (__lc->_M_use_grouping
        && __c == __lc->_M_thousands_sep
        && !__testdecfound)
        {
   if (__n)
     {

       __grouping_tmp += static_cast<char>(__n);
       __n = 0;
     }
   else
     {
       __testvalid = false;
       break;
     }
        }
      else
        break;
    }
  if (__res.empty())
    __testvalid = false;
  break;
       case money_base::space:

  if (__beg != __end && __ctype.is(ctype_base::space, *__beg))
    ++__beg;
  else
    __testvalid = false;
       case money_base::none:

  if (__i != 3)
    for (; __beg != __end
    && __ctype.is(ctype_base::space, *__beg); ++__beg);
  break;
       }
   }


 if (__sign_size > 1 && __testvalid)
   {
     const char_type* __sign = __negative ? __lc->_M_negative_sign
                                          : __lc->_M_positive_sign;
     size_type __i = 1;
     for (; __beg != __end && __i < __sign_size
     && *__beg == __sign[__i]; ++__beg, (void)++__i);

     if (__i != __sign_size)
       __testvalid = false;
   }

 if (__testvalid)
   {

     if (__res.size() > 1)
       {
  const size_type __first = __res.find_first_not_of('0');
  const bool __only_zeros = __first == string::npos;
  if (__first)
    __res.erase(0, __only_zeros ? __res.size() - 1 : __first);
       }


     if (__negative && __res[0] != '0')
       __res.insert(__res.begin(), '-');


     if (__grouping_tmp.size())
       {

  __grouping_tmp += static_cast<char>(__testdecfound ? __last_pos
                         : __n);
  if (!std::__verify_grouping(__lc->_M_grouping,
         __lc->_M_grouping_size,
         __grouping_tmp))
    __err |= ios_base::failbit;
       }


     if (__testdecfound && __n != __lc->_M_frac_digits)
       __testvalid = false;
   }


 if (!__testvalid)
   __err |= ios_base::failbit;
 else
   __units.swap(__res);


 if (__beg == __end)
   __err |= ios_base::eofbit;
 return __beg;
      }
# 367 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, long double& __units) const
    {
      string __str;
      __beg = __intl ? _M_extract<true>(__beg, __end, __io, __err, __str)
              : _M_extract<false>(__beg, __end, __io, __err, __str);
      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, string_type& __digits) const
    {
      typedef typename string::size_type size_type;

      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      string __str;
      __beg = __intl ? _M_extract<true>(__beg, __end, __io, __err, __str)
              : _M_extract<false>(__beg, __end, __io, __err, __str);
      const size_type __len = __str.size();
      if (__len)
 {
   __digits.resize(__len);
   __ctype.widen(__str.data(), __str.data() + __len, &__digits[0]);
 }
      return __beg;
    }

  template<typename _CharT, typename _OutIter>
    template<bool _Intl>
      _OutIter
      money_put<_CharT, _OutIter>::
      _M_insert(iter_type __s, ios_base& __io, char_type __fill,
  const string_type& __digits) const
      {
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;



 const char_type* __beg = __digits.data();

 money_base::pattern __p;
 const char_type* __sign;
 size_type __sign_size;
 if (!(*__beg == __lit[money_base::_S_minus]))
   {
     __p = __lc->_M_pos_format;
     __sign = __lc->_M_positive_sign;
     __sign_size = __lc->_M_positive_sign_size;
   }
 else
   {
     __p = __lc->_M_neg_format;
     __sign = __lc->_M_negative_sign;
     __sign_size = __lc->_M_negative_sign_size;
     if (__digits.size())
       ++__beg;
   }


 size_type __len = __ctype.scan_not(ctype_base::digit, __beg,
        __beg + __digits.size()) - __beg;
 if (__len)
   {



     string_type __value;
     __value.reserve(2 * __len);



     long __paddec = __len - __lc->_M_frac_digits;
     if (__paddec > 0)
         {
  if (__lc->_M_frac_digits < 0)
    __paddec = __len;
    if (__lc->_M_grouping_size)
      {
      __value.assign(2 * __paddec, char_type());
       _CharT* __vend =
        std::__add_grouping(&__value[0], __lc->_M_thousands_sep,
       __lc->_M_grouping,
       __lc->_M_grouping_size,
       __beg, __beg + __paddec);
      __value.erase(__vend - &__value[0]);
      }
    else
    __value.assign(__beg, __paddec);
       }


     if (__lc->_M_frac_digits > 0)
       {
  __value += __lc->_M_decimal_point;
  if (__paddec >= 0)
    __value.append(__beg + __paddec, __lc->_M_frac_digits);
  else
    {

      __value.append(-__paddec, __lit[money_base::_S_zero]);
      __value.append(__beg, __len);
    }
         }


     const ios_base::fmtflags __f = __io.flags()
                                    & ios_base::adjustfield;
     __len = __value.size() + __sign_size;
     __len += ((__io.flags() & ios_base::showbase)
        ? __lc->_M_curr_symbol_size : 0);

     string_type __res;
     __res.reserve(2 * __len);

     const size_type __width = static_cast<size_type>(__io.width());
     const bool __testipad = (__f == ios_base::internal
         && __len < __width);

     for (int __i = 0; __i < 4; ++__i)
       {
  const part __which = static_cast<part>(__p.field[__i]);
  switch (__which)
    {
    case money_base::symbol:
      if (__io.flags() & ios_base::showbase)
        __res.append(__lc->_M_curr_symbol,
       __lc->_M_curr_symbol_size);
      break;
    case money_base::sign:



      if (__sign_size)
        __res += __sign[0];
      break;
    case money_base::value:
      __res += __value;
      break;
    case money_base::space:



      if (__testipad)
        __res.append(__width - __len, __fill);
      else
        __res += __fill;
      break;
    case money_base::none:
      if (__testipad)
        __res.append(__width - __len, __fill);
      break;
    }
       }


     if (__sign_size > 1)
       __res.append(__sign + 1, __sign_size - 1);


     __len = __res.size();
     if (__width > __len)
       {
  if (__f == ios_base::left)

    __res.append(__width - __len, __fill);
  else

    __res.insert(0, __width - __len, __fill);
  __len = __width;
       }


     __s = std::__write(__s, __res.data(), __len);
   }
 __io.width(0);
 return __s;
      }
# 573 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    long double __units) const
    {
      const locale __loc = __io.getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __cs_size = 64;
      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));


      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     "%.*Lf", 0, __units);

      if (__len >= __cs_size)
 {
   __cs_size = __len + 1;
   __cs = static_cast<char*>(__builtin_alloca(__cs_size));
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     "%.*Lf", 0, __units);
 }
# 605 "/usr/include/c++/7/bits/locale_facets_nonio.tcc" 3
      string_type __digits(__len, char_type());
      __ctype.widen(__cs, __cs + __len, &__digits[0]);
      return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits);
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    const string_type& __digits) const
    { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits); }

}




  template<typename _CharT, typename _InIter>
    time_base::dateorder
    time_get<_CharT, _InIter>::do_date_order() const
    { return time_base::no_order; }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm,
     const _CharT* __format) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const size_t __len = char_traits<_CharT>::length(__format);

      ios_base::iostate __tmperr = ios_base::goodbit;
      size_t __i = 0;
      for (; __beg != __end && __i < __len && !__tmperr; ++__i)
 {
   if (__ctype.narrow(__format[__i], 0) == '%')
     {

       char __c = __ctype.narrow(__format[++__i], 0);
       int __mem = 0;
       if (__c == 'E' || __c == 'O')
  __c = __ctype.narrow(__format[++__i], 0);
       switch (__c)
  {
    const char* __cs;
    _CharT __wcs[10];
  case 'a':

    const char_type* __days1[7];
    __tp._M_days_abbreviated(__days1);
    __beg = _M_extract_name(__beg, __end, __mem, __days1,
       7, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_wday = __mem;
    break;
  case 'A':

    const char_type* __days2[7];
    __tp._M_days(__days2);
    __beg = _M_extract_name(__beg, __end, __mem, __days2,
       7, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_wday = __mem;
    break;
  case 'h':
  case 'b':

    const char_type* __months1[12];
    __tp._M_months_abbreviated(__months1);
    __beg = _M_extract_name(__beg, __end, __mem,
       __months1, 12, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem;
    break;
  case 'B':

    const char_type* __months2[12];
    __tp._M_months(__months2);
    __beg = _M_extract_name(__beg, __end, __mem,
       __months2, 12, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem;
    break;
  case 'c':

    const char_type* __dt[2];
    __tp._M_date_time_formats(__dt);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __dt[0]);
    break;
  case 'd':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 31, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mday = __mem;
    break;
  case 'e':


    if (__ctype.is(ctype_base::space, *__beg))
      __beg = _M_extract_num(++__beg, __end, __mem, 1, 9,
        1, __io, __tmperr);
    else
      __beg = _M_extract_num(__beg, __end, __mem, 10, 31,
        2, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mday = __mem;
    break;
  case 'D':

    __cs = "%m/%d/%y";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'H':

    __beg = _M_extract_num(__beg, __end, __mem, 0, 23, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_hour = __mem;
    break;
  case 'I':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_hour = __mem;
    break;
  case 'm':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem - 1;
    break;
  case 'M':

    __beg = _M_extract_num(__beg, __end, __mem, 0, 59, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_min = __mem;
    break;
  case 'n':
    if (__ctype.narrow(*__beg, 0) == '\n')
      ++__beg;
    else
      __tmperr |= ios_base::failbit;
    break;
  case 'R':

    __cs = "%H:%M";
    __ctype.widen(__cs, __cs + 6, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'S':



    __beg = _M_extract_num(__beg, __end, __mem, 0, 60, 2,



      __io, __tmperr);
    if (!__tmperr)
    __tm->tm_sec = __mem;
    break;
  case 't':
    if (__ctype.narrow(*__beg, 0) == '\t')
      ++__beg;
    else
      __tmperr |= ios_base::failbit;
    break;
  case 'T':

    __cs = "%H:%M:%S";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'x':

    const char_type* __dates[2];
    __tp._M_date_formats(__dates);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __dates[0]);
    break;
  case 'X':

    const char_type* __times[2];
    __tp._M_time_formats(__times);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __times[0]);
    break;
  case 'y':
  case 'C':

  case 'Y':




    __beg = _M_extract_num(__beg, __end, __mem, 0, 9999, 4,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_year = __mem < 0 ? __mem + 100 : __mem - 1900;
    break;
  case 'Z':

    if (__ctype.is(ctype_base::upper, *__beg))
      {
        int __tmp;
        __beg = _M_extract_name(__beg, __end, __tmp,
           __timepunct_cache<_CharT>::_S_timezones,
           14, __io, __tmperr);


        if (__beg != __end && !__tmperr && __tmp == 0
     && (*__beg == __ctype.widen('-')
         || *__beg == __ctype.widen('+')))
   {
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 23, 2,
       __io, __tmperr);
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 59, 2,
       __io, __tmperr);
   }
      }
    else
      __tmperr |= ios_base::failbit;
    break;
  default:

    __tmperr |= ios_base::failbit;
  }
     }
   else
     {

       if (__format[__i] == *__beg)
  ++__beg;
       else
  __tmperr |= ios_base::failbit;
     }
 }

      if (__tmperr || __i != __len)
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_num(iter_type __beg, iter_type __end, int& __member,
     int __min, int __max, size_t __len,
     ios_base& __io, ios_base::iostate& __err) const
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __mult = __len == 2 ? 10 : (__len == 4 ? 1000 : 1);

      ++__min;
      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < __len; ++__beg, (void)++__i)
 {
   const char __c = __ctype.narrow(*__beg, '*');
   if (__c >= '0' && __c <= '9')
     {
       __value = __value * 10 + (__c - '0');
       const int __valuec = __value * __mult;
       if (__valuec > __max || __valuec + __mult < __min)
  break;
       __mult /= 10;
     }
   else
     break;
 }
      if (__i == __len)
 __member = __value;

      else if (__len == 4 && __i == 2)
 __member = __value - 100;
      else
 __err |= ios_base::failbit;

      return __beg;
    }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_name(iter_type __beg, iter_type __end, int& __member,
      const _CharT** __names, size_t __indexlen,
      ios_base& __io, ios_base::iostate& __err) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      int* __matches = static_cast<int*>(__builtin_alloca(sizeof(int)
         * __indexlen));
      size_t __nmatches = 0;
      size_t __pos = 0;
      bool __testvalid = true;
      const char_type* __name;





      if (__beg != __end)
 {
   const char_type __c = *__beg;
   for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)
     if (__c == __names[__i1][0]
  || __c == __ctype.toupper(__names[__i1][0]))
       __matches[__nmatches++] = __i1;
 }

      while (__nmatches > 1)
 {

   size_t __minlen = __traits_type::length(__names[__matches[0]]);
   for (size_t __i2 = 1; __i2 < __nmatches; ++__i2)
     __minlen = std::min(__minlen,
         __traits_type::length(__names[__matches[__i2]]));
   ++__beg;
   ++__pos;
   if (__pos < __minlen && __beg != __end)
     for (size_t __i3 = 0; __i3 < __nmatches;)
       {
  __name = __names[__matches[__i3]];
  if (!(__name[__pos] == *__beg))
    __matches[__i3] = __matches[--__nmatches];
  else
    ++__i3;
       }
   else
     break;
 }

      if (__nmatches == 1)
 {

   ++__beg;
   ++__pos;
   __name = __names[__matches[0]];
   const size_t __len = __traits_type::length(__name);
   while (__pos < __len && __beg != __end && __name[__pos] == *__beg)
     ++__beg, (void)++__pos;

   if (__len == __pos)
     __member = __matches[0];
   else
     __testvalid = false;
 }
      else
 __testvalid = false;
      if (!__testvalid)
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,
        const _CharT** __names, size_t __indexlen,
        ios_base& __io, ios_base::iostate& __err) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      int* __matches = static_cast<int*>(__builtin_alloca(2 * sizeof(int)
         * __indexlen));
      size_t __nmatches = 0;
      size_t* __matches_lengths = 0;
      size_t __pos = 0;

      if (__beg != __end)
 {
   const char_type __c = *__beg;
   for (size_t __i = 0; __i < 2 * __indexlen; ++__i)
     if (__c == __names[__i][0]
  || __c == __ctype.toupper(__names[__i][0]))
       __matches[__nmatches++] = __i;
 }

      if (__nmatches)
 {
   ++__beg;
   ++__pos;

   __matches_lengths
     = static_cast<size_t*>(__builtin_alloca(sizeof(size_t)
          * __nmatches));
   for (size_t __i = 0; __i < __nmatches; ++__i)
     __matches_lengths[__i]
       = __traits_type::length(__names[__matches[__i]]);
 }

      for (; __beg != __end; ++__beg, (void)++__pos)
 {
   size_t __nskipped = 0;
   const char_type __c = *__beg;
   for (size_t __i = 0; __i < __nmatches;)
     {
       const char_type* __name = __names[__matches[__i]];
       if (__pos >= __matches_lengths[__i])
  ++__nskipped, ++__i;
       else if (!(__name[__pos] == __c))
  {
    --__nmatches;
    __matches[__i] = __matches[__nmatches];
    __matches_lengths[__i] = __matches_lengths[__nmatches];
  }
       else
  ++__i;
     }
   if (__nskipped == __nmatches)
     break;
 }

      if ((__nmatches == 1 && __matches_lengths[0] == __pos)
   || (__nmatches == 2 && (__matches_lengths[0] == __pos
      || __matches_lengths[1] == __pos)))
 __member = (__matches[0] >= __indexlen
      ? __matches[0] - __indexlen : __matches[0]);
      else
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __times[2];
      __tp._M_time_formats(__times);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __times[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __dates[2];
      __tp._M_date_formats(__dates);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __dates[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const char_type* __days[14];
      __tp._M_days_abbreviated(__days);
      __tp._M_days(__days + 7);
      int __tmpwday;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_wday_or_month(__beg, __end, __tmpwday, __days, 7,
           __io, __tmperr);
      if (!__tmperr)
 __tm->tm_wday = __tmpwday;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
     }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_monthname(iter_type __beg, iter_type __end,
                     ios_base& __io, ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const char_type* __months[24];
      __tp._M_months_abbreviated(__months);
      __tp._M_months(__months + 12);
      int __tmpmon;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_wday_or_month(__beg, __end, __tmpmon, __months, 12,
           __io, __tmperr);
      if (!__tmperr)
 __tm->tm_mon = __tmpmon;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      int __tmpyear;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_num(__beg, __end, __tmpyear, 0, 9999, 4,
        __io, __tmperr);
      if (!__tmperr)
 __tm->tm_year = __tmpyear < 0 ? __tmpyear + 100 : __tmpyear - 1900;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }


  template<typename _CharT, typename _InIter>
    inline
    _InIter
    time_get<_CharT, _InIter>::
    get(iter_type __s, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm, const char_type* __fmt,
        const char_type* __fmtend) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __err = ios_base::goodbit;
      while (__fmt != __fmtend &&
             __err == ios_base::goodbit)
        {
          if (__s == __end)
            {
              __err = ios_base::eofbit | ios_base::failbit;
              break;
            }
          else if (__ctype.narrow(*__fmt, 0) == '%')
            {
              char __format;
              char __mod = 0;
              if (++__fmt == __fmtend)
                {
                  __err = ios_base::failbit;
                  break;
                }
              const char __c = __ctype.narrow(*__fmt, 0);
              if (__c != 'E' && __c != 'O')
                __format = __c;
              else if (++__fmt != __fmtend)
                {
                  __mod = __c;
                  __format = __ctype.narrow(*__fmt, 0);
                }
              else
                {
                  __err = ios_base::failbit;
                  break;
                }
              __s = this->do_get(__s, __end, __io, __err, __tm, __format,
     __mod);
              ++__fmt;
            }
          else if (__ctype.is(ctype_base::space, *__fmt))
            {
              ++__fmt;
              while (__fmt != __fmtend &&
                     __ctype.is(ctype_base::space, *__fmt))
                ++__fmt;

              while (__s != __end &&
                     __ctype.is(ctype_base::space, *__s))
                ++__s;
            }

          else if (__ctype.tolower(*__s) == __ctype.tolower(*__fmt) ||
                   __ctype.toupper(*__s) == __ctype.toupper(*__fmt))
            {
              ++__s;
              ++__fmt;
            }
          else
            {
              __err = ios_base::failbit;
              break;
            }
        }
      return __s;
    }

  template<typename _CharT, typename _InIter>
    inline
    _InIter
    time_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, tm* __tm,
           char __format, char __mod) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __err = ios_base::goodbit;

      char_type __fmt[4];
      __fmt[0] = __ctype.widen('%');
      if (!__mod)
        {
          __fmt[1] = __format;
          __fmt[2] = char_type();
        }
      else
        {
          __fmt[1] = __mod;
          __fmt[2] = __format;
          __fmt[3] = char_type();
        }

      __beg = _M_extract_via_format(__beg, __end, __io, __err, __tm, __fmt);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
 const _CharT* __beg, const _CharT* __end) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      for (; __beg != __end; ++__beg)
 if (__ctype.narrow(*__beg, 0) != '%')
   {
     *__s = *__beg;
     ++__s;
   }
 else if (++__beg != __end)
   {
     char __format;
     char __mod = 0;
     const char __c = __ctype.narrow(*__beg, 0);
     if (__c != 'E' && __c != 'O')
       __format = __c;
     else if (++__beg != __end)
       {
  __mod = __c;
  __format = __ctype.narrow(*__beg, 0);
       }
     else
       break;
     __s = this->do_put(__s, __io, __fill, __tm, __format, __mod);
   }
 else
   break;
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type, const tm* __tm,
    char __format, char __mod) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);



      const size_t __maxlen = 128;
      char_type __res[__maxlen];






      char_type __fmt[4];
      __fmt[0] = __ctype.widen('%');
      if (!__mod)
 {
   __fmt[1] = __format;
   __fmt[2] = char_type();
 }
      else
 {
   __fmt[1] = __mod;
   __fmt[2] = __format;
   __fmt[3] = char_type();
 }

      __tp._M_put(__res, __maxlen, __fmt, __tm);


      return std::__write(__s, __res, char_traits<char_type>::length(__res));
    }





  extern template class moneypunct<char, false>;
  extern template class moneypunct<char, true>;
  extern template class moneypunct_byname<char, false>;
  extern template class moneypunct_byname<char, true>;
  extern template class __cxx11:: money_get<char>;
  extern template class __cxx11:: money_put<char>;
  extern template class __timepunct<char>;
  extern template class time_put<char>;
  extern template class time_put_byname<char>;
  extern template class time_get<char>;
  extern template class time_get_byname<char>;
  extern template class messages<char>;
  extern template class messages_byname<char>;

  extern template
    const moneypunct<char, true>&
    use_facet<moneypunct<char, true> >(const locale&);

  extern template
    const moneypunct<char, false>&
    use_facet<moneypunct<char, false> >(const locale&);

  extern template
    const money_put<char>&
    use_facet<money_put<char> >(const locale&);

  extern template
    const money_get<char>&
    use_facet<money_get<char> >(const locale&);

  extern template
    const __timepunct<char>&
    use_facet<__timepunct<char> >(const locale&);

  extern template
    const time_put<char>&
    use_facet<time_put<char> >(const locale&);

  extern template
    const time_get<char>&
    use_facet<time_get<char> >(const locale&);

  extern template
    const messages<char>&
    use_facet<messages<char> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<char> >(const locale&);

  extern template
    bool
    has_facet<money_put<char> >(const locale&);

  extern template
    bool
    has_facet<money_get<char> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<char> >(const locale&);

  extern template
    bool
    has_facet<time_put<char> >(const locale&);

  extern template
    bool
    has_facet<time_get<char> >(const locale&);

  extern template
    bool
    has_facet<messages<char> >(const locale&);


  extern template class moneypunct<wchar_t, false>;
  extern template class moneypunct<wchar_t, true>;
  extern template class moneypunct_byname<wchar_t, false>;
  extern template class moneypunct_byname<wchar_t, true>;
  extern template class __cxx11:: money_get<wchar_t>;
  extern template class __cxx11:: money_put<wchar_t>;
  extern template class __timepunct<wchar_t>;
  extern template class time_put<wchar_t>;
  extern template class time_put_byname<wchar_t>;
  extern template class time_get<wchar_t>;
  extern template class time_get_byname<wchar_t>;
  extern template class messages<wchar_t>;
  extern template class messages_byname<wchar_t>;

  extern template
    const moneypunct<wchar_t, true>&
    use_facet<moneypunct<wchar_t, true> >(const locale&);

  extern template
    const moneypunct<wchar_t, false>&
    use_facet<moneypunct<wchar_t, false> >(const locale&);

  extern template
    const money_put<wchar_t>&
    use_facet<money_put<wchar_t> >(const locale&);

  extern template
    const money_get<wchar_t>&
    use_facet<money_get<wchar_t> >(const locale&);

  extern template
    const __timepunct<wchar_t>&
    use_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    const time_put<wchar_t>&
    use_facet<time_put<wchar_t> >(const locale&);

  extern template
    const time_get<wchar_t>&
    use_facet<time_get<wchar_t> >(const locale&);

  extern template
    const messages<wchar_t>&
    use_facet<messages<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<messages<wchar_t> >(const locale&);




}
# 2014 "/usr/include/c++/7/bits/locale_facets_nonio.h" 2 3
# 42 "/usr/include/c++/7/locale" 2 3

# 1 "/usr/include/c++/7/bits/locale_conv.h" 1 3
# 38 "/usr/include/c++/7/bits/locale_conv.h" 3
# 1 "/usr/include/c++/7/bits/stringfwd.h" 1 3
# 39 "/usr/include/c++/7/bits/locale_conv.h" 2 3
# 1 "/usr/include/c++/7/bits/allocator.h" 1 3
# 40 "/usr/include/c++/7/bits/locale_conv.h" 2 3
# 1 "/usr/include/c++/7/bits/codecvt.h" 1 3
# 41 "/usr/include/c++/7/bits/locale_conv.h" 2 3
# 1 "/usr/include/c++/7/bits/unique_ptr.h" 1 3
# 42 "/usr/include/c++/7/bits/locale_conv.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _OutStr, typename _InChar, typename _Codecvt,
    typename _State, typename _Fn>
    bool
    __do_str_codecvt(const _InChar* __first, const _InChar* __last,
       _OutStr& __outstr, const _Codecvt& __cvt, _State& __state,
       size_t& __count, _Fn __fn)
    {
      if (__first == __last)
 {
   __outstr.clear();
   __count = 0;
   return true;
 }

      size_t __outchars = 0;
      auto __next = __first;
      const auto __maxlen = __cvt.max_length() + 1;

      codecvt_base::result __result;
      do
 {
   __outstr.resize(__outstr.size() + (__last - __next) * __maxlen);
   auto __outnext = &__outstr.front() + __outchars;
   auto const __outlast = &__outstr.back() + 1;
   __result = (__cvt.*__fn)(__state, __next, __last, __next,
     __outnext, __outlast, __outnext);
   __outchars = __outnext - &__outstr.front();
 }
      while (__result == codecvt_base::partial && __next != __last
      && (__outstr.size() - __outchars) < __maxlen);

      if (__result == codecvt_base::error)
 {
   __count = __next - __first;
   return false;
 }

      if (__result == codecvt_base::noconv)
 {
   __outstr.assign(__first, __last);
   __count = __last - __first;
 }
      else
 {
   __outstr.resize(__outchars);
   __count = __next - __first;
 }

      return true;
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_in(const char* __first, const char* __last,
       basic_string<_CharT, _Traits, _Alloc>& __outstr,
       const codecvt<_CharT, char, _State>& __cvt,
       _State& __state, size_t& __count)
    {
      using _Codecvt = codecvt<_CharT, char, _State>;
      using _ConvFn
 = codecvt_base::result
   (_Codecvt::*)(_State&, const char*, const char*, const char*&,
   _CharT*, _CharT*, _CharT*&) const;
      _ConvFn __fn = &codecvt<_CharT, char, _State>::in;
      return __do_str_codecvt(__first, __last, __outstr, __cvt, __state,
         __count, __fn);
    }

  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_in(const char* __first, const char* __last,
       basic_string<_CharT, _Traits, _Alloc>& __outstr,
       const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_in(__first, __last, __outstr, __cvt, __state, __n);
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_out(const _CharT* __first, const _CharT* __last,
        basic_string<char, _Traits, _Alloc>& __outstr,
        const codecvt<_CharT, char, _State>& __cvt,
        _State& __state, size_t& __count)
    {
      using _Codecvt = codecvt<_CharT, char, _State>;
      using _ConvFn
 = codecvt_base::result
   (_Codecvt::*)(_State&, const _CharT*, const _CharT*, const _CharT*&,
   char*, char*, char*&) const;
      _ConvFn __fn = &codecvt<_CharT, char, _State>::out;
      return __do_str_codecvt(__first, __last, __outstr, __cvt, __state,
         __count, __fn);
    }

  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_out(const _CharT* __first, const _CharT* __last,
        basic_string<char, _Traits, _Alloc>& __outstr,
        const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_out(__first, __last, __outstr, __cvt, __state, __n);
    }



namespace __cxx11 {


  template<typename _Codecvt, typename _Elem = wchar_t,
    typename _Wide_alloc = allocator<_Elem>,
    typename _Byte_alloc = allocator<char>>
    class wstring_convert
    {
    public:
      typedef basic_string<char, char_traits<char>, _Byte_alloc> byte_string;
      typedef basic_string<_Elem, char_traits<_Elem>, _Wide_alloc> wide_string;
      typedef typename _Codecvt::state_type state_type;
      typedef typename wide_string::traits_type::int_type int_type;







      explicit
      wstring_convert(_Codecvt* __pcvt = new _Codecvt()) : _M_cvt(__pcvt)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }
# 198 "/usr/include/c++/7/bits/locale_conv.h" 3
      wstring_convert(_Codecvt* __pcvt, state_type __state)
      : _M_cvt(__pcvt), _M_state(__state), _M_with_cvtstate(true)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }






      explicit
      wstring_convert(const byte_string& __byte_err,
        const wide_string& __wide_err = wide_string())
      : _M_cvt(new _Codecvt),
 _M_byte_err_string(__byte_err), _M_wide_err_string(__wide_err),
 _M_with_strings(true)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }

      ~wstring_convert() = default;



      wstring_convert(const wstring_convert&) = delete;
      wstring_convert& operator=(const wstring_convert&) = delete;


      wide_string
      from_bytes(char __byte)
      {
 char __bytes[2] = { __byte };
 return from_bytes(__bytes, __bytes+1);
      }

      wide_string
      from_bytes(const char* __ptr)
      { return from_bytes(__ptr, __ptr+char_traits<char>::length(__ptr)); }

      wide_string
      from_bytes(const byte_string& __str)
      {
 auto __ptr = __str.data();
 return from_bytes(__ptr, __ptr + __str.size());
      }

      wide_string
      from_bytes(const char* __first, const char* __last)
      {
 if (!_M_with_cvtstate)
   _M_state = state_type();
 wide_string __out{ _M_wide_err_string.get_allocator() };
 if (__str_codecvt_in(__first, __last, __out, *_M_cvt, _M_state,
        _M_count))
   return __out;
 if (_M_with_strings)
   return _M_wide_err_string;
 __throw_range_error("wstring_convert::from_bytes");
      }



      byte_string
      to_bytes(_Elem __wchar)
      {
 _Elem __wchars[2] = { __wchar };
 return to_bytes(__wchars, __wchars+1);
      }

      byte_string
      to_bytes(const _Elem* __ptr)
      {
 return to_bytes(__ptr, __ptr+wide_string::traits_type::length(__ptr));
      }

      byte_string
      to_bytes(const wide_string& __wstr)
      {
 auto __ptr = __wstr.data();
 return to_bytes(__ptr, __ptr + __wstr.size());
      }

      byte_string
      to_bytes(const _Elem* __first, const _Elem* __last)
      {
 if (!_M_with_cvtstate)
   _M_state = state_type();
 byte_string __out{ _M_byte_err_string.get_allocator() };
 if (__str_codecvt_out(__first, __last, __out, *_M_cvt, _M_state,
         _M_count))
   return __out;
 if (_M_with_strings)
   return _M_byte_err_string;
 __throw_range_error("wstring_convert::to_bytes");
      }





      size_t converted() const noexcept { return _M_count; }


      state_type state() const { return _M_state; }

    private:
      unique_ptr<_Codecvt> _M_cvt;
      byte_string _M_byte_err_string;
      wide_string _M_wide_err_string;
      state_type _M_state = state_type();
      size_t _M_count = 0;
      bool _M_with_cvtstate = false;
      bool _M_with_strings = false;
    };

}


  template<typename _Codecvt, typename _Elem = wchar_t,
    typename _Tr = char_traits<_Elem>>
    class wbuffer_convert : public basic_streambuf<_Elem, _Tr>
    {
      typedef basic_streambuf<_Elem, _Tr> _Wide_streambuf;

    public:
      typedef typename _Codecvt::state_type state_type;
# 336 "/usr/include/c++/7/bits/locale_conv.h" 3
      explicit
      wbuffer_convert(streambuf* __bytebuf = 0, _Codecvt* __pcvt = new _Codecvt,
        state_type __state = state_type())
      : _M_buf(__bytebuf), _M_cvt(__pcvt), _M_state(__state)
      {
 if (!_M_cvt)
   __throw_logic_error("wbuffer_convert");

 _M_always_noconv = _M_cvt->always_noconv();

 if (_M_buf)
   {
     this->setp(_M_put_area, _M_put_area + _S_buffer_length);
     this->setg(_M_get_area + _S_putback_length,
         _M_get_area + _S_putback_length,
         _M_get_area + _S_putback_length);
   }
      }

      ~wbuffer_convert() = default;



      wbuffer_convert(const wbuffer_convert&) = delete;
      wbuffer_convert& operator=(const wbuffer_convert&) = delete;

      streambuf* rdbuf() const noexcept { return _M_buf; }

      streambuf*
      rdbuf(streambuf *__bytebuf) noexcept
      {
 auto __prev = _M_buf;
 _M_buf = __bytebuf;
 return __prev;
      }


      state_type state() const noexcept { return _M_state; }

    protected:
      int
      sync()
      { return _M_buf && _M_conv_put() && !_M_buf->pubsync() ? 0 : -1; }

      typename _Wide_streambuf::int_type
      overflow(typename _Wide_streambuf::int_type __out)
      {
 if (!_M_buf || !_M_conv_put())
   return _Tr::eof();
 else if (!_Tr::eq_int_type(__out, _Tr::eof()))
   return this->sputc(__out);
 return _Tr::not_eof(__out);
      }

      typename _Wide_streambuf::int_type
      underflow()
      {
 if (!_M_buf)
   return _Tr::eof();

 if (this->gptr() < this->egptr() || (_M_buf && _M_conv_get()))
   return _Tr::to_int_type(*this->gptr());
 else
   return _Tr::eof();
      }

      streamsize
      xsputn(const typename _Wide_streambuf::char_type* __s, streamsize __n)
      {
 if (!_M_buf || __n == 0)
   return 0;
 streamsize __done = 0;
 do
 {
   auto __nn = std::min<streamsize>(this->epptr() - this->pptr(),
        __n - __done);
   _Tr::copy(this->pptr(), __s + __done, __nn);
   this->pbump(__nn);
   __done += __nn;
 } while (__done < __n && _M_conv_put());
 return __done;
      }

    private:

      bool
      _M_conv_get()
      {
 const streamsize __pb1 = this->gptr() - this->eback();
 const streamsize __pb2 = _S_putback_length;
 const streamsize __npb = std::min(__pb1, __pb2);

 _Tr::move(_M_get_area + _S_putback_length - __npb,
    this->gptr() - __npb, __npb);

 streamsize __nbytes = sizeof(_M_get_buf) - _M_unconv;
 __nbytes = std::min(__nbytes, _M_buf->in_avail());
 if (__nbytes < 1)
   __nbytes = 1;
 __nbytes = _M_buf->sgetn(_M_get_buf + _M_unconv, __nbytes);
 if (__nbytes < 1)
   return false;
 __nbytes += _M_unconv;



 _Elem* __outbuf = _M_get_area + _S_putback_length;
 _Elem* __outnext = __outbuf;
 const char* __bnext = _M_get_buf;

 codecvt_base::result __result;
 if (_M_always_noconv)
   __result = codecvt_base::noconv;
 else
   {
     _Elem* __outend = _M_get_area + _S_buffer_length;

     __result = _M_cvt->in(_M_state,
      __bnext, __bnext + __nbytes, __bnext,
      __outbuf, __outend, __outnext);
   }

 if (__result == codecvt_base::noconv)
   {

     auto __get_buf = reinterpret_cast<const _Elem*>(_M_get_buf);
     _Tr::copy(__outbuf, __get_buf, __nbytes);
     _M_unconv = 0;
     return true;
   }

 if ((_M_unconv = _M_get_buf + __nbytes - __bnext))
   char_traits<char>::move(_M_get_buf, __bnext, _M_unconv);

 this->setg(__outbuf, __outbuf, __outnext);

 return __result != codecvt_base::error;
      }


      bool
      _M_put(...)
      { return false; }

      bool
      _M_put(const char* __p, streamsize __n)
      {
 if (_M_buf->sputn(__p, __n) < __n)
   return false;
 return true;
      }


      bool
      _M_conv_put()
      {
 _Elem* const __first = this->pbase();
 const _Elem* const __last = this->pptr();
 const streamsize __pending = __last - __first;

 if (_M_always_noconv)
   return _M_put(__first, __pending);

 char __outbuf[2 * _S_buffer_length];

 const _Elem* __next = __first;
 const _Elem* __start;
 do
   {
     __start = __next;
     char* __outnext = __outbuf;
     char* const __outlast = __outbuf + sizeof(__outbuf);
     auto __result = _M_cvt->out(_M_state, __next, __last, __next,
     __outnext, __outlast, __outnext);
     if (__result == codecvt_base::error)
       return false;
     else if (__result == codecvt_base::noconv)
       return _M_put(__next, __pending);

     if (!_M_put(__outbuf, __outnext - __outbuf))
       return false;
   }
 while (__next != __last && __next != __start);

 if (__next != __last)
   _Tr::move(__first, __next, __last - __next);

 this->pbump(__first - __next);
 return __next != __first;
      }

      streambuf* _M_buf;
      unique_ptr<_Codecvt> _M_cvt;
      state_type _M_state;

      static const streamsize _S_buffer_length = 32;
      static const streamsize _S_putback_length = 3;
      _Elem _M_put_area[_S_buffer_length];
      _Elem _M_get_area[_S_buffer_length];
      streamsize _M_unconv = 0;
      char _M_get_buf[_S_buffer_length-_S_putback_length];
      bool _M_always_noconv;
    };






}
# 44 "/usr/include/c++/7/locale" 2 3
# 5 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp" 2
# 1 "/usr/include/c++/7/codecvt" 1 3
# 34 "/usr/include/c++/7/codecvt" 3
       
# 35 "/usr/include/c++/7/codecvt" 3
# 45 "/usr/include/c++/7/codecvt" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  enum codecvt_mode
  {
    consume_header = 4,
    generate_header = 2,
    little_endian = 1
  };

  template<typename _Elem, unsigned long _Maxcode = 0x10ffff,
    codecvt_mode _Mode = (codecvt_mode)0>
    class codecvt_utf8 : public codecvt<_Elem, char, mbstate_t>
    {
    public:
      explicit
      codecvt_utf8(size_t __refs = 0);

      ~codecvt_utf8();
    };

  template<typename _Elem, unsigned long _Maxcode = 0x10ffff,
    codecvt_mode _Mode = (codecvt_mode)0>
    class codecvt_utf16 : public codecvt<_Elem, char, mbstate_t>
    {
    public:
      explicit
      codecvt_utf16(size_t __refs = 0);

      ~codecvt_utf16();
    };

  template<typename _Elem, unsigned long _Maxcode = 0x10ffff,
    codecvt_mode _Mode = (codecvt_mode)0>
    class codecvt_utf8_utf16 : public codecvt<_Elem, char, mbstate_t>
    {
    public:
      explicit
      codecvt_utf8_utf16(size_t __refs = 0);

      ~codecvt_utf8_utf16();
    };
# 156 "/usr/include/c++/7/codecvt" 3
  template<typename _Elem> class __codecvt_utf8_base;
  template<typename _Elem> class __codecvt_utf16_base;
  template<typename _Elem> class __codecvt_utf8_utf16_base;

  template<> class __codecvt_utf8_base<char16_t> : public codecvt<char16_t, char, mbstate_t> { public: typedef char16_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8<char16_t, _Maxcode, _Mode> : public __codecvt_utf8_base<char16_t> { public: explicit codecvt_utf8(size_t __refs = 0) : __codecvt_utf8_base<char16_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf16_base<char16_t> : public codecvt<char16_t, char, mbstate_t> { public: typedef char16_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf16<char16_t, _Maxcode, _Mode> : public __codecvt_utf16_base<char16_t> { public: explicit codecvt_utf16(size_t __refs = 0) : __codecvt_utf16_base<char16_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf8_utf16_base<char16_t> : public codecvt<char16_t, char, mbstate_t> { public: typedef char16_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8_utf16<char16_t, _Maxcode, _Mode> : public __codecvt_utf8_utf16_base<char16_t> { public: explicit codecvt_utf8_utf16(size_t __refs = 0) : __codecvt_utf8_utf16_base<char16_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };

  template<> class __codecvt_utf8_base<char32_t> : public codecvt<char32_t, char, mbstate_t> { public: typedef char32_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8<char32_t, _Maxcode, _Mode> : public __codecvt_utf8_base<char32_t> { public: explicit codecvt_utf8(size_t __refs = 0) : __codecvt_utf8_base<char32_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf16_base<char32_t> : public codecvt<char32_t, char, mbstate_t> { public: typedef char32_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf16<char32_t, _Maxcode, _Mode> : public __codecvt_utf16_base<char32_t> { public: explicit codecvt_utf16(size_t __refs = 0) : __codecvt_utf16_base<char32_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf8_utf16_base<char32_t> : public codecvt<char32_t, char, mbstate_t> { public: typedef char32_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8_utf16<char32_t, _Maxcode, _Mode> : public __codecvt_utf8_utf16_base<char32_t> { public: explicit codecvt_utf8_utf16(size_t __refs = 0) : __codecvt_utf8_utf16_base<char32_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };


  template<> class __codecvt_utf8_base<wchar_t> : public codecvt<wchar_t, char, mbstate_t> { public: typedef wchar_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8<wchar_t, _Maxcode, _Mode> : public __codecvt_utf8_base<wchar_t> { public: explicit codecvt_utf8(size_t __refs = 0) : __codecvt_utf8_base<wchar_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf16_base<wchar_t> : public codecvt<wchar_t, char, mbstate_t> { public: typedef wchar_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf16<wchar_t, _Maxcode, _Mode> : public __codecvt_utf16_base<wchar_t> { public: explicit codecvt_utf16(size_t __refs = 0) : __codecvt_utf16_base<wchar_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };
  template<> class __codecvt_utf8_utf16_base<wchar_t> : public codecvt<wchar_t, char, mbstate_t> { public: typedef wchar_t intern_type; typedef char extern_type; typedef mbstate_t state_type; protected: __codecvt_utf8_utf16_base(unsigned long __maxcode, codecvt_mode __mode, size_t __refs) : codecvt(__refs), _M_maxcode(__maxcode), _M_mode(__mode) { } virtual ~__codecvt_utf8_utf16_base(); virtual result do_out(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_unshift(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const; virtual result do_in(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const; virtual int do_encoding() const throw(); virtual bool do_always_noconv() const throw(); virtual int do_length(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const; virtual int do_max_length() const throw(); private: unsigned long _M_maxcode; codecvt_mode _M_mode; }; template<unsigned long _Maxcode, codecvt_mode _Mode> class codecvt_utf8_utf16<wchar_t, _Maxcode, _Mode> : public __codecvt_utf8_utf16_base<wchar_t> { public: explicit codecvt_utf8_utf16(size_t __refs = 0) : __codecvt_utf8_utf16_base<wchar_t>(std::min(_Maxcode, 0x10fffful), _Mode, __refs) { } };



}
# 6 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp" 2

# 1 "../../include/RegularChain/../TriangularSet/../Symbol/../ExpressionTree/ExprTreeNode.hpp" 1
# 8 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Symbol/../ExpressionTree/ExpressionTree.hpp" 1
# 9 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp" 2



# 11 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp"
extern std::wstring string2wstring(const std::string& str);
extern std::string wstring2string(const std::wstring& wstr);
# 23 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp"
class Symbol {
 private:



 union SymbolString {
  std::string* str;
  std::wstring* wstr;
 };




 typedef enum SymbolType{
  NULL_TYPE = 0x0,
  STRING_TYPE,
  WSTRING_TYPE
 } SymbolType;

 SymbolString s;
 SymbolType type;

 public:



  Symbol () : type(NULL_TYPE) {
   s.str = new std::string("");
  }





  Symbol (char c) : type(STRING_TYPE) {
   char localC[2];
   localC[0] = c;
   localC[1] = '\0';
   s.str = new std::string(localC);
  }





  explicit Symbol (const char* c) : type(STRING_TYPE) {
   s.str = new std::string(c);
  }




  explicit Symbol (const wchar_t* c) : type(WSTRING_TYPE) {
   s.wstr = new std::wstring(c);
  }





  explicit Symbol (const std::string& a) : type(STRING_TYPE) {
   s.str = new std::string(a);
  }





  explicit Symbol (const std::wstring& a) : type(WSTRING_TYPE) {
   s.wstr = new std::wstring(a);
  }




  Symbol (const Symbol& a) : type(a.type) {
   switch (type) {
    case NULL_TYPE :
    case STRING_TYPE : {
     s.str = new std::string(*a.s.str);
     break;
    }
    case WSTRING_TYPE: {
     s.wstr = new std::wstring(*a.s.wstr);
     break;
    }
   }
  }




  ~Symbol () {
   switch (type) {
    case NULL_TYPE:
    case STRING_TYPE: {
     delete s.str;
     break;
    }
    case WSTRING_TYPE: {
     delete s.wstr;
     break;
    }
   }
  }
# 151 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp"
  inline Symbol& operator= (char c) {
   char localC[2];
   localC[0] = c;
   localC[1] = '\0';
   return (*this = std::string(localC));
  }






  inline Symbol& operator= (const char* c) {
   std::string s(c);
   return (*this = s);
  }






  inline Symbol& operator= (const std::string& a) {
   switch (type) {
    case NULL_TYPE: {
     if (a != "") {
      type = STRING_TYPE;
      *s.str = a;
     }
     break;
    }
    case STRING_TYPE: {
     if (a == "") {
      type = NULL_TYPE;
     }
     *s.str = a;
     break;
    }
    case WSTRING_TYPE: {
     delete s.wstr;
     s.str = new std::string(a);
     type = STRING_TYPE;
     break;
    }
   }
   return *this;
  }





  inline Symbol& operator= (const Symbol& a) {
   switch (a.type) {
    case NULL_TYPE: {
     switch (type) {
      case NULL_TYPE: {
       break;
      }
      case STRING_TYPE: {
       *s.str = *a.s.str;
       type = NULL_TYPE;
       break;
      }
      case WSTRING_TYPE: {
       delete s.wstr;
       s.str = new std::string("");
       type = NULL_TYPE;
       break;
      }
     }
     break;
    }
    case STRING_TYPE: {
     switch (type) {
      case NULL_TYPE: {
       *s.str = *a.s.str;
       type = STRING_TYPE;
       break;
      }
      case STRING_TYPE: {
       *s.str = *a.s.str;
       break;
      }
      case WSTRING_TYPE: {
       delete s.wstr;
       s.str = new std::string(*a.s.str);
       type = STRING_TYPE;
       break;
      }
     }
     break;
    }
    case WSTRING_TYPE: {
     switch (type) {
      case NULL_TYPE:
      case STRING_TYPE: {
       delete s.str;
       s.wstr = new std::wstring(*a.s.wstr);
       type = WSTRING_TYPE;
       break;
      }
      case WSTRING_TYPE: {
       *s.wstr = *a.s.wstr;
       break;
      }
     }
    }
   }
   return *this;
  }





  inline Symbol& operator+= (const std::string& a) {
   if (a != "") {
    switch (type) {
     case NULL_TYPE: {
      type = STRING_TYPE;
     }
     case STRING_TYPE: {
      *s.str += a;
      break;
     }
     case WSTRING_TYPE: {
      std::wstring b;
      b = string2wstring(a);
      *s.wstr += b;
      break;
     }
    }
   }
   return *this;
  }





  inline Symbol& operator+= (const Symbol& a) {
   switch (type) {
    case NULL_TYPE: {
     switch (a.type) {
      case NULL_TYPE: {
       break;
      }
      case STRING_TYPE: {
       *s.str += *a.s.str;
       type = STRING_TYPE;
       break;
      }
      case WSTRING_TYPE: {
       delete s.str;
       s.wstr = new std::wstring(*a.s.wstr);
       type = WSTRING_TYPE;
      }
     }
     break;
    }
    case STRING_TYPE: {
     switch (a.type) {
      case NULL_TYPE: {
       break;
      }
      case STRING_TYPE: {
       *s.str += *a.s.str;
       break;
      }
      case WSTRING_TYPE: {
       std::wstring b;
       b = string2wstring(*s.str);
       delete s.str;
       s.wstr = new std::wstring(b);
       *s.wstr += *a.s.wstr;
       type = WSTRING_TYPE;
       break;
      }
     }
     break;
    }
    case WSTRING_TYPE: {
     switch (a.type) {
      case NULL_TYPE: {
       break;
      }
      case STRING_TYPE: {
       std::wstring b;
       b = string2wstring(*a.s.str);
       *s.wstr += b;
       break;
      }
      case WSTRING_TYPE: {
       *s.wstr += *a.s.wstr;
      }
     }
    }
   }
   return *this;
  }







  friend bool operator<(const Symbol& s1,const Symbol& s2);







  friend bool operator==(const Symbol& s1,const Symbol& s2);







  friend bool operator== (const std::string& s2, const Symbol& s1);







  friend bool operator== (const Symbol& s1, const std::string& s2);







  friend bool operator!= (const std::string& s2, const Symbol& s1);







  friend bool operator!= (const Symbol& s1, const std::string& s2);
# 416 "../../include/RegularChain/../TriangularSet/../Symbol/Symbol.hpp"
  friend bool operator<=(const Symbol& s1,const Symbol& s2) {
   return (s1<s2 || s1==s2);
  }







  friend bool operator>(const Symbol& s1,const Symbol& s2) {
   return !(s1<=s2);
  }







  friend bool operator>=(const Symbol& s1,const Symbol& s2) {
   return !(s1<s2);
  }







  friend bool operator!=(const Symbol& s1,const Symbol& s2) {
   return !(s1==s2);
  }





  static Symbol randomElement();






  static std::vector<Symbol> randomElements(int n);





  std::string toString() const {
   std::string out;
   switch (type) {
    case NULL_TYPE:
    case STRING_TYPE: {
     out = *(s.str);
     break;
    }
    case WSTRING_TYPE: {
     out = wstring2string(*s.wstr);
     break;
    }
   }
   return out;
  }






  inline friend std::ostream& operator<< (std::ostream &out, const Symbol& b) {
   out << b.toString();
   return out;
  }





  inline ExpressionTree convertToExpressionTree() const {
   ExprTreeNode* etn = new ExprTreeNode(*this);
   ExpressionTree et(etn);
   return et;
  }

};
# 11 "../../include/RegularChain/../TriangularSet/../polynomial.h" 2

# 1 "../../include/RegularChain/../TriangularSet/../Utils/TemplateHelpers.hpp" 1
# 13 "../../include/RegularChain/../TriangularSet/../polynomial.h" 2







template <class Ring, class Derived>
class BPASBasePolynomial : public virtual BPASRing<Derived>


{
 public:





  virtual Derived& operator= (const Ring&) = 0;
  virtual Derived operator+ (const Ring&) const = 0;
  virtual Derived& operator+= (const Ring&) = 0;
  virtual Derived operator- (const Ring&) const = 0;
  virtual Derived operator- () const = 0;
  virtual Derived& operator-= (const Ring&) = 0;
  virtual Derived operator* (const Ring&) const = 0;
  virtual Derived& operator*= (const Ring&) = 0;

  virtual Integer degree() const = 0;
  virtual Ring leadingCoefficient() const = 0;
  virtual Ring trailingCoefficient() const = 0;
  virtual bool isConstantTermZero() const = 0;
  virtual Integer numberOfTerms() const = 0;
};




template <class Ring, class Derived>
class BPASIntegralPolynomial : public virtual BPASBasePolynomial<Ring, Derived>,
          public virtual BPASIntegralDomain<Derived>,
             private Derived_from<Ring, BPASIntegralDomain<Ring>> {

};




template <class Ring, class Derived>
class BPASGCDPolynomial : public virtual BPASIntegralPolynomial<Ring, Derived>,
        public virtual BPASGCDDomain<Derived>,
           private Derived_from<Ring, BPASGCDDomain<Ring>> {
  virtual Ring content() const = 0;
  virtual Derived primitivePart() const = 0;
};




template <class Ring, class Derived>
class BPASIntegralPolynomialTester : public std::conditional<std::is_base_of<BPASIntegralDomain<Ring>, Ring>::value, BPASIntegralPolynomial<Ring, Derived>, BPASBasePolynomial<Ring, Derived>>::type {};







template <class Ring, class Derived>
class BPASPolynomial : public std::conditional<std::is_base_of<BPASGCDDomain<Ring>, Ring>::value,
BPASGCDPolynomial<Ring, Derived>, BPASIntegralPolynomialTester<Ring, Derived> >::type {};




template <class Ring, class Derived>
class BPASUnivariatePolynomial : public virtual BPASPolynomial<Ring, Derived>

{
 public:
  virtual void differentiate() = 0;
  virtual void differentiate(int) = 0;
  virtual Derived derivative() const = 0;
  virtual Derived derivative(int) const = 0;
  virtual Ring evaluate(const Ring& r) const = 0;
  virtual Derived monicDivide(const Derived&) = 0;
  virtual Derived monicDivide(const Derived&, Derived*) const = 0;
  virtual Derived lazyPseudoDivide(const Derived&, Ring*, Ring*) = 0;
  virtual Derived lazyPseudoDivide(const Derived&, Derived*, Ring*, Ring*) const = 0;
  virtual Derived pseudoDivide(const Derived&, Ring*) = 0;
  virtual Derived pseudoDivide(const Derived&, Derived*, Ring*) const = 0;
  virtual Ring coefficient(int) const = 0;
  virtual void setCoefficient(int, const Ring&) = 0;
  virtual void setVariableName (const Symbol&) = 0;
  virtual Symbol variable() const = 0;
  virtual Derived operator<< (int i) const = 0;
  virtual Derived& operator<<= (int) = 0;
  virtual Derived operator>> (int) const = 0;
  virtual Derived& operator>>= (int) = 0;
};




template <class Ring, class Derived>
class BPASMultivariatePolynomial : public virtual BPASPolynomial<Ring, Derived>
{

 public:



  virtual void differentiate(const Symbol&) = 0;
  virtual void differentiate(const Symbol&, int) = 0;
  virtual Derived derivative(const Symbol&) const = 0;
  virtual Derived derivative(const Symbol&, int) const = 0;







  virtual Derived evaluate(int, const Symbol*, const Ring*) const = 0;
  virtual Derived evaluate(const std::vector<Symbol>&, const std::vector<Ring>&) const = 0;

  virtual int numberOfVariables() const = 0;
  virtual int numberOfRingVariables() const = 0;
  virtual Integer degree(const Symbol& v) const = 0;

  virtual Ring coefficient(int, const int*) const = 0;
  virtual Ring coefficient(const std::vector<int>& v) const = 0;
  virtual void setCoefficient(int, const int*, const Ring& r) = 0;
  virtual void setCoefficient(const std::vector<int>& v, const Ring& r) = 0;


  virtual void setRingVariables (const std::vector<Symbol>& xs) = 0;

  virtual std::vector<Symbol> ringVariables() const = 0;


  virtual std::vector<Symbol> variables() const = 0;




};






template <class Ring, class Derived>
class BPASRecursivelyViewedPolynomial : public virtual BPASMultivariatePolynomial<Ring,Derived>
{
 public:
     virtual Derived initial() const = 0;
     virtual Symbol mainVariable() const = 0;
  virtual int mainDegree() const = 0;
  virtual Derived rank() const = 0;
   virtual Derived tail() const = 0;
   virtual Derived head() const = 0;
   virtual Derived separant() const = 0;


};






template <class Domain, class Derived>
class BPASRationalFunction : public virtual BPASFieldOfFractions<Domain, Derived> {

};






template <class Field, class RecursiveFieldPoly>
class BPASTriangularSet :
 private Derived_from<Field, BPASField<Field>>,
 private Derived_from<RecursiveFieldPoly, BPASRecursivelyViewedPolynomial<Field,RecursiveFieldPoly>>
{
 public:

  virtual BPASTriangularSet<Field,RecursiveFieldPoly>& operator= (const BPASTriangularSet<Field,RecursiveFieldPoly>&) = 0;
  virtual BPASTriangularSet<Field,RecursiveFieldPoly>& operator= (BPASTriangularSet<Field,RecursiveFieldPoly>&&) = 0;

  virtual int numberOfVariables() const = 0;
  virtual std::vector<Symbol> variables() const = 0;

  virtual RecursiveFieldPoly select(const Symbol&) const = 0;
  virtual void lower(const Symbol&, BPASTriangularSet<Field,RecursiveFieldPoly>&) const = 0;
  virtual void upper(const Symbol&, BPASTriangularSet<Field,RecursiveFieldPoly>&) const = 0;
  virtual RecursiveFieldPoly pseudoDivide (const RecursiveFieldPoly&, std::vector<RecursiveFieldPoly>*, RecursiveFieldPoly*) const = 0;
  virtual RecursiveFieldPoly normalForm (const RecursiveFieldPoly&, std::vector<RecursiveFieldPoly>*) const = 0;
};





template <class Field, class RecursiveFieldPoly>
class BPASRegularChain : public virtual BPASTriangularSet<Field,RecursiveFieldPoly>
{
 public:

  virtual BPASRegularChain<Field,RecursiveFieldPoly>& operator= (const BPASRegularChain<Field,RecursiveFieldPoly>&) = 0;
  virtual BPASRegularChain<Field,RecursiveFieldPoly>& operator= (BPASRegularChain<Field,RecursiveFieldPoly>&&) = 0;

};




template <class Field, class RecursiveFieldPoly>
class BPASZeroDimensionalRegularChain : public virtual BPASRegularChain<Field,RecursiveFieldPoly>
{
 public:

  virtual BPASZeroDimensionalRegularChain<Field,RecursiveFieldPoly>& operator= (const BPASZeroDimensionalRegularChain<Field,RecursiveFieldPoly>&) = 0;
  virtual BPASZeroDimensionalRegularChain<Field,RecursiveFieldPoly>& operator= (BPASZeroDimensionalRegularChain<Field,RecursiveFieldPoly>&&) = 0;
};
# 6 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../ring.h" 1
# 7 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Utils/TemplateHelpers.hpp" 1
# 8 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 2
# 1 "../../include/RegularChain/../TriangularSet/../Utils/SymbolHelpers.hpp" 1





# 1 "../../include/RegularChain/../TriangularSet/../Utils/../Symbol/Symbol.hpp" 1
# 7 "../../include/RegularChain/../TriangularSet/../Utils/SymbolHelpers.hpp" 2



static bool contains(std::vector<Symbol>& v,const Symbol& a) {
 int aIndex = std::find(v.begin(),v.end(),a) - v.begin();
 if (aIndex == v.size())
  return false;
 else
  return true;
}

static void switchVariables(const Symbol& a, const Symbol& b, std::vector<Symbol>& v) {
 int aIndex = std::find(v.begin(),v.end(),a) - v.begin();
 int bIndex = std::find(v.begin(),v.end(),b) - v.begin();
 Symbol temp;
 temp = std::move(v[aIndex]);
 v[aIndex] = std::move(v[bIndex]);
 v[bIndex] = std::move(temp);
}

static void moveSymbolToBegin(std::vector<Symbol>& v, const Symbol& a) {
 int aIndex = std::find(v.begin(),v.end(),a) - v.begin();
 if (aIndex == v.size()) {
  std::cerr << "BPAS: error, input vector does not contain the input symbol" << std::endl;
  exit(1);
 }
 v.erase(v.begin()+aIndex);
 v.insert(v.begin(),a);
}

static void moveInitialSymbolToEnd(std::vector<Symbol>& v) {
 if (!v.empty()) {
  Symbol s(v[0]);
  v.erase(v.begin());
  v.push_back(s);
 }
}

static void printVariables(std::vector<Symbol>&& vv) {
 std::vector<Symbol> v = vv;
 for (int i=0;i<v.size();++i)
  std::cout << "v[" << i << "] = " << v[i] << std::endl;
}

static void printVariables(const std::vector<Symbol>& vv) {
 std::vector<Symbol> v = vv;
 for (int i=0;i<v.size();++i)
  std::cout << "v[" << i << "] = " << v[i] << std::endl;
}

static void printVariables(std::vector<Symbol>&& vv, std::string name) {
 std::vector<Symbol> v = vv;
 for (int i=0;i<v.size();++i)
  std::cout << name << "[" << i << "] = " << v[i] << std::endl;
}

static void printVariables(const std::vector<Symbol>& vv, std::string name) {
 std::vector<Symbol> v = vv;
 for (int i=0;i<v.size();++i)
  std::cout << name << "[" << i << "] = " << v[i] << std::endl;
}



template <typename T>
static bool isSubset(const std::vector<T>& a, const std::vector<T>& b) {
 std::vector<Symbol> v1(a),v2(b);

 std::sort(v1.begin(), v1.end());
 std::sort(v2.begin(), v2.end());
 return std::includes(v2.begin(), v2.end(), v1.begin(), v1.end());
}

template <typename T>
static bool isAMemberOf(const T& a, const std::vector<T>& b) {
 return (std::find(b.begin(),b.end(),a) != b.end());
}


static std::vector<Symbol> setUnion(const std::vector<Symbol>& a, const std::vector<Symbol>& b) {
 std::vector<Symbol> v1(a),v2(b),v3;

 std::sort(v1.begin(), v1.end());
 std::sort(v2.begin(), v2.end());
 std::set_union(v1.begin(),v1.end(),v2.begin(),v2.end(),back_inserter(v3));

 return v3;
}

static std::vector<Symbol> setIntersection(const std::vector<Symbol> &a, const std::vector<Symbol> &b) {
    std::vector<Symbol> v1(a),v2(b),v3;

    std::sort(v1.begin(), v1.end());
    std::sort(v2.begin(), v2.end());
    std::set_intersection(v1.begin(),v1.end(),v2.begin(),v2.end(),back_inserter(v3));

    return v3;
  }

static std::vector<Symbol> setDifference(const std::vector<Symbol> &a, const std::vector<Symbol> &b) {
    std::vector<Symbol> v1(a),v2(b),v3;

    std::sort(v1.begin(), v1.end());
    std::sort(v2.begin(), v2.end());
    std::set_difference(v1.begin(),v1.end(),v2.begin(),v2.end(),back_inserter(v3));

    return v3;
  }
# 126 "../../include/RegularChain/../TriangularSet/../Utils/SymbolHelpers.hpp"
static std::vector<Symbol> orderPreservingSetIntersection(const std::vector<Symbol> &v1, const std::vector<Symbol> &v2) {
 std::vector<Symbol> v3,ret;

 v3 = setIntersection(v1,v2);

 std::vector<Symbol>::iterator it;
 for (int i=0; i<v1.size(); ++i) {
  if (std::find(v3.begin(),v3.end(),v1[i]) != v3.end())
   ret.push_back(v1[i]);
 }
 return ret;
}
# 149 "../../include/RegularChain/../TriangularSet/../Utils/SymbolHelpers.hpp"
static std::vector<Symbol> orderPreservingSetDifference(const std::vector<Symbol> &v1, const std::vector<Symbol> &v2) {
 std::vector<Symbol> v3,ret;

 v3 = setDifference(v1,v2);

 std::vector<Symbol>::iterator it;
 for (int i=0; i<v1.size(); ++i) {
  if (std::find(v3.begin(),v3.end(),v1[i]) != v3.end())
   ret.push_back(v1[i]);
 }
 return ret;
}
# 172 "../../include/RegularChain/../TriangularSet/../Utils/SymbolHelpers.hpp"
static std::vector<Symbol> orderPreservingSetUnion(const std::vector<Symbol> &v1, const std::vector<Symbol> &v2) {
 std::vector<Symbol> ret(v1);
 printVariables(ret);


 std::vector<Symbol>::iterator it;
 for (int i=0; i<v2.size(); ++i) {
  if (std::find(v1.begin(),v1.end(),v2[i]) == v1.end()) {
   ret.push_back(v2[i]);
  }
 }
 return ret;
}
# 9 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 2




using std::endl;
using std::cerr;

extern long long unsigned int rcProfilingStart;
extern float primitivePartTime;
extern float squareFreePartTime;
extern float subresultantChainTime;
extern float zerodimensionalregularchainTime;
extern float pseudoDivideTime;
extern float normalFormTime;

extern float tsCopyTime;
# 33 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
typedef enum TriangularSetMode {
 TS_FIXED = 0x0,
 TS_VARIABLE = 0x1
} TriangularSetMode;






template <class Field, class RecursivePoly>
class TriangularSet : public virtual BPASTriangularSet<Field,RecursivePoly>
{

 protected:
  TriangularSetMode mode;
  mpz_class characteristic;
  std::vector<RecursivePoly> set;
  std::vector<Symbol> vars;
  std::vector<Symbol> algVars;
  std::vector<Symbol> trcVars;
  Symbol sNMaxVar;

  bool stronglyNormalized;







  void updateTriangularSetStates();







  void updateTriangularSetStates(const RecursivePoly& p);






  int variableIndex(const Symbol& s) const;


 public:






  TriangularSet<Field,RecursivePoly> ();
# 98 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  TriangularSet<Field,RecursivePoly> (const std::vector<Symbol>& xs);
# 108 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  TriangularSet<Field,RecursivePoly> (const std::vector<Symbol>& xs, const std::vector<Symbol>& ts);







  TriangularSet<Field,RecursivePoly> (const RecursivePoly& p);
# 125 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  TriangularSet<Field,RecursivePoly> (const RecursivePoly& p, const std::vector<Symbol>& ts);






  TriangularSet<Field,RecursivePoly> (const TriangularSet<Field,RecursivePoly>& a);
# 153 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  TriangularSet<Field,RecursivePoly> (TriangularSet<Field,RecursivePoly>&& a);
# 179 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  TriangularSet<Field,RecursivePoly> (const std::vector<Symbol>&& vs, const std::vector<Symbol>&& avs, const std::vector<Symbol>&& tvs, const std::vector<RecursivePoly>&& ts, TriangularSetMode tsm, const mpz_class& c);






  ~TriangularSet<Field,RecursivePoly>();
# 204 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  bool isEmpty() const;







  bool isConstantPolynomial(const RecursivePoly& p) const;






  TriangularSet<Field,RecursivePoly>& operator= (const TriangularSet<Field,RecursivePoly>& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (const BPASTriangularSet<Field,RecursivePoly>& a) override;






  TriangularSet<Field,RecursivePoly>& operator= (TriangularSet<Field,RecursivePoly>&& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (BPASTriangularSet<Field,RecursivePoly>&& a) override;







  TriangularSet<Field,RecursivePoly> operator+ (const RecursivePoly& p);







  TriangularSet<Field,RecursivePoly>& operator+= (const RecursivePoly& p);






  bool operator== (TriangularSet<Field,RecursivePoly>& a);






  bool operator!= (TriangularSet<Field,RecursivePoly>& a);






  inline int numberOfVariables() const {
   return vars.size();
  }






  inline int size() const {
   return algVars.size();
  }






  inline int numberOfAlgebraicVariables() const {
   return algVars.size();
  }






  inline int numberOfTranscendentalVariables() const {
   return trcVars.size();
  }






  inline std::vector<Symbol> variables() const {
   return vars;
  }






  inline std::vector<Symbol> mainVariables() const {
   return algVars;
  }






  inline std::vector<Symbol> transcendentalVariables() const {
   return trcVars;
  }






  std::vector<Symbol> allVariables() const;
# 349 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  inline bool isAlgebraic(const Symbol& s) const {
   if (std::find(algVars.begin(),algVars.end(),s) != algVars.end())
    return true;
   else
    return false;
  }







  inline bool isStronglyNormalized() const {
   return stronglyNormalized;
  }






  inline std::vector<RecursivePoly> polynomials() const {
   return set;
  }






  inline int dimension() const {
   return (vars.size() - algVars.size());
  }






  inline int dimensionLower(Symbol v) const {
   if (!isAMemberOf(v,vars)) {
    return 0;
   }
   int vi(variableIndex(v)),varsSize(vi),algVarsSize;
   varsSize = vars.size() - 1 - varsSize;
   for (int i=0; i<algVars.size(); ++i) {
    if (variableIndex(algVars[i])>vi)
     algVarsSize++;
   }
   return (varsSize - algVarsSize);
  }






  inline int codimension() const {
   return algVars.size();
  }
# 419 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  bool canComputeInDimensionZero(const RecursivePoly& p, bool excludeMainVariable = false) const;






  bool isZeroDimensionalMathematically() const;







  RecursivePoly select(const Symbol& s) const;






  void makePrimitive();
# 450 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  void lower(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;
# 459 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  void upper(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;
# 469 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  RecursivePoly pseudoDivide (const RecursivePoly& p, std::vector<RecursivePoly>* quo=
# 469 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                                                     __null
# 469 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                                                         , RecursivePoly* c=
# 469 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                                                                            __null
# 469 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                                                                                ) const;







  RecursivePoly normalForm(const RecursivePoly& p, std::vector<RecursivePoly>* Q=
# 477 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                                                __null
# 477 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                                                    ) const;






  RecursivePoly reduce(const RecursivePoly& p) const;
# 495 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  RecursivePoly reduce(const RecursivePoly& p, RecursivePoly& c, bool usePrimitiveFactorization = true, bool onlyInDimZero = false) const;
# 508 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  RecursivePoly randomTriangularSetPolynomial(std::vector<Symbol> variables, int algVar, std::vector<Symbol> transcendentalVariables, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg);
# 521 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  RecursivePoly randomTriangularSetPolynomial(std::vector<Symbol> variables, int algVar, std::vector<Symbol> transcendentalVariables, std::vector<int> maxDegs, unsigned long int coefBound, double pSparsity, bool includeNeg);
# 534 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  void randomTriangularSet(int nVars, int nAlgVars, int nTrcVars, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg);
# 547 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
  void randomStronglyNormalizedTriangularSet(int nVars, int nAlgVars, int nTrcVars, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg);






  void display();







  inline friend std::ostream& operator<< (std::ostream& out, const TriangularSet<Field,RecursivePoly>& a) {
   bool isNotFirst = 0;
   out << "[";
   for (int i = 0; i < a.set.size(); ++i) {
    if (!a.set[i].isZero()) {
     if (isNotFirst) { out << ", "; }
     out << a.set[i];
     isNotFirst = 1;
    }
   }
   out << "]";
   return out;
  }






  inline ExpressionTree convertToExpressionTree() const {
   if (!set.size()) {
    ExprTreeNode* node = new ExprTreeNode(EXPR_ARRAY, 
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                     __null
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                         , 
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                           __null
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                               , 
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp" 3 4
                                                                 __null
# 583 "../../include/RegularChain/../TriangularSet/triangularset.hpp"
                                                                     );
    return ExpressionTree(node);
   }
   else {
    std::vector<RecursivePoly> tsp;
    for (int i=0; i<set.size(); ++i) {
     if (!set[i].isZero())
      tsp.push_back(set[i]);
    }
    ExpressionTree t;
    t.fromVector<RecursivePoly>(tsp);
    return(t);
   }
  }
};
# 5 "../../include/RegularChain/regularchain.hpp" 2
# 1 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 1




# 1 "../../include/RegularChain/../SubResultantChain/../polynomial.h" 1
# 6 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 2
# 1 "../../include/RegularChain/../SubResultantChain/../ring.h" 1
# 7 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 2
# 1 "../../include/RegularChain/../SubResultantChain/../Ring/BPASIntegralDomain.hpp" 1
# 8 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 2






template <class Domain, class UnivariateDomainPoly>
class SubResultantChain {



 protected:
  std::vector<UnivariateDomainPoly> chain;
  Symbol var;


 public:





  SubResultantChain<Domain,UnivariateDomainPoly> ();






  SubResultantChain<Domain,UnivariateDomainPoly> (const Symbol& v);
# 46 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
  SubResultantChain<Domain,UnivariateDomainPoly> (const UnivariateDomainPoly& a, const UnivariateDomainPoly& b, const Symbol& v);
# 56 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
  SubResultantChain<Domain,UnivariateDomainPoly> (const UnivariateDomainPoly& a, const UnivariateDomainPoly& b, const Symbol& v, const std::vector<Symbol>& R);






  SubResultantChain<Domain,UnivariateDomainPoly> (const SubResultantChain<Domain,UnivariateDomainPoly>& a);






  SubResultantChain<Domain,UnivariateDomainPoly> (SubResultantChain<Domain,UnivariateDomainPoly>&& a);






  ~SubResultantChain<Domain,UnivariateDomainPoly>();






  SubResultantChain<Domain,UnivariateDomainPoly>& operator= (const SubResultantChain<Domain,UnivariateDomainPoly>& a);






  SubResultantChain<Domain,UnivariateDomainPoly>& operator= (SubResultantChain<Domain,UnivariateDomainPoly>&& a);






  bool operator== (SubResultantChain<Domain,UnivariateDomainPoly>& a);






  bool operator!= (SubResultantChain<Domain,UnivariateDomainPoly>& a);






  inline int size() const {
   return chain.size();
  }






  inline Symbol variableName() const {
   return var;
  }






  inline bool isEmpty() const {
   return chain.empty();
  }






  inline std::vector<UnivariateDomainPoly> polynomials() const {
   return chain;
  }







  UnivariateDomainPoly subResultantOfIndex(int i) const;






  UnivariateDomainPoly firstPolynomial() const;






  UnivariateDomainPoly secondPolynomial() const;






  UnivariateDomainPoly resultant() const;
# 186 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
  inline friend std::ostream& operator<< (std::ostream& out, SubResultantChain<Domain,UnivariateDomainPoly>& a) {
   bool isNotFirst = 0;
   out << "[";
   for (int i = 0; i < a.chain.size(); ++i) {
    if (isNotFirst) { out << ", "; }
    out << a.chain[i];
    isNotFirst = 1;
   }
   out << "]";
   return out;
  }







  inline ExpressionTree convertToExpressionTree() {
   if (!chain.size()) {
    ExprTreeNode* node = new ExprTreeNode(EXPR_ARRAY, 
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 3 4
                                                     __null
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
                                                         , 
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 3 4
                                                           __null
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
                                                               , 
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp" 3 4
                                                                 __null
# 206 "../../include/RegularChain/../SubResultantChain/subresultantchain.hpp"
                                                                     );
    return ExpressionTree(node);
   }
   else {
    ExpressionTree t;
    t.fromVector<UnivariateDomainPoly>(chain);
    return(t);
   }
  }
};
# 6 "../../include/RegularChain/regularchain.hpp" 2
# 1 "../../include/RegularChain/../polynomial.h" 1
# 7 "../../include/RegularChain/regularchain.hpp" 2
# 1 "../../include/RegularChain/chainstructures.hpp" 1




# 1 "../../include/RegularChain/../ExpressionTree/ExprTreeNode.hpp" 1
# 6 "../../include/RegularChain/chainstructures.hpp" 2
# 1 "../../include/RegularChain/../ExpressionTree/ExpressionTree.hpp" 1
# 7 "../../include/RegularChain/chainstructures.hpp" 2





template <class RecursivePoly, class RegularChainType>
class PolyChainPair {
 public:
  RecursivePoly poly;
  RegularChainType chain;






  PolyChainPair () {
   poly = RecursivePoly();
   chain = RegularChainType();
  }
# 35 "../../include/RegularChain/chainstructures.hpp"
  PolyChainPair (const RecursivePoly& p, const RegularChainType& rc) {
   poly = RecursivePoly(p);
   chain = RegularChainType(rc);
  }







  PolyChainPair (const PolyChainPair<RecursivePoly,RegularChainType>& a) {
   poly = a.poly;
   chain = a.chain;
  }







  PolyChainPair (const PolyChainPair<RecursivePoly,RegularChainType>&& a) {
   poly = std::move(a.poly);
   chain = std::move(a.chain);
  }







  ~PolyChainPair () {}







  inline PolyChainPair& operator= (const PolyChainPair<RecursivePoly,RegularChainType>& a) {
   poly = a.poly;
   chain = a.chain;
   return *this;
  }







  inline PolyChainPair& operator= (const PolyChainPair<RecursivePoly,RegularChainType>&& a) {
   poly = std::move(a.poly);
   chain = std::move(a.chain);
   return *this;
  }
# 110 "../../include/RegularChain/chainstructures.hpp"
  std::string toString() const {
   std::stringstream ss;
   std::string out;
   ss << "<" << poly << "," << chain << ">";
   out = ss.str();
   return out;
  }






  inline friend std::ostream& operator<< (std::ostream &out, const PolyChainPair<RecursivePoly,RegularChainType>& a) {
   out << a.toString();
   return out;
  }

};






template <class RegularChainType>
class BoolChainPair {
 public:
  bool isTrue;
  RegularChainType chain;






  BoolChainPair () {
   isTrue = false;
   chain = RegularChainType();
  }
# 158 "../../include/RegularChain/chainstructures.hpp"
  BoolChainPair (bool b, const RegularChainType& rc) {
   isTrue = b;
   chain = RegularChainType(rc);
  }






  BoolChainPair (const BoolChainPair<RegularChainType>& a) {
   isTrue = a.isTrue;
   chain = a.chain;
  }






  BoolChainPair (const BoolChainPair<RegularChainType>&& a) {
   isTrue = a.isTrue;
   chain = std::move(a.chain);
  }






  ~BoolChainPair () {}






  inline BoolChainPair& operator= (const BoolChainPair<RegularChainType>& a) {
   isTrue = a.isTrue;
   chain = a.chain;
   return *this;
  }






  inline BoolChainPair& operator= (const BoolChainPair<RegularChainType>&& a) {
   isTrue = a.isTrue;
   chain = std::move(a.chain);
   return *this;
  }
# 228 "../../include/RegularChain/chainstructures.hpp"
  std::string toString() const {
   std::stringstream ss;
   std::string out;
   ss << "<";
   if (isTrue)
    ss << "true";
   else
    ss << "false";
   ss << "," << chain << ">";
   out = ss.str();
   return out;
  }






  inline friend std::ostream& operator<< (std::ostream &out, const BoolChainPair<RegularChainType>& a) {
   out << a.toString();
   return out;
  }

};
# 8 "../../include/RegularChain/regularchain.hpp" 2

extern int intersectDepth;
extern int regularGCDDepth;
extern int intersectFreeDepth;
extern int intersectAlgebraicDepth;
extern int regularizeDepth;
extern int regularizeSingleDepth;
extern int extendDepth;
extern int cleanChainDepth;
extern int depth;

extern float primitivePartTime;
extern float squareFreePartTime;
extern float subresultantChainTime;
extern float zerodimensionalregularchainTime;
extern float pseudoDivideTime;
extern float normalFormTime;
extern float removeRedundantChainsTime;
extern float factorTime;

extern float intersectTime;
extern float regularGCDTime;
extern float intersectFreeTime;
extern float intersectAlgebraicTime;
extern float regularizeTime;
extern float extendTime;
extern float cleanChainTime;
extern float constructChainTime;
extern float constructChainsTime;
extern float GCDFreeFactorizationTime;
extern float ZDIntersectTime;
extern float ZDRegularizeTime;
extern float isRegularTime;
extern float isInSaturatedIdealTime;
extern float cleanSetTime;

extern float tsCopyTime;
extern float rcCopyTime;
extern float zdrcCopyTime;

template <class Field, class RecursivePoly>
class ZeroDimensionalRegularChain;




enum RegularChainOption {
 ASSUME_REGULAR = 0x001,
 ASSUME_REDUCED = 0x002,
 ASSUME_PRIMITIVE = 0x004,
 ASSUME_SQUAREFREE = 0x008,
 ASSUME_ZERODIMENSIONAL = 0x010,
 ASSUME_MAKESCHAIN = 0x020,
 MAINTAIN_SQUAREFREE = 0x040,
 MAINTAIN_NORMALIZED = 0x080,
 MAINTAIN_PRIME = 0x100
};





template <class Field, class RecursivePoly>
class RegularChain : public TriangularSet<Field,RecursivePoly>,
      public virtual BPASRegularChain<Field,RecursivePoly>
{
 protected:
  using TriangularSet<Field,RecursivePoly>::mode;
  using TriangularSet<Field,RecursivePoly>::set;
  using TriangularSet<Field,RecursivePoly>::vars;
  using TriangularSet<Field,RecursivePoly>::algVars;
  using TriangularSet<Field,RecursivePoly>::trcVars;
  using TriangularSet<Field,RecursivePoly>::stronglyNormalized;
  using TriangularSet<Field,RecursivePoly>::characteristic;
  using TriangularSet<Field,RecursivePoly>::updateTriangularSetStates;
  using TriangularSet<Field,RecursivePoly>::variableIndex;
  using TriangularSet<Field,RecursivePoly>::canComputeInDimensionZero;
  using TriangularSet<Field,RecursivePoly>::isZeroDimensionalMathematically;

  int regularChainOptions = MAINTAIN_SQUAREFREE;
  bool isSquareFree;







  void updateRegularChainStates();







  void updateRegularChainStates(const RecursivePoly& p);
# 118 "../../include/RegularChain/regularchain.hpp"
  bool cleanSet(std::vector<RecursivePoly>& polys) const;







  RecursivePoly removeZero(const RecursivePoly& p, const std::vector<Symbol> ringVars) const;
# 137 "../../include/RegularChain/regularchain.hpp"
  void cutRegularChain(const RegularChain<Field,RecursivePoly>& T, const Symbol& v, RegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const;
# 146 "../../include/RegularChain/regularchain.hpp"
  void cutRegularChain(const Symbol& v, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const;
# 155 "../../include/RegularChain/regularchain.hpp"
  void cutRegularChain(const Symbol& v, RegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv) const;
# 167 "../../include/RegularChain/regularchain.hpp"
  void regularizeList(const std::vector<RecursivePoly>& knownRegular, const std::vector<RecursivePoly>& unknownIfRegular, std::vector<RegularChain<Field,RecursivePoly>>& singularComponents, std::vector<RegularChain<Field,RecursivePoly>>& regularComponents, bool lazardDecompose, int heightBound) const;
# 177 "../../include/RegularChain/regularchain.hpp"
  void constructChain(const RecursivePoly& p, int options=ASSUME_REGULAR);
# 186 "../../include/RegularChain/regularchain.hpp"
  void constructChain(const RegularChain<Field,RecursivePoly>& T, int options);
# 195 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> constructChains(const RecursivePoly& p, bool lazardDecompose, int heightBound, int options=ASSUME_REGULAR) const;
# 205 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> constructChains(const RegularChain<Field,RecursivePoly>& T, bool lazardDecompose, int heightBound, int options=ASSUME_REGULAR) const;
# 215 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> intersectFree(const RecursivePoly& p, const Symbol& v, bool lazardDecompose, int heightBound) const;
# 227 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> intersectAlgebraic(const RecursivePoly& p, const RegularChain<Field,RecursivePoly>& T, const Symbol& v, const SubResultantChain<RecursivePoly,RecursivePoly>& src, bool lazardDecompose, int heightBound) const;
# 240 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> cleanChain(const RegularChain<Field,RecursivePoly>& C, const Symbol& v, bool lazardDecompose, int heightBound) const;







  std::vector<PolyChainPair<RecursivePoly,RegularChain<Field,RecursivePoly>>> regularizeSingle(const RecursivePoly& p, bool lazardDecompose, int heightBound) const;
# 258 "../../include/RegularChain/regularchain.hpp"
  std::vector<RecursivePoly> GCDFreeFactorization(const RecursivePoly& p, int type = 1) const;







  std::vector<RegularChain<Field,RecursivePoly>> extend(const RecursivePoly& p, const Symbol& v, bool lazardDecompose, int heightBound) const;







  std::vector<RegularChain<Field,RecursivePoly>> extend(const std::vector<RecursivePoly>& T, const Symbol& v, bool lazardDecompose, int heightBound) const;







  std::vector<RegularChain<Field,RecursivePoly>> extend(const RegularChain<Field,RecursivePoly>& T, const Symbol& v, bool lazardDecompose, int heightBound) const;
# 293 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> squareFreePart(const RecursivePoly& p, const Symbol& v, const SubResultantChain<RecursivePoly,RecursivePoly>& src, bool lazardDecompose, int heightBound, int options=ASSUME_REGULAR) const;
# 329 "../../include/RegularChain/regularchain.hpp"
 public:

  using TriangularSet<Field,RecursivePoly>::allVariables;







  RegularChain<Field,RecursivePoly>();







  RegularChain<Field,RecursivePoly> (const std::vector<Symbol>& xs);
# 356 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly> (const std::vector<Symbol>& xs, const std::vector<Symbol>& ts);







  RegularChain<Field,RecursivePoly> (const RecursivePoly& p);
# 373 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly> (const RecursivePoly& p, const std::vector<Symbol>& ts);






  RegularChain<Field,RecursivePoly> (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a);






  RegularChain<Field,RecursivePoly> (const RegularChain<Field,RecursivePoly>& a);






  RegularChain<Field,RecursivePoly> (const TriangularSet<Field,RecursivePoly>& a);






  RegularChain<Field,RecursivePoly> (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a);






  RegularChain<Field,RecursivePoly> (RegularChain<Field,RecursivePoly>&& a);






  RegularChain<Field,RecursivePoly> (TriangularSet<Field,RecursivePoly>&& a);
# 427 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly> (const std::vector<Symbol>&& vs, const std::vector<Symbol>&& avs, const std::vector<Symbol>&& tvs, const std::vector<RecursivePoly>&& ts, TriangularSetMode tsm, const mpz_class& c);






  static std::vector<RegularChain<Field,RecursivePoly>> constructChains(const TriangularSet<Field,RecursivePoly>& T);






  RegularChain<Field,RecursivePoly>& operator= (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a);






  RegularChain<Field,RecursivePoly>& operator= (const RegularChain<Field,RecursivePoly>& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (const BPASTriangularSet<Field,RecursivePoly>& a) override;






  BPASRegularChain<Field,RecursivePoly>& operator= (const BPASRegularChain<Field,RecursivePoly>& a) override;






  RegularChain<Field,RecursivePoly>& operator= (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a);






  RegularChain<Field,RecursivePoly>& operator= (RegularChain<Field,RecursivePoly>&& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (BPASTriangularSet<Field,RecursivePoly>&& a) override;






  BPASRegularChain<Field,RecursivePoly>& operator= (BPASRegularChain<Field,RecursivePoly>&& a) override;
# 500 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly> operator+ (const RecursivePoly& p) const;
# 509 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly>& operator+= (const RecursivePoly& p);
# 518 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly> operator+ (const RegularChain<Field,RecursivePoly>& T) const;
# 527 "../../include/RegularChain/regularchain.hpp"
  RegularChain<Field,RecursivePoly>& operator+= (const RegularChain<Field,RecursivePoly>& T);






  bool operator== (RegularChain<Field,RecursivePoly>& a);






  bool operator!= (RegularChain<Field,RecursivePoly>& a);






  inline int numberOfVariables() const {
   return TriangularSet<Field,RecursivePoly>::numberOfVariables();
  }






  int options() const;






  void setOptions(int opts);







  bool isKnownToBeSquareFree() const;






  bool isInSaturatedIdealMinimal(const RecursivePoly& p) const;






  bool isInSaturatedIdeal(const RecursivePoly& p) const;







  bool isInSaturatedIdeal(const RecursivePoly& p, RecursivePoly& redp) const;






  bool isInRadicalSaturatedIdeal(const RecursivePoly& p) const;






  bool isRegular(const RecursivePoly& p) const;
# 617 "../../include/RegularChain/regularchain.hpp"
  static bool compareCertifiedNoSplit(const RegularChain<Field,RecursivePoly>& rc1, const RegularChain<Field,RecursivePoly>& rc2);
# 626 "../../include/RegularChain/regularchain.hpp"
  static bool compareHeuristicNoSplit(const RegularChain<Field,RecursivePoly>& rc1, const RegularChain<Field,RecursivePoly>& rc2);






  static std::vector<RegularChain<Field,RecursivePoly>> removeRedundantChains(const std::vector<RegularChain<Field,RecursivePoly>>& lrc);






  inline std::vector<Symbol> variables() const {
   return TriangularSet<Field,RecursivePoly>::variables();
  }






  inline RecursivePoly select(const Symbol& s) const {
   return TriangularSet<Field,RecursivePoly>::select(s);
  }
# 660 "../../include/RegularChain/regularchain.hpp"
  void lower(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;
# 669 "../../include/RegularChain/regularchain.hpp"
  void upper(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;







  void lowerSlice(const Symbol& s);







  std::vector<RegularChain<Field,RecursivePoly>> triangularize(const std::vector<RecursivePoly>& F, bool lazardDecompose = false, int type = 1);
# 694 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> intersect(const RecursivePoly& p, bool lazardDecompose = false, int heightBound = 0) const;
# 704 "../../include/RegularChain/regularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,RegularChain<Field,RecursivePoly>>> regularize(const RecursivePoly& p, bool lazardDecompose = false, int heightBound = 0) const;
# 716 "../../include/RegularChain/regularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,RegularChain<Field,RecursivePoly>>> regularGCD(const RecursivePoly& p, const RecursivePoly& q, const Symbol& v, const SubResultantChain<RecursivePoly,RecursivePoly>& src, bool lazardDecompose = false, int heightBound = 0) const;
# 726 "../../include/RegularChain/regularchain.hpp"
  std::vector<RegularChain<Field,RecursivePoly>> squareFreePart(const RecursivePoly& p, const Symbol& v, bool lazardDecompose = false, int heightBound = 0, int options=ASSUME_REGULAR) const;
# 742 "../../include/RegularChain/regularchain.hpp"
  void randomRegularChain(int nVars, int nAlgVars, int nTrcVars, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg);
# 756 "../../include/RegularChain/regularchain.hpp"
  void randomRegularChain(int nVars, int nAlgVars, int nTrcVars, std::vector<int> maxDegs, unsigned long int coefBound, double pSparsity, bool includeNeg);

};
# 4 "zerodimensionalregularchain.cpp" 2
# 1 "../../include/RegularChain/zerodimensionalregularchain.hpp" 1





# 1 "../../include/RegularChain/../Ring/BPASField.hpp" 1
# 7 "../../include/RegularChain/zerodimensionalregularchain.hpp" 2
# 1 "../../include/RegularChain/regularchain.hpp" 1
# 8 "../../include/RegularChain/zerodimensionalregularchain.hpp" 2




extern long long unsigned int rcProfilingStart;
extern float primitivePartTime;
extern float squareFreePartTime;
extern float subresultantChainTime;
extern float zerodimensionalregularchainTime;
extern float pseudoDivideTime;
extern float normalFormTime;

extern float zdrcCopyTime;





template <class Field, class RecursivePoly>
class ZeroDimensionalRegularChain : public RegularChain<Field,RecursivePoly>,
         public virtual BPASZeroDimensionalRegularChain<Field,RecursivePoly>
{
 protected:

  using RegularChain<Field,RecursivePoly>::mode;
  using RegularChain<Field,RecursivePoly>::set;
  using RegularChain<Field,RecursivePoly>::vars;
  using RegularChain<Field,RecursivePoly>::algVars;
  using RegularChain<Field,RecursivePoly>::trcVars;
  using RegularChain<Field,RecursivePoly>::stronglyNormalized;
  using RegularChain<Field,RecursivePoly>::characteristic;
  using RegularChain<Field,RecursivePoly>::regularChainOptions;

  using RegularChain<Field,RecursivePoly>::updateTriangularSetStates;
  using RegularChain<Field,RecursivePoly>::variableIndex;
# 54 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void cutRegularChain(const ZeroDimensionalRegularChain<Field,RecursivePoly>& T, const Symbol& v, ZeroDimensionalRegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const;
# 63 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void cutRegularChain(const Symbol& v, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const;
# 72 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void cutRegularChain(const Symbol& v, ZeroDimensionalRegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv) const;






  void constructChain(const RecursivePoly& p, int options=ASSUME_REGULAR);






  void constructChain(const RegularChain<Field,RecursivePoly>& T, int options=ASSUME_REGULAR);






  std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> constructChains(const RecursivePoly& p, int options=ASSUME_REGULAR) const;






  std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> constructChains(const RegularChain<Field,RecursivePoly>& T, int options=ASSUME_REGULAR) const;
# 111 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> lastNonZeroSubResultant(const RecursivePoly& f, const RecursivePoly& g, const Symbol& v, bool isGCD) const;
# 123 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> lastNonZeroSubResultant_inner(const RecursivePoly& f, const RecursivePoly& g, const Symbol& v, const SubResultantChain<RecursivePoly,RecursivePoly>& src, bool isGCD) const;







 public:




  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> _regularizeInitial(const RecursivePoly& p) const;



  using RegularChain<Field,RecursivePoly>::allVariables;







  ZeroDimensionalRegularChain<Field,RecursivePoly>();







  ZeroDimensionalRegularChain<Field,RecursivePoly> (const std::vector<Symbol>& ps);







  ZeroDimensionalRegularChain<Field,RecursivePoly> (const RecursivePoly& p);
# 173 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> (const RecursivePoly& p, const std::vector<Symbol>& ts);






  ZeroDimensionalRegularChain<Field,RecursivePoly> (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a);
# 189 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> (const RegularChain<Field,RecursivePoly>& a, int options=0);






  ZeroDimensionalRegularChain<Field,RecursivePoly> (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a);
# 205 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> (RegularChain<Field,RecursivePoly>&& a, int options=0);
# 217 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> (const std::vector<Symbol>&& vs, const std::vector<Symbol>&& avs, const std::vector<Symbol>&& tvs, const std::vector<RecursivePoly>&& ts, TriangularSetMode tsm, const mpz_class& c);






  ZeroDimensionalRegularChain<Field,RecursivePoly>& operator= (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (const BPASTriangularSet<Field,RecursivePoly>& a) override;






  BPASRegularChain<Field,RecursivePoly>& operator= (const BPASRegularChain<Field,RecursivePoly>& a) override;






  BPASZeroDimensionalRegularChain<Field,RecursivePoly>& operator= (const BPASZeroDimensionalRegularChain<Field,RecursivePoly>& a) override;






  ZeroDimensionalRegularChain<Field,RecursivePoly>& operator= (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a);






  BPASTriangularSet<Field,RecursivePoly>& operator= (BPASTriangularSet<Field,RecursivePoly>&& a) override;






  BPASRegularChain<Field,RecursivePoly>& operator= (BPASRegularChain<Field,RecursivePoly>&& a) override;






  BPASZeroDimensionalRegularChain<Field,RecursivePoly>& operator= (BPASZeroDimensionalRegularChain<Field,RecursivePoly>&& a) override;
# 283 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> operator+ (const RecursivePoly& p) const;
# 293 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly>& operator+= (const RecursivePoly& p);
# 302 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly> operator+ (const RegularChain<Field,RecursivePoly>& T) const;
# 311 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  ZeroDimensionalRegularChain<Field,RecursivePoly>& operator+= (const RegularChain<Field,RecursivePoly>& T);







  bool operator== (ZeroDimensionalRegularChain<Field,RecursivePoly>& a);







  bool operator!= (ZeroDimensionalRegularChain<Field,RecursivePoly>& a);







  inline int numberOfVariables() const {
   return RegularChain<Field,RecursivePoly>::numberOfVariables();
  }






  inline int numberOfAlgebraicVariables() const {
   return RegularChain<Field,RecursivePoly>::numberOfAlgebraicVariables();
  }






  inline int numberOfTranscendentalVariables() const {
   return RegularChain<Field,RecursivePoly>::numberOfTranscendentalVariables();
  }
# 364 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  inline std::vector<Symbol> variables() const {
   return RegularChain<Field,RecursivePoly>::variables();
  }






  inline std::vector<Symbol> mainVariables() const {
   return RegularChain<Field,RecursivePoly>::mainVariables();
  }






  inline std::vector<Symbol> transcendentalVariables() const {
   return RegularChain<Field,RecursivePoly>::transcendentalVariables();
  }






  inline bool isAlgebraic(const Symbol& s) const {
   return RegularChain<Field,RecursivePoly>::isAlgebraic(s);
  }






  inline bool isEmpty() const {
   return RegularChain<Field,RecursivePoly>::isEmpty();
  }






  inline std::vector<RecursivePoly> polynomials() const {
   return RegularChain<Field,RecursivePoly>::polynomials();
  }






  inline RecursivePoly select(const Symbol& s) const {
   return RegularChain<Field,RecursivePoly>::select(s);
  }
# 435 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void lower(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;
# 445 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void upper(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const;
# 454 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> intersect(const RecursivePoly& p) const;
# 463 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> regularize(const RecursivePoly& p) const;
# 472 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> regularizeInitial(const RecursivePoly& p) const;
# 481 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> isInvertible(const RecursivePoly& p) const;
# 491 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> regularGCD(const RecursivePoly& p, const RecursivePoly& q, const Symbol& v);
# 503 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void randomZeroDimensionalRegularChain(int nVars, int nTrcVars, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg);
# 515 "../../include/RegularChain/zerodimensionalregularchain.hpp"
  void randomZeroDimensionalRegularChain(int nVars, int nTrcVars, std::vector<int> maxDegs, unsigned long int coefBound, double pSparsity, bool includeNeg);

};
# 5 "zerodimensionalregularchain.cpp" 2
# 1 "../../include/RationalNumberPolynomial/mrpolynomial.h" 1



# 1 "../../include/RationalNumberPolynomial/../polynomial.h" 1
# 5 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../Interval/interval.h" 1



# 1 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/globals.h" 1



# 1 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h" 1
# 9 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
class DyadicRationalNumber {
 private:
  mpz_class num;
                unsigned long long den;

 public:
  DyadicRationalNumber() {
   num = 0;
   den = 0;
  }
  DyadicRationalNumber(mpz_class a) {
   num = a;
   den = 0;
  }
  DyadicRationalNumber(mpz_class a, unsigned long long b) {
   num = a;
   den = b;
  }
  inline mpz_class getNum() {
   return num;
  }
  inline unsigned long long getDen() {
   return den;
  }
  inline void setNum(mpz_class a) {
   num = a;
  }
  inline void setDen(unsigned long long a) {
   den = a;
  }
  inline mpq_class getGMP() {
   mpq_class elem;
   elem.get_num() = num;
   elem.get_den() = 1;
   elem.get_den() <<= den;
   return elem;
  }


  inline DyadicRationalNumber& operator= (DyadicRationalNumber rhs) {
   if (this != &rhs) {
    num = rhs.getNum();
    den = rhs.getDen();
   }
   return *this;
  }
  inline DyadicRationalNumber& operator= (mpz_class a) {
   num = a;
   den = 0;
   return *this;
  }
  inline DyadicRationalNumber& operator+= (DyadicRationalNumber rhs) {
   if (rhs.getNum() != 0) {
    if (num == 0) {
     num = rhs.getNum();
     den = rhs.getDen();
    }
    else if (!den && !rhs.getDen())
     num += rhs.getNum();
    else if (den > rhs.getDen())
     num += rhs.getNum() << (den - rhs.getDen());
    else if (den < rhs.getDen()) {
     num = (num << (rhs.getDen() - den)) + rhs.getNum();
     den = rhs.getDen();
    }
    else {
     mpz_class sum = num + rhs.getNum();
     if (sum == 0) {
      num = 0;
      den = 0;
     }
     else {
      mpz_class com = sum & -sum;
      unsigned long long cbits = 
# 82 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h" 3 4
                                __gmpz_sizeinbase
# 82 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
                                              (com.get_mpz_t(), 2) - 1;
      if (cbits >= den) {
       num = sum >> den;
       den = 0;
      }
      else {
       num = sum >> cbits;
       den -= cbits;
      }
     }
    }
   }
   return *this;
  }
  inline DyadicRationalNumber& operator+= (mpz_class a) {
   DyadicRationalNumber rhs(a);
   *this += rhs;
   return *this;
  }
  inline DyadicRationalNumber& operator-= (DyadicRationalNumber rhs) {
   rhs = -rhs;
   *this += rhs;
   return *this;
  }
  inline DyadicRationalNumber& operator-= (mpz_class a) {
   DyadicRationalNumber rhs(a);
   *this -= rhs;
   return *this;
  }
  inline DyadicRationalNumber& operator*= (DyadicRationalNumber rhs) {
   if (num == 0 || rhs.getNum() == 0) {
    num = 0;
    den = 0;
   }
   else if (!den && !rhs.getDen())
    num *= rhs.getNum();
   else if (!den) {
    mpz_class com = num & -num;
    unsigned long long cbits = 
# 120 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h" 3 4
                              __gmpz_sizeinbase
# 120 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
                                            (com.get_mpz_t(), 2) - 1;
    if (cbits < rhs.getDen()) {
     num = (num >> cbits) * rhs.getNum();
     den = rhs.getDen() - cbits;
    }
    else {
     num = (num >> rhs.getDen()) * rhs.getNum();
     den = 0;
    }
   }
   else if (!rhs.getDen()) {
    mpz_class com = rhs.getNum() & -rhs.getNum();
    unsigned long long cbits = 
# 132 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h" 3 4
                              __gmpz_sizeinbase
# 132 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
                                            (com.get_mpz_t(), 2) - 1;
    if (cbits < den) {
     num *= rhs.getNum() >> cbits;
     den -= cbits;
    }
    else {
     num *= rhs.getNum() >> den;
     den = 0;
    }
   }
   else {
    num *= rhs.getNum();
    den += rhs.getDen();
   }
   return *this;
  }
  inline DyadicRationalNumber& operator*= (mpz_class a) {
   DyadicRationalNumber rhs(a);
   *this *= rhs;
   return *this;
  }

  inline DyadicRationalNumber operator+ (DyadicRationalNumber rhs) {
   DyadicRationalNumber res = *this;
   res += rhs;
   return res;
  }
  inline DyadicRationalNumber operator+ (mpz_class a) {
   DyadicRationalNumber rhs(a);
   DyadicRationalNumber res = *this;
   res += rhs;
   return res;
  }
  inline DyadicRationalNumber operator++ (int a) {
   if (!den)
    num++;
   else {
    mpz_class one = 1;
    one <<= den;
    num += one;
   }
   return *this;
  }
  inline DyadicRationalNumber operator- () const {
   DyadicRationalNumber res;
   res.setNum(-num);
   res.setDen(den);
   return res;
  }
  inline DyadicRationalNumber operator- (DyadicRationalNumber rhs) {
   DyadicRationalNumber res = *this;
   res -= rhs;
   return res;
  }
  inline DyadicRationalNumber operator- (mpz_class a) {
   DyadicRationalNumber rhs(a);
   DyadicRationalNumber res = *this;
   res -= rhs;
   return res;
  }
  inline DyadicRationalNumber operator* (DyadicRationalNumber rhs) {
   DyadicRationalNumber res = *this;
   res *= rhs;
   return res;
  }
  inline DyadicRationalNumber operator* (mpz_class a) {
   DyadicRationalNumber rhs(a);
   DyadicRationalNumber res = *this;
   res *= rhs;
   return res;
  }
  inline mpq_class operator/ (DyadicRationalNumber rhs) {
   mpq_class res = num;
   res /= rhs.getNum();
   if (den < rhs.getDen())
    res <<= (rhs.getDen() - den);
   else if (den > rhs.getDen())
    res >>= (den - rhs.getDen());
   return res;
  }

  inline DyadicRationalNumber& operator<<= (unsigned long long k) {
   if (num != 0) {
    if (!den)
     num <<= k;
    else if (den < k) {
     num <<= k - den;
     den = 0;
    }
    else
     den -= k;
   }
   return *this;
  }
  inline DyadicRationalNumber& operator>>= (unsigned long long k) {
   if (num != 0) {
    if (!den) {
     mpz_class com = num & -num;
     unsigned long long cbits = 
# 230 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h" 3 4
                               __gmpz_sizeinbase
# 230 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
                                             (com.get_mpz_t(), 2) - 1;
     if (cbits < k) {
      num >>= cbits;
      den = k - cbits;
     }
     else
      num >>= k;
    }
    else
     den += k;
   }
   return *this;
  }
  inline DyadicRationalNumber operator<< (unsigned long long k) {
   DyadicRationalNumber res = *this;
   res <<= k;
   return res;
  }
  inline DyadicRationalNumber operator>> (unsigned long long k) {
   DyadicRationalNumber res = *this;
   res >>= k;
   return res;
  }

  inline bool operator== (DyadicRationalNumber rhs) {
   if (rhs.getNum() == num && rhs.getDen() == den)
    return 1;
   else
    return 0;
  }
  inline bool operator== (mpz_class a) {
   if (num == a && !den)
    return 1;
   else
    return 0;
  }
  inline bool operator!= (DyadicRationalNumber rhs) {
   if (rhs.getNum() != num || rhs.getDen() != den)
    return 1;
   else
    return 0;
  }
  inline bool operator!= (mpz_class a) {
   if (num != a || den)
    return 1;
   else
    return 0;
  }
  inline bool operator< (DyadicRationalNumber rhs) {
   if (!den && !rhs.getDen())
    return (num < rhs.getNum())? 1 : 0;
   else {
    unsigned long long min = (den <= rhs.getDen())? den : rhs.getDen();
    mpz_class a = num << (rhs.getDen() - min);
    mpz_class b = rhs.getNum() << (den - min);
    return (a < b)? 1 : 0;
   }
  }
  inline bool operator< (mpz_class a) {
   if (a == 0) {
    if (num < 0)
     return 1;
    else
     return 0;
   }
   if (!den)
    return (num < a)? 1 : 0;
   else {
    a <<= den;
    return (num < a)? 1 : 0;
   }
  }
  inline bool operator<= (DyadicRationalNumber rhs) {
   if (*this == rhs || *this < rhs)
    return 1;
   else
    return 0;
  }
  inline bool operator<= (mpz_class a) {
   if (a == 0) {
    if (num <= 0)
     return 1;
    else
     return 0;
   }
   if (*this == a || *this < a)
    return 1;
   else
    return 0;
  }
  inline bool operator> (DyadicRationalNumber rhs) {
   if (rhs < *this)
    return 1;
   else
    return 0;
  }
  inline bool operator> (mpz_class a) {
   if (a == 0) {
    if (num > 0)
     return 1;
    else
     return 0;
   }
   DyadicRationalNumber rhs(a);
   if (rhs < *this)
    return 1;
   else
    return 0;
  }
  inline bool operator>= (DyadicRationalNumber rhs) {
   if (rhs == *this || rhs < *this)
    return 1;
   else
    return 0;
  }
  inline bool operator>= (mpz_class a) {
   if (a == 0) {
    if (num >= 0)
     return 1;
    else
     return 0;
   }
   DyadicRationalNumber rhs(a);
   if (rhs == *this || rhs < *this)
    return 1;
   else
    return 0;
  }
};
# 367 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
inline int sign(mpq_class a) {
 if (a > 0)
  return 1;
 else if (a < 0)
  return -1;
 else
  return 0;
}
# 383 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/rational.h"
inline int sign(DyadicRationalNumber a) {
 if (a.getNum() > 0)
  return 1;
 else if (a.getNum() < 0)
  return -1;
 else
  return 0;
}





inline DyadicRationalNumber abs (DyadicRationalNumber a) {
 DyadicRationalNumber res;
 mpz_class num = a.getNum();
 if (num >= 0)
  res.setNum(num);
 else
  res.setNum(-num);
 res.setDen(a.getDen());
 return res;
}





std::ostream& operator<<(std::ostream& os, DyadicRationalNumber obj);
# 5 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/globals.h" 2
# 1 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/../polynomial.h" 1
# 6 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/globals.h" 2

typedef mpz_class lfixz;
typedef mpq_class lfixq;
# 23 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/globals.h"
typedef struct {
        std::string poly;
        int exp;
}PolyAndExp;

class LminAndLmax{
        public:
            std::vector<std::pair<int, int> > Lmin;
            std::vector<std::pair<int, int> > Lmax;

            LminAndLmax(int na): Lmin(na, std::make_pair(-1, -1)), Lmax(na, std::make_pair(-1, -1)){}
};
# 44 "../../include/RationalNumberPolynomial/../Interval/../DyadicRationalNumber/globals.h"
class RationalNumberTerm {
        public:
                lfixq coef;
                int v;
                int* degs;



                RationalNumberTerm () : coef(0), v(0) { }
                RationalNumberTerm (const RationalNumberTerm& b) : coef(b.coef), v(b.v) {
                        degs = new int[v];
                        std::copy(b.degs, b.degs+v, degs);
                }
                ~RationalNumberTerm () { if (v) { delete [] degs; } }

                inline RationalNumberTerm& operator= (RationalNumberTerm b) {
                        if (this != &b) {
                                coef = b.coef;
                                v = b.v;
                                degs = new int[v];
                                std::copy(b.degs, b.degs+v, degs);
                        }
                        return *this;
                }
};

class DesNode {
        public:
                int k;
                lfixz c;
                DesNode* left;
                DesNode* right;
                DesNode* parent;
                DesNode* prev;
};

class DesTree {
        private:
                DesNode* root;

        public:
                DesTree();
                DesTree(int _k, lfixz _c);
                ~DesTree();

                DesNode* getNode();

                void addChildren(int k, lfixz c);
                DesNode* nextNode();
};
# 5 "../../include/RationalNumberPolynomial/../Interval/interval.h" 2




class Interval {
 public:
  lfixq left;
  lfixq right;
};





inline void intervalAddition(Interval* res, Interval* a, Interval* b) {
 res->left = a->left + b->left;
 res->right = a->right + b->right;
}





void intervalMultiplication(Interval* res, Interval* a, Interval* b);




class Intervals {
 private:
  int var;
  Symbol* names;
  std::vector<Interval> roots;





 public:





  Intervals() : var(1) {
   names = new Symbol[2];
   names[0] = "1";
   names[1] = "_1";
  }





  Intervals(int v) : var(v) {
   names = new Symbol[var+1];
   names[0] = "1";
   for (int i = 1; i <= var; ++i) {
    std::ostringstream convert;
    convert << var - i + 1;
    names[i] = "_";
    names[i] += convert.str();
   }
  }





  Intervals (const Intervals& b) : var(b.var), roots(b.roots) {
   names = new Symbol[var+1];
   std::copy(b.names, b.names+var+1, names);
  }





  ~Intervals() {
   delete [] names;
   roots.clear();
  }





  inline Intervals& operator= (Intervals b) {
   if (this != &b) {
    delete [] names;
    var = b.var;
    roots = b.roots;
    names = new Symbol[var+1];
    std::copy(b.names, b.names+var+1, names);
   }
   return *this;
  }





  inline int numberOfVariables() {
   return var;
  }






  inline int numberOfIntervals() {
   return roots.size() / var;
  }






  inline void pushInterval(Interval pI) {
   roots.push_back(pI);
  }






  inline void pushInterval(lfixq l, lfixq r) {
   Interval elem;
   elem.left = l;
   elem.right = r;
   roots.push_back(elem);
  }
  inline void pushInterval(double l, double r) {
   Interval elem;
   elem.left = l;
   elem.right = r;
   roots.push_back(elem);
  }





  inline void popInterval() {
   if (roots.size())
    roots.pop_back();
  }





  inline void clear() {
   roots.clear();
  }







  inline Interval* interval(int k, int l=0) {
   return &roots[k*var+l];
  }





  inline Intervals root(int k) {
   Intervals pIs(var);
   for (int i = 0; i < var; ++i)
    pIs.roots.push_back(roots[k*var+i]);
   return pIs;
  }





  inline void setVariableNames (const std::vector<Symbol>& xs) {
   int ns = xs.size();
   if (ns >= var) {
    names[0] = "9";
    for (int i = var, j = 0; i > 0; --i, ++j)
     names[i] = xs[j];
   }
   else
    std::cout << "BPAS: warning, not enough variables to set in Intervals." << std::endl;
  }






  void copyFrom(Intervals& pIs, int k);





  void scale(int k);





  void transformLeft();





  void transformRight();





  void negate();





  void concatenate(Intervals& pIs);







  friend std::ostream& operator<< (std::ostream &out, Intervals& a);
  bool isExactEqual(Intervals& pIs);
};





inline void swapInterval(Interval* a, Interval* b) {
 Interval tmp;
 tmp.left = a->left;
 tmp.right = a->right;
 a->left = b->left;
 a->right = b->right;
 b->left = tmp.left;
 b->right = tmp.right;
}
# 6 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/urpolynomial.h" 1




# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/globals.h" 1
# 6 "../../include/RationalNumberPolynomial/urpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../globals.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h" 1
       







# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h" 1
       
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 1




# 1 "/usr/include/c++/7/fstream" 1 3
# 36 "/usr/include/c++/7/fstream" 3
       
# 37 "/usr/include/c++/7/fstream" 3




# 1 "/usr/include/c++/7/cstdio" 1 3
# 39 "/usr/include/c++/7/cstdio" 3
       
# 40 "/usr/include/c++/7/cstdio" 3
# 42 "/usr/include/c++/7/fstream" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/basic_file.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/7/bits/basic_file.h" 3
       
# 38 "/usr/include/x86_64-linux-gnu/c++/7/bits/basic_file.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++io.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++io.h" 3
# 1 "/usr/include/c++/7/cstdio" 1 3
# 39 "/usr/include/c++/7/cstdio" 3
       
# 40 "/usr/include/c++/7/cstdio" 3
# 36 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++io.h" 2 3



# 38 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++io.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/usr/include/x86_64-linux-gnu/c++/7/bits/basic_file.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();


      __basic_file(__basic_file&& __rv, __c_lock* __lock = 0) noexcept
      : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created)
      {
 __rv._M_cfile = nullptr;
 __rv._M_cfile_created = false;
      }

      __basic_file& operator=(const __basic_file&) = delete;
      __basic_file& operator=(__basic_file&&) = delete;

      void
      swap(__basic_file& __f) noexcept
      {
 std::swap(_M_cfile, __f._M_cfile);
 std::swap(_M_cfile_created, __f._M_cfile_created);
      }


      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 43 "/usr/include/c++/7/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/7/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {

      template<typename _Tp>
 using __chk_state = __and_<is_copy_assignable<_Tp>,
       is_copy_constructible<_Tp>,
       is_default_constructible<_Tp>>;

      static_assert(__chk_state<typename _Traits::state_type>::value,
      "state_type must be CopyAssignable, CopyConstructible"
      " and DefaultConstructible");

      static_assert(is_same<typename _Traits::pos_type,
       fpos<typename _Traits::state_type>>::value,
      "pos_type must be fpos<state_type>");

    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 147 "/usr/include/c++/7/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();


      basic_filebuf(const basic_filebuf&) = delete;
      basic_filebuf(basic_filebuf&&);





      virtual
      ~basic_filebuf()
      { this->close(); }


      basic_filebuf& operator=(const basic_filebuf&) = delete;
      basic_filebuf& operator=(basic_filebuf&&);
      void swap(basic_filebuf&);






      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 296 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 306 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 323 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 355 "/usr/include/c++/7/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 375 "/usr/include/c++/7/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 421 "/usr/include/c++/7/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
 const bool __testin = _M_mode & ios_base::in;
 const bool __testout = (_M_mode & ios_base::out
    || _M_mode & ios_base::app);

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 454 "/usr/include/c++/7/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 481 "/usr/include/c++/7/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 494 "/usr/include/c++/7/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 510 "/usr/include/c++/7/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }

      basic_ifstream(const basic_ifstream&) = delete;

      basic_ifstream(basic_ifstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __istream_type::set_rdbuf(&_M_filebuf); }
# 533 "/usr/include/c++/7/fstream" 3
      ~basic_ifstream()
      { }




      basic_ifstream&
      operator=(const basic_ifstream&) = delete;

      basic_ifstream&
      operator=(basic_ifstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ifstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 565 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 594 "/usr/include/c++/7/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 614 "/usr/include/c++/7/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 632 "/usr/include/c++/7/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 655 "/usr/include/c++/7/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 682 "/usr/include/c++/7/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 696 "/usr/include/c++/7/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 714 "/usr/include/c++/7/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }

      basic_ofstream(const basic_ofstream&) = delete;

      basic_ofstream(basic_ofstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __ostream_type::set_rdbuf(&_M_filebuf); }
# 737 "/usr/include/c++/7/fstream" 3
      ~basic_ofstream()
      { }




      basic_ofstream&
      operator=(const basic_ofstream&) = delete;

      basic_ofstream&
      operator=(basic_ofstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ofstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 769 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 798 "/usr/include/c++/7/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 819 "/usr/include/c++/7/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 838 "/usr/include/c++/7/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 861 "/usr/include/c++/7/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 889 "/usr/include/c++/7/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 901 "/usr/include/c++/7/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }

      basic_fstream(const basic_fstream&) = delete;

      basic_fstream(basic_fstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __iostream_type::set_rdbuf(&_M_filebuf); }
# 939 "/usr/include/c++/7/fstream" 3
      ~basic_fstream()
      { }




      basic_fstream&
      operator=(const basic_fstream&) = delete;

      basic_fstream&
      operator=(basic_fstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_fstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 971 "/usr/include/c++/7/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 1000 "/usr/include/c++/7/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1021 "/usr/include/c++/7/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1040 "/usr/include/c++/7/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };



  template <class _CharT, class _Traits>
    inline void
    swap(basic_filebuf<_CharT, _Traits>& __x,
  basic_filebuf<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ifstream<_CharT, _Traits>& __x,
  basic_ifstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ofstream<_CharT, _Traits>& __x,
  basic_ofstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_fstream<_CharT, _Traits>& __x,
  basic_fstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }



}

# 1 "/usr/include/c++/7/bits/fstream.tcc" 1 3
# 37 "/usr/include/c++/7/bits/fstream.tcc" 3
       
# 38 "/usr/include/c++/7/bits/fstream.tcc" 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }


  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf(basic_filebuf&& __rhs)
    : __streambuf_type(__rhs),
    _M_lock(), _M_file(std::move(__rhs._M_file), &_M_lock),
    _M_mode(std::__exchange(__rhs._M_mode, ios_base::openmode(0))),
    _M_state_beg(std::move(__rhs._M_state_beg)),
    _M_state_cur(std::move(__rhs._M_state_cur)),
    _M_state_last(std::move(__rhs._M_state_last)),
    _M_buf(std::__exchange(__rhs._M_buf, nullptr)),
    _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)),
    _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)),
    _M_reading(std::__exchange(__rhs._M_reading, false)),
    _M_writing(std::__exchange(__rhs._M_writing, false)),
    _M_pback(__rhs._M_pback),
    _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)),
    _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)),
    _M_pback_init(std::__exchange(__rhs._M_pback_init, false)),
    _M_codecvt(__rhs._M_codecvt),
    _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)),
    _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)),
    _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)),
    _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr))
    {
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>&
    basic_filebuf<_CharT, _Traits>::
    operator=(basic_filebuf&& __rhs)
    {
      this->close();
      __streambuf_type::operator=(__rhs);
      _M_file.swap(__rhs._M_file);
      _M_mode = std::__exchange(__rhs._M_mode, ios_base::openmode(0));
      _M_state_beg = std::move(__rhs._M_state_beg);
      _M_state_cur = std::move(__rhs._M_state_cur);
      _M_state_last = std::move(__rhs._M_state_last);
      _M_buf = std::__exchange(__rhs._M_buf, nullptr);
      _M_buf_size = std::__exchange(__rhs._M_buf_size, 1);
      _M_buf_allocated = std::__exchange(__rhs._M_buf_allocated, false);
      _M_ext_buf = std::__exchange(__rhs._M_ext_buf, nullptr);
      _M_ext_buf_size = std::__exchange(__rhs._M_ext_buf_size, 0);
      _M_ext_next = std::__exchange(__rhs._M_ext_next, nullptr);
      _M_ext_end = std::__exchange(__rhs._M_ext_end, nullptr);
      _M_reading = std::__exchange(__rhs._M_reading, false);
      _M_writing = std::__exchange(__rhs._M_writing, false);
      _M_pback_cur_save = std::__exchange(__rhs._M_pback_cur_save, nullptr);
      _M_pback_end_save = std::__exchange(__rhs._M_pback_end_save, nullptr);
      _M_pback_init = std::__exchange(__rhs._M_pback_init, false);
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
      return *this;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    swap(basic_filebuf& __rhs)
    {
      __streambuf_type::swap(__rhs);
      _M_file.swap(__rhs._M_file);
      std::swap(_M_mode, __rhs._M_mode);
      std::swap(_M_state_beg, __rhs._M_state_beg);
      std::swap(_M_state_cur, __rhs._M_state_cur);
      std::swap(_M_state_last, __rhs._M_state_last);
      std::swap(_M_buf, __rhs._M_buf);
      std::swap(_M_buf_size, __rhs._M_buf_size);
      std::swap(_M_buf_allocated, __rhs._M_buf_allocated);
      std::swap(_M_ext_buf, __rhs._M_ext_buf);
      std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size);
      std::swap(_M_ext_next, __rhs._M_ext_next);
      std::swap(_M_ext_end, __rhs._M_ext_end);
      std::swap(_M_reading, __rhs._M_reading);
      std::swap(_M_writing, __rhs._M_writing);
      std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save);
      std::swap(_M_pback_end_save, __rhs._M_pback_end_save);
      std::swap(_M_pback_init, __rhs._M_pback_init);
    }


  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             );
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                                );
         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {

         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 787 "/usr/include/c++/7/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 1082 "/usr/include/c++/7/fstream" 2 3
# 6 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2




# 1 "/usr/include/c++/7/math.h" 1 3
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2



# 1 "/usr/include/c++/7/iterator" 1 3
# 58 "/usr/include/c++/7/iterator" 3
       
# 59 "/usr/include/c++/7/iterator" 3







# 1 "/usr/include/c++/7/bits/stream_iterator.h" 1 3
# 33 "/usr/include/c++/7/bits/stream_iterator.h" 3
       
# 34 "/usr/include/c++/7/bits/stream_iterator.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

      constexpr istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(std::__addressof(__s))
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {


                        ;
 return _M_value;
      }

      const _Tp*
      operator->() const { return std::__addressof((operator*())); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 152 "/usr/include/c++/7/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s)
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
# 184 "/usr/include/c++/7/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };




}
# 67 "/usr/include/c++/7/iterator" 2 3
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/cstring" 1 3
# 39 "/usr/include/c++/7/cstring" 3
       
# 40 "/usr/include/c++/7/cstring" 3
# 16 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/cctype" 1 3
# 39 "/usr/include/c++/7/cctype" 3
       
# 40 "/usr/include/c++/7/cctype" 3
# 17 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/cmath" 1 3
# 39 "/usr/include/c++/7/cmath" 3
       
# 40 "/usr/include/c++/7/cmath" 3
# 18 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/map" 1 3
# 58 "/usr/include/c++/7/map" 3
       
# 59 "/usr/include/c++/7/map" 3

# 1 "/usr/include/c++/7/bits/stl_tree.h" 1 3
# 61 "/usr/include/c++/7/bits/stl_tree.h" 3
       
# 62 "/usr/include/c++/7/bits/stl_tree.h" 3
# 75 "/usr/include/c++/7/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 99 "/usr/include/c++/7/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };


  template<typename _Key_compare>
    struct _Rb_tree_key_compare
    {
      _Key_compare _M_key_compare;

      _Rb_tree_key_compare()
      noexcept(is_nothrow_default_constructible<_Key_compare>::value)

      : _M_key_compare()
      { }

      _Rb_tree_key_compare(const _Key_compare& __comp)
      : _M_key_compare(__comp)
      { }



      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;

      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
      : _M_key_compare(__x._M_key_compare)
      { }

    };


  struct _Rb_tree_header
  {
    _Rb_tree_node_base _M_header;
    size_t _M_node_count;

    _Rb_tree_header() noexcept
    {
      _M_header._M_color = _S_red;
      _M_reset();
    }


    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
    {
      if (__x._M_header._M_parent != nullptr)
 _M_move_data(__x);
      else
 {
   _M_header._M_color = _S_red;
   _M_reset();
 }
    }


    void
    _M_move_data(_Rb_tree_header& __from)
    {
      _M_header._M_color = __from._M_header._M_color;
      _M_header._M_parent = __from._M_header._M_parent;
      _M_header._M_left = __from._M_header._M_left;
      _M_header._M_right = __from._M_header._M_right;
      _M_header._M_parent->_M_parent = &_M_header;
      _M_node_count = __from._M_node_count;

      __from._M_reset();
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
      _M_header._M_left = &_M_header;
      _M_header._M_right = &_M_header;
      _M_node_count = 0;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 231 "/usr/include/c++/7/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_membuf<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
    struct __has_is_transparent
    { };

  template<typename _Cmp, typename _SfinaeType>
    struct __has_is_transparent<_Cmp, _SfinaeType,
    __void_t<typename _Cmp::is_transparent>>
    { typedef void type; };







  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
   : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = 0;

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = 0;
 }


 _Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;


 ~_Reuse_or_alloc_node()
 { _M_t._M_erase(static_cast<_Link_type>(_M_root)); }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg)

   {
     _Link_type __node = static_cast<_Link_type>(_M_extract());
     if (__node)
       {
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, std::forward<_Arg>(__arg));
  return __node;
       }

     return _M_t._M_create_node(std::forward<_Arg>(__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = 0;

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = 0;
     }
   else
     _M_root = 0;

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
   : _M_t(__t) { }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg) const

   { return _M_t._M_create_node(std::forward<_Arg>(__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 619 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename... _Args>
 void
 _M_construct_node(_Link_type __node, _Args&&... __args)
 {
   try
     {
       ::new(__node) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __node->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       __node->~_Rb_tree_node<_Val>();
       _M_put_node(__node);
       throw;
     }
 }

      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
      }


      void
      _M_drop_node(_Link_type __p) noexcept
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<typename _NodeGen>
 _Link_type
 _M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 {
   _Link_type __tmp = __node_gen(*__x->_M_valptr());
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = 0;
   __tmp->_M_right = 0;
   return __tmp;
 }

    protected:

      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>
        struct _Rb_tree_impl
 : public _Node_allocator
 , public _Rb_tree_key_compare<_Key_compare>
 , public _Rb_tree_header
        {
   typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;





   _Rb_tree_impl() = default;
   _Rb_tree_impl(_Rb_tree_impl&&) = default;


   _Rb_tree_impl(const _Rb_tree_impl& __x)
   : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
   , _Base_key_compare(__x._M_key_compare)
   { }






   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
   { }

 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() noexcept
      { return &this->_M_impl._M_header; }

      _Const_Base_ptr
      _M_end() const noexcept
      { return &this->_M_impl._M_header; }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
# 816 "/usr/include/c++/7/bits/stl_tree.h" 3
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);

    private:

      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 867 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename _NodeGen>
 _Link_type
 _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);

      template<typename _NodeGen>
 _Link_type
 _M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 {
   _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
   _M_leftmost() = _S_minimum(__root);
   _M_rightmost() = _S_maximum(__root);
   _M_impl._M_node_count = __x._M_impl._M_node_count;
   return __root;
 }

      _Link_type
      _M_copy(const _Rb_tree& __x)
      {
 _Alloc_node __an(*this);
 return _M_copy(__x, __an);
      }

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

    public:




      _Rb_tree() = default;


      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl)
      {
 if (__x._M_root() != 0)
   _M_root() = _M_copy(__x);
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != nullptr)
   _M_root() = _M_copy(__x);
      }

      _Rb_tree(_Rb_tree&&) = default;

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_header); }

      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_header); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void
      swap(_Rb_tree& __t)
      noexcept(__is_nothrow_swappable<_Compare>::value);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 1087 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 ;
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 ;
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 1143 "/usr/include/c++/7/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 1165 "/usr/include/c++/7/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
        _M_erase(_M_begin());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_find_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_find_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_find_tr(const _Kt& __k) const
 {
   auto __j = _M_lower_bound_tr(__k);
   if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
     __j = end();
   return __j;
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 size_type
 _M_count_tr(const _Kt& __k) const
 {
   auto __p = _M_equal_range_tr(__k);
   return std::distance(__p.first, __p.second);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_lower_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_lower_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (!_M_impl._M_key_compare(_S_key(__x), __k))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_upper_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_upper_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (_M_impl._M_key_compare(__k, _S_key(__x)))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<iterator, iterator>
 _M_equal_range_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   auto __ret = __const_this->_M_equal_range_tr(__k);
   return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<const_iterator, const_iterator>
 _M_equal_range_tr(const _Kt& __k) const
 {
   auto __low = _M_lower_bound_tr(__k);
   auto __high = __low;
   auto& __cmp = _M_impl._M_key_compare;
   while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
     ++__high;
   return { __low, __high };
 }



      bool
      __rb_verify() const;


      _Rb_tree&
      operator=(_Rb_tree&&)
      noexcept(_Alloc_traits::_S_nothrow_move()
        && is_nothrow_move_assignable<_Compare>::value);

      template<typename _Iterator>
 void
 _M_assign_unique(_Iterator, _Iterator);

      template<typename _Iterator>
 void
 _M_assign_equal(_Iterator, _Iterator);

    private:

      void
      _M_move_data(_Rb_tree& __x, std::true_type)
      { _M_impl._M_move_data(__x._M_impl); }



      void
      _M_move_data(_Rb_tree&, std::false_type);


      void
      _M_move_assign(_Rb_tree&, std::true_type);



      void
      _M_move_assign(_Rb_tree&, std::false_type);
# 1528 "/usr/include/c++/7/bits/stl_tree.h" 3
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = typename _Alloc_traits::is_always_equal;
      if (__x._M_root() != nullptr)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 _M_move_data(__x, std::true_type());
      else
 {
   _Alloc_node __an(*this);
   auto __lbd =
     [&__an](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __an(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, true_type)
    {
      clear();
      if (__x._M_root() != nullptr)
 _M_move_data(__x, std::true_type());
      std::__alloc_on_move(_M_get_Node_allocator(),
      __x._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 return _M_move_assign(__x, true_type{});



      _Reuse_or_alloc_node __roan(*this);
      _M_impl._M_reset();
      if (__x._M_root() != nullptr)
 {
   auto __lbd =
     [&__roan](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __roan(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
   __x.clear();
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(_Rb_tree&& __x)
    noexcept(_Alloc_traits::_S_nothrow_move()
      && is_nothrow_move_assignable<_Compare>::value)
    {
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __roan);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_equal(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __roan);
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {


   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {


    clear();
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }


   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     _M_root() = _M_copy(__x, __roan);
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,

   _Arg&& __v,



   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x != 0 || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Link_type __z = __node_gen(std::forward<_Arg>(__v));

 _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
          this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
      {

 _Link_type __top = _M_clone_node(__x, __node_gen);
 __top->_M_parent = __p;

 try
   {
     if (__x->_M_right)
       __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
     __p = __top;
     __x = _S_left(__x);

     while (__x != 0)
       {
  _Link_type __y = _M_clone_node(__x, __node_gen);
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 catch(...)
   {
     _M_erase(__top);
     throw;
   }
 return __top;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x);
       _Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x);
       _Const_Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree& __t)
    noexcept(__is_nothrow_swappable<_Compare>::value)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     _M_impl._M_move_data(__t._M_impl);
 }
      else if (__t._M_root() == 0)
 __t._M_impl._M_move_data(_M_impl);
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }

      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v), __an),
        true);
 }

      return _Res(iterator(__res.first), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   std::forward<_Arg>(__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,

   _Arg&& __v,



   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v),
     __node_gen);
      return iterator(__res.first);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,

         _Arg&& __v,



         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       std::forward<_Arg>(__v),
       __node_gen);

 return _M_insert_equal_lower(std::forward<_Arg>(__v));
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_drop_node(__z);
     return _Res(iterator(__res.first), false);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_drop_node(__z);
     return iterator(__res.first);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_drop_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   _M_erase_aux(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      _M_erase_aux(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }
# 2611 "/usr/include/c++/7/bits/stl_tree.h" 3

}
# 61 "/usr/include/c++/7/map" 2 3
# 1 "/usr/include/c++/7/bits/stl_map.h" 1 3
# 66 "/usr/include/c++/7/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class multimap;
# 97 "/usr/include/c++/7/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 120 "/usr/include/c++/7/bits/stl_map.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 177 "/usr/include/c++/7/bits/stl_map.h" 3
      map() = default;







      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 199 "/usr/include/c++/7/bits/stl_map.h" 3
      map(const map&) = default;







      map(map&&) = default;
# 220 "/usr/include/c++/7/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }
# 264 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 281 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }







      ~map() = default;
# 310 "/usr/include/c++/7/bits/stl_map.h" 3
      map&
      operator=(const map&) = default;


      map&
      operator=(map&&) = default;
# 328 "/usr/include/c++/7/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 483 "/usr/include/c++/7/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 528 "/usr/include/c++/7/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 566 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 596 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 794 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }




      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 std::pair<iterator, bool>
 insert(_Pair&& __x)
 { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 822 "/usr/include/c++/7/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 851 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(const_iterator __position, _Pair&& __x)
 { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 884 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 1024 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 1061 "/usr/include/c++/7/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 1081 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 1115 "/usr/include/c++/7/bits/stl_map.h" 3
      void
      swap(map& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 1162 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1187 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1208 "/usr/include/c++/7/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 1232 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 1257 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 1277 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 1297 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 1326 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1355 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 1393 "/usr/include/c++/7/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1410 "/usr/include/c++/7/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 1477 "/usr/include/c++/7/bits/stl_map.h" 3
}
# 62 "/usr/include/c++/7/map" 2 3
# 1 "/usr/include/c++/7/bits/stl_multimap.h" 1 3
# 64 "/usr/include/c++/7/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class map;
# 95 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 119 "/usr/include/c++/7/bits/stl_multimap.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 174 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap() = default;







      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 196 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(const multimap&) = default;
# 205 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(multimap&&) = default;
# 217 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }
# 260 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_equal(__first, __last); }
# 276 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }







      ~multimap() = default;
# 305 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap&) = default;


      multimap&
      operator=(multimap&&) = default;
# 323 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 481 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 508 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 530 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }




      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(_Pair&& __x)
 { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 571 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(const_iterator __position, _Pair&& __x)
 { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 605 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_equal(__first, __last); }
# 618 "/usr/include/c++/7/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 695 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 732 "/usr/include/c++/7/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 753 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 790 "/usr/include/c++/7/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 836 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 860 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 878 "/usr/include/c++/7/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 902 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 927 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 947 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 967 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 994 "/usr/include/c++/7/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1021 "/usr/include/c++/7/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 1059 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1076 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
  multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 1143 "/usr/include/c++/7/bits/stl_multimap.h" 3
}
# 63 "/usr/include/c++/7/map" 2 3
# 19 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/list" 1 3
# 58 "/usr/include/c++/7/list" 3
       
# 59 "/usr/include/c++/7/list" 3




# 1 "/usr/include/c++/7/bits/stl_list.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_list.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace __detail
  {
 
# 80 "/usr/include/c++/7/bits/stl_list.h" 3
    struct _List_node_base
    {
      _List_node_base* _M_next;
      _List_node_base* _M_prev;

      static void
      swap(_List_node_base& __x, _List_node_base& __y) noexcept;

      void
      _M_transfer(_List_node_base* const __first,
    _List_node_base* const __last) noexcept;

      void
      _M_reverse() noexcept;

      void
      _M_hook(_List_node_base* const __position) noexcept;

      void
      _M_unhook() noexcept;
    };

 
  }




  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {

      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
      _Tp* _M_valptr() { return _M_storage._M_ptr(); }
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }





    };






  template<typename _Tp>
    struct _List_iterator
    {
      typedef _List_iterator<_Tp> _Self;
      typedef _List_node<_Tp> _Node;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;

      _List_iterator() noexcept
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x) noexcept
      : _M_node(__x) { }

      _Self
      _M_const_cast() const noexcept
      { return *this; }


      reference
      operator*() const noexcept
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      __detail::_List_node_base* _M_node;
    };






  template<typename _Tp>
    struct _List_const_iterator
    {
      typedef _List_const_iterator<_Tp> _Self;
      typedef const _List_node<_Tp> _Node;
      typedef _List_iterator<_Tp> iterator;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;

      _List_const_iterator() noexcept
      : _M_node() { }

      explicit
      _List_const_iterator(const __detail::_List_node_base* __x)
      noexcept
      : _M_node(__x) { }

      _List_const_iterator(const iterator& __x) noexcept
      : _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }


      reference
      operator*() const noexcept
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      const __detail::_List_node_base* _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

namespace __cxx11 {

  template<typename _Tp, typename _Alloc>
    class _List_base
    {
    protected:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tp_alloc_traits;
      typedef typename _Tp_alloc_traits::template
 rebind<_List_node<_Tp> >::other _Node_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;

      static size_t
      _S_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last)
      {
 size_t __n = 0;
 while (__first != __last)
   {
     __first = __first->_M_next;
     ++__n;
   }
 return __n;
      }

      struct _List_impl
      : public _Node_alloc_type
      {

 _List_node<size_t> _M_node;




 _List_impl() noexcept
 : _Node_alloc_type(), _M_node()
 { }

 _List_impl(const _Node_alloc_type& __a) noexcept
 : _Node_alloc_type(__a), _M_node()
 { }


 _List_impl(_Node_alloc_type&& __a) noexcept
 : _Node_alloc_type(std::move(__a)), _M_node()
 { }

      };

      _List_impl _M_impl;


      size_t _M_get_size() const { return *_M_impl._M_node._M_valptr(); }

      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }

      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }

      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }

      size_t
      _M_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last) const
      { return _S_distance(__first, __last); }


      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }
# 381 "/usr/include/c++/7/bits/stl_list.h" 3
      typename _Node_alloc_traits::pointer
      _M_get_node()
      { return _Node_alloc_traits::allocate(_M_impl, 1); }

      void
      _M_put_node(typename _Node_alloc_traits::pointer __p) noexcept
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() noexcept
      { return _M_impl; }

      const _Node_alloc_type&
      _M_get_Node_allocator() const noexcept
      { return _M_impl; }

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a) noexcept
      : _M_impl(__a)
      { _M_init(); }


      _List_base(_List_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Node_allocator()))
      { _M_move_nodes(std::move(__x)); }

      _List_base(_List_base&& __x, _Node_alloc_type&& __a)
      : _M_impl(std::move(__a))
      {
 if (__x._M_get_Node_allocator() == _M_get_Node_allocator())
   _M_move_nodes(std::move(__x));
 else
   _M_init();
      }

      void
      _M_move_nodes(_List_base&& __x)
      {
 auto* const __xnode = std::__addressof(__x._M_impl._M_node);
 if (__xnode->_M_next == __xnode)
   _M_init();
 else
   {
     auto* const __node = std::__addressof(_M_impl._M_node);
     __node->_M_next = __xnode->_M_next;
     __node->_M_prev = __xnode->_M_prev;
     __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;
     _M_set_size(__x._M_get_size());
     __x._M_init();
   }
      }



      ~_List_base() noexcept
      { _M_clear(); }

      void
      _M_clear() noexcept;

      void
      _M_init() noexcept
      {
 this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 _M_set_size(0);
      }
    };
# 502 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {
# 514 "/usr/include/c++/7/bits/stl_list.h" 3
      typedef _List_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Tp_alloc_traits _Tp_alloc_traits;
      typedef typename _Base::_Node_alloc_type _Node_alloc_type;
      typedef typename _Base::_Node_alloc_traits _Node_alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_traits::pointer pointer;
      typedef typename _Tp_alloc_traits::const_pointer const_pointer;
      typedef typename _Tp_alloc_traits::reference reference;
      typedef typename _Tp_alloc_traits::const_reference const_reference;
      typedef _List_iterator<_Tp> iterator;
      typedef _List_const_iterator<_Tp> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:


      typedef _List_node<_Tp> _Node;

      using _Base::_M_impl;
      using _Base::_M_put_node;
      using _Base::_M_get_node;
      using _Base::_M_get_Node_allocator;
# 568 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename... _Args>
 _Node*
 _M_create_node(_Args&&... __args)
 {
   auto __p = this->_M_get_node();
   auto& __alloc = _M_get_Node_allocator();
   __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
   _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
     std::forward<_Args>(__args)...);
   __guard = nullptr;
   return __p;
 }


    public:






      list()

      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)

      : _Base() { }





      explicit
      list(const allocator_type& __a) noexcept
      : _Base(_Node_alloc_type(__a)) { }
# 612 "/usr/include/c++/7/bits/stl_list.h" 3
      explicit
      list(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_default_initialize(__n); }
# 625 "/usr/include/c++/7/bits/stl_list.h" 3
      list(size_type __n, const value_type& __value,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_fill_initialize(__n, __value); }
# 652 "/usr/include/c++/7/bits/stl_list.h" 3
      list(const list& __x)
      : _Base(_Node_alloc_traits::
       _S_select_on_copy(__x._M_get_Node_allocator()))
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
# 665 "/usr/include/c++/7/bits/stl_list.h" 3
      list(list&& __x) noexcept
      : _Base(std::move(__x)) { }
# 676 "/usr/include/c++/7/bits/stl_list.h" 3
      list(initializer_list<value_type> __l,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }

      list(const list& __x, const allocator_type& __a)
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }

      list(list&& __x, const allocator_type& __a)
      noexcept(_Node_alloc_traits::_S_always_equal())
      : _Base(std::move(__x), _Node_alloc_type(__a))
      {


 insert(begin(), std::__make_move_if_noexcept_iterator(__x.begin()),
   std::__make_move_if_noexcept_iterator(__x.end()));
      }
# 707 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 list(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
 : _Base(_Node_alloc_type(__a))
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 733 "/usr/include/c++/7/bits/stl_list.h" 3
      ~list() = default;
# 744 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(const list& __x);
# 758 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(list&& __x)
      noexcept(_Node_alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Node_alloc_traits::_S_propagate_on_move_assign()
   || _Node_alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 776 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 794 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 811 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 835 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->_M_assign_dispatch(__l.begin(), __l.end(), __false_type()); }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_Base::_M_get_Node_allocator()); }






      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_node); }






      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      cend() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }







      bool
      empty() const noexcept
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }


      size_type
      size() const noexcept
      { return this->_M_node_count(); }


      size_type
      max_size() const noexcept
      { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }
# 984 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      resize(size_type __new_size);
# 997 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      resize(size_type __new_size, const value_type& __x);
# 1019 "/usr/include/c++/7/bits/stl_list.h" 3
      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1066 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      push_front(const value_type& __x)
      { this->_M_insert(begin(), __x); }


      void
      push_front(value_type&& __x)
      { this->_M_insert(begin(), std::move(__x)); }

      template<typename... _Args>



 void

 emplace_front(_Args&&... __args)
 {
   this->_M_insert(begin(), std::forward<_Args>(__args)...);



 }
# 1102 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      pop_front() noexcept
      { this->_M_erase(begin()); }
# 1116 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }


      void
      push_back(value_type&& __x)
      { this->_M_insert(end(), std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args)
 {
   this->_M_insert(end(), std::forward<_Args>(__args)...);



 }
# 1151 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      pop_back() noexcept
      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
# 1168 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args);
# 1183 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1213 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1232 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1252 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x);
# 1291 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last);
# 1335 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator

      erase(const_iterator __position) noexcept;
# 1360 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last) noexcept



      {
 while (__first != __last)
   __first = erase(__first);
 return __last._M_const_cast();
      }
# 1383 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      swap(list& __x) noexcept
      {
 __detail::_List_node_base::swap(this->_M_impl._M_node,
     __x._M_impl._M_node);

 size_t __xsize = __x._M_get_size();
 __x._M_set_size(this->_M_get_size());
 this->_M_set_size(__xsize);

 _Node_alloc_traits::_S_on_swap(this->_M_get_Node_allocator(),
           __x._M_get_Node_allocator());
      }







      void
      clear() noexcept
      {
 _Base::_M_clear();
 _Base::_M_init();
      }
# 1422 "/usr/include/c++/7/bits/stl_list.h" 3
      void

      splice(const_iterator __position, list&& __x) noexcept



      {
 if (!__x.empty())
   {
     _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __x.begin(), __x.end());

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
      }


      void
      splice(const_iterator __position, list& __x) noexcept
      { splice(__position, std::move(__x)); }
# 1458 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept
# 1473 "/usr/include/c++/7/bits/stl_list.h" 3
      {
 iterator __j = __i._M_const_cast();
 ++__j;
 if (__position == __i || __position == __j)
   return;

 if (this != std::__addressof(__x))
   _M_check_equal_allocators(__x);

 this->_M_transfer(__position._M_const_cast(),
     __i._M_const_cast(), __j);

 this->_M_inc_size(1);
 __x._M_dec_size(1);
      }
# 1500 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __i) noexcept
      { splice(__position, std::move(__x), __i); }
# 1519 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __first,
      const_iterator __last) noexcept
# 1539 "/usr/include/c++/7/bits/stl_list.h" 3
      {
 if (__first != __last)
   {
     if (this != std::__addressof(__x))
       _M_check_equal_allocators(__x);

     size_t __n = this->_M_distance(__first._M_node, __last._M_node);
     this->_M_inc_size(__n);
     __x._M_dec_size(__n);

     this->_M_transfer(__position._M_const_cast(),
         __first._M_const_cast(),
         __last._M_const_cast());
   }
      }
# 1569 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __first,
      const_iterator __last) noexcept
      { splice(__position, std::move(__x), __first, __last); }
# 1586 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      remove(const _Tp& __value);
# 1600 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _Predicate>
 void
 remove_if(_Predicate);
# 1614 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      unique();
# 1629 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _BinaryPredicate>
 void
 unique(_BinaryPredicate);
# 1643 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      merge(list&& __x);

      void
      merge(list& __x)
      { merge(std::move(__x)); }
# 1668 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _StrictWeakOrdering>
 void
 merge(list&& __x, _StrictWeakOrdering __comp);

      template<typename _StrictWeakOrdering>
 void
 merge(list& __x, _StrictWeakOrdering __comp)
 { merge(std::move(__x), __comp); }
# 1687 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      reverse() noexcept
      { this->_M_impl._M_node._M_reverse(); }







      void
      sort();







      template<typename _StrictWeakOrdering>
 void
 sort(_StrictWeakOrdering);

    protected:






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 { _M_fill_initialize(static_cast<size_type>(__n), __x); }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }



      void
      _M_fill_initialize(size_type __n, const value_type& __x)
      {
 for (; __n; --__n)
   push_back(__x);
      }



      void
      _M_default_initialize(size_type __n)
      {
 for (; __n; --__n)
   emplace_back();
      }


      void
      _M_default_append(size_type __n);
# 1765 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type);



      void
      _M_fill_assign(size_type __n, const value_type& __val);



      void
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
# 1797 "/usr/include/c++/7/bits/stl_list.h" 3
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
  _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  __tmp->_M_hook(__position._M_node);
  this->_M_inc_size(1);
       }



      void
      _M_erase(iterator __position) noexcept
      {
 this->_M_dec_size(1);
 __position._M_node->_M_unhook();
 _Node* __n = static_cast<_Node*>(__position._M_node);

 _Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());




 _M_put_node(__n);
      }


      void
      _M_check_equal_allocators(list& __x) noexcept
      {
 if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
     _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
   __builtin_abort();
      }


      const_iterator
      _M_resize_pos(size_type& __new_size) const;


      void
      _M_move_assign(list&& __x, true_type) noexcept
      {
 this->_M_clear();
 if (__x.empty())
   this->_M_init();
 else
   {
     this->_M_impl._M_node._M_next = __x._M_impl._M_node._M_next;
     this->_M_impl._M_node._M_next->_M_prev = &this->_M_impl._M_node;
     this->_M_impl._M_node._M_prev = __x._M_impl._M_node._M_prev;
     this->_M_impl._M_node._M_prev->_M_next = &this->_M_impl._M_node;
     this->_M_set_size(__x._M_get_size());
     __x._M_init();
   }
 std::__alloc_on_move(this->_M_get_Node_allocator(),
        __x._M_get_Node_allocator());
      }

      void
      _M_move_assign(list&& __x, false_type)
      {
 if (__x._M_get_Node_allocator() == this->_M_get_Node_allocator())
   _M_move_assign(std::move(__x), true_type{});
 else


   _M_assign_dispatch(std::__make_move_if_noexcept_iterator(__x.begin()),
        std::__make_move_if_noexcept_iterator(__x.end()),
        __false_type{});
      }

    };
}
# 1882 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    {

      if (__x.size() != __y.size())
 return false;


      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;
      const_iterator __end1 = __x.end();
      const_iterator __end2 = __y.end();

      const_iterator __i1 = __x.begin();
      const_iterator __i2 = __y.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }
# 1916 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }







  template<typename _Tp>
    inline ptrdiff_t
    __distance(std::_List_iterator<_Tp> __first,
        std::_List_iterator<_Tp> __last,
        input_iterator_tag __tag)
    {
      typedef std::_List_const_iterator<_Tp> _CIter;
      return std::__distance(_CIter(__first), _CIter(__last), __tag);
    }

  template<typename _Tp>
    inline ptrdiff_t
    __distance(std::_List_const_iterator<_Tp> __first,
        std::_List_const_iterator<_Tp> __last,
        input_iterator_tag)
    {
      typedef std::_List_node<size_t> _Sentinel;
      std::_List_const_iterator<_Tp> __beyond = __last;
      ++__beyond;
      bool __whole = __first == __beyond;
      if (__builtin_constant_p (__whole) && __whole)
 return *static_cast<const _Sentinel*>(__last._M_node)->_M_valptr();

      ptrdiff_t __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }



}
# 64 "/usr/include/c++/7/list" 2 3
# 1 "/usr/include/c++/7/bits/list.tcc" 1 3
# 59 "/usr/include/c++/7/bits/list.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() noexcept
    {
      typedef _List_node<_Tp> _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
      while (__cur != &_M_impl._M_node)
 {
   _Node* __tmp = static_cast<_Node*>(__cur);
   __cur = __tmp->_M_next;
   _Tp* __val = __tmp->_M_valptr();

   _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);



   _M_put_node(__tmp);
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 __tmp->_M_hook(__position._M_const_cast()._M_node);
 this->_M_inc_size(1);
 return iterator(__tmp);
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
      this->_M_inc_size(1);
      return iterator(__tmp);
    }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
    insert(const_iterator __position, size_type __n, const value_type& __x)
    {
      if (__n)
 {
   list __tmp(__n, __x, get_allocator());
   iterator __it = __tmp.begin();
   splice(__position, __tmp);
   return __it;
 }
      return __position._M_const_cast();
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator, typename>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      insert(const_iterator __position, _InputIterator __first,
      _InputIterator __last)
      {
 list __tmp(__first, __last, get_allocator());
 if (!__tmp.empty())
   {
     iterator __it = __tmp.begin();
     splice(__position, __tmp);
     return __it;
   }
 return __position._M_const_cast();
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    erase(const_iterator __position) noexcept



    {
      iterator __ret = iterator(__position._M_node->_M_next);
      _M_erase(__position._M_const_cast());
      return __ret;
    }
# 172 "/usr/include/c++/7/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::const_iterator
    list<_Tp, _Alloc>::
    _M_resize_pos(size_type& __new_size) const
    {
      const_iterator __i;

      const size_type __len = size();
      if (__new_size < __len)
 {
   if (__new_size <= __len / 2)
     {
       __i = begin();
       std::advance(__i, __new_size);
     }
   else
     {
       __i = end();
       ptrdiff_t __num_erase = __len - __new_size;
       std::advance(__i, -__num_erase);
     }
   __new_size = 0;
   return __i;
 }
      else
 __i = end();





      __new_size -= __len;
      return __i;
    }


  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      size_type __i = 0;
      try
 {
   for (; __i < __n; ++__i)
     emplace_back();
 }
      catch(...)
 {
   for (; __i; --__i)
     pop_back();
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size)
    {
      const_iterator __i = _M_resize_pos(__new_size);
      if (__new_size)
 _M_default_append(__new_size);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size, const value_type& __x)
    {
      const_iterator __i = _M_resize_pos(__new_size);
      if (__new_size)
        insert(end(), __new_size, __x);
      else
        erase(__i, end());
    }
# 264 "/usr/include/c++/7/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    list<_Tp, _Alloc>&
    list<_Tp, _Alloc>::
    operator=(const list& __x)
    {
      if (this != std::__addressof(__x))
 {

   if (_Node_alloc_traits::_S_propagate_on_copy_assign())
     {
              auto& __this_alloc = this->_M_get_Node_allocator();
              auto& __that_alloc = __x._M_get_Node_allocator();
              if (!_Node_alloc_traits::_S_always_equal()
           && __this_alloc != __that_alloc)
         {

    clear();
  }
       std::__alloc_on_copy(__this_alloc, __that_alloc);
            }

   _M_assign_dispatch(__x.begin(), __x.end(), __false_type());
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_fill_assign(size_type __n, const value_type& __val)
    {
      iterator __i = begin();
      for (; __i != end() && __n > 0; ++__i, --__n)
        *__i = __val;
      if (__n > 0)
        insert(end(), __n, __val);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
    __false_type)
      {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (; __first1 != __last1 && __first2 != __last2;
      ++__first1, ++__first2)
          *__first1 = *__first2;
        if (__first2 == __last2)
          erase(__first1, __last1);
        else
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      iterator __extra = __last;
      while (__first != __last)
 {
   iterator __next = __first;
   ++__next;
   if (*__first == __value)
     {



       if (std::__addressof(*__first) != std::__addressof(__value))
  _M_erase(__first);
       else
  __extra = __first;
     }
   __first = __next;
 }
      if (__extra != __last)
 _M_erase(__extra);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    unique()
    {
      iterator __first = begin();
      iterator __last = end();
      if (__first == __last)
 return;
      iterator __next = __first;
      while (++__next != __last)
 {
   if (*__first == *__next)
     _M_erase(__next);
   else
     __first = __next;
   __next = __first;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::

    merge(list&& __x)



    {


      if (this != std::__addressof(__x))
 {
   _M_check_equal_allocators(__x);

   iterator __first1 = begin();
   iterator __last1 = end();
   iterator __first2 = __x.begin();
   iterator __last2 = __x.end();
   const size_t __orig_size = __x.size();
   try {
     while (__first1 != __last1 && __first2 != __last2)
       if (*__first2 < *__first1)
  {
    iterator __next = __first2;
    _M_transfer(__first1, __first2, ++__next);
    __first2 = __next;
  }
       else
  ++__first1;
     if (__first2 != __last2)
       _M_transfer(__last1, __first2, __last2);

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
   catch(...)
     {
       const size_t __dist = std::distance(__first2, __last2);
       this->_M_inc_size(__orig_size - __dist);
       __x._M_set_size(__dist);
       throw;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::

      merge(list&& __x, _StrictWeakOrdering __comp)



      {


 if (this != std::__addressof(__x))
   {
     _M_check_equal_allocators(__x);

     iterator __first1 = begin();
     iterator __last1 = end();
     iterator __first2 = __x.begin();
     iterator __last2 = __x.end();
     const size_t __orig_size = __x.size();
     try
       {
  while (__first1 != __last1 && __first2 != __last2)
    if (__comp(*__first2, *__first1))
      {
        iterator __next = __first2;
        _M_transfer(__first1, __first2, ++__next);
        __first2 = __next;
      }
    else
      ++__first1;
  if (__first2 != __last2)
    _M_transfer(__last1, __first2, __last2);

  this->_M_inc_size(__x._M_get_size());
  __x._M_set_size(0);
       }
     catch(...)
       {
  const size_t __dist = std::distance(__first2, __last2);
  this->_M_inc_size(__orig_size - __dist);
  __x._M_set_size(__dist);
  throw;
       }
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    sort()
    {

      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
   && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
      {
        list __carry;
        list __tmp[64];
        list * __fill = __tmp;
        list * __counter;
 try
   {
     do
       {
  __carry.splice(__carry.begin(), *this, begin());

  for(__counter = __tmp;
      __counter != __fill && !__counter->empty();
      ++__counter)
    {
      __counter->merge(__carry);
      __carry.swap(*__counter);
    }
  __carry.swap(*__counter);
  if (__counter == __fill)
    ++__fill;
       }
     while ( !empty() );

     for (__counter = __tmp + 1; __counter != __fill; ++__counter)
       __counter->merge(*(__counter - 1));
     swap( *(__fill - 1) );
   }
 catch(...)
   {
     this->splice(this->end(), __carry);
     for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)
       this->splice(this->end(), __tmp[__i]);
     throw;
   }
      }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _Predicate>
      void
      list<_Tp, _Alloc>::
      remove_if(_Predicate __pred)
      {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
   {
     iterator __next = __first;
     ++__next;
     if (__pred(*__first))
       _M_erase(__first);
     __first = __next;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _BinaryPredicate>
      void
      list<_Tp, _Alloc>::
      unique(_BinaryPredicate __binary_pred)
      {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
   return;
        iterator __next = __first;
        while (++__next != __last)
   {
     if (__binary_pred(*__first, *__next))
       _M_erase(__next);
     else
       __first = __next;
     __next = __first;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::
      sort(_StrictWeakOrdering __comp)
      {

 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
     && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
   {
     list __carry;
     list __tmp[64];
     list * __fill = __tmp;
     list * __counter;
     try
       {
  do
    {
      __carry.splice(__carry.begin(), *this, begin());

      for(__counter = __tmp;
   __counter != __fill && !__counter->empty();
   ++__counter)
        {
   __counter->merge(__carry, __comp);
   __carry.swap(*__counter);
        }
      __carry.swap(*__counter);
      if (__counter == __fill)
        ++__fill;
    }
  while ( !empty() );

  for (__counter = __tmp + 1; __counter != __fill; ++__counter)
    __counter->merge(*(__counter - 1), __comp);
  swap(*(__fill - 1));
       }
     catch(...)
       {
  this->splice(this->end(), __carry);
  for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)
    this->splice(this->end(), __tmp[__i]);
  throw;
       }
   }
      }


}
# 65 "/usr/include/c++/7/list" 2 3
# 20 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 1 "/usr/include/c++/7/ctime" 1 3
# 39 "/usr/include/c++/7/ctime" 3
       
# 40 "/usr/include/c++/7/ctime" 3
# 21 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2





# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../polynomial.h" 1
# 27 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 2
# 45 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h"

# 45 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h"
extern mpq_class bpas_root_width;

template <class Ring>
class UnivariateTerm {
        public:
                Ring coef;
                int exp;






                UnivariateTerm<Ring> () : coef(), exp(0) {}
                UnivariateTerm<Ring> (Ring c, int e) : coef(c), exp(e) {}





                UnivariateTerm<Ring> (const UnivariateTerm<Ring>& b) : coef(b.coef), exp(b.exp) {}






                inline UnivariateTerm<Ring>& operator= (UnivariateTerm<Ring> b) {
                        if (this != &b) {
                                coef = b.coef;
                                exp = b.exp;
                        }
                        return *this;
                }

                inline friend std::ostream& operator<< (std::ostream &out, UnivariateTerm<Ring>& b) {
                        out << b.exp << ": " << b.coef;
                        return out;
                }
};

template <class Ring>
class MultivariateTerm {
        public:
                Ring coef;
                int v;
                int* degs;
# 100 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h"
                MultivariateTerm<Ring> () : coef(), v(0) { }





                MultivariateTerm (const MultivariateTerm<Ring>& b) : coef(b.coef), v(b.v) {
                        degs = new int[v];
                        std::copy(b.degs, b.degs+v, degs);
                }





                ~MultivariateTerm<Ring> () { if (v) { delete [] degs; } }






                inline MultivariateTerm<Ring>& operator= (MultivariateTerm<Ring> b) {
                        if (this != &b) {
                                coef = b.coef;
                                v = b.v;
                                degs = new int[v];
                                std::copy(b.degs, b.degs+v, degs);
                        }
                        return *this;
                }
};

inline void startTimer(unsigned long long *start){



        *start = (unsigned long long)clock();

}

inline void stopTimer(unsigned long long *start, float *elapsed){



 *elapsed = (float)((unsigned long long)clock() - *start) / 
# 145 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 3 4
                                                           ((__clock_t) 1000000)
# 145 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h"
                                                                         ;

}

inline void stopTimerAddElapsed(unsigned long long *start, float *elapsed){



 *elapsed += (float)((unsigned long long)clock() - *start) / 
# 153 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h" 3 4
                                                            ((__clock_t) 1000000)
# 153 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../global.h"
                                                                          ;

}
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h" 2

class UnivariateIntegerPolynomial{






 private:

  int size;
  int exposedSize;
                mpz_class * coefficients;
  int coefficientDigits;
  int bitPackage;
  int representationBase;
  bool negativeLC;
  char variate;




  void init(){
   bitPackage = 5;
          representationBase = 1 << bitPackage;
          negativeLC = false;
   variate = 'x';
  }
# 49 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  void convertFromBigIntegerSigned(mpz_class& integerRepresentation, int startIndex, int lastIndex, int digitCount);
# 59 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
        void convertFromBigIntegerSignedNegative(mpz_class& integerRepresentation, int startIndex, int lastIndex, int digitCount);

        public:
# 73 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  UnivariateIntegerPolynomial(int s, int cDigits, mpz_class *c){
   init();
   size = s;
          coefficientDigits = cDigits;
   coefficients = c;
   computeExposedSize();
  }
# 88 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  UnivariateIntegerPolynomial(int s, int cDigits){
   init();
          size = s;
          coefficientDigits = cDigits;
          coefficients = new mpz_class[size]();
   exposedSize = 0;
  }







  UnivariateIntegerPolynomial(int s){
   init();
          size = s;
          coefficients = new mpz_class[size]();
   exposedSize = 0;
  }







  UnivariateIntegerPolynomial(int s, mpz_class *c){
   init();
   size = s;
   coefficients = c;
   computeExposedSize();
  }






  UnivariateIntegerPolynomial(mpz_class *c){
   init();
   coefficients = c;
  }




  UnivariateIntegerPolynomial(){
   init();
   exposedSize = 0;
  }
# 153 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  inline void freeHeap(){
   delete[] coefficients;
  }






  inline int getExposedSize() {
   return exposedSize;
  }






  inline mpz_class * getPointer(int index){
   return &coefficients[index];
  }




  inline int getDegree(){
   return size - 1;
  }







  inline void setDegree(int d){
   size = d + 1;
   coefficients = new mpz_class[size]();
  }




  inline int getSize(){
   return size;
  }







  inline void setSize(int s){
   size = s;
   coefficients = new mpz_class[size]();
  }




  inline mpz_class getLeadingCoefficient(){
   return coefficients[exposedSize - 1];
  }






  inline mpz_class getCoefficient(int index){
   return coefficients[index];
  }
# 234 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  inline void setCoefficient(int index, mpz_class value){
   coefficients[index] = value;

   if(value == 0) computeExposedSize();
   else if(index > exposedSize - 1) exposedSize = index + 1;
  }




  inline int getCoefficientDigits(){
   return coefficientDigits;
  }






  inline void setCoefficientDigits(int cDigits){
   coefficientDigits = cDigits;
  }




  inline int getBitPackage(){
   return bitPackage;
  }






  inline void setBitPackage(int bPack){
   bitPackage = bPack;
  }




  inline int getRepresentationBase(){
   return representationBase;
  }






  inline int setRepresentationBase(int repBase){
   representationBase = repBase;
  }




  inline bool isNegativeLC(){
   return negativeLC;
  }




  inline mpz_class* getCoefficients(){
   return coefficients;
  }






  inline void setCoefficients(mpz_class * coeff){
   coefficients = coeff;
  }






  mpz_class evaluate(mpz_class value);






  inline void setVariableName(char v) {
   variate = v;
  }




  inline char getVariableName(){
   return variate;
  }





  void taylorShift();
# 348 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  UnivariateIntegerPolynomial add(UnivariateIntegerPolynomial* p);






  void addInPlace(UnivariateIntegerPolynomial* p);






  UnivariateIntegerPolynomial substract(UnivariateIntegerPolynomial* p);






  void substractInPlace(UnivariateIntegerPolynomial* p);






  inline UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial* p);






  UnivariateIntegerPolynomial multiply(mpz_class factor);






  bool isEqual(UnivariateIntegerPolynomial* p);




  inline bool isTrailingCoefficientZero() {
   return (coefficients[0] == 0);
  }






  void copy(UnivariateIntegerPolynomial* p);






  void assign(UnivariateIntegerPolynomial* p);
# 421 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  mpz_class getBigIntegerUnsigned(int size);





  mpz_class getBigIntegerSigned(int size);
  void getBigIntegerSigned(mpz_class *r, int size);






  mpz_class getReverseBigIntegerUnsigned(int size);
# 446 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  void convertFromBigIntegerUnsigned(mpz_class& integerRepresentation, int startIndex, int lastIndex, int digitCount);
# 455 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  void convertFromBigInteger(mpz_class& integerRepresentation, int startIndex, int lastIndex, int digitCount);
# 466 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../Poly.h"
  void extractCoeffsicients(mpz_class c1Int, mpz_class c2Int, int startIndex, int lastIndex, int digitCount);






  void print();





  void write(std::string fileName);





  void read(std::string fileName);




  void generateRandom();




  void setToZero();



  void setToOne();





  void copyFromCoefficients(mpz_class *result);







  void addCoefficients(UnivariateIntegerPolynomial *p, int startIndex);




  int maxCoefficientSize();






  UnivariateIntegerPolynomial negateOutOfPlace();




  mpz_class * negate();



  void negateInPlace();






  void negateInPlace(int startIndex, int lastIndex);





  void negate(mpz_class * result);




  void fixDegree();





  void grow(int newSize);





  void shrink(int newSize);




  void computeExposedSize(){
   exposedSize = size;
   while(exposedSize > 1 && coefficients[exposedSize - 1] == 0) exposedSize--;
  }


};
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h" 2

class Mul{
# 28 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h"
 public:
# 37 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h"
  virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b) = 0;
# 47 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h"
  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c) = 0;

 protected:
# 59 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h"
  void setBitCounts(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c);
# 68 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Mul.h"
  void setBitCounts(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);






  void setNumberOfWorkers(int nworkers);






  inline void setNumberOfWorkers(char* nworkers){
   __cilkrts_set_param("nworkers", nworkers);
  }






  inline int getNumberOfWorkers(){
   return __cilkrts_get_nworkers();
  }

};
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h" 1
       
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h"
class MulKS: public Mul{
 public:
  virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){
   UnivariateIntegerPolynomial c((a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1), a->getCoefficientDigits() + b->getCoefficientDigits() + ((a->getSize() == 0 || b->getSize() == 0) ? 0 : log2((a->getSize() < b->getSize()) ? a->getSize() : b->getSize())));
          setBitCounts(a, b, &c);
          mulBigIntSer(a, b, &c, 0);
   return c;
  };
  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c){
                        setBitCounts(a, b, c);
                        mulBigIntSer(a, b, c, 0);
                };
# 36 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h"
  void mulBigIntSer(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);

 private:
# 54 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h"
  void mulBigIntSerReciprocalUnsigned(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);
# 64 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h"
  mpz_class generateFirstInteger(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, int digitCount);
# 74 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulKS.h"
                mpz_class generateSecondInteger(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, int digitCount);

};
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h" 1
       
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
class MulDnC: public Mul{
 public:
                virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){
   UnivariateIntegerPolynomial c((a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1), a->getCoefficientDigits() + b->getCoefficientDigits() + ((a->getSize() == 0 || b->getSize() == 0) ? 0 : log2((a->getSize() < b->getSize()) ? a->getSize() : b->getSize())));
          BASE_MUL = (a->getSize() > b->getSize()) ? a->getSize() : b->getSize() / 4;
          mulDnCBigIntPar(a, b, &c, 0);
          return c;
  };

  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c){
   BASE_MUL = (a->getSize() > b->getSize()) ? a->getSize() : b->getSize() / 4;
                        mulDnCBigIntPar(a, b, c, 0);
  };
# 33 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
  UnivariateIntegerPolynomial mulDnC(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);
# 42 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
  UnivariateIntegerPolynomial mulDnCBigIntParallelStatic1(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);
# 51 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
  UnivariateIntegerPolynomial mulDnCBigIntParallelStatic2(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);
# 63 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
  UnivariateIntegerPolynomial mulSignedDecomposed(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);

  int BASE_MUL;

                MulDnC();

 private:
# 94 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
  void mulDnCBigIntPar(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);
# 111 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
                void mulDnCBigIntParStatic(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, UnivariateIntegerPolynomial* tmp, int startIndex);
# 128 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
                void mulDnCBigIntParStatic(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, UnivariateIntegerPolynomial* tmp0, UnivariateIntegerPolynomial* tmp1, int startIndex);
# 138 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulDnC.h"
                void mulIterBigIntPar(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);

};
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h" 1
       
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
class MulToom: public Mul{
 public:
# 23 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void growArrays(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b) = 0;
# 35 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void evaluate(mpz_class * r, mpz_class * c) = 0;
# 50 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void interpolate(mpz_class * w) = 0;




  virtual char* numberOfWorkers() = 0;
# 64 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void mulToom(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c) = 0;
# 73 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){
   int workers = getNumberOfWorkers();
                        setNumberOfWorkers(numberOfWorkers());

                        int resultSize = (a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1);
                        int aSize = a->getSize();
                        int bSize = b->getSize();

                        growArrays(a, b);

                        UnivariateIntegerPolynomial c((a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1), a->getCoefficientDigits() + b->getCoefficientDigits() + ((a->getSize() == 0 || b->getSize() == 0) ? 0 : log2((a->getSize() < b->getSize()) ? a->getSize() : b->getSize())));
                        mulToom(a, b, &c);

                        c.shrink(resultSize);
                        a->shrink(aSize);
                        b->shrink(bSize);

                        setNumberOfWorkers(workers);

                        return c;

  };
# 103 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c) {
   int workers = getNumberOfWorkers();
   setNumberOfWorkers(numberOfWorkers());

   int resultSize = (a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1);
   int aSize = a->getSize();
   int bSize = b->getSize();

   growArrays(a, b);

   int newSize = (a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1);
   c->grow(newSize);

   mulToom(a, b, c);

   c->shrink(resultSize);
   a->shrink(aSize);
   b->shrink(bSize);

   setNumberOfWorkers(workers);
  }
# 133 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int k) {
   int workers = getNumberOfWorkers();
                        setNumberOfWorkers(numberOfWorkers());

   int max = (a->getSize() > b->getSize()) ? a->getSize() : b->getSize();
   int r = max % k;
   if(r != 0) max += k - r;

   mpz_class* fcoef = new mpz_class[max];
   mpz_class* gcoef = new mpz_class[max];
   for (int i = 0; i < max; ++i) {
    if (i < a->getSize())
     fcoef[i] = a->getCoefficient(i);
    else
     fcoef[i] = 0;
    if (i < b->getSize())
     gcoef[i] = b->getCoefficient(i);
    else
     gcoef[i] = 0;
   }
   UnivariateIntegerPolynomial f(max, fcoef);
   UnivariateIntegerPolynomial g(max, gcoef);
   int size = (max << 1) -1;
   mpz_class* hcoef = new mpz_class[size];
   for (int i = 0; i < size; ++i)
    hcoef[i] = 0;
   UnivariateIntegerPolynomial h (size, hcoef);

                        mulToom(&f, &g, &h);

   for (int i = 0; i < c->getSize(); ++i)
    c->setCoefficient(i, h.getCoefficient(i));

                        setNumberOfWorkers(workers);
   delete [] fcoef;
   delete [] gcoef;
   delete [] hcoef;
  };

 protected:
# 182 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom.h"
  void multiplyGMP(mpz_class *result, mpz_class& a, mpz_class& b){
   *result = a * b;
  }
};
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h" 1
       
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
class MulToom4: public MulToom{
 public:




  virtual char* numberOfWorkers(){
                        return (char*) "8";
                };
# 28 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
                virtual void mulToom(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c){
                        mulToom4Par(a, b, c);
                };
# 42 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
                void evaluate(mpz_class * r, mpz_class * c);
# 51 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
                void growArrays(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);
# 71 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
  void interpolate(mpz_class * w);

 private:
# 112 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom4.h"
  void mulToom4Par(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c);
};
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h" 1
       
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
class MulToom8: public MulToom{
        public:




  virtual char* numberOfWorkers(){
   return (char*) "16";
  };
# 28 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
  virtual void mulToom(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c){
   mulToom8Par(a, b, c);
  };
# 39 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
  void growArrays(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b);
# 58 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
  void evaluate(mpz_class * r, mpz_class * c);
# 89 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
  void interpolate(mpz_class *w);

        private:
# 153 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulToom8.h"
                void mulToom8Par(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c);
};
# 16 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 1
       






# 1 "/usr/include/c++/7/math.h" 1 3
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 2


# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../BivariatePoly.h" 1
       
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../BivariatePoly.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 1




# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/../../global.h" 1
# 6 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2

extern "C" {
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 1
# 32 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 33 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 2

# 1 "/usr/include/c++/7/math.h" 1 3
# 35 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h" 1
# 185 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h"
# 1 "/usr/include/setjmp.h" 1 3 4
# 27 "/usr/include/setjmp.h" 3 4

# 27 "/usr/include/setjmp.h" 3 4
extern "C" {





struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };


typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) throw ();




extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) throw ();



extern int _setjmp (struct __jmp_buf_tag __env[1]) throw ();
# 67 "/usr/include/setjmp.h" 3 4
extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));





extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 93 "/usr/include/setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     throw () __attribute__ ((__noreturn__));
# 103 "/usr/include/setjmp.h" 3 4
}
# 186 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 1
# 187 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h" 2
# 196 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h"

# 196 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/cexcept.h"
struct exception_context {
  struct exception__state *last;
  int caught;
 };
# 36 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4

# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 189 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();




}
# 37 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h" 2
# 59 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"

# 59 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct exception__state { int *exception; jmp_buf env; };
extern struct exception_context the_exception_context[1];
# 152 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef _int32 sfixn;
typedef _int64 longfixnum;


typedef unsigned _int32 usfixn;
typedef unsigned _int64 ulongfixnum;
# 187 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct preFFTRepST{
  sfixn N;
  sfixn defN;
  sfixn * bufSizs;


  sfixn * cuts;
  sfixn * accum;
  sfixn size;
  sfixn datasize;
  sfixn defSize;
  sfixn offset;
  sfixn * data;
  sfixn * tmpData;
  sfixn * defData;
} preFFTRep;
# 248 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct KroFFTRepST{
  sfixn N;
  sfixn M;
  sfixn * es;
  sfixn * dims;
  sfixn size;
  sfixn Defsize;
  sfixn * accum;
  sfixn ** datas;
  sfixn KN;
  sfixn KE;
  sfixn * KrootsPtr;
} KroFFTRep;
# 304 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct KroTFTRepST{
  sfixn N;
  sfixn M;
  sfixn * es;
  sfixn * dims;
  sfixn * ls;
  sfixn size;
  sfixn Defsize;
  sfixn * accum;
  sfixn ** datas;
  sfixn KN;
  sfixn KE;
  sfixn * KrootsPtr;
} KroTFTRep;
# 337 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct TriSetST{
  sfixn normalized;
  sfixn N;
  sfixn *bounds;
  preFFTRep **elems;
}TriSet;
# 351 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct RFuncTriSetST{
  TriSet *numeris;
  TriSet *denomis;
}RFuncTriSet;
# 376 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct TriRevInvSetST{
  sfixn N;
  sfixn * exist;

  sfixn * NewtonLbounds;
  sfixn * NewtonSbounds;
  preFFTRep ** elems;
}TriRevInvSet;
# 392 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct MONTPRIMESTRUCT{
  sfixn v;
  sfixn Rpow;
  sfixn Rmask;
  sfixn Rinv;
  sfixn V;
  sfixn Vneg;
} MONTP_GENE;



typedef struct MONTPRIMEOPT2STRUCT{
  sfixn P;
  sfixn c;
  sfixn Npow;
  sfixn Rpow;
  sfixn R_Npow;
  sfixn Base_Rpow;
  sfixn Base_Npow;
  sfixn c_sft;
  sfixn c_pow;
  sfixn N2_Rpow;
  sfixn Rmask;
  sfixn R_Nmask;
  sfixn Max_Root;
  sfixn R2BRsft;
} MONTP_OPT2_AS_GENE;




typedef struct MONTSMALLPRIMESTRUCT{
  sfixn P;
  sfixn c;
  sfixn center;
  sfixn N;
  sfixn cNpow;
  sfixn Npow;
  sfixn Nmask;
  sfixn Ninv;
  sfixn gate;
  sfixn re;
  sfixn center2;
  sfixn reduMask;
  sfixn * redu;
} MONTP_SML;
# 457 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef union operandUnion operandObj;

typedef union operandUnion *operand;
typedef struct SL_Graph SLG;
typedef void *Pointer;



typedef struct dummy_struct DUMYO;
typedef struct sfixn_struct SFIXNO;
typedef struct variable_struct VARO;
typedef struct variablePow_struct VARPOWO;
typedef struct biPlus_struct BIPLUSO;
typedef struct biSub_struct BISUBO;
typedef struct biProd_struct BIPRODO;
typedef struct polynomial_struct POLYO;
typedef struct pow_struct POWO;





typedef
enum type {
  t_poly,
  t_sfixn,
  t_var,
  t_varpow,
  t_biPlus,
  t_biSub,
  t_biProd,
  t_pow
}operandType;
# 631 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct dummy_struct {
 unsigned char type, flag; unsigned short int id;
};




struct sfixn_struct {
 unsigned char type, flag; unsigned short int id;
 sfixn sfixnVal;
};




struct variable_struct {
 unsigned char type, flag; unsigned short int id;
        int32 no;
};





struct variablePow_struct {
 unsigned char type, flag; unsigned short int id;
        int32 e;
        int32 no;
};




struct biPlus_struct {
  unsigned char type, flag; unsigned short int id;
         operand oper1;
         operand oper2;
};



struct biSub_struct {
  unsigned char type, flag; unsigned short int id;
         operand oper1;
         operand oper2;
};




struct biProd_struct {
  unsigned char type, flag; unsigned short int id;
         operand oper1;
         operand oper2;
};




struct polynomial_struct {
  unsigned char type, flag; unsigned short int id;
         preFFTRep *poly;
};






struct pow_struct {
 unsigned char type, flag; unsigned short int id;
        int32 e;
        operand base;
};




union operandUnion {
        DUMYO DUMY;
        POLYO POLY;
 SFIXNO SFIX;
        VARO VAR;
        VARPOWO VARPOW;
        BIPLUSO BI_PLUS;
        BISUBO BI_SUB;
        BIPRODO BI_PROD;
        POWO POW;
};
# 728 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct SL_Graph{
  int32 GN;
  int32 GE;
  operand * Nodes;


};
# 744 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct polyMatrix_struct POLYMATRIX;


struct polyMatrix_struct{
  int32 M;
  int32 N;
  preFFTRep **entries;
};






typedef struct polyVector_SLG_struct POLYVECTOR_SLG;


struct polyVector_SLG_struct{
  int32 M;
  SLG **entries;
};





typedef struct polyVector_struct POLYVECTOR;


struct polyVector_struct{
  int32 M;
  preFFTRep **entries;
};


typedef struct subProdTree_struct subProdTree;
# 795 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct subProdTree_struct{
  sfixn h;
  sfixn *W;
  sfixn *NoNodes;
  sfixn *data;
  sfixn *Bases;
};



typedef struct pts_trees_struct PTS_TREE;
# 816 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct pts_trees_struct{
  sfixn no;
  sfixn **ptsPtr;
  subProdTree **trees;
  sfixn times;
};
# 836 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct InterpRFRStruct{
  sfixn bound;
  sfixn degNum;
  sfixn *Num;
  sfixn degDen;
  sfixn *Den;
} InterpRFRST;
# 858 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
typedef struct InterpRFRPreStruct{
  sfixn no;
  subProdTree *tree;
  sfixn *points;
  sfixn *values;
  TriSet **chains;
  preFFTRep **polys;
} InterpRFRPreST;



struct RegularPairST{
  preFFTRep *poly;
  TriSet *ts;
};

typedef struct RegularPairST RegularPair;


struct RegularListPairST{
  sfixn no;
  preFFTRep **polyList;
  TriSet *ts;
};
typedef struct RegularListPairST RegularListPair;



struct TaskPairST{
  int32 index;
  TriSet *ts;
};

typedef struct TaskPairST TaskPair;



struct LinearNodeST{
  void *element;
  struct LinearNodeST *next;
};

typedef struct LinearNodeST LinearNode;

struct LinkedQueueST{
  int32 count;
  LinearNode *front, *rear;
};

typedef struct LinkedQueueST LinkedQueue;
# 936 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Types.h"
struct ScubeST{
  sfixn w;
  sfixn dim;
  sfixn *Sdims;
  sfixn Ssize;
  sfixn *Sdata;
  PTS_TREE *points_trees;
  preFFTRep **SLcs;
  preFFTRep **SPolys;
  sfixn doneBfr;
};

typedef struct ScubeST SCUBE;
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/generalFuncs.h" 1







# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/AS.h" 1







# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/CONSTANTS.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/AS.h" 2


extern sfixn BASE;
extern sfixn BASE_1;
extern sfixn BASEHALF;
# 84 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/AS.h"
static void

MulHiLoUnsigned(sfixn *h, sfixn *l)
{
  ulongfixnum prod;
  prod=(ulongfixnum)(usfixn)(*h) * (ulongfixnum)(usfixn)(*l);
# 98 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/AS.h"
  *h= (sfixn)(((ulongfixnum)prod)>>BASE);

  *l= (sfixn)(usfixn)prod;



}
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/generalFuncs.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mmintrin.h" 1 3 4
# 42 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mmintrin.h" 3 4

# 42 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mmintrin.h" 3 4
typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));


typedef int __m64_u __attribute__ ((__vector_size__ (8), __may_alias__, __aligned__ (1)));


typedef int __v2si __attribute__ ((__vector_size__ (8)));
typedef short __v4hi __attribute__ ((__vector_size__ (8)));
typedef char __v8qi __attribute__ ((__vector_size__ (8)));
typedef long long __v1di __attribute__ ((__vector_size__ (8)));
typedef float __v2sf __attribute__ ((__vector_size__ (8)));


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_empty (void)
{
  __builtin_ia32_emms ();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_empty (void)
{
  _mm_empty ();
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_si64 (int __i)
{
  return (__m64) __builtin_ia32_vec_init_v2si (__i, 0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_from_int (int __i)
{
  return _mm_cvtsi32_si64 (__i);
}





extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_from_int64 (long long __i)
{
  return (__m64) __i;
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_m64 (long long __i)
{
  return (__m64) __i;
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_si64 (long long __i)
{
  return (__m64) __i;
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi64x (long long __i)
{
  return (__m64) __i;
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si32 (__m64 __i)
{
  return __builtin_ia32_vec_ext_v2si ((__v2si)__i, 0);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_to_int (__m64 __i)
{
  return _mm_cvtsi64_si32 (__i);
}





extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_to_int64 (__m64 __i)
{
  return (long long)__i;
}

extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtm64_si64 (__m64 __i)
{
  return (long long)__i;
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si64x (__m64 __i)
{
  return (long long)__i;
}





extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packsswb ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packsswb (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pi16 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packssdw ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packssdw (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pi32 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_packuswb ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_packuswb (__m64 __m1, __m64 __m2)
{
  return _mm_packs_pu16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhbw ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhbw (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhwd (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckhdq ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckhdq (__m64 __m1, __m64 __m2)
{
  return _mm_unpackhi_pi32 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpcklbw ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpcklbw (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpcklwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpcklwd (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_punpckldq ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_punpckldq (__m64 __m1, __m64 __m2)
{
  return _mm_unpacklo_pi32 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddb (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi8 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddw (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddd (__m64 __m1, __m64 __m2)
{
  return _mm_add_pi32 (__m1, __m2);
}
# 322 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mmintrin.h" 3 4
extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_si64 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddq ((__v1di)__m1, (__v1di)__m2);
}







extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddsb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddsb (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddsw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddsw (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pu8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddusb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddusb (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pu8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_paddusw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_paddusw (__m64 __m1, __m64 __m2)
{
  return _mm_adds_pu16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubb (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi8 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubw (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubd (__m64 __m1, __m64 __m2)
{
  return _mm_sub_pi32 (__m1, __m2);
}
# 434 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mmintrin.h" 3 4
extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_si64 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubq ((__v1di)__m1, (__v1di)__m2);
}







extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubsb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubsb (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubsw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubsw (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pu8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubusb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubusb (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pu8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_pu16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_psubusw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psubusw (__m64 __m1, __m64 __m2)
{
  return _mm_subs_pu16 (__m1, __m2);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_madd_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmaddwd ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaddwd (__m64 __m1, __m64 __m2)
{
  return _mm_madd_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmulhw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmulhw (__m64 __m1, __m64 __m2)
{
  return _mm_mulhi_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mullo_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pmullw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmullw (__m64 __m1, __m64 __m2)
{
  return _mm_mullo_pi16 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psllw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllw (__m64 __m, __m64 __count)
{
  return _mm_sll_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psllwi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllwi (__m64 __m, int __count)
{
  return _mm_slli_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_pslld ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pslld (__m64 __m, __m64 __count)
{
  return _mm_sll_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_pslldi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pslldi (__m64 __m, int __count)
{
  return _mm_slli_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_si64 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psllq ((__v1di)__m, (__v1di)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllq (__m64 __m, __m64 __count)
{
  return _mm_sll_si64 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_si64 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psllqi ((__v1di)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psllqi (__m64 __m, int __count)
{
  return _mm_slli_si64 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psraw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psraw (__m64 __m, __m64 __count)
{
  return _mm_sra_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrawi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrawi (__m64 __m, int __count)
{
  return _mm_srai_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrad ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrad (__m64 __m, __m64 __count)
{
  return _mm_sra_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psradi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psradi (__m64 __m, int __count)
{
  return _mm_srai_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_pi16 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrlw ((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlw (__m64 __m, __m64 __count)
{
  return _mm_srl_pi16 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_pi16 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrlwi ((__v4hi)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlwi (__m64 __m, int __count)
{
  return _mm_srli_pi16 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_pi32 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrld ((__v2si)__m, (__v2si)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrld (__m64 __m, __m64 __count)
{
  return _mm_srl_pi32 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_pi32 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrldi ((__v2si)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrldi (__m64 __m, int __count)
{
  return _mm_srli_pi32 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_si64 (__m64 __m, __m64 __count)
{
  return (__m64) __builtin_ia32_psrlq ((__v1di)__m, (__v1di)__count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlq (__m64 __m, __m64 __count)
{
  return _mm_srl_si64 (__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_si64 (__m64 __m, int __count)
{
  return (__m64) __builtin_ia32_psrlqi ((__v1di)__m, __count);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psrlqi (__m64 __m, int __count)
{
  return _mm_srli_si64 (__m, __count);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pand (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pand (__m64 __m1, __m64 __m2)
{
  return _mm_and_si64 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pandn (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pandn (__m64 __m1, __m64 __m2)
{
  return _mm_andnot_si64 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_por (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_por (__m64 __m1, __m64 __m2)
{
  return _mm_or_si64 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_si64 (__m64 __m1, __m64 __m2)
{
  return __builtin_ia32_pxor (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pxor (__m64 __m1, __m64 __m2)
{
  return _mm_xor_si64 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqb (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi8 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi8 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtb ((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtb (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi8 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqw (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi16 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi16 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtw ((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtw (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi16 (__m1, __m2);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpeqd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpeqd (__m64 __m1, __m64 __m2)
{
  return _mm_cmpeq_pi32 (__m1, __m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pi32 (__m64 __m1, __m64 __m2)
{
  return (__m64) __builtin_ia32_pcmpgtd ((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pcmpgtd (__m64 __m1, __m64 __m2)
{
  return _mm_cmpgt_pi32 (__m1, __m2);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_si64 (void)
{
  return (__m64)0LL;
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi32 (int __i1, int __i0)
{
  return (__m64) __builtin_ia32_vec_init_v2si (__i0, __i1);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi16 (short __w3, short __w2, short __w1, short __w0)
{
  return (__m64) __builtin_ia32_vec_init_v4hi (__w0, __w1, __w2, __w3);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pi8 (char __b7, char __b6, char __b5, char __b4,
      char __b3, char __b2, char __b1, char __b0)
{
  return (__m64) __builtin_ia32_vec_init_v8qi (__b0, __b1, __b2, __b3,
            __b4, __b5, __b6, __b7);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi32 (int __i0, int __i1)
{
  return _mm_set_pi32 (__i1, __i0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi16 (short __w0, short __w1, short __w2, short __w3)
{
  return _mm_set_pi16 (__w3, __w2, __w1, __w0);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pi8 (char __b0, char __b1, char __b2, char __b3,
       char __b4, char __b5, char __b6, char __b7)
{
  return _mm_set_pi8 (__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi32 (int __i)
{
  return _mm_set_pi32 (__i, __i);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi16 (short __w)
{
  return _mm_set_pi16 (__w, __w, __w, __w);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pi8 (char __b)
{
  return _mm_set_pi8 (__b, __b, __b, __b, __b, __b, __b, __b);
}
# 32 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mm_malloc.h" 1 3 4
# 27 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mm_malloc.h" 3 4
# 1 "/usr/include/c++/7/stdlib.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/7/include/mm_malloc.h" 2 3 4






extern "C" int posix_memalign (void **, size_t, size_t) throw ();


static __inline void *
_mm_malloc (size_t __size, size_t __alignment)
{
  void *__ptr;
  if (__alignment == 1)
    return malloc (__size);
  if (__alignment == 2 || (sizeof (void *) == 8 && __alignment == 4))
    __alignment = sizeof (void *);
  if (posix_memalign (&__ptr, __alignment, __size) == 0)
    return __ptr;
  else
    return __null;
}

static __inline void
_mm_free (void *__ptr)
{
  free (__ptr);
}
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 2 3 4


enum _mm_hint
{

  _MM_HINT_ET0 = 7,
  _MM_HINT_ET1 = 6,
  _MM_HINT_T0 = 3,
  _MM_HINT_T1 = 2,
  _MM_HINT_T2 = 1,
  _MM_HINT_NTA = 0
};
# 69 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));


typedef float __m128_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));


typedef float __v4sf __attribute__ ((__vector_size__ (16)));
# 109 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_ps (void)
{
  __m128 __Y = __Y;
  return __Y;
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_ps (void)
{
  return __extension__ (__m128){ 0.0f, 0.0f, 0.0f, 0.0f };
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_addss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_subss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_mulss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_divss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_sqrtss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_rcpss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt_ss (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrtss ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_minss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_maxss ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_ps (__m128 __A, __m128 __B)
{
  return (__m128) ((__v4sf)__A + (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_ps (__m128 __A, __m128 __B)
{
  return (__m128) ((__v4sf)__A - (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_ps (__m128 __A, __m128 __B)
{
  return (__m128) ((__v4sf)__A * (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_ps (__m128 __A, __m128 __B)
{
  return (__m128) ((__v4sf)__A / (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_sqrtps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rcpps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrtps ((__v4sf)__A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_minps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_maxps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_andps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_andnps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_orps (__A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_ps (__m128 __A, __m128 __B)
{
  return __builtin_ia32_xorps (__A, __B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpeqss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpltss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpless ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpltss ((__v4sf) __B,
        (__v4sf)
        __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpless ((__v4sf) __B,
        (__v4sf)
        __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpneqss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnltss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnless ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpnltss ((__v4sf) __B,
         (__v4sf)
         __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf) __A,
     (__v4sf)
     __builtin_ia32_cmpnless ((__v4sf) __B,
         (__v4sf)
         __A));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpordss ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpunordss ((__v4sf)__A, (__v4sf)__B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpeqps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpltps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpleps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpgtps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpgeps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpneqps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnltps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpnleps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpngtps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpngeps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpordps ((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_cmpunordps ((__v4sf)__A, (__v4sf)__B);
}




extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comieq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comieq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comilt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comilt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comile_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comile ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comigt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comigt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comige_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comige ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comineq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_comineq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomieq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomieq ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomilt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomilt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomile_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomile ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomigt_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomigt ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomige_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomige ((__v4sf)__A, (__v4sf)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomineq_ss (__m128 __A, __m128 __B)
{
  return __builtin_ia32_ucomineq ((__v4sf)__A, (__v4sf)__B);
}



extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si32 (__m128 __A)
{
  return __builtin_ia32_cvtss2si ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_ss2si (__m128 __A)
{
  return _mm_cvtss_si32 (__A);
}






extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si64 (__m128 __A)
{
  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_si64x (__m128 __A)
{
  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi32 (__m128 __A)
{
  return (__m64) __builtin_ia32_cvtps2pi ((__v4sf) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_ps2pi (__m128 __A)
{
  return _mm_cvtps_pi32 (__A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si32 (__m128 __A)
{
  return __builtin_ia32_cvttss2si ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtt_ss2si (__m128 __A)
{
  return _mm_cvttss_si32 (__A);
}





extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si64 (__m128 __A)
{
  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttss_si64x (__m128 __A)
{
  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttps_pi32 (__m128 __A)
{
  return (__m64) __builtin_ia32_cvttps2pi ((__v4sf) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtt_ps2pi (__m128 __A)
{
  return _mm_cvttps_pi32 (__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_ss (__m128 __A, int __B)
{
  return (__m128) __builtin_ia32_cvtsi2ss ((__v4sf) __A, __B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_si2ss (__m128 __A, int __B)
{
  return _mm_cvtsi32_ss (__A, __B);
}





extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_ss (__m128 __A, long long __B)
{
  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_ss (__m128 __A, long long __B)
{
  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);
}




extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32_ps (__m128 __A, __m64 __B)
{
  return (__m128) __builtin_ia32_cvtpi2ps ((__v4sf) __A, (__v2si)__B);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvt_pi2ps (__m128 __A, __m64 __B)
{
  return _mm_cvtpi32_ps (__A, __B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi16_ps (__m64 __A)
{
  __v4hi __sign;
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;




  __sign = __builtin_ia32_pcmpgtw ((__v4hi)0LL, (__v4hi)__A);


  __losi = (__v2si) __builtin_ia32_punpcklwd ((__v4hi)__A, __sign);
  __hisi = (__v2si) __builtin_ia32_punpckhwd ((__v4hi)__A, __sign);


  __zero = (__v4sf) _mm_setzero_ps ();
  __ra = __builtin_ia32_cvtpi2ps (__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps (__ra, __hisi);

  return (__m128) __builtin_ia32_movlhps (__ra, __rb);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpu16_ps (__m64 __A)
{
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;


  __losi = (__v2si) __builtin_ia32_punpcklwd ((__v4hi)__A, (__v4hi)0LL);
  __hisi = (__v2si) __builtin_ia32_punpckhwd ((__v4hi)__A, (__v4hi)0LL);


  __zero = (__v4sf) _mm_setzero_ps ();
  __ra = __builtin_ia32_cvtpi2ps (__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps (__ra, __hisi);

  return (__m128) __builtin_ia32_movlhps (__ra, __rb);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi8_ps (__m64 __A)
{
  __v8qi __sign;




  __sign = __builtin_ia32_pcmpgtb ((__v8qi)0LL, (__v8qi)__A);


  __A = (__m64) __builtin_ia32_punpcklbw ((__v8qi)__A, __sign);

  return _mm_cvtpi16_ps(__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpu8_ps(__m64 __A)
{
  __A = (__m64) __builtin_ia32_punpcklbw ((__v8qi)__A, (__v8qi)0LL);
  return _mm_cvtpu16_ps(__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32x2_ps(__m64 __A, __m64 __B)
{
  __v4sf __zero = (__v4sf) _mm_setzero_ps ();
  __v4sf __sfa = __builtin_ia32_cvtpi2ps (__zero, (__v2si)__A);
  __v4sf __sfb = __builtin_ia32_cvtpi2ps (__sfa, (__v2si)__B);
  return (__m128) __builtin_ia32_movlhps (__sfa, __sfb);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi16(__m128 __A)
{
  __v4sf __hisf = (__v4sf)__A;
  __v4sf __losf = __builtin_ia32_movhlps (__hisf, __hisf);
  __v2si __hisi = __builtin_ia32_cvtps2pi (__hisf);
  __v2si __losi = __builtin_ia32_cvtps2pi (__losf);
  return (__m64) __builtin_ia32_packssdw (__hisi, __losi);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pi8(__m128 __A)
{
  __v4hi __tmp = (__v4hi) _mm_cvtps_pi16 (__A);
  return (__m64) __builtin_ia32_packsswb (__tmp, (__v4hi)0LL);
}
# 755 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_unpckhps ((__v4sf)__A, (__v4sf)__B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_unpcklps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadh_pi (__m128 __A, __m64 const *__P)
{
  return (__m128) __builtin_ia32_loadhps ((__v4sf)__A, (const __v2sf *)__P);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeh_pi (__m64 *__P, __m128 __A)
{
  __builtin_ia32_storehps ((__v2sf *)__P, (__v4sf)__A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movehl_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movhlps ((__v4sf)__A, (__v4sf)__B);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movelh_ps (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movlhps ((__v4sf)__A, (__v4sf)__B);
}



extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_pi (__m128 __A, __m64 const *__P)
{
  return (__m128) __builtin_ia32_loadlps ((__v4sf)__A, (const __v2sf *)__P);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_pi (__m64 *__P, __m128 __A)
{
  __builtin_ia32_storelps ((__v2sf *)__P, (__v4sf)__A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_ps (__m128 __A)
{
  return __builtin_ia32_movmskps ((__v4sf)__A);
}


extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_getcsr (void)
{
  return __builtin_ia32_stmxcsr ();
}


extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_EXCEPTION_STATE (void)
{
  return _mm_getcsr() & 0x003f;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_EXCEPTION_MASK (void)
{
  return _mm_getcsr() & 0x1f80;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_ROUNDING_MODE (void)
{
  return _mm_getcsr() & 0x6000;
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_GET_FLUSH_ZERO_MODE (void)
{
  return _mm_getcsr() & 0x8000;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setcsr (unsigned int __I)
{
  __builtin_ia32_ldmxcsr (__I);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_EXCEPTION_STATE(unsigned int __mask)
{
  _mm_setcsr((_mm_getcsr() & ~0x003f) | __mask);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_EXCEPTION_MASK (unsigned int __mask)
{
  _mm_setcsr((_mm_getcsr() & ~0x1f80) | __mask);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_ROUNDING_MODE (unsigned int __mode)
{
  _mm_setcsr((_mm_getcsr() & ~0x6000) | __mode);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)
{
  _mm_setcsr((_mm_getcsr() & ~0x8000) | __mode);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ss (float __F)
{
  return __extension__ (__m128)(__v4sf){ __F, 0.0f, 0.0f, 0.0f };
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_ps (float __F)
{
  return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ps1 (float __F)
{
  return _mm_set1_ps (__F);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ss (float const *__P)
{
  return _mm_set_ss (*__P);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load1_ps (float const *__P)
{
  return _mm_set1_ps (*__P);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ps1 (float const *__P)
{
  return _mm_load1_ps (__P);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_ps (float const *__P)
{
  return *(__m128 *)__P;
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_ps (float const *__P)
{
  return *(__m128_u *)__P;
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadr_ps (float const *__P)
{
  __v4sf __tmp = *(__v4sf *)__P;
  return (__m128) __builtin_ia32_shufps (__tmp, __tmp, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_ps (const float __Z, const float __Y, const float __X, const float __W)
{
  return __extension__ (__m128)(__v4sf){ __W, __X, __Y, __Z };
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_ps (float __Z, float __Y, float __X, float __W)
{
  return __extension__ (__m128)(__v4sf){ __Z, __Y, __X, __W };
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ss (float *__P, __m128 __A)
{
  *__P = ((__v4sf)__A)[0];
}

extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_f32 (__m128 __A)
{
  return ((__v4sf)__A)[0];
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ps (float *__P, __m128 __A)
{
  *(__m128 *)__P = __A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_ps (float *__P, __m128 __A)
{
  *(__m128_u *)__P = __A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store1_ps (float *__P, __m128 __A)
{
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, (((0) << 6) | ((0) << 4) | ((0) << 2) | (0)));
  _mm_storeu_ps (__P, __tmp);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_ps1 (float *__P, __m128 __A)
{
  _mm_store1_ps (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storer_ps (float *__P, __m128 __A)
{
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
  _mm_store_ps (__P, __tmp);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_movss ((__v4sf)__A, (__v4sf)__B);
}
# 1060 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pi16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmaxsw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaxsw (__m64 __A, __m64 __B)
{
  return _mm_max_pi16 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmaxub ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmaxub (__m64 __A, __m64 __B)
{
  return _mm_max_pu8 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pi16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pminsw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pminsw (__m64 __A, __m64 __B)
{
  return _mm_min_pi16 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pminub ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pminub (__m64 __A, __m64 __B)
{
  return _mm_min_pu8 (__A, __B);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_pi8 (__m64 __A)
{
  return __builtin_ia32_pmovmskb ((__v8qi)__A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmovmskb (__m64 __A)
{
  return _mm_movemask_pi8 (__A);
}



extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_pu16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pmulhuw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pmulhuw (__m64 __A, __m64 __B)
{
  return _mm_mulhi_pu16 (__A, __B);
}
# 1162 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskmove_si64 (__m64 __A, __m64 __N, char *__P)
{
  __builtin_ia32_maskmovq ((__v8qi)__A, (__v8qi)__N, __P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_maskmovq (__m64 __A, __m64 __N, char *__P)
{
  _mm_maskmove_si64 (__A, __N, __P);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pavgb ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pavgb (__m64 __A, __m64 __B)
{
  return _mm_avg_pu8 (__A, __B);
}


extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_pu16 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_pavgw ((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_pavgw (__m64 __A, __m64 __B)
{
  return _mm_avg_pu16 (__A, __B);
}




extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sad_pu8 (__m64 __A, __m64 __B)
{
  return (__m64) __builtin_ia32_psadbw ((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_m_psadbw (__m64 __A, __m64 __B)
{
  return _mm_sad_pu8 (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_pi (__m64 *__P, __m64 __A)
{
  __builtin_ia32_movntq ((unsigned long long *)__P, (unsigned long long)__A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_ps (float *__P, __m128 __A)
{
  __builtin_ia32_movntps (__P, (__v4sf)__A);
}



extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sfence (void)
{
  __builtin_ia32_sfence ();
}
# 1252 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 1 3 4
# 1253 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 2 3 4
# 1264 "/usr/lib/gcc/x86_64-linux-gnu/7/include/xmmintrin.h" 3 4
extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_pause (void)
{
  __builtin_ia32_pause ();
}
# 32 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 2 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
typedef double __v2df __attribute__ ((__vector_size__ (16)));
typedef long long __v2di __attribute__ ((__vector_size__ (16)));
typedef unsigned long long __v2du __attribute__ ((__vector_size__ (16)));
typedef int __v4si __attribute__ ((__vector_size__ (16)));
typedef unsigned int __v4su __attribute__ ((__vector_size__ (16)));
typedef short __v8hi __attribute__ ((__vector_size__ (16)));
typedef unsigned short __v8hu __attribute__ ((__vector_size__ (16)));
typedef char __v16qi __attribute__ ((__vector_size__ (16)));
typedef unsigned char __v16qu __attribute__ ((__vector_size__ (16)));



typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));
typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));


typedef long long __m128i_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));
typedef double __m128d_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));






extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_sd (double __F)
{
  return __extension__ (__m128d){ __F, 0.0 };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_pd (double __F)
{
  return __extension__ (__m128d){ __F, __F };
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pd1 (double __F)
{
  return _mm_set1_pd (__F);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_pd (double __W, double __X)
{
  return __extension__ (__m128d){ __X, __W };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_pd (double __W, double __X)
{
  return __extension__ (__m128d){ __W, __X };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_pd (void)
{
  __m128d __Y = __Y;
  return __Y;
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_pd (void)
{
  return __extension__ (__m128d){ 0.0, 0.0 };
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_pd (double const *__P)
{
  return *(__m128d *)__P;
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_pd (double const *__P)
{
  return *(__m128d_u *)__P;
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load1_pd (double const *__P)
{
  return _mm_set1_pd (*__P);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_sd (double const *__P)
{
  return _mm_set_sd (*__P);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_pd1 (double const *__P)
{
  return _mm_load1_pd (__P);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadr_pd (double const *__P)
{
  __m128d __tmp = _mm_load_pd (__P);
  return __builtin_ia32_shufpd (__tmp, __tmp, (((0) << 1) | (1)));
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_pd (double *__P, __m128d __A)
{
  *(__m128d *)__P = __A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_pd (double *__P, __m128d __A)
{
  *(__m128d_u *)__P = __A;
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_sd (double *__P, __m128d __A)
{
  *__P = ((__v2df)__A)[0];
}

extern __inline double __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_f64 (__m128d __A)
{
  return ((__v2df)__A)[0];
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_pd (double *__P, __m128d __A)
{
  _mm_store_sd (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeh_pd (double *__P, __m128d __A)
{
  *__P = ((__v2df)__A)[1];
}



extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store1_pd (double *__P, __m128d __A)
{
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, (((0) << 1) | (0))));
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_pd1 (double *__P, __m128d __A)
{
  _mm_store1_pd (__P, __A);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storer_pd (double *__P, __m128d __A)
{
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, (((0) << 1) | (1))));
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si32 (__m128i __A)
{
  return __builtin_ia32_vec_ext_v4si ((__v4si)__A, 0);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si64 (__m128i __A)
{
  return ((__v2di)__A)[0];
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi128_si64x (__m128i __A)
{
  return ((__v2di)__A)[0];
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_pd (__m128d __A, __m128d __B)
{
  return (__m128d) ((__v2df)__A + (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_addsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_pd (__m128d __A, __m128d __B)
{
  return (__m128d) ((__v2df)__A - (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_subsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_pd (__m128d __A, __m128d __B)
{
  return (__m128d) ((__v2df)__A * (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_mulsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_pd (__m128d __A, __m128d __B)
{
  return (__m128d) ((__v2df)__A / (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_div_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_divsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_pd (__m128d __A)
{
  return (__m128d)__builtin_ia32_sqrtpd ((__v2df)__A);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sqrt_sd (__m128d __A, __m128d __B)
{
  __v2df __tmp = __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);
  return (__m128d)__builtin_ia32_sqrtsd ((__v2df)__tmp);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_minpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_minsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_maxpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_maxsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_andpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_andnpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_orpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_xorpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpeqpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpltpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmplepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpgtpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpgepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpneqpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnltpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnlepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpngtpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpngepd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpordpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpunordpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpeqsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpltsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmple_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmplesd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpltsd ((__v2df) __B,
         (__v2df)
         __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpge_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmplesd ((__v2df) __B,
         (__v2df)
         __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpneq_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpneqsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnlt_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnltsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnle_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpnlesd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpngt_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpnltsd ((__v2df) __B,
          (__v2df)
          __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpnge_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_movsd ((__v2df) __A,
      (__v2df)
      __builtin_ia32_cmpnlesd ((__v2df) __B,
          (__v2df)
          __A));
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpord_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpordsd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpunord_sd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_cmpunordsd ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comieq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdeq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comilt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdlt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comile_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdle ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comigt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdgt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comige_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdge ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_comineq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_comisdneq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomieq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdeq ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomilt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdlt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomile_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdle ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomigt_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdgt ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomige_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdge ((__v2df)__A, (__v2df)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_ucomineq_sd (__m128d __A, __m128d __B)
{
  return __builtin_ia32_ucomisdneq ((__v2df)__A, (__v2df)__B);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi64x (long long __q1, long long __q0)
{
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi64 (__m64 __q1, __m64 __q0)
{
  return _mm_set_epi64x ((long long)__q1, (long long)__q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi32 (int __q3, int __q2, int __q1, int __q0)
{
  return __extension__ (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi16 (short __q7, short __q6, short __q5, short __q4,
        short __q3, short __q2, short __q1, short __q0)
{
  return __extension__ (__m128i)(__v8hi){
    __q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7 };
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set_epi8 (char __q15, char __q14, char __q13, char __q12,
       char __q11, char __q10, char __q09, char __q08,
       char __q07, char __q06, char __q05, char __q04,
       char __q03, char __q02, char __q01, char __q00)
{
  return __extension__ (__m128i)(__v16qi){
    __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
    __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15
  };
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi64x (long long __A)
{
  return _mm_set_epi64x (__A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi64 (__m64 __A)
{
  return _mm_set_epi64 (__A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi32 (int __A)
{
  return _mm_set_epi32 (__A, __A, __A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi16 (short __A)
{
  return _mm_set_epi16 (__A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_set1_epi8 (char __A)
{
  return _mm_set_epi8 (__A, __A, __A, __A, __A, __A, __A, __A,
         __A, __A, __A, __A, __A, __A, __A, __A);
}




extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi64 (__m64 __q0, __m64 __q1)
{
  return _mm_set_epi64 (__q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi32 (int __q0, int __q1, int __q2, int __q3)
{
  return _mm_set_epi32 (__q3, __q2, __q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi16 (short __q0, short __q1, short __q2, short __q3,
         short __q4, short __q5, short __q6, short __q7)
{
  return _mm_set_epi16 (__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setr_epi8 (char __q00, char __q01, char __q02, char __q03,
        char __q04, char __q05, char __q06, char __q07,
        char __q08, char __q09, char __q10, char __q11,
        char __q12, char __q13, char __q14, char __q15)
{
  return _mm_set_epi8 (__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08,
         __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_load_si128 (__m128i const *__P)
{
  return *__P;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadu_si128 (__m128i_u const *__P)
{
  return *__P;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_epi64 (__m128i_u const *__P)
{
  return _mm_set_epi64 ((__m64)0LL, *(__m64_u *)__P);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_store_si128 (__m128i *__P, __m128i __B)
{
  *__P = __B;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storeu_si128 (__m128i_u *__P, __m128i __B)
{
  *__P = __B;
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_storel_epi64 (__m128i_u *__P, __m128i __B)
{
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movepi64_pi64 (__m128i __B)
{
  return (__m64) ((__v2di)__B)[0];
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movpi64_epi64 (__m64 __A)
{
  return _mm_set_epi64 ((__m64)0LL, __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_move_epi64 (__m128i __A)
{
  return (__m128i)__builtin_ia32_movq128 ((__v2di) __A);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_undefined_si128 (void)
{
  __m128i __Y = __Y;
  return __Y;
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_setzero_si128 (void)
{
  return __extension__ (__m128i)(__v4si){ 0, 0, 0, 0 };
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi32_pd (__m128i __A)
{
  return (__m128d)__builtin_ia32_cvtdq2pd ((__v4si) __A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtepi32_ps (__m128i __A)
{
  return (__m128)__builtin_ia32_cvtdq2ps ((__v4si) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_epi32 (__m128d __A)
{
  return (__m128i)__builtin_ia32_cvtpd2dq ((__v2df) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_pi32 (__m128d __A)
{
  return (__m64)__builtin_ia32_cvtpd2pi ((__v2df) __A);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpd_ps (__m128d __A)
{
  return (__m128)__builtin_ia32_cvtpd2ps ((__v2df) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttpd_epi32 (__m128d __A)
{
  return (__m128i)__builtin_ia32_cvttpd2dq ((__v2df) __A);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttpd_pi32 (__m128d __A)
{
  return (__m64)__builtin_ia32_cvttpd2pi ((__v2df) __A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtpi32_pd (__m64 __A)
{
  return (__m128d)__builtin_ia32_cvtpi2pd ((__v2si) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_epi32 (__m128 __A)
{
  return (__m128i)__builtin_ia32_cvtps2dq ((__v4sf) __A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttps_epi32 (__m128 __A)
{
  return (__m128i)__builtin_ia32_cvttps2dq ((__v4sf) __A);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtps_pd (__m128 __A)
{
  return (__m128d)__builtin_ia32_cvtps2pd ((__v4sf) __A);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si32 (__m128d __A)
{
  return __builtin_ia32_cvtsd2si ((__v2df) __A);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si64 (__m128d __A)
{
  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_si64x (__m128d __A)
{
  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);
}


extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si32 (__m128d __A)
{
  return __builtin_ia32_cvttsd2si ((__v2df) __A);
}



extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si64 (__m128d __A)
{
  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);
}


extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvttsd_si64x (__m128d __A)
{
  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);
}


extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsd_ss (__m128 __A, __m128d __B)
{
  return (__m128)__builtin_ia32_cvtsd2ss ((__v4sf) __A, (__v2df) __B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_sd (__m128d __A, int __B)
{
  return (__m128d)__builtin_ia32_cvtsi2sd ((__v2df) __A, __B);
}



extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_sd (__m128d __A, long long __B)
{
  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_sd (__m128d __A, long long __B)
{
  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);
}


extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtss_sd (__m128d __A, __m128 __B)
{
  return (__m128d)__builtin_ia32_cvtss2sd ((__v2df) __A, (__v4sf)__B);
}
# 918 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_unpckhpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_pd (__m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_unpcklpd ((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadh_pd (__m128d __A, double const *__B)
{
  return (__m128d)__builtin_ia32_loadhpd ((__v2df)__A, __B);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_loadl_pd (__m128d __A, double const *__B)
{
  return (__m128d)__builtin_ia32_loadlpd ((__v2df)__A, __B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_pd (__m128d __A)
{
  return __builtin_ia32_movmskpd ((__v2df)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packsswb128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packs_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_packus_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhdq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpackhi_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckhqdq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpckldq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklqdq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v16qu)__A + (__v16qu)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v4su)__A + (__v4su)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_add_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v2du)__A + (__v2du)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddsb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddusb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_adds_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_paddusw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v16qu)__A - (__v16qu)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hu)__A - (__v8hu)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v4su)__A - (__v4su)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sub_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v2du)__A - (__v2du)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubsb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubusb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_subs_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psubusw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_madd_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmulhw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mullo_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hu)__A * (__v8hu)__B);
}

extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_su32 (__m64 __A, __m64 __B)
{
  return (__m64)__builtin_ia32_pmuludq ((__v2si)__A, (__v2si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mul_epu32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmuludq128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_pslldi128 ((__v4si)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi64 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psllqi128 ((__v2di)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srai_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
}
# 1205 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi32 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrldi128 ((__v4si)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srli_epi64 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psrlqi128 ((__v2di)__A, __B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sll_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psraw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sra_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrad128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrlw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrld128 ((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_srl_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrlq128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_and_si128 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v2du)__A & (__v2du)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_andnot_si128 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pandn128 ((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_or_si128 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v2du)__A | (__v2du)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_xor_si128 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v2du)__A ^ (__v2du)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v16qi)__A == (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hi)__A == (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpeq_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v4si)__A == (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v16qi)__A < (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hi)__A < (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmplt_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v4si)__A < (__v4si)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v16qi)__A > (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v8hi)__A > (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cmpgt_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) ((__v4si)__A > (__v4si)__B);
}
# 1369 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaxsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_max_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmaxub128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pminsw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_min_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pminub128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_movemask_epi8 (__m128i __A)
{
  return __builtin_ia32_pmovmskb128 ((__v16qi)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mulhi_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pmulhuw128 ((__v8hi)__A, (__v8hi)__B);
}
# 1432 "/usr/lib/gcc/x86_64-linux-gnu/7/include/emmintrin.h" 3 4
extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)
{
  __builtin_ia32_maskmovdqu ((__v16qi)__A, (__v16qi)__B, __C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pavgb128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_avg_epu16 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_pavgw128 ((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_sad_epu8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psadbw128 ((__v16qi)__A, (__v16qi)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si32 (int *__A, int __B)
{
  __builtin_ia32_movnti (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si64 (long long int *__A, long long int __B)
{
  __builtin_ia32_movnti64 (__A, __B);
}


extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_si128 (__m128i *__A, __m128i __B)
{
  __builtin_ia32_movntdq ((__v2di *)__A, (__v2di)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_stream_pd (double *__A, __m128d __B)
{
  __builtin_ia32_movntpd (__A, (__v2df)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_clflush (void const *__A)
{
  __builtin_ia32_clflush (__A);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_lfence (void)
{
  __builtin_ia32_lfence ();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_mfence (void)
{
  __builtin_ia32_mfence ();
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi32_si128 (int __A)
{
  return _mm_set_epi32 (0, 0, 0, __A);
}



extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64_si128 (long long __A)
{
  return _mm_set_epi64x (0, __A);
}


extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_cvtsi64x_si128 (long long __A)
{
  return _mm_set_epi64x (0, __A);
}




extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castpd_ps(__m128d __A)
{
  return (__m128) __A;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castpd_si128(__m128d __A)
{
  return (__m128i) __A;
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castps_pd(__m128 __A)
{
  return (__m128d) __A;
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castps_si128(__m128 __A)
{
  return (__m128i) __A;
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castsi128_ps(__m128i __A)
{
  return (__m128) __A;
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_castsi128_pd(__m128i __A)
{
  return (__m128d) __A;
}
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h" 2


# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
extern sfixn BASE;
extern sfixn BASE_1;
extern sfixn BASEHALF;
# 1156 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static inline
void unrolled8AddSubSSEMod(sfixn* a,sfixn* b,const sfixn* prime){
 asm("movdqa (%0),%%xmm1\n\t"
  "movdqa (%1),%%xmm2\n\t"
  "movdqa 16(%0),%%xmm5\n\t"
  "movdqa 16(%1),%%xmm6\n\t"
  "movdqa %2,%%xmm4\n\t"
  "movdqa %%xmm1,%%xmm0\n\t"
  "movdqa %%xmm5,%%xmm7\n\t"

  "paddq %%xmm2,%%xmm1\n\t"
  "psubq %%xmm2,%%xmm0\n\t"
  "paddq %%xmm6,%%xmm5\n\t"
  "psubq %%xmm6,%%xmm7\n\t"
  "psubq %%xmm4,%%xmm1\n\t"
  "psubq %%xmm4,%%xmm5\n\t"

  "movdqa %%xmm0,%%xmm3\n\t"
  "movdqa %%xmm1,%%xmm2\n\t"
  "movdqa %%xmm7,%%xmm8\n\t"
  "movdqa %%xmm5,%%xmm6\n\t"

  "psrad $31,%%xmm3\n\t"
  "psrad $31,%%xmm2\n\t"
  "psrad $31,%%xmm8\n\t"
  "psrad $31,%%xmm6\n\t"

  "pshufd $245,%%xmm3,%%xmm3\n\t"
  "pshufd $245,%%xmm2,%%xmm2\n\t"
  "pshufd $245,%%xmm8,%%xmm8\n\t"
  "pshufd $245,%%xmm6,%%xmm6\n\t"

  "pand %%xmm4,%%xmm3\n\t"
  "pand %%xmm4,%%xmm2\n\t"
  "pand %%xmm4,%%xmm8\n\t"
  "pand %%xmm4,%%xmm6\n\t"

  "paddq %%xmm3,%%xmm0\n\t"
  "paddq %%xmm2,%%xmm1\n\t"
  "paddq %%xmm8,%%xmm7\n\t"
  "paddq %%xmm6,%%xmm5\n\t"

  "movdqa %%xmm0,(%1)\n\t"
  "movdqa %%xmm1,(%0)\n\t"
  "movdqa %%xmm7,16(%1)\n\t"
  "movdqa %%xmm5,16(%0)\n\t"

  "movdqa 32(%0),%%xmm1\n\t"
  "movdqa 32(%1),%%xmm2\n\t"
  "movdqa 48(%0),%%xmm5\n\t"
  "movdqa 48(%1),%%xmm6\n\t"
  "movdqa %%xmm1,%%xmm0\n\t"
  "movdqa %%xmm5,%%xmm7\n\t"

  "paddq %%xmm2,%%xmm1\n\t"
  "psubq %%xmm2,%%xmm0\n\t"
  "paddq %%xmm6,%%xmm5\n\t"
  "psubq %%xmm6,%%xmm7\n\t"
  "psubq %%xmm4,%%xmm1\n\t"
  "psubq %%xmm4,%%xmm5\n\t"

  "movdqa %%xmm0,%%xmm3\n\t"
  "movdqa %%xmm1,%%xmm2\n\t"
  "movdqa %%xmm7,%%xmm8\n\t"
  "movdqa %%xmm5,%%xmm6\n\t"

  "psrad $31,%%xmm3\n\t"
  "psrad $31,%%xmm2\n\t"
  "psrad $31,%%xmm8\n\t"
  "psrad $31,%%xmm6\n\t"

  "pshufd $245,%%xmm3,%%xmm3\n\t"
  "pshufd $245,%%xmm2,%%xmm2\n\t"
  "pshufd $245,%%xmm8,%%xmm8\n\t"
  "pshufd $245,%%xmm6,%%xmm6\n\t"

  "pand %%xmm4,%%xmm3\n\t"
  "pand %%xmm4,%%xmm2\n\t"
  "pand %%xmm4,%%xmm8\n\t"
  "pand %%xmm4,%%xmm6\n\t"

  "paddq %%xmm3,%%xmm0\n\t"
  "paddq %%xmm2,%%xmm1\n\t"
  "paddq %%xmm8,%%xmm7\n\t"
  "paddq %%xmm6,%%xmm5\n\t"

  "movdqa %%xmm0,32(%1)\n\t"
  "movdqa %%xmm1,32(%0)\n\t"
  "movdqa %%xmm7,48(%1)\n\t"
  "movdqa %%xmm5,48(%0)\n\t"
  :
  :"D"(a),"S"(b),"m"(*prime)
  :"xmm0","xmm1","xmm2","xmm3","xmm4","xmm5","xmm6","xmm7","xmm8","memory");
   return;
}
# 1259 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn AddMod(sfixn a, sfixn b, sfixn p){
  sfixn r = a + b;
        r -= p;
        r += (r >> BASE_1) & p;
   return r;
}
# 1277 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn SubMod(sfixn a, sfixn b, sfixn p){
   sfixn r = a - b;
   r += (r >> BASE_1) & p;
   return r;}

static inline
void AddSubSSEModInplace(sfixn* a,sfixn* b, const sfixn* prime){
# 1315 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
 sfixn u1 = AddMod(*a,*b,*prime);
 sfixn u2 = SubMod(*a,*b,*prime);
 sfixn u3 = AddMod(*(a+1),*(b+1),*prime);
 sfixn u4 = SubMod(*(a+1),*(b+1),*prime);
 *a = u1;
 *(a+1) = u3;
 *b = u2;
 *(b+1) = u4;

   return;
}
static inline
void AddSubSSEMod(sfixn* r1,sfixn* r2,sfixn* a,sfixn* b, const sfixn* prime){
# 1358 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
 *r1 = AddMod(*a,*b,*prime);
 *r2 = SubMod(*a,*b,*prime);
 *(r1+1) = AddMod(*(a+1),*(b+1),*prime);
 *(r2+1) = SubMod(*(a+1),*(b+1),*prime);

   return;
}
# 1374 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn NegMod(sfixn a, sfixn p){
   sfixn r = - a;
   r += (r >> BASE_1) & p;
   return r;}
# 1391 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static sfixn MulMod(sfixn a, sfixn b, sfixn n)
{
  sfixn q, res;







  __float128 ninv=1/(__float128)n;
  q = (sfixn) ((((__float128) a) * ((__float128) b)) * ninv);
  res = (sfixn) (((longfixnum) a)*((longfixnum) b) - ((longfixnum) q)*((longfixnum) n));

  res += (res >> BASE_1) & n;
  res -= n;
  res += (res >> BASE_1) & n;
  return res;
}

static sfixn MulModWithInv(sfixn a, sfixn b, sfixn n,__float128 ninv)
{
  sfixn q, res;







  q = (sfixn) ((((__float128) a) * ((__float128) b)) * ninv);
  res = (sfixn) (((longfixnum) a)*((longfixnum) b) - ((longfixnum) q)*((longfixnum) n));

  res += (res >> BASE_1) & n;
  res -= n;
  res += (res >> BASE_1) & n;
  return res;
}
# 1440 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void egcd (sfixn x, sfixn y, sfixn *ao, sfixn *bo, sfixn *vo) {
  sfixn tmp;
  sfixn A,B,C,D,u,v,q;

  u = y; v = x;
  A=1; B=0;
  C=0; D=1;

  do {
    q = u / v;
    tmp = u;
    u = v;
    v = tmp - q*v;
    tmp = A;
    A = B;
    B = tmp - q*B;
    tmp = C;
    C = D;
    D = tmp - q*D;
  } while (v != 0);
  *ao=A;
  *bo=C;
  *vo=u;
}
# 1475 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn inverseMod(sfixn n, sfixn p){
  sfixn a, b, v;
  egcd(n, p, &a, &b, &v);
  if (b < 0)
    b += p;
  return b % p;
}
# 1493 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn DivMod(sfixn a, sfixn b, sfixn p){
  return MulMod(a, inverseMod(b, p), p);
}
# 1507 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn QuoMod(sfixn a, sfixn b, sfixn p){
  return MulMod(a, inverseMod(b, p), p);
}
# 1521 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn PowerMod(sfixn a, sfixn ee, sfixn n)
{
   sfixn x, y;

   usfixn e;

   if (ee == 0) return 1;

   if (ee < 0)
      e = - ((usfixn) ee);
   else
      e = ee;

   x = 1;
   y = a;
   while (e) {
      if (e & 1) x = MulMod(x, y, n);
      y = MulMod(y, y, n);
      e = e >> 1;
   }

   if (ee < 0) x = inverseMod(x, n);

   return x;
}





static uint32
partialBitRev(register uint32 x, int32 n)
{
  register uint32 y = 0x55555555;
  x = (((x >> 1) & y) | ((x & y) << 1));
  y = 0x33333333;
  x = (((x >> 2) & y) | ((x & y) << 2));
  y = 0x0f0f0f0f;
  x = (((x >> 4) & y) | ((x & y) << 4));
  y = 0x00ff00ff;
  x = (((x >> 8) & y) | ((x & y) << 8));
  y =((x >> 16) | (x << 16));
  return y>>(32-n);
}
# 1579 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static inline sfixn
MontMulMod_OPT2_AS_GENE(sfixn a, sfixn b, MONTP_OPT2_AS_GENE * pPtr){
  sfixn q2=pPtr->c_sft, c;

  MulHiLoUnsigned(&a, &b);


  MulHiLoUnsigned(&b, &q2);

  a-=b;

  c=pPtr->c;

  q2=(usfixn)q2>>pPtr->Base_Npow;
  q2*=c;


  c=pPtr->P;
  a += (a >> BASE_1) & c;
  a+=q2;
  if(a<c)
 return a;
  else
 return a-c;







}



static inline sfixn MontMulModSpe_OPT3_AS_GENE_globalfunc(sfixn a,sfixn b,sfixn inv,sfixn prime){
 asm("mulq %2\n\t"
  "movq %%rax,%%rsi\n\t"
  "movq %%rdx,%%rdi\n\t"
  "imulq %3,%%rax\n\t"
  "mulq %4\n\t"
  "add %%rsi,%%rax\n\t"
  "adc %%rdi,%%rdx\n\t"
  "subq %4,%%rdx\n\t"
  "mov %%rdx,%%rax\n\t"
  "sar %%cl,%%rax\n\t"
  "andq %4,%%rax\n\t"
  "addq %%rax,%%rdx\n\t"
  : "=d" (a)
  : "a"(a),"rm"(b),"rm"(inv),"rm"(prime),"c"(BASE_1)
  :"rsi","rdi");
 return a;
}




static sfixn
MontMulMod_OPT2_AS_Double_GENE(sfixn * r2nd, sfixn a, sfixn b, sfixn x, sfixn y, MONTP_OPT2_AS_GENE * pPtr){
  sfixn q2=pPtr->c_sft, q22=q2;


  MulHiLoUnsigned(&a, &b);
  MulHiLoUnsigned(&b, &q2);
  a-=b;
  MulHiLoUnsigned(&x, &y);
  MulHiLoUnsigned(&y, &q22);
  x-=y;

  y=pPtr->Base_Npow;
  b=pPtr->c;


  q2=(usfixn)q2>>y;
  q2*=b;
  a+=q2;

  q22=(usfixn)q22>>y;
  y=pPtr->P;
  q22*=b;
  x+=q22;
# 1669 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
  a += (a >> BASE_1) & y;
  a -= y;
  a += (a >> BASE_1) & y;


  x += (x >> BASE_1) & y;
  x -= y;
  x += (x >> BASE_1) & y;

  *r2nd=x;

  return a;
}
# 1696 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static sfixn
MontMulMod_OPT2_AS_GENE_SPE(sfixn a, sfixn b, MONTP_OPT2_AS_GENE * pPtr){
  sfixn cpow=pPtr->c_pow, q3=pPtr->R_Npow, p=pPtr->Base_Rpow;

  MulHiLoUnsigned(&a, &b);


  b=((usfixn)b)>>p;
  b+=b<<cpow;
  p=pPtr->R_Nmask;
  q3=b>>q3;
  a-=q3;
  q3=pPtr->N2_Rpow;
  b&=p;
  b+=b<<cpow;
  b<<=q3;
  p=pPtr->P;
  a+=b;


  a += (a >> BASE_1) & p;
  a -= p;
  a += (a >> BASE_1) & p;
  return a;
}




static sfixn
MontMulMod_OPT2_AS_Double_GENE_SPE(sfixn * r2nd, sfixn a, sfixn b, sfixn x, sfixn y, MONTP_OPT2_AS_GENE * pPtr){

  sfixn cpow=pPtr->c_pow, q3=pPtr->R_Npow, p=pPtr->Base_Rpow;

  MulHiLoUnsigned(&a, &b);
  b=((usfixn)b)>>p;
  b+=b<<cpow;

  MulHiLoUnsigned(&x, &y);

  y=((usfixn)y)>>p;
  y+=y<<cpow;

  p=pPtr->R_Nmask;


  a-=b>>q3;
  x-=y>>q3;

  q3=pPtr->N2_Rpow;


  b&=p;
  y&=p;

  b+=b<<cpow;
  b<<=q3;
  a+=b;

  y+=y<<cpow;
  y<<=q3;

  p=pPtr->P;

  x+=y;


  a += (a >> BASE_1) & p;
  a -= p;
  a += (a >> BASE_1) & p;

  x += (x >> BASE_1) & p;
  x -= p;
  x += (x >> BASE_1) & p;

  *r2nd=x;

  return a;

}






static
sfixn convertToMondMulR(sfixn r, MONTP_OPT2_AS_GENE * pPtr){
      sfixn p=pPtr->P, R=(1L<<pPtr->Rpow)%p;
      R=(MulMod(r, R, p))<<pPtr->Base_Rpow;
      return R;
}
# 1800 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void MultiNumbPolyMul_1(sfixn r, preFFTRep * f, MONTP_OPT2_AS_GENE * pPtr){
   register sfixn i;
   sfixn R;
   R=convertToMondMulR(r, pPtr);
   for(i=0; i<(f->size); i++) ((f->data)[i])=MontMulMod_OPT2_AS_GENE( ((f->data)[i]), R, pPtr);
}







static
void fromtofftRep(sfixn N, sfixn * rccum, sfixn * res, sfixn * ccum, sfixn * dgs, sfixn * coeffs){
  int32 i;
  sfixn d;
  int32 tmpRes=0, tmpCoeffs=0;

   if(N==0){
    res[0]=coeffs[0];
    return;}
  d=dgs[N];
  if(N==1){
    for(i=0; i<=d; i++){ res[i]=coeffs[i];}
    return;}
  for(i=0; i<=d; i++){
    tmpCoeffs=i*ccum[N];
    tmpRes=i*rccum[N];
    fromtofftRep(N-1, rccum, res+tmpRes, ccum, dgs, coeffs+tmpCoeffs); }
}
# 1843 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
int32 zeroCoefp(sfixn * coefPtr, sfixn coefSiz){
  register int32 i;
  for(i=0;i<coefSiz;i++){ if (coefPtr[i]) return 0;}
  return 1;
}
# 1862 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn shrinkDeg(sfixn deg, sfixn * poly, sfixn coefSiz){
  sfixn * tmpPtr=poly+deg*coefSiz;
  while((zeroCoefp(tmpPtr, coefSiz))&& deg>0) {deg--; tmpPtr-=coefSiz;}
  return deg;
}
# 1878 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn shrinkDegUni(sfixn deg, sfixn * cof){
  while((deg>0) && (!cof[deg])) deg--;
  return deg;
}


static
void nextMCoefData(preFFTRep * Ptr, sfixn N, sfixn M){
   (Ptr->data)+=M*(((Ptr->accum)[N]));
}
# 1900 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
preFFTRep *
setLeadingCoefMultiOne(sfixn N, preFFTRep* f){
  sfixn d;
  register sfixn i;
  d=shrinkDeg(((f->bufSizs)[N]), (f->data), ((f->accum)[N]));
  nextMCoefData(f,N,d);
  for(i=0; i<((f->accum)[N]); i++) ((f->data)[i])=0;
  ((f->data)[0])=1;
  (f->data)=(f->defData);
  return f;
}


static
void
MultiNumbPolyMulMonicize_1(sfixn N, sfixn r, preFFTRep * f, MONTP_OPT2_AS_GENE * pPtr){
  MultiNumbPolyMul_1(r, f, pPtr);
  setLeadingCoefMultiOne(N,f);
}




static
void subEqDgPoly_inner_1
 (sfixn N, sfixn * dgs, sfixn * accum, sfixn * data1, sfixn * data2, sfixn p, int32 selector)
{
  int32 i, offset=0;
  if(N==1){
    if(selector==1){
      for(i=0;i<=dgs[1];i++) data1[i]=SubMod(data1[i],data2[i],p);}
    else{
      for(i=0;i<=dgs[1];i++) data2[i]=SubMod(data1[i],data2[i],p);}
    return;}
  for(i=0; i<=dgs[N]; i++){
    offset=accum[N]*i;
    subEqDgPoly_inner_1(N-1, dgs, accum, data1+offset, data2+offset, p, selector);
  }
}

static
void subEqDgPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p, int32 selector){
  subEqDgPoly_inner_1(N, (Ptr1->bufSizs), (Ptr1->accum), (Ptr1->data), (Ptr2->data), p, selector);
}
# 1955 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn
zeroPolyp(preFFTRep * polyPtr){
  register int32 i;
  if((!((polyPtr->N))) && (!(((polyPtr->data)[0])))) return 1;
  for(i=0;i<((polyPtr->size));i++){ if (((polyPtr->data)[i])) return 0;}
  return 1;
}
# 1973 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn
constantPolyp(preFFTRep * polyPtr){
  register int32 i;
  if((!((polyPtr->N))) && ((((polyPtr->data)[0]))==1)) return 1;
  for(i=1;i<((polyPtr->size));i++){ if (((polyPtr->data)[i])) return 0;}
  return 1;
}
# 1991 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void PolyCleanData(preFFTRep * prePtr){
  register int32 i;
  for(i=0;i<(prePtr->size);i++){
    ((prePtr->data)[i])=0;
  }
}
# 2008 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void negatePoly_1(preFFTRep * prePtr, sfixn p){
  register int32 i;
  for(i=0;i<(prePtr->size);i++){
    ((prePtr->data)[i])=p-((prePtr->data)[i]);
  }
}
# 2024 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void
setPolyOne(preFFTRep *Ptr){
 PolyCleanData(Ptr);
 ((Ptr->data)[0])=1;
}



static
void addEqDgPoly_inner
    (sfixn N, sfixn *dgs, sfixn *accum, sfixn *data1, sfixn *data2, sfixn p)
{
  int32 i, offset=0;
  if(N==1){
    for(i=0;i<=dgs[1];i++) data1[i]=AddMod(data1[i],data2[i],p);
    return;}
  for(i=0; i<=dgs[N]; i++){
    offset=accum[N]*i;
    addEqDgPoly_inner(N-1, dgs, accum, data1+offset, data2+offset, p);
  }
}
# 2059 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void addEqDgPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p){
  addEqDgPoly_inner(N, (Ptr1->bufSizs), (Ptr1->accum), (Ptr1->data), (Ptr2->data), p);
}




static
void subPoly_inner_1 (sfixn N, sfixn * accum1, sfixn * dgs2, sfixn * accum2, sfixn * data1, sfixn * data2, sfixn p)
{
  int32 i, offset1=0, offset2=0;
  if(N==1){
    for(i=0;i<=dgs2[1];i++) data1[i]=SubMod(data1[i],data2[i],p);
    return;}
  for(i=0; i<=dgs2[N]; i++){
    offset1=accum1[N]*i;
    offset2=accum2[N]*i;
    subPoly_inner_1(N-1, accum1, dgs2, accum2, data1+offset1, data2+offset2, p);
  }

}
# 2095 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void subPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p){
  subPoly_inner_1(N, (Ptr1->accum), (Ptr2->bufSizs), (Ptr2->accum), (Ptr1->data), (Ptr2->data), p);
}


static
void setData(preFFTRep * Ptr, sfixn * dataPtr){
   (Ptr->data)=dataPtr;
}


static
void backupData(preFFTRep * Ptr){
   (Ptr->tmpData)=(Ptr->data);
}


static
void restoreData(preFFTRep * Ptr){
   (Ptr->data)=(Ptr->tmpData);
}


static
void resumeData(preFFTRep * Ptr){
   (Ptr->data)=(Ptr->defData);
}

static
void decreaseOneDim(preFFTRep * Ptr){
  (Ptr->size)=((Ptr->accum)[(Ptr->N)]);
  ((Ptr->N))--;
}


static
void increaseOneDim(preFFTRep * Ptr){
  ((Ptr->N))++;
  (Ptr->size)=((Ptr->size))*( ((Ptr->bufSizs)[(Ptr->N)]) +1);
}


static
void resumeDim(preFFTRep * Ptr){
  (Ptr->N)=(Ptr->defN);
  (Ptr->size)=(Ptr->defSize);
  (Ptr->data)=(Ptr->defData);
}


static
void nextCoefData(preFFTRep * Ptr, sfixn N){
   (Ptr->data)+=((Ptr->accum)[N]);
}
# 2165 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
sfixn MontMulMod(sfixn a, sfixn b, MONTP_OPT2_AS_GENE *pPtr){
  sfixn brsft;
  brsft=MontMulMod_OPT2_AS_GENE(b, pPtr->R2BRsft, pPtr)<<(pPtr->Base_Rpow);
  return MontMulMod_OPT2_AS_GENE(a,brsft,pPtr);
}
# 2183 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void
coMulVec_1(sfixn co, sfixn deg, sfixn *vec, MONTP_OPT2_AS_GENE *pPtr){
    int32 i;
    sfixn tmp;
    tmp=(MontMulMod_OPT2_AS_GENE(co,pPtr->R2BRsft,pPtr))<<pPtr->Base_Rpow;
    deg = shrinkDegUni(deg, vec);
    for(i=0; i<=deg; i++){
      vec[i] = MontMulMod_OPT2_AS_GENE(vec[i],tmp,pPtr);
    }

}
# 2209 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
void
coMulAddVec(sfixn co, sfixn deg, sfixn *vec1, sfixn *vec2, MONTP_OPT2_AS_GENE *pPtr){
    int32 i;
    sfixn tmp;
    tmp=(MontMulMod_OPT2_AS_GENE(co,pPtr->R2BRsft,pPtr))<<pPtr->Base_Rpow;
    deg = shrinkDegUni(deg, vec2);
    for(i=0; i<=deg; i++){
      vec1[i] = AddMod(vec1[i], MontMulMod_OPT2_AS_GENE(vec2[i], tmp, pPtr), pPtr->P);
    }

}
# 2232 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static
preFFTRep *
getLeadingCoefMulti(sfixn N, preFFTRep* co, preFFTRep* f){
  sfixn d;
  d=shrinkDeg(((f->bufSizs)[N]), (f->data), ((f->accum)[N]));
  backupData(f);
  decreaseOneDim(f);
  nextMCoefData(f,N,d);
  fromtofftRep(N-1, (co->accum), (co->data), (f->accum), (f->bufSizs), (f->data));
  increaseOneDim(f);
  restoreData(f);
  return co;
}
# 2256 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/inlineFuncs.h"
static preFFTRep *
setCoefMulti(sfixn N, preFFTRep* f, preFFTRep* co, sfixn j){
  register sfixn i;
  nextMCoefData(f,N,j);

  for(i=0; i<(co->size); i++) ((f->data)[i])=((co->data)[i]);
  (f->data)=(f->defData);



  return co;
}
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/generalFuncs.h" 2

extern sfixn BASE;


void *my_calloc(size_t size, size_t thesizeof);
void *my_malloc(size_t totsize);
void my_free(void *ptr);


void catch_intr( int32 signo );


sfixn * randomVec(sfixn *, sfixn, sfixn);

void
printPolyUni(int32 deg, sfixn * coeffs);

sfixn * randomMonicVec(sfixn * vec, sfixn s, sfixn p);

void qr_seprator(int32 *nloop, int32 *q, int32 *r, int32 size, int32 n);

void qr_seprator2(int32 *nloop, int32 *q, int32 *r, int32 size, int32 n, int32 co);

void printVec_1_to_n_double(sfixn n, double * data);

void copyVec_1_to_n(int32 n, sfixn * desV, sfixn * srcV);

void copyVec_0_to_d(int32 d, sfixn * desV, sfixn * srcV);

sfixn * allOneVec(sfixn *, sfixn);

sfixn * randomVecSeed(sfixn, sfixn *, sfixn, sfixn, unsigned);




double gettime();

unsigned getSeed();

sfixn * reverse1(sfixn, sfixn *);

sfixn * reverseUni(sfixn, sfixn *, sfixn *);

sfixn logceiling(sfixn );

int32 compareVec(sfixn, sfixn *, sfixn *);

sfixn * reverseMulti_1(sfixn deg, sfixn sizOfCoef, sfixn * vec);

sfixn * reverseMulti(sfixn deg, sfixn sizOfCoef, sfixn * vec1, sfixn * vec2);

void printVec(sfixn deg, sfixn * data);

void fprintVec(FILE * F, sfixn deg, sfixn * data);


void printVecST(sfixn S, sfixn T, sfixn * data);

void printException(int32 menu);

void printVecLong(sfixn deg, longfixnum * data);

void printVecFrom1(sfixn n, sfixn * data);


void fprintVecDoubleDoubleBlock(FILE * F, sfixn Xst, sfixn Xed, sfixn Xinterval, sfixn Yst, sfixn Yed,sfixn Yinterval, double ** data, sfixn deg, sfixn * vec);


void printVecDoubleDoubleBlock(sfixn Xst, sfixn Xed, sfixn Xinterval, sfixn Yst, sfixn Yed, sfixn Yinterval, double ** data, sfixn deg, sfixn * vec);


void fprintVecDoubleDoubleBlockGnuplot(FILE * F, sfixn Xst, sfixn Xed, sfixn Xinterval, sfixn Yst, sfixn Yed,sfixn Yinterval, double ** data, sfixn deg, sfixn * vec);

void cleanVec(sfixn deg, sfixn * cof);

void cleanVecft(sfixn from, sfixn to, sfixn * cof);

void cleanVecINT(sfixn deg, int32 * cof);

void cleanVecDOUBLE(int32 deg, double * cof);





void aborting(const char * );



int32 isConstVec(sfixn n, sfixn * data);

int32 isZeroVec(int32 siz, sfixn *vec);

void freeVecVec(sfixn m, sfixn **ptsPtr);

sfixn* EX_copyVec_0_to_d(int32 d, sfixn * srcV);

void
EX_printPolyUni(int32 deg, sfixn * coeffs, char var);


void printVecAndIndex(sfixn deg, sfixn * data);

int32 isVecContainsZero(int32 siz, sfixn *vec);

sfixn
shiftBigger_1(int32 d, sfixn * vec, int32 m);

int32 isZeroPolyUni(sfixn d, sfixn *vec);

void
fprintPolyUni(FILE *file, int32 deg, sfixn * coeffs);

sfixn *EX_RandomUniPolyCoeffsVec(sfixn d, sfixn p);
sfixn * EX_RandomUniPolyCoeffsVecMonic(sfixn d, sfixn p);
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 1






# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FMUL.h" 1






# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/generalFuncs.h" 1
# 8 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FMUL.h" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FMUL.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FMUL.h" 2





extern sfixn BASE;
# 26 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FMUL.h"
void EX_Mont_TFTMul_OPT2_AS_GENE(sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);


void EX_Mont_PlainMul_OPT2_AS_GENE(sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void EX_MontP_Init_OPT2_AS_GENE(MONTP_OPT2_AS_GENE * pPtr, sfixn p);

void EX_MontP_Free_OPT2_AS_GENE(MONTP_OPT2_AS_GENE * pPtr);

void EX_MontP_Print_OPT2_AS_GENE(MONTP_OPT2_AS_GENE * pPtr);



void EX_Mont_GetNthRoots_OPT2_AS_GENE(sfixn e, sfixn n, sfixn * rootsPtr, MONTP_OPT2_AS_GENE * pPtr);

void EX_Mont_GetNthRoots_OPT2_AS_GENE_RAND(sfixn e, sfixn n, sfixn * rootsPtr, MONTP_OPT2_AS_GENE * pPtr);



void
EX_Mont_PairwiseMul_OPT2_AS_R(sfixn n, sfixn * APtr, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

void
EX_Mont_PairwiseMul_OPT2_AS(sfixn n, sfixn * APtr, sfixn * BPtr, sfixn p);



void * BlockPairwiseMul(void * PTR);

void
EX_Mont_DFT_OPT2_AS_GENE ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr);
void
EX_Mont_INVDFT_OPT2_AS_GENE_R (sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degRes, sfixn * ResPtr, MONTP_OPT2_AS_GENE * pPtr );
void
EX_Mont_INVDFT_OPT2_AS_GENE (sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degRes, sfixn * ResPtr, MONTP_OPT2_AS_GENE * pPtr );

void
EX_Mont_DFT_OPT2_AS_GENE_1 ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr );

void
EX_Mont_INVDFT_OPT2_AS_GENE_R_1 ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr);

void
EX_Mont_INVDFT_OPT2_AS_GENE_1 ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr);



void EX_Mont_FFTMul_OPT2_AS_GENE(sfixn n, sfixn e, sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

void EX_Mont_FFTSQUARE_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr);

void EX_Mont_FFTMul_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

void EX_Mont_FFTMul(sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);


void EX_KN_Mont_FFTMul_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn * rootsPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);


void EX_KN_Mont_FFTSQUARE_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn * rootsPtr, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr);


void EX_Mont_FFTMul_OPT2_AS_GENE_1_2(sfixn n, sfixn e, sfixn * APtr, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

void Mont_TFTMul_OPT2_AS_GENE(sfixn * resPtr, sfixn d1, sfixn * v1Ptr, sfixn d2, sfixn * v2Ptr, MONTP_OPT2_AS_GENE * pPtr);

void Mont_TFTMul_OPT2_AS_GENE_SPE(sfixn * resPtr, sfixn d1, sfixn * v1Ptr, sfixn d2, sfixn * v2Ptr, MONTP_OPT2_AS_GENE * pPtr);


void EX_Mont_TFTMul_OPT2_AS_GENE_WHOLE(sfixn * resPtr, sfixn d1, sfixn * v1Ptr, sfixn d2, sfixn * v2Ptr, MONTP_OPT2_AS_GENE * pPtr);


void
EX_Mont_TDFT_OPT2_AS_GENE_1 ( sfixn l, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr);


void
EX_Mont_INVTDFT_OPT2_AS_GENE_1 ( sfixn l, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr);


void
EX_Mont_INVTDFT_OPT2_AS_GENE_R_1 ( sfixn l, sfixn * rootsPtr, sfixn * tmpVecPtr, MONTP_OPT2_AS_GENE * pPtr);

sfixn *EX_Mont_Mul(sfixn *degResAddr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);
# 8 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/matrix.h" 1






# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FDIV.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FDIV.h"
sfixn *
modularInvPM(sfixn, sfixn *, sfixn, sfixn *, sfixn, sfixn, MONTP_OPT2_AS_GENE *);

void
fmedg_1(sfixn degRes, sfixn * resPtr, sfixn e, sfixn r, sfixn degp2, sfixn * p2Ptr, MONTP_OPT2_AS_GENE *);


void
fastDiv(sfixn *, sfixn, sfixn *, sfixn, sfixn *, sfixn, sfixn *, MONTP_OPT2_AS_GENE *);

void
plainDiv(sfixn * RPtr,sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

double
fastDiv_bench(sfixn * RPtr, sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );


void
plainDivMonic_1(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE *);

void
plainDiv_1(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE *);

void
fastDiv_1(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, sfixn * BRevInvPtr, MONTP_OPT2_AS_GENE * pPtr );


void
plainRemMonic_1(sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
plainDivNew(sfixn * RPtr,sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
plainRem(sfixn *degRAddr, sfixn * RPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
fastQuo(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
plainQuo(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
fastRem(sfixn *degRAddr, sfixn * RPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );


void
UniQuo(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
UniRem(sfixn *degRAddr, sfixn * RPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );


sfixn *
EX_UniRem(sfixn *degRAddr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );


sfixn *
EX_UniQuo(sfixn *degQAddr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
PlainPseudoRemainder(sfixn *degRAddr, sfixn * RPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);


void
PlainPseudoQuotient(sfixn *degQAddr, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

void
UniPseuQuo(sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );


sfixn *
EX_PQuo_Uni(sfixn *degQAddr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2

# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/GCD.h" 1
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/GCD.h"
sfixn
gcd_Uni_1(sfixn * change, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr,MONTP_OPT2_AS_GENE * pPtr, sfixn );

sfixn
ExGcd_Uni_1(sfixn * change,sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr,MONTP_OPT2_AS_GENE * pPtr, sfixn * degS, sfixn * degT, sfixn * S1Ptr, sfixn * S2Ptr,sfixn * T1Ptr, sfixn * T2Ptr, sfixn);

void
plainDiv(sfixn * RPtr, sfixn degQ, sfixn * QPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

void
ExGcd_Uni(sfixn * uPtr, sfixn *dC, sfixn * vPtr, sfixn *dD, sfixn * gcdPtr, sfixn *dG,
   sfixn * fPtr, sfixn dA, sfixn * gPtr, sfixn dB, MONTP_OPT2_AS_GENE * pPtr);

void
Gcd_Uni(sfixn * gcdPtr, sfixn *dG,
 sfixn * fPtr, sfixn dA, sfixn * gPtr, sfixn dB, MONTP_OPT2_AS_GENE * pPtr);


sfixn *
EX_GCD_UNI(sfixn *dGAddr,
    sfixn * fPtr, sfixn dA, sfixn * gPtr, sfixn dB, MONTP_OPT2_AS_GENE * pPtr);


int32
ExGcd_Uni_RFR(sfixn d, sfixn * vPtr, sfixn *dD, sfixn * gcdPtr, sfixn *dG, sfixn * fPtr, sfixn dA, sfixn * gPtr, sfixn dB, MONTP_OPT2_AS_GENE * pPtr);

void
normalize_1(sfixn deg, sfixn * cof, MONTP_OPT2_AS_GENE * pPtr);
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/HGCD.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/HGCD.h"
void XGCD(sfixn *C, sfixn *dC, sfixn *D, sfixn *dD, sfixn *G, sfixn *dG,
   sfixn *A, sfixn dA, sfixn *B, sfixn dB, MONTP_OPT2_AS_GENE * pPtr);
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2

# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 1







# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FINTERP.h" 1
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FINTERP.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/SubResultantSeq.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/SubResultantSeq.h"
sfixn *
SubResultantSeq(sfixn dg1, sfixn *f1, sfixn dg2, sfixn *f2, MONTP_OPT2_AS_GENE *pPtr);

sfixn *
SubResultantSeq_1(sfixn w, sfixn Ssz, sfixn *S, sfixn dg1, sfixn *f1, sfixn dg2, sfixn *f2, MONTP_OPT2_AS_GENE *pPtr);


sfixn *
SubResultantSeq_1_new(sfixn w, sfixn Ssz, sfixn *S, sfixn dg1, sfixn *f1, sfixn dg2, sfixn *f2, MONTP_OPT2_AS_GENE *pPtr);

void
printSRS(sfixn w, sfixn *SRS);

sfixn EX_Resultant_Uni(sfixn dgP, sfixn *P, sfixn dgQ, sfixn *Q, MONTP_OPT2_AS_GENE *pPtr);
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FINTERP.h" 2
# 1 "/usr/include/c++/7/math.h" 1 3
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FINTERP.h" 2


subProdTree *
subProdTreeCre( sfixn itemNo, sfixn itemSz, sfixn *items, sfixn p);

void
subProdTreeFree(subProdTree * tree);
void
printSubProdTree(subProdTree * tree);
sfixn *
FastEvaluation(sfixn n, sfixn degf, sfixn *fPtr, subProdTree * tree, sfixn p);
sfixn *
SlowEvaluation(sfixn degf, sfixn *fPtr, sfixn nopts, sfixn *pts, sfixn p);
sfixn *
linearCombineModulus(sfixn *Cs, subProdTree * tree, sfixn p);
sfixn *
fastInterp(sfixn* polyDg, sfixn n, sfixn *Us, subProdTree * tree, sfixn *Vs, sfixn p);
sfixn *
direvative(sfixn deg, sfixn *coef, sfixn p);
void
mulNodes(sfixn dr, sfixn *srcAddr, sfixn ds, sfixn *Addr1, sfixn *Addr2, sfixn nodeSz, MONTP_OPT2_AS_GENE * pPtr);
sfixn *
createPts(sfixn start, sfixn m, sfixn *bounds, sfixn p);
subProdTree**
createArrOfSPTrees(sfixn m, sfixn *bounds, sfixn *pts, sfixn p);
void
freeArrOfSPTTrees(sfixn m, subProdTree **trees);
void
printArrOfSPTTrees(sfixn m, subProdTree **trees);

void
FastEvaluation_1(sfixn resultsz, sfixn *result, sfixn degf, sfixn *fPtr, subProdTree * tree, sfixn p);

void
freePTS_TREE(PTS_TREE *pt);


void fastEvalMulti_test(sfixn M, sfixn *dims, sfixn *E, preFFTRep* poly, subProdTree** trees, MONTP_OPT2_AS_GENE * pPtr);




preFFTRep*
fastInterpMulti_test(sfixn N, sfixn M, sfixn *dims, sfixn *EEE, sfixn **UsPtr, subProdTree** trees, MONTP_OPT2_AS_GENE * pPtr);

sfixn **
convertpts2ptsPtr(sfixn m, sfixn *bounds, sfixn *pts);

PTS_TREE*
createGoodPtsForf1f2(sfixn N, sfixn d1, preFFTRep *f1, sfixn d2, preFFTRep *f2, sfixn m, sfixn *bounds, sfixn *dims1, sfixn *dims2, MONTP_OPT2_AS_GENE *pPtr);


int32
createGoodRootsForf1f2(sfixn N, sfixn M, sfixn d1, preFFTRep *f1, sfixn d2, preFFTRep *f2, sfixn *es, sfixn *dims, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

void
getSubResultantChains(sfixn N, sfixn w, sfixn Ssz, sfixn *S, sfixn* Edimsq, sfixn *E1, sfixn *Edims2, sfixn*E2, MONTP_OPT2_AS_GENE * pPtr);

void
printAllSRS(sfixn no, sfixn w, sfixn *AllSRS);


sfixn *
get_ithSlice_fromSubResultantChains(sfixn ith, sfixn N, sfixn w, sfixn slicesz, sfixn *slicedims, sfixn Ssz, sfixn *S);


sfixn *
get_ithDthSubSlice_fromSubResultantChains(sfixn ith, sfixn dth, sfixn N_1, sfixn w, sfixn subslicesz, sfixn *subslicedims, sfixn Ssz, sfixn *S);


int32
tracingNextCandidateSlice(int32 start, sfixn w, sfixn Ssz, sfixn *S);


void
set_ithSliceZero_fromSubResultantChains(sfixn ith, sfixn N, sfixn w, sfixn slicesz, sfixn *slicedims, sfixn Ssz, sfixn *S);


preFFTRep*
interpIthSlice(sfixn ith, sfixn N, sfixn m, sfixn w, sfixn slicesz, sfixn *slicedims, sfixn Ssz, sfixn *S, PTS_TREE* pts_tree, MONTP_OPT2_AS_GENE * pPtr);


preFFTRep*
interpIthDthSlice(sfixn ith, sfixn dth, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicedims, sfixn Ssz, sfixn *S, PTS_TREE* pts_tree, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep*
interpNextCandidateSliceLC(int32*nextiAddr, int32 start, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicedims, sfixn Ssz, sfixn *S, PTS_TREE* pts_tree, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep*
interpNextCandidateSliceLT(int32*nextiAddr, int32 start, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicedims, sfixn Ssz, sfixn *S, PTS_TREE* pts_tree, MONTP_OPT2_AS_GENE * pPtr);


void fastDftMulti_test(sfixn M, sfixn *es, sfixn *dims, sfixn *E, preFFTRep* poly, sfixn *rootsPtr, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep*
fastInvDftMulti_test(sfixn N, sfixn M, sfixn *es, sfixn *dims, sfixn *EEE, sfixn *rootsPtr,MONTP_OPT2_AS_GENE * pPtr);



preFFTRep*
interpIthSliceDFT(sfixn ith, sfixn N, sfixn m, sfixn w, sfixn slicesz, sfixn *slicees, sfixn *slicedims, sfixn Ssz, sfixn *S, sfixn *rootsPtr, MONTP_OPT2_AS_GENE * pPtr);


preFFTRep*
interpIthDthSliceDFT(sfixn ith, sfixn dth, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicees, sfixn *subslicedims, sfixn Ssz, sfixn *S, sfixn *rootsPtr, MONTP_OPT2_AS_GENE * pPtr);


preFFTRep*
interpNextCandidateSliceLCDFT(int32 *nextiAddr, int32 start, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicees, sfixn *subslicedims, sfixn Ssz, sfixn *S, sfixn *rootsPtr, MONTP_OPT2_AS_GENE * pPtr);


sfixn
SlowEvaluation1pt(sfixn degf, sfixn *fPtr, sfixn pt, sfixn p);


void
getQuotients(sfixn N, sfixn dd, sfixn Qsz, sfixn *Q, sfixn* Edims1, sfixn *E1, sfixn *Edims2, sfixn*E2, MONTP_OPT2_AS_GENE * pPtr, int32 opt );

void permuteSlice1toN(sfixn N, sfixn slicesz, sfixn *slicedims, sfixn *slice);

preFFTRep *EX_QuoMulti(preFFTRep *f1, preFFTRep *f2, sfixn N, MONTP_OPT2_AS_GENE * pPtr, int32 opt);


preFFTRep*
interpNextCandidateSliceLCDefective(int32 *nextiAddr, int32 start, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicedims, sfixn Ssz, sfixn *S, PTS_TREE* pts_tree, MONTP_OPT2_AS_GENE * pPtr);



preFFTRep*
interpNextCandidateSliceLCDFTDefective(int32 *nextiAddr, int32 start, sfixn N, sfixn m, sfixn w, sfixn subslicesz, sfixn *subslicees, sfixn *subslicedims, sfixn Ssz, sfixn *S, sfixn *rootsPtr, MONTP_OPT2_AS_GENE * pPtr);
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/LinkedList.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/LinkedList.h"
RegularPair *EX_RegularPair_Init(preFFTRep * poly, TriSet *ts);

void EX_RegularPair_Print(void *element);

void EX_RegularPair_Free(void *element);

RegularListPair *EX_RegularListPair_Init(sfixn no, preFFTRep **polyList, TriSet *ts);

void EX_RegularListPair_Print(void *element);

void EX_RegularListPair_Free(void *element);

void EX_Poly_Print(void *element);

void EX_Poly_Free(void *element);

TaskPair *EX_TaskPair_Init(int32 index, TriSet *ts);

void EX_TaskPair_Print(void *element);

void EX_TaskPair_Free(void *element);

LinearNode *EX_LinearNode_Init(void *element);

void EX_LinearNode_Print(LinearNode *node, void (*printELement)(void *));

void EX_LinearNode_Free(LinearNode *node, void (*freeElement)(void *));

LinkedQueue *EX_LinkedQueue_Init();

int32 EX_LinkedQueue_IsEmpty(LinkedQueue *queue);

void EX_LinkedQueue_Print(LinkedQueue *queue, void (*printELement)(void *));

void EX_LinkedQueue_Free(LinkedQueue *queue, void (*freeElement)(void *));

void EX_LinkedQueue_Enqeue(LinkedQueue *queue, void *element);

void *EX_LinkedQueue_Deqeue(LinkedQueue *queue);

LinkedQueue *EX_LinkedQueue_Copy(LinkedQueue *queue, void *(*copyElement)(void *) );

int32 EX_LinkedQueue_Size(LinkedQueue *queue);

LinkedQueue * EX_LinkedQueue_Concat_1(LinkedQueue *queue1, LinkedQueue *queue2);

void **LinkedQueue2Array(LinkedQueue *queue, void *(*copyElement)(void *));

void *EX_CopyRegularPair(void *pair);

void *EX_CopyRegularListPair(void *pair);

void *EX_CopyPoly(void *element);

void EX_RegularListPair_List_Free(void *element);

void EX_RegularPair_List_Free(void *element);
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IteratedResultant.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IteratedResultant.h"
# 1 "/usr/include/c++/7/math.h" 1 3
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IteratedResultant.h" 2


sfixn
iteratedResultant_zerodim(preFFTRep *poly, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);


sfixn *iteratedResultant_onedim(sfixn *resDgAddr, preFFTRep *poly,
                         TriSet *ts, sfixn bound, sfixn freeVarNo,
                         MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *EX_Resultant_Multi(preFFTRep *f1, preFFTRep *f2, sfixn N, MONTP_OPT2_AS_GENE *pPtr);

SCUBE *EX_SubResultantChain(preFFTRep *f1, preFFTRep *f2, sfixn N, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep *EX_ResultantFromChain(SCUBE *scube, MONTP_OPT2_AS_GENE *pPtr);

SCUBE *EX_SCUBE_Init(sfixn M, sfixn *bounds, sfixn w);

void EX_SCUBE_Free(SCUBE *scube);

void EX_SCUBE_Print(SCUBE *scube);

preFFTRep *
EX_Resultant_Multi_Wrapper(preFFTRep *f1, preFFTRep *f2, sfixn N, MONTP_OPT2_AS_GENE *pPtr);
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IsInvertible.h" 1
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IsInvertible.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/RegularGcd.h" 1
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/RegularGcd.h"
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IsInvertible.h" 1
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/RegularGcd.h" 2
# 1 "/usr/include/c++/7/math.h" 1 3
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/RegularGcd.h" 2

LinkedQueue *EX_RegularizeList_1(LinkedQueue *RegQueue, LinkedQueue *ToCheckQueue, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);

LinkedQueue *
EX_RegularGcd(preFFTRep *f1, preFFTRep *f2, TriSet *ts, SCUBE *scube, MONTP_OPT2_AS_GENE *pPtr);

LinkedQueue *
EX_RegularGcd_Wrapped(preFFTRep *f1, preFFTRep *f2, TriSet *ts, sfixn M, MONTP_OPT2_AS_GENE *pPtr);
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IsInvertible.h" 2
# 1 "/usr/include/c++/7/math.h" 1 3
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/IsInvertible.h" 2

LinkedQueue *
isInvertible_zeroDim(preFFTRep *poly, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h" 2




preFFTRep * createOneWrapperPoly(sfixn N, sfixn *dgs, sfixn *data);

SLG * Maple2C_DAG2DAG(int32 GN, sfixn *MDA);

void create_pdeg_coef_Vec (sfixn *pdegVec, sfixn*coefVec, preFFTRep * poly);

preFFTRep *inverse_create_pdeg_coef_Vec(sfixn N, sfixn *dgs, sfixn *pdegVec, sfixn*coefVec);





__declspec(dllexport) void __stdcall



TestMDag2CDag(sfixn GN, sfixn *MDA);


__declspec(dllexport) void __stdcall



TestRecden2C(int32 N, sfixn sz, sfixn *dgs, sfixn *MDA);


__declspec(dllexport) void __stdcall



TestC2Recden ( sfixn pdVdeg, sfixn *pdegVec, sfixn cVdeg, sfixn *coefVec);



void getSMPfromC (sfixn size, sfixn *buffer);



__declspec(dllexport) void __stdcall



MulPolyTFTFFTCN(sfixn N, sfixn *rdgs, sfixn rBsz, sfixn *resBuffer,
  sfixn *p1dgs, sfixn p1sz, sfixn *p1Buffer,
                sfixn *p2dgs, sfixn p2sz, sfixn *p2Buffer,
                sfixn dVsz, sfixn *pdegVec,
                sfixn cVsz, sfixn *coefVec,
                sfixn p);
int32
estimatePartialDegVecSize(sfixn *dgs, sfixn n);



__declspec(dllexport) void __stdcall



MulPolyTFTFFTCNC(sfixn N, sfixn *dgs1,
   sfixn p1dgssz, sfixn *p1dgs, sfixn p1sz, sfixn *p1Buffer,
       sfixn *dgs2,
   sfixn p2dgssz, sfixn *p2dgs, sfixn p2sz, sfixn *p2Buffer,
       sfixn *rdgs,
                sfixn dVsz, sfixn *pdegVec,
                sfixn cVsz, sfixn *coefVec,
   sfixn p);




__declspec(dllexport) void __stdcall



 TFTFFTUNIC(sfixn dr, sfixn *resPtr,
    sfixn d1, sfixn *v1Ptr, sfixn d2, sfixn *v2Ptr,
                  sfixn p);


__declspec(dllexport) void __stdcall



FASTDIVC(sfixn degR, sfixn *RPtr, sfixn degQ, sfixn *QPtr, sfixn degA, sfixn *APtr, sfixn degB, sfixn *BPtr, sfixn p);


__declspec(dllexport) void __stdcall



PLAINDIVC(sfixn degR, sfixn *RPtr,sfixn degQ, sfixn *QPtr, sfixn degA, sfixn *APtr, sfixn degB, sfixn *BPtr, sfixn p);


__declspec(dllexport) void __stdcall



PLAINGCDUNIC(sfixn ud, sfixn *uPtr, sfixn vd, sfixn *vPtr, sfixn gd, sfixn *gcdPtr, sfixn dA, sfixn *APtr, sfixn dB, sfixn *BPtr, sfixn p);



__declspec(dllexport) void __stdcall



FASTGCDUNIC(sfixn ud, sfixn *uPtr, sfixn vd, sfixn *vPtr, sfixn gd, sfixn *gcdPtr, sfixn dA, sfixn *APtr, sfixn dB, sfixn *BPtr, sfixn p);



__declspec(dllexport) void __stdcall



subProdTreeCreWrapC(sfixn h, sfixn levels, sfixn *W, sfixn *NoNodes,
                   sfixn *Bases, sfixn totSZ, sfixn *data,
      sfixn itemNo, sfixn itemSz, sfixn p);

void
subProdTreeFreeWrapC(subProdTree * tree);


__declspec(dllexport) void __stdcall



FastEvalWrapC(sfixn n, sfixn *EvalPts, sfixn degf, sfixn *fPtr, sfixn h, sfixn *W, sfixn *NoNodes, sfixn *Bases, sfixn *data, sfixn p);


__declspec(dllexport) void __stdcall



FastInterpWrapC(sfixn n, sfixn *InterpedPts, sfixn *EvaluatingPts, sfixn *EvaluatedPts, sfixn h, sfixn *W, sfixn *NoNodes, sfixn *Bases, sfixn *data, sfixn p);
# 158 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h"
__declspec(dllexport) sfixn __stdcall



PTRTREESCRECN(sfixn *Nmp, sfixn *ptPHWDSZ, sfixn *bounds, sfixn *dims1, sfixn *dims2,
     sfixn *pts_s,
            sfixn *h_s,
            sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
            sfixn *data_s,
     sfixn *p1dgs, sfixn p1sz, sfixn *p1Buffer,
       sfixn *p2dgs, sfixn p2sz, sfixn *p2Buffer);



PTS_TREE *
createWrapperPTS_TREE(sfixn N, sfixn m, sfixn *bounds, sfixn pts_sSz, sfixn *pts_s,
                          sfixn h_sSz, sfixn *h_s,
                          sfixn WNB_sSz, sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
        sfixn data_sSz, sfixn *data_s, sfixn p);


subProdTree *
createWrapperTree(sfixn h, sfixn *W, sfixn *NoNodes, sfixn *Bases, sfixn *data);

void freeWrapperPTS_TREE(PTS_TREE *pts_tree);


__declspec(dllexport) sfixn __stdcall



FastEvalMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ,
                   sfixn *bounds,
            sfixn *pts_s,
                   sfixn *h_s,
                   sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                   sfixn *data_s,
                   sfixn *dims, sfixn Esz, sfixn *E,
      sfixn *fdgs, sfixn fsz, sfixn *fBuffer);





__declspec(dllexport) sfixn __stdcall



FastInterpMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ,
                      sfixn *bounds,
               sfixn *pts_s, sfixn *h_s,
                      sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                      sfixn *data_s,
                      sfixn *dims, sfixn Esz, sfixn *E,
                      sfixn dVsz, sfixn *pdegVec,
                      sfixn cVsz, sfixn *coefVec);




__declspec(dllexport) sfixn __stdcall



SubResultantChains(sfixn N, sfixn w, sfixn Ssz, sfixn *S, sfixn* Edims1, sfixn E1sz, sfixn *E1, sfixn *Edims2, sfixn E2sz, sfixn*E2, sfixn p);
# 231 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MapleCConverter.h"
__declspec(dllexport) void __stdcall



InterpIthDthMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ, sfixn ith, sfixn dth, sfixn *bounds,
            sfixn *pts_s, sfixn *h_s,
                   sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                   sfixn *data_s,
     sfixn w, sfixn subslicesz, sfixn *subslicedims,
                   sfixn Ssz, sfixn *S,

                   sfixn dVsz, sfixn *pdegVec,
                   sfixn cVsz, sfixn *coefVec);




__declspec(dllexport) void __stdcall



InterpIthMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ, sfixn ith, sfixn *bounds,
            sfixn *pts_s, sfixn *h_s,
                   sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                   sfixn *data_s,
     sfixn w, sfixn slicesz, sfixn *slicedims,
                   sfixn Ssz, sfixn *S,

                   sfixn dVsz, sfixn *pdegVec,
       sfixn cVsz, sfixn *coefVec);




__declspec(dllexport) sfixn __stdcall



InterpNextLTMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ,sfixn start, sfixn *bounds,
            sfixn *pts_s, sfixn *h_s,
                   sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                   sfixn *data_s,
     sfixn w, sfixn subslicesz, sfixn *subslicedims,
                   sfixn Ssz, sfixn *S,

                   sfixn dVsz, sfixn *pdegVec,
   sfixn cVsz, sfixn *coefVec);



__declspec(dllexport) sfixn __stdcall



InterpNextLCMultiWrapCN(sfixn *Nmp, sfixn *ptPHWDSZ,sfixn start, sfixn *bounds,
            sfixn *pts_s, sfixn *h_s,
                   sfixn *W_s, sfixn *NoNodes_s, sfixn *Bases_s,
                   sfixn *data_s,
     sfixn w, sfixn subslicesz, sfixn *subslicedims,
                   sfixn Ssz, sfixn *S,

                   sfixn dVsz, sfixn *pdegVec,
   sfixn cVsz, sfixn *coefVec);






__declspec(dllexport) void __stdcall



DftMultiWrapCN(sfixn *Nmp,
               sfixn *es, sfixn *dims, sfixn Esz, sfixn *E,
        sfixn *fdgs, sfixn fsz, sfixn *fBuffer, sfixn *rootsPtr);



__declspec(dllexport) void __stdcall



InvDftMultiWrapCN(sfixn *Nmp,
    sfixn *es, sfixn *dims, sfixn Esz, sfixn *E,
                      sfixn dVsz, sfixn *pdegVec,
    sfixn cVsz, sfixn *coefVec, sfixn *rootsPtr);


__declspec(dllexport) void __stdcall



InvDftIthDthMultiWrapCN(sfixn *Nmp, sfixn ith, sfixn dth,
      sfixn w, sfixn subslicesz, sfixn *subslicees, sfixn *subslicedims,
                   sfixn Ssz, sfixn *S,
                   sfixn dVsz, sfixn *pdegVec,
   sfixn cVsz, sfixn *coefVec, sfixn *rootsPtr);



__declspec(dllexport) void __stdcall



InvDftIthMultiWrapCN(sfixn *Nmp, sfixn ith,
       sfixn w, sfixn slicesz, sfixn *slicees, sfixn *slicedims,
                   sfixn Ssz, sfixn *S,
                   sfixn dVsz, sfixn *pdegVec,
       sfixn cVsz, sfixn *coefVec, sfixn *rootsPtr);


__declspec(dllexport) sfixn __stdcall



InvDftNextLCMultiWrapCN(sfixn *Nmp, sfixn start,
   sfixn w, sfixn subslicesz, sfixn *subslicees, sfixn *subslicedims,
                   sfixn Ssz, sfixn *S,
                   sfixn dVsz, sfixn *pdegVec,
   sfixn cVsz, sfixn *coefVec, sfixn *rootsPtr);


__declspec(dllexport) sfixn __stdcall



createGoodRootsCN(sfixn N, sfixn M, sfixn *f1dgs, sfixn *f1Buffer,
                  sfixn *f2dgs, sfixn *f2Buffer,
    sfixn *es, sfixn *dims, sfixn *rootsPtr, sfixn p);



__declspec(dllexport) void __stdcall



PLAINRFRUNIC(sfixn d, sfixn vd, sfixn *vPtr, sfixn gd, sfixn *gcdPtr, sfixn dA, sfixn *APtr, sfixn dB, sfixn *BPtr, sfixn p);



__declspec(dllexport) int32 __stdcall



NewtonLiftUniCN(sfixn *outPDGVECS, sfixn *outCOEFVECS, sfixn Y, sfixn y0, sfixn N,
                sfixn *GNS, sfixn *MDAS, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);



__declspec(dllexport) sfixn __stdcall



MultiModCN(sfixn dVsz, sfixn *pdegVec, sfixn cVsz, sfixn *coefVec, sfixn N, sfixn *fdgs, sfixn *fBuffer, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p, sfixn opt);



__declspec(dllexport) sfixn __stdcall



NormalizeCN(sfixn *outPDGVECS, sfixn *outCOEFVECS, sfixn N, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);



__declspec(dllexport) void __stdcall



GetQuotientCN(sfixn N, sfixn dd, sfixn Ssz, sfixn *S, sfixn* Edims1, sfixn E1sz, sfixn *E1, sfixn *Edims2, sfixn E2sz, sfixn*E2, sfixn p, sfixn opt);


__declspec(dllexport) sfixn __stdcall



ReduceCoeffCN(sfixn dVsz, sfixn *pdegVec, sfixn cVsz, sfixn *coefVec, sfixn N, sfixn *fdgs, sfixn *fBuffer, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);


__declspec(dllexport) void __stdcall



QuotientModTriSetCN(sfixn dVsz, sfixn *pdegVec, sfixn cVsz, sfixn *coefVec, sfixn N, sfixn *fdgs1, sfixn *fBuffer1, sfixn *fdgs2, sfixn *fBuffer2, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);




__declspec(dllexport) sfixn __stdcall



FastInterpRFRWrapC(sfixn *np, sfixn *InterpedPtsNum, sfixn *InterpedPtsDen, sfixn *EvaluatingPts, sfixn *EvaluatedPts, sfixn h, sfixn *W, sfixn *NoNodes, sfixn *Bases, sfixn *data);



__declspec(dllexport) sfixn __stdcall



IterResOneDimCN(sfixn *outVec, sfixn M, sfixn *fdgs, sfixn *fBuffer, sfixn N, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn bound, sfixn freeVarNo, sfixn p);


__declspec(dllexport) sfixn __stdcall



IterResZeroDimCN(sfixn M, sfixn *fdgs, sfixn *fBuffer, sfixn N, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);


__declspec(dllexport) sfixn __stdcall



isInvertableCN(sfixn N, sfixn *fdgs, sfixn *fBuffer, sfixn *TS_DGS,
               sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);



__declspec(dllexport) sfixn __stdcall



IsInvertibleChainCN(sfixn *Ns, sfixn *outPolyPDGVECS, sfixn *outPolyCOEFVECS, sfixn *outTsPDGVECS, sfixn *outTsCOEFVECS, sfixn N, sfixn *fdgs, sfixn *fBuffer, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);

TriSet *
createWrapperDenseTriSet(sfixn N, sfixn * dgs);



__declspec(dllexport) sfixn __stdcall



RegularGcdChainCN(sfixn *Ns, sfixn *outPolyPDGVECS, sfixn *outPolyCOEFVECS, sfixn *outTsPDGVECS, sfixn *outTsCOEFVECS, sfixn N, sfixn M, sfixn *fdgs1, sfixn *fBuffer1, sfixn *fdgs2, sfixn *fBuffer2, sfixn *TS_DGS, sfixn *inDGS, sfixn *inSIZS, sfixn *inCOEFS, sfixn p);



__declspec(dllexport) sfixn __stdcall



ResultantMultivariateCN(sfixn *Nnew, sfixn *rdgs, sfixn *resBuffer, sfixn N, sfixn *p1dgs, sfixn *p1Buffer, sfixn *p2dgs, sfixn *p2Buffer, sfixn p);
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 16 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 17 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 2




extern char letters[];


preFFTRep * GcdAsUni(preFFTRep *f1, preFFTRep *f2, MONTP_OPT2_AS_GENE * pPtr);

int IsAllNumberCoeffs(preFFTRep *poly);

preFFTRep * QuoAsUni(preFFTRep *f1, preFFTRep *f2, MONTP_OPT2_AS_GENE * pPtr);

void getRevInvTiSet(sfixn *dgs, sfixn N, TriRevInvSet * tris, TriSet * ts, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
EX_mul_Coef_Reduced(sfixn N, preFFTRep * out, preFFTRep * f1, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

sfixn
MultiRecip(sfixn N, preFFTRep * invPtr, preFFTRep * cPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void
copyPolyPointers(preFFTRep *D, preFFTRep *S);


void printPolyStrut(preFFTRep * Ptr);


void initRandomDenseTriSet( sfixn N, sfixn * dgs, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);


void initRandomTriSet( sfixn N, sfixn dgbound, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);

void InitOnePoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs);


void CopyOnePoly(preFFTRep * rPtr, preFFTRep * fPtr );

void freeTriSet(TriSet * tPtr);

void InitOneRevInv(sfixn N, preFFTRep * tRIPtr, sfixn * bounds, sfixn di);

void initTriRevInvSet(sfixn *dgs, sfixn N, TriRevInvSet * tRevInvPtr, TriSet * tPtr);

void initCopyOneRevInv(preFFTRep * outPtr, preFFTRep * inPtr);

void freeTriRevInvSet(TriRevInvSet * tRIPtr);


void printPoly(preFFTRep * Ptr);

void printTriSet(TriSet * tPtr);

void printTriRevInvSet(TriRevInvSet * triPtr);

void freePoly(preFFTRep * x);

void freeKroFFTRep(KroFFTRep * x);

void InitOneReducedPoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs);

void
InitOneMonicRandomPolys(sfixn * , sfixn, preFFTRep *, MONTP_OPT2_AS_GENE * , sfixn);

void initRandomTriSet_deg( sfixn N, sfixn dgbound, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);
void randomPoly(preFFTRep * Ptr, sfixn p);

void randomSparsePoly(preFFTRep * Ptr, sfixn p);


void PolyCleanData(preFFTRep * prePtr);


void randomPoly_allOne(preFFTRep * Ptr, sfixn p);

void randomMonicPoly(preFFTRep * Ptr, sfixn p);

void randomMonicPoly_allOne(preFFTRep * Ptr, sfixn p);


void InitKroFFTRep(KroFFTRep * kPtr, sfixn * resDgs, sfixn N, sfixn M, MONTP_OPT2_AS_GENE * pPtr);

void InitResPoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs, sfixn * p2dgs);

void
InitOneRandomReducedInputPoly(sfixn * bounds, sfixn N, preFFTRep * p1Ptr, MONTP_OPT2_AS_GENE * pPtr);


void initRandomTriSet_dgs_allOne( sfixn N, sfixn * dgs, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);


void InitTwoRandomReducedInputPolys(sfixn * dgs, sfixn N, preFFTRep * p1Ptr, preFFTRep * p2Ptr, MONTP_OPT2_AS_GENE * pPtr);

void MultiD_KroneckerMul(sfixn N, KroFFTRep * kPtr, preFFTRep * rPtr, preFFTRep * p1Ptr, preFFTRep * p2Ptr, MONTP_OPT2_AS_GENE * pPtr);

void MultiD_KroneckerSquare(sfixn N, KroFFTRep * kPtr, preFFTRep * rPtr, preFFTRep * p1Ptr, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
EX_mul_Reduced(sfixn N, preFFTRep * out, preFFTRep * f1, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

sfixn
onePolyp(preFFTRep * polyPtr);

void fprintPoly(FILE *file, preFFTRep * Ptr);

void MultiMod(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

sfixn
MultiUniEuclidean(sfixn N, preFFTRep * gcd, preFFTRep * FPtr, preFFTRep * GPtr,
    TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void reduceCoeffs(sfixn N, preFFTRep * toPtr, preFFTRep * fromPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

int
comparePolyData(preFFTRep * p1, preFFTRep * p2);


void addPoly(sfixn N, preFFTRep * Ptr, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p);

void subPoly(sfixn N, preFFTRep * Ptr, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p);


preFFTRep *
addMulPoly_1(preFFTRep *f, preFFTRep *f1, preFFTRep *f2, sfixn N,
             TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
subMulPoly_1(preFFTRep *f, preFFTRep *f1, preFFTRep *f2, sfixn N,
             TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
powPoly_1(preFFTRep *f, sfixn e, sfixn N, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void initRandomDenseTriSetForLifting(sfixn N, sfixn * dgs, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);

void LiftTinTriSet( sfixn N, TriSet * tPtr, int i, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
scalarMulJMatrix_1(sfixn r, POLYMATRIX * mat, MONTP_OPT2_AS_GENE * pPtr);

void
MultiMod_BULL(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void * BlockBottom_UniDiv_1(void * Ptr);


void * Middle_UniDiv_BULL_PARA1 (void * pptr);

void
MultiMod_BULL_PARA1(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);


void * reduceCoeffs_Inner_BULL_Para1(void * Ptr);

void init_example_1_DenseTriSetForLifting_y0_10( sfixn N, sfixn * dgs, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
EX_mul_Reduced_1(sfixn N, preFFTRep * f1, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void EX_mulPoly_FFT(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE * pPtr);


sfixn *EX_getPartialDegVec(preFFTRep *Ptr);


void randomSparsePoly(preFFTRep * Ptr, sfixn p);

int EX_getPartialDegVec_inner(sfixn *coefVecSizAddr, sfixn N, sfixn *dgs, sfixn *accum, sfixn *data, sfixn *locAddr, sfixn *pdegVec);


sfixn *RemoveMinusTwo(sfixn *vec);

void RemoveLCMinusOneAndFillCoefs(sfixn base, sfixn *coefSizeFinalAddr, preFFTRep *Ptr, sfixn *coefVec, sfixn *locAddr, sfixn level, sfixn *vec);

void EX_mulPoly_TFT(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE * pPtr);


void EX_mulPoly_FFT_select(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr, int switcher);

void EX_mulPoly_TFTFFT(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE * pPtr);

void EX_mulPoly_TFTFFT_Bench(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE * pPtr, int fftNOTtft);

void initDenseTriSet( sfixn N, sfixn * dgs, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);


void
InitOneMonicPolys(sfixn * bounds, sfixn N, preFFTRep * p1Ptr, MONTP_OPT2_AS_GENE * pPtr, sfixn seed);

preFFTRep *EX_CopyOnePoly(preFFTRep * fPtr );

void EX_FreeOnePoly(preFFTRep * rPtr);

TriSet *EX_CopyOneTriSet(TriSet * srcts);

void EX_freeTriSet(TriSet * tPtr);

TriSet *
Ex_InitDenseTriSet( sfixn N, sfixn * dgs, MONTP_OPT2_AS_GENE * pPtr);


sfixn *bounds2dgs(TriSet *ts);

TriRevInvSet *EX_initTriRevInvSet(sfixn *dgs, sfixn N, TriSet * tPtr);

void EX_freeTriRevInvSet(TriRevInvSet * tRIPtr);

preFFTRep *EX_InitOnePoly(sfixn N, sfixn * dgs);

preFFTRep *EX_randomPoly(sfixn N, sfixn * dgs, sfixn p);

int
MonicizePoly_1(sfixn N, preFFTRep *inPoly, TriSet *ts,
             TriRevInvSet *tris, MONTP_OPT2_AS_GENE *pPtr);

TriSet *
EX_initRandomNonMonicTriSet(sfixn N, sfixn dgbound, MONTP_OPT2_AS_GENE * pPtr);

int
MonicizeTriSet_1(sfixn N, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);


sfixn
MultiRecip_Lift(sfixn N, preFFTRep * invPtr, preFFTRep * cPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void EX_mulPoly(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);

void
MultiMod_ForLifting(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr, sfixn size);

preFFTRep *
EX_mul_Reduced_ForLifting(sfixn N, preFFTRep * out, preFFTRep * f1, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
EX_ShiftPoly(preFFTRep * fPtr, int m);

preFFTRep *
direvativeMulti(preFFTRep * poly, MONTP_OPT2_AS_GENE * pPtr);

void NormalizeTriSetBDS(sfixn N, TriSet * ts);


preFFTRep *
MultiCoefPolyMul_1(sfixn N, preFFTRep * co, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

void
MultiMod_OPT(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr, int opt);


void
MultiMod_DF(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

TriSet *
EX_initRandomTriSet(sfixn N, sfixn dgbound, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep *
EX_MonicMultiPlainDivide(sfixn N, preFFTRep *FPtr, preFFTRep *GPtr, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);


preFFTRep *
EX_randomMonicPoly(sfixn N, sfixn * dgs, sfixn p);

preFFTRep *
Ex_ReduceCoeffs(sfixn N, preFFTRep *fromPtr, TriSet *ts, TriRevInvSet *tris, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep *
EX_ReduceCoeffs(sfixn N, preFFTRep *fromPtr, TriSet *ts, TriRevInvSet *tris, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep **EX_CopyOnePolyList(sfixn no, preFFTRep **PolyList );

preFFTRep *EX_getInitial(preFFTRep *poly);

preFFTRep *shrinkOneDim(preFFTRep *inPoly);

preFFTRep *EX_NormalizePoly(preFFTRep *inPoly);

preFFTRep *EX_NormalForm(sfixn N, preFFTRep *poly, TriSet *ts, TriRevInvSet *tris, MONTP_OPT2_AS_GENE *pPtr);

sfixn *EX_getDgsForNormalForm(preFFTRep *poly, TriSet *ts, sfixn e);

preFFTRep *EX_EY_ForNormalForm(preFFTRep *poly, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);




int
EX_IsEqualPoly(preFFTRep * Ptr1, preFFTRep * Ptr2);

preFFTRep *
EX_EY_Normalize(preFFTRep *poly, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);

sfixn realDegPoly(preFFTRep *poly, sfixn M);

preFFTRep *CreateZeroPoly();

preFFTRep *CreateConsPoly(sfixn cons);

preFFTRep *CreateUniPoly(sfixn dg, sfixn *vec);

TriSet * EX_ExchangeOnePoly(preFFTRep *poly, TriSet *ints, MONTP_OPT2_AS_GENE *pPtr);

TriSet * EX_MergeTriSet(sfixn start, sfixn index, preFFTRep *poly, TriSet *ts_top, TriSet *ts_under, MONTP_OPT2_AS_GENE *pPtr);

TriSet *EX_getLowerTriSet(sfixn M, TriSet * srcts);

TriRevInvSet *
EX_getRevInvTriSet(sfixn N, TriSet *ts, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep *
EX_InitResPoly(sfixn N, sfixn *p1dgs, sfixn *p2dgs);

preFFTRep *
EX_EX_mulPoly(sfixn N, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep *
EX_EX_PlainMulPoly(sfixn N, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);


preFFTRep *
EX_EX_TFTFFTMulPoly(sfixn N, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);

preFFTRep *EX_GetPolyTail(preFFTRep * inPoly);
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/HashTable.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/HashTable.h"
typedef struct node_struct NODE;
typedef struct hashtable_struct HASHTABLE;

struct node_struct {
  operand opnd;
  struct node_struct *next;
};



struct hashtable_struct
{
        NODE ** table;
 uint32 length;
};


NODE *list_create(operand opnd);

NODE *list_insert_after(NODE *node, operand opnd);

NODE *list_insert_beginning(NODE *list, operand opnd);

int32 list_remove(NODE *list, NODE *node);

int32 compareOperand(operand opnd1, operand opnd2);

NODE *list_find(NODE *node, operand opnd);

void list_free(NODE *list);

int32 hashFunction(operand opnd);




operand searchNodeinHashTable(operand opnd, HASHTABLE *hash_table);



HASHTABLE *newHashTable(uint32 length);


void freeHashTable(HASHTABLE *hash_table);


operand searchNodeinHashTable(operand opnd, HASHTABLE *hash_table);
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 2

# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Factorization.h" 1
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Factorization.h"
sfixn *
LcmPolyPair(sfixn *dgLcmAddr, sfixn d1, sfixn *f1, sfixn d2, sfixn *f2, MONTP_OPT2_AS_GENE * pPtr );

sfixn *
SquareFreeFact(sfixn *degR, sfixn degF, sfixn *FPtr, sfixn p);
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 16 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/UniHensel.h" 2


SLG *randomSLG(int32 GN, sfixn n, sfixn N);
void freeSLB(SLG * slg);
void printSLG(SLG * slg);
void printOperand( operand oper);
void printOperandG( operand oper);
void fprintOperandG( FILE *file, operand oper);

SLG *randomSLG(int32 GN, sfixn n, sfixn N);

SLG * getDerivOfG_OLD0(SLG *slg, operand oper2);

SLG * shrinkG(SLG *slg, int32 newGN);

SLG * removRedun(SLG * slg);

void printSLG_Line(SLG * slg);

void printSLG_Line_to(int32 n, SLG * slg);

void freeSLG(SLG *slg);

void freeSLG_nNodes(SLG *slg, int32 n);


SLG * newSLG(int32 GN);

preFFTRep * SLG2POLY( SLG * slg, TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);

preFFTRep * SLG2POLY_ROOT( operand root, SLG * slg, TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);


preFFTRep *
degDirevOfPoly(preFFTRep *poly, int32 VarNo, TriSet * ts, TriRevInvSet * tris,sfixn N, MONTP_OPT2_AS_GENE * pPtr);



void fprintSLG_Line(FILE *file, SLG *slg);




SLG * generateSLG_example_1_F1();

SLG * generateSLG_example_1_F2();

RFuncTriSet *UniNewtonLift(int32 *iterAddr, sfixn Y, POLYVECTOR_SLG * vec_slg, TriSet * ts,
                   sfixn N, MONTP_OPT2_AS_GENE * pPtr);

TriSet *EX_UniNewtonLift(int32 *iterAddr, sfixn Y, sfixn y0, POLYVECTOR_SLG * vec_slg, TriSet * ts,
                   sfixn N, MONTP_OPT2_AS_GENE * pPtr);


SLG *
createOneRowOfJMatrix_For_Lifting(operand *roots, int32 i, POLYMATRIX *mat,
                          POLYVECTOR_SLG *polyVec_SLG,
                          operand *vars, TriSet *ts, TriRevInvSet * tris,
      sfixn N, MONTP_OPT2_AS_GENE * pPtr);



SLG *
createWholeJMatrix_For_Lifting(operand *roots, int32 i, POLYMATRIX *mat,
                          POLYVECTOR_SLG *polyVec_SLG,
                          operand *vars, TriSet *ts, TriRevInvSet * tris,
      sfixn N, MONTP_OPT2_AS_GENE * pPtr);


SLG*
createWholeJMatrix_For_Lifting_Hashing(operand *roots,
                          int32 i, POLYMATRIX *mat,
                          POLYVECTOR_SLG *polyVec_SLG,
                          operand *vars, TriSet *ts, TriRevInvSet * tris,
           sfixn N, MONTP_OPT2_AS_GENE * pPtr);

void fprintSLG_Line_to(FILE *file, int32 n, SLG * slg);


RFuncTriSet * RFR_for_TriSet(TriSet *ts, sfixn d, MONTP_OPT2_AS_GENE * pPtr);



TriSet *
EvalRFTriSetAtZeroForSmallestVarAndMakeThefirstOneBeY(TriSet *tsnum, TriSet *tsden, MONTP_OPT2_AS_GENE *pPtr, sfixn pt);

TriSet *
EvalRFTriSetAtZeroForSmallestVarAndMakeThefirstOneBeYAndMonicize(TriSet *tsnum, TriSet *tsden, MONTP_OPT2_AS_GENE *pPtr, sfixn pt);


void freeRFT(RFuncTriSet *srft);


TriSet *
EvalTriSetAtZeroForSmallestVarAndMakeThefirstOneBeY(TriSet *ts, MONTP_OPT2_AS_GENE *pPtr, sfixn pt);

SLG * evalVar2pt(SLG *slg, int32 varno, sfixn val);

TriSet *
RemoveDenominators(RFuncTriSet * rfts, MONTP_OPT2_AS_GENE *pPtr);

void shiftPolynomial(sfixn degg, sfixn *g, sfixn degf, sfixn *f, sfixn c, MONTP_OPT2_AS_GENE * pPtr);


int32
isInputSystemConsistent(sfixn N, POLYVECTOR_SLG * vec_slg, TriSet *ts, MONTP_OPT2_AS_GENE * pPtr, sfixn y0);
# 8 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/matrix.h" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/matrix.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/matrix.h" 2



void multi_mat_transpose (sfixn N, sfixn n, sfixn dm, sfixn * dims, sfixn * data);

void mat_transpose (sfixn, sfixn, sfixn * );

POLYVECTOR_SLG *randomPolyVec_SLG(int32 M, int32 GN, sfixn p, int32 N);

void freeVec_SLG(POLYVECTOR_SLG *vec_slg);

void printJMatrix(POLYMATRIX * mat);

void freeJMatrix(POLYMATRIX * mat);

POLYMATRIX *createJMatrix(POLYVECTOR_SLG *polyVec_SLG, TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);


POLYMATRIX *initJMatrix(sfixn N, int32 m, int32 n, TriSet *ts);


POLYMATRIX *mulJMatrix(sfixn N, POLYMATRIX * mat1, POLYMATRIX * mat2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
randomJMatrix(POLYMATRIX * mat, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
INVJMatrix(sfixn N, POLYMATRIX * mat, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
createJMatrix_ForLifting(POLYVECTOR_SLG *polyVec_SLG, TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
SLG2PolyVecotr(POLYVECTOR_SLG *polyVec_SLG, TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);



POLYMATRIX *
createJMatrix_PolyForlifting(TriSet *ts, TriRevInvSet * tris, sfixn N, MONTP_OPT2_AS_GENE * pPtr);


POLYMATRIX *
scalarMulJMatrix_1(sfixn r, POLYMATRIX * mat, MONTP_OPT2_AS_GENE * pPtr);

POLYMATRIX *
subJMatrix_1(sfixn N, POLYMATRIX * mat1, POLYMATRIX * mat2, MONTP_OPT2_AS_GENE * pPtr) ;


TriSet *
AddHs2TriSet(sfixn N, TriSet *ts, POLYMATRIX *Hs, MONTP_OPT2_AS_GENE * pPtr);



POLYMATRIX *
increaseMatrix_ForLifting(sfixn N, POLYMATRIX *mat, TriSet *ts);


void *BlockDecompose(void * PTR);



POLYVECTOR_SLG * example_1_PolyVec_SLG();
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MultiDFFT.h" 2





void plainMultiDMul(sfixn N, sfixn * ccum, sfixn * res, sfixn * ccum1, sfixn * dgs1, sfixn * ccum2, sfixn * dgs2, sfixn * coeffs1, sfixn * coeffs2, MONTP_OPT2_AS_GENE * pPtr);


void fftMultiD_square_test(sfixn * coeffs1, sfixn N, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE * pPtr);

void fftMultiD_test(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE * pPtr);



void fromtofftRepMultiD(sfixn N, sfixn * rccum, sfixn * res, sfixn * ccum, sfixn * dgs, sfixn * coeffs);

void fftMultiD_test(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE * pPtr);

void tftMultiD_test(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE * pPtr);
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/MPMMTS.h" 1
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/FINTERP.h" 1
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/./modpn_hfiles/Factorization.h" 1
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 2
}
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../BivariatePoly.h" 2


class BivariatePolynomial
{
 private:
  sfixn * coefficients;
                int d;
                int K;
                int M;
                int size;

        public:

  inline int getK(){
   return K;
  }

  inline sfixn * getCoefficients(){
   return coefficients;
  }

  inline int getSize(){
   return size;
  }

  inline int setSize(int s){
   size = s;
   coefficients = new sfixn[size];
  }

  inline void setCoefficients(sfixn * coeff){
   coefficients = coeff;
  }

  BivariatePolynomial(int d, int K, int M);

  BivariatePolynomial(int d, int K, int M, int n);




                void freeHeap();




                void print();




                void setToZero();
# 84 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../BivariatePoly.h"
  void convertFromBigIntegerSigned(mpz_class coeff, int index);
# 94 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../BivariatePoly.h"
  mpz_class coefficientReconstruction(int index);






  int * adapt(int prime);

  void writeToFile(const char* name);
  void writeToFile(const char* name, int n);
};
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 2

# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/general_routine.h" 1





# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn.h" 1
# 7 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/general_routine.h" 2




# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/fft_iter1.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/fft_iter1.h"
namespace PBPAS1{
void Shuffle2(int n, sfixn* A,sfixn* B);
void Shuffle(int n, sfixn* A,sfixn* B);
sfixn testDFT(int n,int index,sfixn* A,sfixn *W);
void DFT_eff_p1(int n, int r,sfixn *A,sfixn *W,sfixn *B);

void InvDFTKeepMont_eff_p1(int n, int r, sfixn *A,sfixn *W, sfixn *B,sfixn invn);

void InvDFT_eff_p1(int n, int r, sfixn *A,sfixn *W, sfixn *B,sfixn invn);

}
# 12 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/general_routine.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/fft_iter2.h" 1
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/fft_iter2.h"
namespace PBPAS2{
void Shuffle2(int n, sfixn* A,sfixn* B);
void Shuffle(int n, sfixn* A,sfixn* B);
sfixn testDFT(int n,int index,sfixn* A,sfixn *W);
void DFT_eff_p2(int n, int r,sfixn *A,sfixn *W,sfixn *B);

void InvDFTKeepMont_eff_p2(int n, int r, sfixn *A,sfixn *W, sfixn *B,sfixn invn);

void InvDFT_eff_p2(int n, int r, sfixn *A,sfixn *W, sfixn *B,sfixn invn);

}
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/general_routine.h" 2



namespace PBPAS {

  void checkFrourierPrime(sfixn e, MONTP_OPT2_AS_GENE * pPtr);

  int forcutoff_Multi_TFT_FFT(sfixn N, sfixn *dgs1, sfixn *dgs2, int cutoff);



  void multi_mat_transpose(sfixn N, sfixn n, sfixn dm, sfixn * dims, sfixn * data);
  void decompose(sfixn N, sfixn dm, sfixn * accum, sfixn * dims, sfixn * tmpPtr, sfixn * data);


  sfixn getDenseSiz(sfixn N, preFFTRep *poly, sfixn buszsN, sfixn *data, sfixn cumN);

  void InitKroFFTRep(KroFFTRep * kPtr, sfixn * resDgs, sfixn N, sfixn M, MONTP_OPT2_AS_GENE * pPtr);

  void freeKroFFTRep(KroFFTRep * x);

  void InitKroTFTRep(KroTFTRep * kPtr, sfixn * resDgs, sfixn N, sfixn M, MONTP_OPT2_AS_GENE * pPtr);

  void InitKroTFTRep_multiplier_1(KroTFTRep * kPtr, sfixn * resDgs, sfixn N, sfixn M, MONTP_OPT2_AS_GENE * pPtr);

  void freeKroTFTRep(KroTFTRep * x);

  void InitResPoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs, sfixn * p2dgs);

  void copyVec_0_to_d(int d, sfixn * desV, sfixn * srcV);
  void copyVec_1_to_n(int n, sfixn * desV, sfixn * srcV);

  int compareVec(sfixn deg, sfixn * vec1, sfixn * vec2);

  int EX_IsEqualPoly(preFFTRep * Ptr1, preFFTRep * Ptr2);

  void fromtofftRepMultiD(sfixn N, sfixn * rccum, sfixn * res, sfixn * ccum, sfixn * dgs, sfixn * coeffs);

  sfixn * reverseUni(sfixn deg, sfixn * vec1, sfixn * vec2);

  void cleanVec(sfixn deg, sfixn * cof);

  void InitOneRevInv(sfixn N, preFFTRep * tRIPtr, sfixn * bounds, sfixn di);

  sfixn *reverseMulti(sfixn deg, sfixn sizOfCoef, sfixn * outVec, sfixn * inVec);

  void PolyCleanData(preFFTRep * prePtr);

  void decreaseKroFFTRep(KroFFTRep * kPtr, sfixn * resDgs);

  void KroneckerCleanData(KroFFTRep * kPtr);

  void fromtofftRep(sfixn N, sfixn * rccum, sfixn * res, sfixn * ccum, sfixn * dgs, sfixn * coeffs);

  void InitOneReducedPoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs);

  void initCopyOneRevInv(preFFTRep * outPtr, preFFTRep * inPtr);

  sfixn *reverseMulti_1(sfixn deg, sfixn sizOfCoef, sfixn * vec);

  void subPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p);

  void subPoly_inner_1 (sfixn N, sfixn * accum1, sfixn * dgs2, sfixn * accum2, sfixn * data1, sfixn * data2, sfixn p);

  void subEqDgPoly_inner_1(sfixn N, sfixn * dgs, sfixn * accum, sfixn * data1, sfixn * data2, sfixn p, int selector);

  void subEqDgPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p, int selector);

  void addEqDgPoly_inner(sfixn N, sfixn *dgs, sfixn *accum, sfixn *data1, sfixn *data2, sfixn p);

  void addEqDgPoly_1(sfixn N, preFFTRep * Ptr1, preFFTRep * Ptr2, sfixn p);

  void copyPolyPointers(preFFTRep *D, preFFTRep *S);

  preFFTRep *
 getCoefMulti(sfixn N, preFFTRep* co, preFFTRep* f, sfixn i);

  void initTriRevInvSet(sfixn *dgs, sfixn N, TriRevInvSet *tRevInvPtr, TriSet * tPtr);

  TriSet *
 EX_initRandomTriSet( sfixn N, sfixn dgbound, MONTP_OPT2_AS_GENE * pPtr);

  void initRandomTriSet( sfixn N, sfixn dgbound, TriSet * tPtr, MONTP_OPT2_AS_GENE * pPtr);

  void
 InitOneMonicRandomPolys(sfixn * bounds, sfixn N, preFFTRep * p1Ptr, MONTP_OPT2_AS_GENE * pPtr, sfixn seed);

  void randomMonicPoly(preFFTRep * Ptr, sfixn p);

  void randomMonicPoly_inner(sfixn N, sfixn N1, sfixn * dgs, sfixn * accum, sfixn * data, sfixn p);

  preFFTRep *
 EX_randomPoly(sfixn N, sfixn * dgs, sfixn p);

  preFFTRep *
 EX_InitOnePoly(sfixn N, sfixn * dgs);

  void InitOnePoly(preFFTRep * rPtr, sfixn N, sfixn * p1dgs);

  void randomPoly(preFFTRep * Ptr, sfixn p);

  void randomPoly_inner(sfixn N, sfixn * dgs, sfixn * accum, sfixn * data, sfixn p);

  void CopyOnePoly(preFFTRep * rPtr, preFFTRep * fPtr );

  sfixn noExtensionBalancedBivar(sfixn N, sfixn* ls);

  void ReductionToBalancedBivar(sfixn N, sfixn* ls, sfixn *factm);

  void prime_factorization(sfixn x, sfixn fact[]);

  sfixn V1to2V_pivot(sfixn d1, sfixn d2);
  sfixn multi_V1to2V_pivot(sfixn N, sfixn * degs1, sfixn *degs2);

  sfixn multi_V1to2V_pivot_opt(sfixn sigma, sfixn q1f, sfixn q1g);

  void InitKroTFTRep_1V2V(KroTFTRep * kPtr, sfixn b, sfixn d1, sfixn d2);

  void InitKroTFTRep_1V2V_multi(KroTFTRep *kPtr, sfixn b, sfixn sigma, sfixn q1f, sfixn q1g );

  void from1Vto2VTFTRep(sfixn b, sfixn d, sfixn * coeffs, sfixn rccum2, sfixn * data);
  void fromMulti_1Vto2VTFTRep_1(sfixn N, sfixn b, sfixn q1, sfixn *pdegs, sfixn *M1, sfixn num_boxes_B, sfixn num_blocks_B, sfixn *B);

  void fromMulti_1Vto2VTFTRep(sfixn n, sfixn b, sfixn q1f, sfixn q1g, sfixn *degs_M1, sfixn *M1, sfixn *degs_M2, sfixn *B);

  void from2VTFTRepto1V(sfixn b, sfixn s1, sfixn s2, sfixn * data, sfixn d, sfixn * coeffs, MONTP_OPT2_AS_GENE *pPtr);

  void from2VTFTRepto1V_2Traversal(sfixn b, sfixn s1, sfixn s2, sfixn * data, sfixn siz, sfixn * coeffs, MONTP_OPT2_AS_GENE *pPtr);

  void from2VTFTReptoMultiV(sfixn b, sfixn sigma, sfixn num_block_B, sfixn *B, sfixn box_size_M, sfixn *M, MONTP_OPT2_AS_GENE *pPtr);

  void nextPosition(sfixn * exp, sfixn *deg, sfixn n, sfixn * size);

  void multi_mat_transpose_2DTran_interp(sfixn N, sfixn n, sfixn dm, sfixn * dims, sfixn * data);

  void multi_mat_transpose_2DTran_eval(sfixn N, sfixn n, sfixn dm, sfixn * dims, sfixn * data);


  void EX_Mont_GetNthRoots_OPT2_AS_GENE(sfixn e, sfixn n, sfixn * rootsPtr,
                                        MONTP_OPT2_AS_GENE * pPtr);

  void Mont_GetNthRoots_OPT2_AS_GENE(sfixn e, sfixn n, sfixn * rootsPtr,
                                     MONTP_OPT2_AS_GENE * pPtr);

  void Mont_GetNthRoots_OPT2_AS_GENE_SPE(sfixn e, sfixn n, sfixn * rootsPtr,
                                         MONTP_OPT2_AS_GENE * pPtr);

  void EX_Mont_PairwiseMul_OPT2_AS(sfixn n, sfixn * APtr, sfixn * BPtr, sfixn p);

  void EX_Mont_PairwiseMul_OPT2_AS_R(sfixn n, sfixn * APtr, sfixn * BPtr,
                                     MONTP_OPT2_AS_GENE * pPtr);

  void Mont_PairwiseMul_OPT2_AS_R(sfixn n, sfixn * APtr, sfixn * BPtr,
                                  MONTP_OPT2_AS_GENE * pPtr);

  void Mont_PairwiseMul_OPT2_AS_SPE_R(sfixn n, sfixn * APtr, sfixn * BPtr,
                                      MONTP_OPT2_AS_GENE * pPtr);

  void transpose(sfixn *A, sfixn lda, sfixn *B, sfixn ldb,
                 sfixn i0, sfixn i1, sfixn j0, sfixn j1);

  void sqtranspose(sfixn *A, sfixn lda,
                   sfixn i0, sfixn i1,
                   sfixn j0, sfixn dj0, sfixn j1 );

  int ceil_log2_long(unsigned long long x);


  void DFT_eff(int n, int r,
               sfixn *A,
               sfixn *W,
               MONTP_OPT2_AS_GENE *pPtr,
               int H, int *RevBidMap,
               sfixn *B,sfixn num);

  void DFT_rec(int n, int r,
               sfixn *A,
               sfixn *W,
               MONTP_OPT2_AS_GENE *pPtr,
               int H, int *RevBidMap,
               sfixn *B);

  void DFT_iter(int n, int r,
                sfixn *A,
                sfixn *W,
                MONTP_OPT2_AS_GENE *pPtr,
                sfixn *B);

  void Shuffle(int n, sfixn *A, sfixn *B);

  void ArrayBitReversal(int n, sfixn *A,
                        int *RevBidMap);

  void RevBitIncr( int *n, int bit );

  void RevBitInd(int max, int *A);

  void RootsTable(int n, int r,
                  sfixn *T,
                  MONTP_OPT2_AS_GENE *pPtr);

  void InverseRootsTable(int n, sfixn *T, sfixn *Ti);
  void RootsTableSpe(int n, int r,
                  sfixn *T,MONTP_OPT2_AS_GENE *p,
                  int m);

  void RootsTable2(int n, int r,
                   sfixn *T, sfixn *Ti,
                   MONTP_OPT2_AS_GENE *pPtr);

  void Weight_RootsTable2(int n, int r, int K,
                          sfixn *Th, sfixn *T, sfixn *Ti,
                          MONTP_OPT2_AS_GENE *pPtr);

  void InvDFT_eff(int n, int r,
                  sfixn *A,
                  sfixn *W,
                  MONTP_OPT2_AS_GENE *pPtr,
                  int H, int *RevBidMap,
                  sfixn *B,sfixn invn,sfixn num);
  void InvDFT_eff_keepMontgomery(int n, int r,
                  sfixn *A,
                  sfixn *W,
                  MONTP_OPT2_AS_GENE *pPtr,
                  int H, int *RevBidMap,
                  sfixn *B,sfixn invn,sfixn num);

}
# 14 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h" 1






# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/modpn_export.h" 1







namespace MODPN {



  sfixn *
  Mont_dft_OPT2_AS_GENE ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr );



  sfixn *
  Mont_dft_OPT2_AS_GENE_SPE ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr );



  sfixn *
  Mont_invdft_OPT2_AS_GENE_SPE_R ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degRes, sfixn * ResPtr, MONTP_OPT2_AS_GENE * pPtr);



  sfixn *
  Mont_invdft_OPT2_AS_GENE_R ( sfixn n, sfixn power, sfixn * rootsPtr, sfixn * tmpVecPtr, sfixn degRes, sfixn * ResPtr, MONTP_OPT2_AS_GENE * pPtr);

  int checkDgsOfST(sfixn N, TriSet * ts);

}
# 8 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/general_routine.h" 1
# 9 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h" 2



# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/fft_iter1.h" 1
# 13 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h" 2



namespace PBPAS {







  void fftMultiD_test_1(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE *pPtr);

  sfixn * MultiEvalByFFT(sfixn * coeffs1, sfixn N, sfixn n, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE *pPtr, sfixn * rootsPtr);

  void InterpolByFFT(sfixn * coeffs1, sfixn N, sfixn n, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE *pPtr, sfixn * tmprootsPtr1);







  void tftMultiD_test_1(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE * pPtr);

  void EX_Mont_INVTDFT_OPT2_AS_GENE_1_par(sfixn * coeffs1j, sfixn maxdim, sfixn lsi, sfixn * tmprootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  sfixn * MultiEvalByTFT(sfixn * coeffs1, sfixn N, sfixn n, sfixn maxdim, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * tmprootsPtr);

  void EX_Mont_TDFT_OPT2_AS_GENE_1_par(sfixn lsi, sfixn * tmprootsPtr, sfixn maxdim, sfixn * coeffs1j, MONTP_OPT2_AS_GENE *pPtr);

  void InterpolByTFT(sfixn *coeffs1, sfixn N, sfixn n, sfixn maxdim, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * tmprootsPtr);


  void MultiplyByFFT(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_RBB(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_3D2(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_2D2(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);


  void MultiplyByKroneckerFFT(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void EX_KN_Mont_FFTMul_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn * rootsPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);


  void plainMultiDMul(sfixn N, sfixn * ccum, sfixn * res, sfixn * ccum1, sfixn * dgs1, sfixn * ccum2, sfixn * dgs2, sfixn * coeffs1, sfixn * coeffs2, MONTP_OPT2_AS_GENE * pPtr);

  void decomposePoly(sfixn N, sfixn * ccum, sfixn * res, sfixn N1, sfixn * dgs1, sfixn * coeffs1, sfixn * ccum1, sfixn N2, sfixn * dgs2, sfixn * coeffs2, sfixn * ccum2, MONTP_OPT2_AS_GENE * pPtr, sfixn R, sfixn SFT);

  void decomposePoly2(sfixn N, sfixn * ccum, sfixn * res, sfixn num, sfixn N2, sfixn * dgs2, sfixn * coeffs2, sfixn * ccum2, MONTP_OPT2_AS_GENE * pPtr);

  void UniFastMod_1(sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, sfixn Lbound, sfixn * BRevInvPtr, MONTP_OPT2_AS_GENE * pPtr);

  void UniPlainMod_1(sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

  void EX_Mont_FFTMul_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

  void EX_Mont_FFTMul_OPT2_AS_GENE(sfixn n, sfixn e, sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr);

  void getRevInvTiSet(sfixn *dgs, sfixn N, TriRevInvSet * tris, TriSet * ts, MONTP_OPT2_AS_GENE * pPtr);

  void NewtonRevInverse(sfixn N, preFFTRep * tRIPtrtmp, preFFTRep * tRIPtr, preFFTRep * tPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);


  sfixn * modularInvPM(sfixn degG,
     sfixn * GPtr, sfixn degF, sfixn * FPtr,
     sfixn r, sfixn n,
     MONTP_OPT2_AS_GENE * pPtr);

  void squarePoly_FFT(sfixn N, KroFFTRep * kPtr, preFFTRep * rPtr, preFFTRep *p1Ptr, MONTP_OPT2_AS_GENE * pPtr);

  void fftMultiD_square_test_1(sfixn * coeffs1, sfixn N, sfixn * es, sfixn * dims, MONTP_OPT2_AS_GENE * pPtr);

  void EX_KN_Mont_FFTSQUARE_OPT2_AS_GENE_1(sfixn n, sfixn e, sfixn degRes, sfixn * rootsPtr, sfixn degA, sfixn * APtr, MONTP_OPT2_AS_GENE * pPtr);

  void
 MultiMod(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void
 MultiMod_DF(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void MultiMod_1_par(sfixn N, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void MultiUniFastMod_1(sfixn N, preFFTRep * tmpIn, sfixn n, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void EX_mulPoly(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);

  void EX_mulPoly_TFTFFT(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE * pPtr);

  void EX_mulPoly_FFT(sfixn N, preFFTRep * resPtr, preFFTRep * f1, preFFTRep * f2, MONTP_OPT2_AS_GENE *pPtr);

  void mulPoly_FFT(sfixn N, KroFFTRep * kPtr, preFFTRep * rPtr, preFFTRep * p1Ptr, preFFTRep * p2Ptr, MONTP_OPT2_AS_GENE * pPtr);

  void polyMul_TFT(sfixn N, KroTFTRep * kPtr, preFFTRep * rPtr, preFFTRep * p1Ptr, preFFTRep * p2Ptr, MONTP_OPT2_AS_GENE * pPtr);

  void
 MultiMod_BULL(sfixn N, preFFTRep * outPtr, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void MultiMod_1_BULL_par(sfixn N, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void MultiUniFastMod_1_TFT(sfixn N, preFFTRep * tmpIn, sfixn n, preFFTRep * inPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  preFFTRep *
 MultiUniPlainMod_1(sfixn N, sfixn d1, preFFTRep * FPtr, sfixn d2, preFFTRep * GPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  sfixn
 fmecgEqDg_1(sfixn N, preFFTRep * f1, sfixn e, preFFTRep * co, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  preFFTRep *
 mul_Reduced(preFFTRep * resPtr, sfixn N, preFFTRep * out, preFFTRep * f1, preFFTRep * f2, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  void EX_Mont_PlainMul_OPT2_AS_GENE(sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

  void
 Mont_PlainMul_OPT2_AS_GENE(sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

  void
 Mont_PlainMul_OPT2_AS_GENE_SPE(sfixn degRes, sfixn * resPtr, sfixn degA, sfixn * APtr, sfixn degB, sfixn * BPtr, MONTP_OPT2_AS_GENE * pPtr );

  void reduceCoeffs(sfixn N, preFFTRep * toPtr, preFFTRep * fromPtr, TriSet * ts, TriRevInvSet * tris, MONTP_OPT2_AS_GENE * pPtr);

  TriRevInvSet *
 EX_getRevInvTriSet(sfixn N, TriSet * ts, MONTP_OPT2_AS_GENE * pPtr);

  void MultiplyByTFT_1V2V(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_RBBnoE(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByKronecker1DTFT(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_RBB_KN1D_to_2D(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_1Vto2V_multiV_2V(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void tft2D_no_transp(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE * pPtr);

  void InterpolBy2DTFT_no_transp(sfixn *coeffs1, sfixn n, sfixn maxdim, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * rootsPtr);

  void inv_TDFT_dim2_no_transp(sfixn d, sfixn ls2, sfixn * tmprootsPtr, sfixn maxdim, sfixn * coeffs1, MONTP_OPT2_AS_GENE *pPtr);

  void MultiEvalBy2DTFT_no_transp(sfixn * coeffs1, sfixn n, sfixn maxdim, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * rootsPtr);

  void TDFT_dim2_no_transp(sfixn d, sfixn ls2, sfixn * tmprootsPtr, sfixn maxdim, sfixn * coeffs1, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyBy2DTFT_no_transp(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void bivarMultiplyBy2DTFT(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void bivarEvalBy2DTFT(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn * coeffs, sfixn pd1, sfixn pd2, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void bivarInterpolBy2DTFT(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void V1to2VEvalBy2DTFT(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn * coeffs, sfixn d, sfixn b, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void bivarMultiplyBy2DTFT_spawn(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void bivarMultiplyBy2DTFT_for_spawn(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void bivarInterpolBy2DTFT_spawn(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void bivarInterpolBy2DTFT_for_spawn(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void copyDataOutInvTFT(sfixn * data, sfixn dims, size_t size, sfixn ls, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void bivarEvalBy2DTFT_spawn(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn * coeffs, sfixn * pdegs, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void bivarEvalBy2DTFT_for_spawn(sfixn * resCoeffs, sfixn dims1, sfixn dims2, sfixn ls1, sfixn ls2, sfixn * coeffs, sfixn * pdegs, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void copyDataOutTFT(sfixn * indata, sfixn * outdata, sfixn dims, size_t insize, size_t outsize, sfixn ls, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void InterpolByTFT_2DTran(sfixn *coeffs1, sfixn N, sfixn n, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * tmprootsPtr);

  sfixn * MultiEvalByTFT_2DTran(sfixn * coeffs1, sfixn N, sfixn n, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE *pPtr, sfixn * rootsPtr);

  void tftMultiD_test_1_2DTran(sfixn * coeffs1, sfixn * coeffs2, sfixn N, sfixn * es, sfixn * dims, sfixn * ls, MONTP_OPT2_AS_GENE * pPtr);

  void MultiplyByTFT_2DTran(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_2DTran_noKroRep(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  sfixn * MultiEvalByTFT_2DTran_saveOn1stVar(sfixn * resCoeffs, sfixn N, sfixn n, sfixn *dims, sfixn * ls, sfixn * rccum, sfixn * coeffs, sfixn n1, sfixn * pdegs, sfixn * ccum, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void eval1stVar(sfixn N, sfixn * rccum, sfixn * res, sfixn * ccum, sfixn * dgs, sfixn * coeffs, sfixn dim1, sfixn ls1, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void MultiplyByTFT_RBBnoE_saveOnDim1(sfixn N, preFFTRep *rep12, preFFTRep * rep1, preFFTRep * rep2, MONTP_OPT2_AS_GENE *pPtr);

  void MultiEvalByTFT_RBBnoE_saveOnDim1(sfixn N, sfixn t, sfixn *resCoeffs, sfixn *rccum, sfixn ls1, sfixn ls2, sfixn dim1, sfixn dim2, sfixn *coeffs, sfixn *dgs, sfixn *ccum, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void evalDim1(sfixn N, sfixn t, sfixn *resCoeffs, sfixn *rccum, sfixn ls1, sfixn dim1, sfixn *coeffs, sfixn *dgs, sfixn *ccum, sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  sfixn * IntPolyMulMod_2DTFT(sfixn * f1, sfixn * f2, sfixn d1, sfixn d2, sfixn k, sfixn p);

  void WeightVectorEval(sfixn *thetaPtr, sfixn *A, sfixn *AP, sfixn *res,
   sfixn K, sfixn d, sfixn dims2, sfixn ls2,
   sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);
# 228 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h"
    sfixn *TwoConvolutionModNew(sfixn *Ap, sfixn *Bp,
                           sfixn d1, sfixn d2, sfixn K,
                           MONTP_OPT2_AS_GENE *pPtr,
                           int H, int *RevBidMap,sfixn num);

  void CyclicConvolution(sfixn *res, sfixn s,
                         sfixn es1, sfixn es2,
                         sfixn K, sfixn dims2,
                         sfixn *A, sfixn *B, sfixn dA, sfixn dB,
                         sfixn *KRT, sfixn *dRT,
                         sfixn *invKRT, sfixn *invdRT,
                         MONTP_OPT2_AS_GENE *pPtr,
                         int H, int *RevBidMap,sfixn invn,sfixn invn1,sfixn num);

  void AdaptiveEvaluation(sfixn *res, sfixn es1, sfixn es2,
                          sfixn K, sfixn dims2,
                          sfixn *A, sfixn dA,
                          sfixn *KRT, sfixn *dRT,
                          MONTP_OPT2_AS_GENE *pPtr,
                          int H, int *RevBidMap,sfixn num);

  void AdaptiveInterpolation(sfixn *res, sfixn K, sfixn es1,
                             sfixn es2, sfixn dims2,
                             sfixn *invKRT, sfixn *invdRT,
                             MONTP_OPT2_AS_GENE *pPtr,
                             int H, int *RevBidMap,sfixn invn,sfixn invn1,sfixn num);

  void NegacyclicConvolution(sfixn *res, sfixn s,
                             sfixn es1, sfixn es2,
                             sfixn K, sfixn dims2,
                             sfixn *A, sfixn *B,
                             sfixn dA, sfixn dB, sfixn K2,
                             sfixn *thetaPtr,
                             sfixn *KRT, sfixn *dRT,
                             sfixn *invKRT, sfixn *invdRT,
                             MONTP_OPT2_AS_GENE *pPtr,
                             int H, int *RevBidMap,sfixn invn,sfixn invn1,sfixn num);

  void WeightVectorAdaptiveEvaluation(sfixn *res, sfixn es1,
                                      sfixn es2, sfixn K,
                                      sfixn dims2,
                                      sfixn *A, sfixn dA,
                                      sfixn *thetaPtr,
                                      sfixn *KRT, sfixn *dRT,
                                      MONTP_OPT2_AS_GENE *pPtr,
                                      int H, int *RevBidMap,sfixn num);

  void AdaptiveInterpolationWeightVector(sfixn *res, sfixn K,
                                         sfixn es1, sfixn es2,
                                         sfixn dims2,
                                         sfixn *thetaPtr,
                                         sfixn *invKRT,
                                         sfixn *invdRT,
                                         MONTP_OPT2_AS_GENE *pPtr,
                                         int H, int *RevBidMap,sfixn invn,sfixn invn1,sfixn num);



  sfixn * TwoConvolutionMod(sfixn *Ap, sfixn *Bp,
                            sfixn d1, sfixn d2,
                            sfixn p, sfixn K);

  void AdaptiveEvaluation1(sfixn *res, sfixn es1, sfixn es2,
                          sfixn K, sfixn dims2, sfixn ls2,
                          sfixn *A, sfixn dA,
                          sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void AdaptiveInterpolation1(sfixn *res, sfixn K, sfixn es1,
                             sfixn es2, sfixn dims2, sfixn ls2,
                             sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void CyclicConvolution1(sfixn *res, sfixn s,
                         sfixn es1, sfixn es2, sfixn K, sfixn dims2, sfixn ls2,
                         sfixn *A, sfixn *B, sfixn dA, sfixn dB,
                         sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void NegacyclicConvolution1(sfixn *res, sfixn s,
                             sfixn es1, sfixn es2,
                             sfixn K, sfixn dims2, sfixn ls2,
                             sfixn *A, sfixn *B, sfixn dA, sfixn dB, sfixn K2,
                             sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void WeightVectorAdaptiveEvaluation1(sfixn *res, sfixn es1, sfixn es2,
                                      sfixn K, sfixn K2,
                                      sfixn dims2, sfixn ls2,
                                      sfixn *A, sfixn dA,
                                      sfixn *rootsPtr, MONTP_OPT2_AS_GENE *pPtr);

  void AdaptiveInterpolationWeightVector1(sfixn *res, sfixn K, sfixn es1,
                                         sfixn es2, sfixn dims2, sfixn ls2,
                                         sfixn *rootsPtr,
                                         MONTP_OPT2_AS_GENE *pPtr);
# 331 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h"
    bool DMPMul(sfixn p, int N,
                sfixn *C, int *dc,
                sfixn *A, int *da,
                sfixn *B, int *db,
                int wp);
# 346 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h"
    void BivarMul(sfixn *C, int *dc,
                  sfixn *A, int *da,
                  sfixn *B, int *db,
                  MONTP_OPT2_AS_GENE *pPtr,
                  int wp);






    void Evaluation2D(sfixn *res, int es1, int es2,
                      int dims1, int dims2,
                      int ls1, int ls2,
                      sfixn *A, int s1, int s2,
                      sfixn *RT1, sfixn *RT2,
                      MONTP_OPT2_AS_GENE *pPtr,
                      int H, int *RevBidMap, int wp);

    void Interpolation2D(sfixn *res, int es1, int es2,
                         int dims1, int dims2,
                         int ls1, int ls2,
                         sfixn *invRT1, sfixn *invRT2,
                         MONTP_OPT2_AS_GENE *pPtr,
                         int H, int *RevBidMap, int wp);
# 383 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../FFT/src/basic_routine.h"
 bool ks_mul (int l, int s, sfixn* f, sfixn* g, sfixn p, int basesize);
}
# 15 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 2



# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../../include/FFT/src/fft_iter1.h" 1
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../../include/FFT/src/modpn.h" 1
# 2 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/../../../include/FFT/src/fft_iter1.h" 2
# 19 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h" 2



class MulSSA: public Mul{
 public:
  int size;
  int* goodN;
  int* goodM;
  int* goodK;

  MONTP_OPT2_AS_GENE *MontP1;
  MONTP_OPT2_AS_GENE *MontP2;
  MONTP_OPT2_AS_GENE *MontP;

  int* RevBidMap;

  static const int DFTBASESIZE = 1024;

  static const sfixn P = 4179340454199820289;

  static const sfixn HALF_P = P>>1;

  static const sfixn P1 = 4179340454199820289;
  static const sfixn P2 = 2485986994308513793;
  static const sfixn U1 = -740506764262110493;
  static const sfixn U2 = 1244909922527606046;
  static const sfixn U2_R1_sft = 1422754197174406896;






  __int128 P1_P2, HALF_P1_P2, N_HALF_P1_P2;

  int N;
  int K;
  int M;
  unsigned long LIMB_BITS;

  MulSSA() {
 P1_P2 = (__int128) P1 * P2;
 HALF_P1_P2 = P1_P2 >> 1;
 N_HALF_P1_P2 = -HALF_P1_P2;


 init2();
  }

  ~MulSSA() {
 delete [] goodN;
 delete [] goodM;
 delete [] goodK;






  }







  virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){




  UnivariateIntegerPolynomial c((a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1), a->getCoefficientDigits() + b->getCoefficientDigits() + ((a->getSize() == 0 || b->getSize() == 0) ? 0 : log2((a->getSize() < b->getSize()) ? a->getSize() : b->getSize())));



    mul2C(a, b, &c);

    return c;
  };
# 107 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h"
  virtual void multiply(UnivariateIntegerPolynomial* a, UnivariateIntegerPolynomial* b, UnivariateIntegerPolynomial* c){
 mul2C(a, b, c);
  };

 private:


  void inline init2()
  {


    MontP1 = (MONTP_OPT2_AS_GENE *)my_malloc(sizeof(MONTP_OPT2_AS_GENE));
    MontP2 = (MONTP_OPT2_AS_GENE *)my_malloc(sizeof(MONTP_OPT2_AS_GENE));
    MontP = (MONTP_OPT2_AS_GENE *)my_malloc(sizeof(MONTP_OPT2_AS_GENE));

    EX_MontP_Init_OPT2_AS_GENE(MontP1, P1);
    EX_MontP_Init_OPT2_AS_GENE(MontP2, P2);
    EX_MontP_Init_OPT2_AS_GENE(MontP, P);
# 134 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h"
    RevBidMap = new int[DFTBASESIZE];
    for(int i=0; i<DFTBASESIZE; ++i)
      RevBidMap[i] = i;
    PBPAS::RevBitInd(DFTBASESIZE, RevBidMap);



 size = 432;
 goodN = new int[size];
 goodM = new int[size];
 goodK = new int[size];

 goodN[0] = 2; goodK[0] = 1; goodM[0] = 1;
 goodN[1] = 4; goodK[1] = 1; goodM[1] = 2;
 goodN[2] = 6; goodK[2] = 1; goodM[2] = 3;
 goodN[3] = 8; goodK[3] = 1; goodM[3] = 4;
 goodN[4] = 10; goodK[4] = 1; goodM[4] = 5;
 goodN[5] = 12; goodK[5] = 1; goodM[5] = 6;
 goodN[6] = 14; goodK[6] = 1; goodM[6] = 7;
 goodN[7] = 16; goodK[7] = 1; goodM[7] = 8;
 goodN[8] = 18; goodK[8] = 1; goodM[8] = 9;
 goodN[9] = 20; goodK[9] = 1; goodM[9] = 10;
 goodN[10] = 22; goodK[10] = 1; goodM[10] = 11;
 goodN[11] = 24; goodK[11] = 1; goodM[11] = 12;
 goodN[12] = 26; goodK[12] = 1; goodM[12] = 13;
 goodN[13] = 28; goodK[13] = 1; goodM[13] = 14;
 goodN[14] = 30; goodK[14] = 1; goodM[14] = 15;
 goodN[15] = 32; goodK[15] = 1; goodM[15] = 16;
 goodN[16] = 34; goodK[16] = 1; goodM[16] = 17;
 goodN[17] = 36; goodK[17] = 1; goodM[17] = 18;
 goodN[18] = 38; goodK[18] = 1; goodM[18] = 19;
 goodN[19] = 40; goodK[19] = 1; goodM[19] = 20;
 goodN[20] = 42; goodK[20] = 1; goodM[20] = 21;
 goodN[21] = 44; goodK[21] = 1; goodM[21] = 22;
 goodN[22] = 46; goodK[22] = 1; goodM[22] = 23;
 goodN[23] = 48; goodK[23] = 1; goodM[23] = 24;
 goodN[24] = 50; goodK[24] = 1; goodM[24] = 25;
 goodN[25] = 52; goodK[25] = 1; goodM[25] = 26;
 goodN[26] = 54; goodK[26] = 1; goodM[26] = 27;
 goodN[27] = 56; goodK[27] = 1; goodM[27] = 28;
 goodN[28] = 58; goodK[28] = 1; goodM[28] = 29;
 goodN[29] = 60; goodK[29] = 1; goodM[29] = 30;
 goodN[30] = 62; goodK[30] = 1; goodM[30] = 31;
 goodN[31] = 64; goodK[31] = 1; goodM[31] = 32;
 goodN[32] = 66; goodK[32] = 1; goodM[32] = 33;
 goodN[33] = 68; goodK[33] = 1; goodM[33] = 34;
 goodN[34] = 70; goodK[34] = 1; goodM[34] = 35;
 goodN[35] = 72; goodK[35] = 1; goodM[35] = 36;
 goodN[36] = 74; goodK[36] = 1; goodM[36] = 37;
 goodN[37] = 76; goodK[37] = 1; goodM[37] = 38;
 goodN[38] = 78; goodK[38] = 1; goodM[38] = 39;
 goodN[39] = 80; goodK[39] = 1; goodM[39] = 40;
 goodN[40] = 82; goodK[40] = 1; goodM[40] = 41;
 goodN[41] = 84; goodK[41] = 1; goodM[41] = 42;
 goodN[42] = 86; goodK[42] = 1; goodM[42] = 43;
 goodN[43] = 88; goodK[43] = 1; goodM[43] = 44;
 goodN[44] = 90; goodK[44] = 1; goodM[44] = 45;
 goodN[45] = 92; goodK[45] = 1; goodM[45] = 46;
 goodN[46] = 94; goodK[46] = 1; goodM[46] = 47;
 goodN[47] = 96; goodK[47] = 1; goodM[47] = 48;
 goodN[48] = 98; goodK[48] = 1; goodM[48] = 49;
 goodN[49] = 100; goodK[49] = 1; goodM[49] = 50;
 goodN[50] = 102; goodK[50] = 1; goodM[50] = 51;
 goodN[51] = 104; goodK[51] = 1; goodM[51] = 52;
 goodN[52] = 106; goodK[52] = 1; goodM[52] = 53;
 goodN[53] = 108; goodK[53] = 1; goodM[53] = 54;
 goodN[54] = 110; goodK[54] = 1; goodM[54] = 55;
 goodN[55] = 112; goodK[55] = 1; goodM[55] = 56;
 goodN[56] = 114; goodK[56] = 1; goodM[56] = 57;
 goodN[57] = 116; goodK[57] = 2; goodM[57] = 29;
 goodN[58] = 120; goodK[58] = 2; goodM[58] = 30;
 goodN[59] = 124; goodK[59] = 2; goodM[59] = 31;
 goodN[60] = 128; goodK[60] = 2; goodM[60] = 32;
 goodN[61] = 132; goodK[61] = 2; goodM[61] = 33;
 goodN[62] = 136; goodK[62] = 2; goodM[62] = 34;
 goodN[63] = 140; goodK[63] = 2; goodM[63] = 35;
 goodN[64] = 144; goodK[64] = 2; goodM[64] = 36;
 goodN[65] = 148; goodK[65] = 2; goodM[65] = 37;
 goodN[66] = 152; goodK[66] = 2; goodM[66] = 38;
 goodN[67] = 156; goodK[67] = 2; goodM[67] = 39;
 goodN[68] = 160; goodK[68] = 2; goodM[68] = 40;
 goodN[69] = 164; goodK[69] = 2; goodM[69] = 41;
 goodN[70] = 168; goodK[70] = 2; goodM[70] = 42;
 goodN[71] = 172; goodK[71] = 2; goodM[71] = 43;
 goodN[72] = 176; goodK[72] = 2; goodM[72] = 44;
 goodN[73] = 180; goodK[73] = 2; goodM[73] = 45;
 goodN[74] = 184; goodK[74] = 2; goodM[74] = 46;
 goodN[75] = 188; goodK[75] = 2; goodM[75] = 47;
 goodN[76] = 192; goodK[76] = 2; goodM[76] = 48;
 goodN[77] = 196; goodK[77] = 2; goodM[77] = 49;
 goodN[78] = 200; goodK[78] = 2; goodM[78] = 50;
 goodN[79] = 204; goodK[79] = 2; goodM[79] = 51;
 goodN[80] = 208; goodK[80] = 2; goodM[80] = 52;
 goodN[81] = 212; goodK[81] = 2; goodM[81] = 53;
 goodN[82] = 216; goodK[82] = 2; goodM[82] = 54;
 goodN[83] = 220; goodK[83] = 2; goodM[83] = 55;
 goodN[84] = 224; goodK[84] = 2; goodM[84] = 56;
 goodN[85] = 232; goodK[85] = 3; goodM[85] = 29;
 goodN[86] = 240; goodK[86] = 3; goodM[86] = 30;
 goodN[87] = 248; goodK[87] = 3; goodM[87] = 31;
 goodN[88] = 256; goodK[88] = 3; goodM[88] = 32;
 goodN[89] = 264; goodK[89] = 3; goodM[89] = 33;
 goodN[90] = 272; goodK[90] = 3; goodM[90] = 34;
 goodN[91] = 280; goodK[91] = 3; goodM[91] = 35;
 goodN[92] = 288; goodK[92] = 3; goodM[92] = 36;
 goodN[93] = 296; goodK[93] = 3; goodM[93] = 37;
 goodN[94] = 304; goodK[94] = 3; goodM[94] = 38;
 goodN[95] = 312; goodK[95] = 3; goodM[95] = 39;
 goodN[96] = 320; goodK[96] = 3; goodM[96] = 40;
 goodN[97] = 328; goodK[97] = 3; goodM[97] = 41;
 goodN[98] = 336; goodK[98] = 3; goodM[98] = 42;
 goodN[99] = 344; goodK[99] = 3; goodM[99] = 43;
 goodN[100] = 352; goodK[100] = 3; goodM[100] = 44;
 goodN[101] = 360; goodK[101] = 3; goodM[101] = 45;
 goodN[102] = 368; goodK[102] = 3; goodM[102] = 46;
 goodN[103] = 376; goodK[103] = 3; goodM[103] = 47;
 goodN[104] = 384; goodK[104] = 3; goodM[104] = 48;
 goodN[105] = 392; goodK[105] = 3; goodM[105] = 49;
 goodN[106] = 400; goodK[106] = 3; goodM[106] = 50;
 goodN[107] = 408; goodK[107] = 3; goodM[107] = 51;
 goodN[108] = 416; goodK[108] = 3; goodM[108] = 52;
 goodN[109] = 424; goodK[109] = 3; goodM[109] = 53;
 goodN[110] = 432; goodK[110] = 3; goodM[110] = 54;
 goodN[111] = 440; goodK[111] = 3; goodM[111] = 55;
 goodN[112] = 448; goodK[112] = 4; goodM[112] = 28;
 goodN[113] = 464; goodK[113] = 4; goodM[113] = 29;
 goodN[114] = 480; goodK[114] = 4; goodM[114] = 30;
 goodN[115] = 496; goodK[115] = 4; goodM[115] = 31;
 goodN[116] = 512; goodK[116] = 4; goodM[116] = 32;
 goodN[117] = 528; goodK[117] = 4; goodM[117] = 33;
 goodN[118] = 544; goodK[118] = 4; goodM[118] = 34;
 goodN[119] = 560; goodK[119] = 4; goodM[119] = 35;
 goodN[120] = 576; goodK[120] = 4; goodM[120] = 36;
 goodN[121] = 592; goodK[121] = 4; goodM[121] = 37;
 goodN[122] = 608; goodK[122] = 4; goodM[122] = 38;
 goodN[123] = 624; goodK[123] = 4; goodM[123] = 39;
 goodN[124] = 640; goodK[124] = 4; goodM[124] = 40;
 goodN[125] = 656; goodK[125] = 4; goodM[125] = 41;
 goodN[126] = 672; goodK[126] = 4; goodM[126] = 42;
 goodN[127] = 688; goodK[127] = 4; goodM[127] = 43;
 goodN[128] = 704; goodK[128] = 4; goodM[128] = 44;
 goodN[129] = 720; goodK[129] = 4; goodM[129] = 45;
 goodN[130] = 736; goodK[130] = 4; goodM[130] = 46;
 goodN[131] = 752; goodK[131] = 4; goodM[131] = 47;
 goodN[132] = 768; goodK[132] = 4; goodM[132] = 48;
 goodN[133] = 784; goodK[133] = 4; goodM[133] = 49;
 goodN[134] = 800; goodK[134] = 4; goodM[134] = 50;
 goodN[135] = 816; goodK[135] = 4; goodM[135] = 51;
 goodN[136] = 832; goodK[136] = 4; goodM[136] = 52;
 goodN[137] = 848; goodK[137] = 4; goodM[137] = 53;
 goodN[138] = 864; goodK[138] = 4; goodM[138] = 54;
 goodN[139] = 896; goodK[139] = 5; goodM[139] = 28;
 goodN[140] = 928; goodK[140] = 5; goodM[140] = 29;
 goodN[141] = 960; goodK[141] = 5; goodM[141] = 30;
 goodN[142] = 992; goodK[142] = 5; goodM[142] = 31;
 goodN[143] = 1024; goodK[143] = 5; goodM[143] = 32;
 goodN[144] = 1056; goodK[144] = 5; goodM[144] = 33;
 goodN[145] = 1088; goodK[145] = 5; goodM[145] = 34;
 goodN[146] = 1120; goodK[146] = 5; goodM[146] = 35;
 goodN[147] = 1152; goodK[147] = 5; goodM[147] = 36;
 goodN[148] = 1184; goodK[148] = 5; goodM[148] = 37;
 goodN[149] = 1216; goodK[149] = 5; goodM[149] = 38;
 goodN[150] = 1248; goodK[150] = 5; goodM[150] = 39;
 goodN[151] = 1280; goodK[151] = 5; goodM[151] = 40;
 goodN[152] = 1312; goodK[152] = 5; goodM[152] = 41;
 goodN[153] = 1344; goodK[153] = 5; goodM[153] = 42;
 goodN[154] = 1376; goodK[154] = 5; goodM[154] = 43;
 goodN[155] = 1408; goodK[155] = 5; goodM[155] = 44;
 goodN[156] = 1440; goodK[156] = 5; goodM[156] = 45;
 goodN[157] = 1472; goodK[157] = 5; goodM[157] = 46;
 goodN[158] = 1504; goodK[158] = 5; goodM[158] = 47;
 goodN[159] = 1536; goodK[159] = 5; goodM[159] = 48;
 goodN[160] = 1568; goodK[160] = 5; goodM[160] = 49;
 goodN[161] = 1600; goodK[161] = 5; goodM[161] = 50;
 goodN[162] = 1632; goodK[162] = 5; goodM[162] = 51;
 goodN[163] = 1664; goodK[163] = 5; goodM[163] = 52;
 goodN[164] = 1696; goodK[164] = 5; goodM[164] = 53;
 goodN[165] = 1728; goodK[165] = 6; goodM[165] = 27;
 goodN[166] = 1792; goodK[166] = 6; goodM[166] = 28;
 goodN[167] = 1856; goodK[167] = 6; goodM[167] = 29;
 goodN[168] = 1920; goodK[168] = 6; goodM[168] = 30;
 goodN[169] = 1984; goodK[169] = 6; goodM[169] = 31;
 goodN[170] = 2048; goodK[170] = 6; goodM[170] = 32;
 goodN[171] = 2112; goodK[171] = 6; goodM[171] = 33;
 goodN[172] = 2176; goodK[172] = 6; goodM[172] = 34;
 goodN[173] = 2240; goodK[173] = 6; goodM[173] = 35;
 goodN[174] = 2304; goodK[174] = 6; goodM[174] = 36;
 goodN[175] = 2368; goodK[175] = 6; goodM[175] = 37;
 goodN[176] = 2432; goodK[176] = 6; goodM[176] = 38;
 goodN[177] = 2496; goodK[177] = 6; goodM[177] = 39;
 goodN[178] = 2560; goodK[178] = 6; goodM[178] = 40;
 goodN[179] = 2624; goodK[179] = 6; goodM[179] = 41;
 goodN[180] = 2688; goodK[180] = 6; goodM[180] = 42;
 goodN[181] = 2752; goodK[181] = 6; goodM[181] = 43;
 goodN[182] = 2816; goodK[182] = 6; goodM[182] = 44;
 goodN[183] = 2880; goodK[183] = 6; goodM[183] = 45;
 goodN[184] = 2944; goodK[184] = 6; goodM[184] = 46;
 goodN[185] = 3008; goodK[185] = 6; goodM[185] = 47;
 goodN[186] = 3072; goodK[186] = 6; goodM[186] = 48;
 goodN[187] = 3136; goodK[187] = 6; goodM[187] = 49;
 goodN[188] = 3200; goodK[188] = 6; goodM[188] = 50;
 goodN[189] = 3264; goodK[189] = 6; goodM[189] = 51;
 goodN[190] = 3328; goodK[190] = 6; goodM[190] = 52;
 goodN[191] = 3456; goodK[191] = 7; goodM[191] = 27;
 goodN[192] = 3584; goodK[192] = 7; goodM[192] = 28;
 goodN[193] = 3712; goodK[193] = 7; goodM[193] = 29;
 goodN[194] = 3840; goodK[194] = 7; goodM[194] = 30;
 goodN[195] = 3968; goodK[195] = 7; goodM[195] = 31;
 goodN[196] = 4096; goodK[196] = 7; goodM[196] = 32;
 goodN[197] = 4224; goodK[197] = 7; goodM[197] = 33;
 goodN[198] = 4352; goodK[198] = 7; goodM[198] = 34;
 goodN[199] = 4480; goodK[199] = 7; goodM[199] = 35;
 goodN[200] = 4608; goodK[200] = 7; goodM[200] = 36;
 goodN[201] = 4736; goodK[201] = 7; goodM[201] = 37;
 goodN[202] = 4864; goodK[202] = 7; goodM[202] = 38;
 goodN[203] = 4992; goodK[203] = 7; goodM[203] = 39;
 goodN[204] = 5120; goodK[204] = 7; goodM[204] = 40;
 goodN[205] = 5248; goodK[205] = 7; goodM[205] = 41;
 goodN[206] = 5376; goodK[206] = 7; goodM[206] = 42;
 goodN[207] = 5504; goodK[207] = 7; goodM[207] = 43;
 goodN[208] = 5632; goodK[208] = 7; goodM[208] = 44;
 goodN[209] = 5760; goodK[209] = 7; goodM[209] = 45;
 goodN[210] = 5888; goodK[210] = 7; goodM[210] = 46;
 goodN[211] = 6016; goodK[211] = 7; goodM[211] = 47;
 goodN[212] = 6144; goodK[212] = 7; goodM[212] = 48;
 goodN[213] = 6272; goodK[213] = 7; goodM[213] = 49;
 goodN[214] = 6400; goodK[214] = 7; goodM[214] = 50;
 goodN[215] = 6528; goodK[215] = 7; goodM[215] = 51;
 goodN[216] = 6656; goodK[216] = 8; goodM[216] = 26;
 goodN[217] = 6912; goodK[217] = 8; goodM[217] = 27;
 goodN[218] = 7168; goodK[218] = 8; goodM[218] = 28;
 goodN[219] = 7424; goodK[219] = 8; goodM[219] = 29;
 goodN[220] = 7680; goodK[220] = 8; goodM[220] = 30;
 goodN[221] = 7936; goodK[221] = 8; goodM[221] = 31;
 goodN[222] = 8192; goodK[222] = 8; goodM[222] = 32;
 goodN[223] = 8448; goodK[223] = 8; goodM[223] = 33;
 goodN[224] = 8704; goodK[224] = 8; goodM[224] = 34;
 goodN[225] = 8960; goodK[225] = 8; goodM[225] = 35;
 goodN[226] = 9216; goodK[226] = 8; goodM[226] = 36;
 goodN[227] = 9472; goodK[227] = 8; goodM[227] = 37;
 goodN[228] = 9728; goodK[228] = 8; goodM[228] = 38;
 goodN[229] = 9984; goodK[229] = 8; goodM[229] = 39;
 goodN[230] = 10240; goodK[230] = 8; goodM[230] = 40;
 goodN[231] = 10496; goodK[231] = 8; goodM[231] = 41;
 goodN[232] = 10752; goodK[232] = 8; goodM[232] = 42;
 goodN[233] = 11008; goodK[233] = 8; goodM[233] = 43;
 goodN[234] = 11264; goodK[234] = 8; goodM[234] = 44;
 goodN[235] = 11520; goodK[235] = 8; goodM[235] = 45;
 goodN[236] = 11776; goodK[236] = 8; goodM[236] = 46;
 goodN[237] = 12032; goodK[237] = 8; goodM[237] = 47;
 goodN[238] = 12288; goodK[238] = 8; goodM[238] = 48;
 goodN[239] = 12544; goodK[239] = 8; goodM[239] = 49;
 goodN[240] = 12800; goodK[240] = 8; goodM[240] = 50;
 goodN[241] = 13312; goodK[241] = 9; goodM[241] = 26;
 goodN[242] = 13824; goodK[242] = 9; goodM[242] = 27;
 goodN[243] = 14336; goodK[243] = 9; goodM[243] = 28;
 goodN[244] = 14848; goodK[244] = 9; goodM[244] = 29;
 goodN[245] = 15360; goodK[245] = 9; goodM[245] = 30;
 goodN[246] = 15872; goodK[246] = 9; goodM[246] = 31;
 goodN[247] = 16384; goodK[247] = 9; goodM[247] = 32;
 goodN[248] = 16896; goodK[248] = 9; goodM[248] = 33;
 goodN[249] = 17408; goodK[249] = 9; goodM[249] = 34;
 goodN[250] = 17920; goodK[250] = 9; goodM[250] = 35;
 goodN[251] = 18432; goodK[251] = 9; goodM[251] = 36;
 goodN[252] = 18944; goodK[252] = 9; goodM[252] = 37;
 goodN[253] = 19456; goodK[253] = 9; goodM[253] = 38;
 goodN[254] = 19968; goodK[254] = 9; goodM[254] = 39;
 goodN[255] = 20480; goodK[255] = 9; goodM[255] = 40;
 goodN[256] = 20992; goodK[256] = 9; goodM[256] = 41;
 goodN[257] = 21504; goodK[257] = 9; goodM[257] = 42;
 goodN[258] = 22016; goodK[258] = 9; goodM[258] = 43;
 goodN[259] = 22528; goodK[259] = 9; goodM[259] = 44;
 goodN[260] = 23040; goodK[260] = 9; goodM[260] = 45;
 goodN[261] = 23552; goodK[261] = 9; goodM[261] = 46;
 goodN[262] = 24064; goodK[262] = 9; goodM[262] = 47;
 goodN[263] = 24576; goodK[263] = 9; goodM[263] = 48;
 goodN[264] = 25088; goodK[264] = 9; goodM[264] = 49;
 goodN[265] = 25600; goodK[265] = 10; goodM[265] = 25;
 goodN[266] = 26624; goodK[266] = 10; goodM[266] = 26;
 goodN[267] = 27648; goodK[267] = 10; goodM[267] = 27;
 goodN[268] = 28672; goodK[268] = 10; goodM[268] = 28;
 goodN[269] = 29696; goodK[269] = 10; goodM[269] = 29;
 goodN[270] = 30720; goodK[270] = 10; goodM[270] = 30;
 goodN[271] = 31744; goodK[271] = 10; goodM[271] = 31;
 goodN[272] = 32768; goodK[272] = 10; goodM[272] = 32;
 goodN[273] = 33792; goodK[273] = 10; goodM[273] = 33;
 goodN[274] = 34816; goodK[274] = 10; goodM[274] = 34;
 goodN[275] = 35840; goodK[275] = 10; goodM[275] = 35;
 goodN[276] = 36864; goodK[276] = 10; goodM[276] = 36;
 goodN[277] = 37888; goodK[277] = 10; goodM[277] = 37;
 goodN[278] = 38912; goodK[278] = 10; goodM[278] = 38;
 goodN[279] = 39936; goodK[279] = 10; goodM[279] = 39;
 goodN[280] = 40960; goodK[280] = 10; goodM[280] = 40;
 goodN[281] = 41984; goodK[281] = 10; goodM[281] = 41;
 goodN[282] = 43008; goodK[282] = 10; goodM[282] = 42;
 goodN[283] = 44032; goodK[283] = 10; goodM[283] = 43;
 goodN[284] = 45056; goodK[284] = 10; goodM[284] = 44;
 goodN[285] = 46080; goodK[285] = 10; goodM[285] = 45;
 goodN[286] = 47104; goodK[286] = 10; goodM[286] = 46;
 goodN[287] = 48128; goodK[287] = 10; goodM[287] = 47;
 goodN[288] = 49152; goodK[288] = 10; goodM[288] = 48;
 goodN[289] = 51200; goodK[289] = 11; goodM[289] = 25;
 goodN[290] = 53248; goodK[290] = 11; goodM[290] = 26;
 goodN[291] = 55296; goodK[291] = 11; goodM[291] = 27;
 goodN[292] = 57344; goodK[292] = 11; goodM[292] = 28;
 goodN[293] = 59392; goodK[293] = 11; goodM[293] = 29;
 goodN[294] = 61440; goodK[294] = 11; goodM[294] = 30;
 goodN[295] = 63488; goodK[295] = 11; goodM[295] = 31;
 goodN[296] = 65536; goodK[296] = 11; goodM[296] = 32;
 goodN[297] = 67584; goodK[297] = 11; goodM[297] = 33;
 goodN[298] = 69632; goodK[298] = 11; goodM[298] = 34;
 goodN[299] = 71680; goodK[299] = 11; goodM[299] = 35;
 goodN[300] = 73728; goodK[300] = 11; goodM[300] = 36;
 goodN[301] = 75776; goodK[301] = 11; goodM[301] = 37;
 goodN[302] = 77824; goodK[302] = 11; goodM[302] = 38;
 goodN[303] = 79872; goodK[303] = 11; goodM[303] = 39;
 goodN[304] = 81920; goodK[304] = 11; goodM[304] = 40;
 goodN[305] = 83968; goodK[305] = 11; goodM[305] = 41;
 goodN[306] = 86016; goodK[306] = 11; goodM[306] = 42;
 goodN[307] = 88064; goodK[307] = 11; goodM[307] = 43;
 goodN[308] = 90112; goodK[308] = 11; goodM[308] = 44;
 goodN[309] = 92160; goodK[309] = 11; goodM[309] = 45;
 goodN[310] = 94208; goodK[310] = 11; goodM[310] = 46;
 goodN[311] = 96256; goodK[311] = 11; goodM[311] = 47;
 goodN[312] = 98304; goodK[312] = 12; goodM[312] = 24;
 goodN[313] = 102400; goodK[313] = 12; goodM[313] = 25;
 goodN[314] = 106496; goodK[314] = 12; goodM[314] = 26;
 goodN[315] = 110592; goodK[315] = 12; goodM[315] = 27;
 goodN[316] = 114688; goodK[316] = 12; goodM[316] = 28;
 goodN[317] = 118784; goodK[317] = 12; goodM[317] = 29;
 goodN[318] = 122880; goodK[318] = 12; goodM[318] = 30;
 goodN[319] = 126976; goodK[319] = 12; goodM[319] = 31;
 goodN[320] = 131072; goodK[320] = 12; goodM[320] = 32;
 goodN[321] = 135168; goodK[321] = 12; goodM[321] = 33;
 goodN[322] = 139264; goodK[322] = 12; goodM[322] = 34;
 goodN[323] = 143360; goodK[323] = 12; goodM[323] = 35;
 goodN[324] = 147456; goodK[324] = 12; goodM[324] = 36;
 goodN[325] = 151552; goodK[325] = 12; goodM[325] = 37;
 goodN[326] = 155648; goodK[326] = 12; goodM[326] = 38;
 goodN[327] = 159744; goodK[327] = 12; goodM[327] = 39;
 goodN[328] = 163840; goodK[328] = 12; goodM[328] = 40;
 goodN[329] = 167936; goodK[329] = 12; goodM[329] = 41;
 goodN[330] = 172032; goodK[330] = 12; goodM[330] = 42;
 goodN[331] = 176128; goodK[331] = 12; goodM[331] = 43;
 goodN[332] = 180224; goodK[332] = 12; goodM[332] = 44;
 goodN[333] = 184320; goodK[333] = 12; goodM[333] = 45;
 goodN[334] = 188416; goodK[334] = 12; goodM[334] = 46;
 goodN[335] = 196608; goodK[335] = 13; goodM[335] = 24;
 goodN[336] = 204800; goodK[336] = 13; goodM[336] = 25;
 goodN[337] = 212992; goodK[337] = 13; goodM[337] = 26;
 goodN[338] = 221184; goodK[338] = 13; goodM[338] = 27;
 goodN[339] = 229376; goodK[339] = 13; goodM[339] = 28;
 goodN[340] = 237568; goodK[340] = 13; goodM[340] = 29;
 goodN[341] = 245760; goodK[341] = 13; goodM[341] = 30;
 goodN[342] = 253952; goodK[342] = 13; goodM[342] = 31;
 goodN[343] = 262144; goodK[343] = 13; goodM[343] = 32;
 goodN[344] = 270336; goodK[344] = 13; goodM[344] = 33;
 goodN[345] = 278528; goodK[345] = 13; goodM[345] = 34;
 goodN[346] = 286720; goodK[346] = 13; goodM[346] = 35;
 goodN[347] = 294912; goodK[347] = 13; goodM[347] = 36;
 goodN[348] = 303104; goodK[348] = 13; goodM[348] = 37;
 goodN[349] = 311296; goodK[349] = 13; goodM[349] = 38;
 goodN[350] = 319488; goodK[350] = 13; goodM[350] = 39;
 goodN[351] = 327680; goodK[351] = 13; goodM[351] = 40;
 goodN[352] = 335872; goodK[352] = 13; goodM[352] = 41;
 goodN[353] = 344064; goodK[353] = 13; goodM[353] = 42;
 goodN[354] = 352256; goodK[354] = 13; goodM[354] = 43;
 goodN[355] = 360448; goodK[355] = 13; goodM[355] = 44;
 goodN[356] = 368640; goodK[356] = 13; goodM[356] = 45;
 goodN[357] = 376832; goodK[357] = 14; goodM[357] = 23;
 goodN[358] = 393216; goodK[358] = 14; goodM[358] = 24;
 goodN[359] = 409600; goodK[359] = 14; goodM[359] = 25;
 goodN[360] = 425984; goodK[360] = 14; goodM[360] = 26;
 goodN[361] = 442368; goodK[361] = 14; goodM[361] = 27;
 goodN[362] = 458752; goodK[362] = 14; goodM[362] = 28;
 goodN[363] = 475136; goodK[363] = 14; goodM[363] = 29;
 goodN[364] = 491520; goodK[364] = 14; goodM[364] = 30;
 goodN[365] = 507904; goodK[365] = 14; goodM[365] = 31;
 goodN[366] = 524288; goodK[366] = 14; goodM[366] = 32;
 goodN[367] = 540672; goodK[367] = 14; goodM[367] = 33;
 goodN[368] = 557056; goodK[368] = 14; goodM[368] = 34;
 goodN[369] = 573440; goodK[369] = 14; goodM[369] = 35;
 goodN[370] = 589824; goodK[370] = 14; goodM[370] = 36;
 goodN[371] = 606208; goodK[371] = 14; goodM[371] = 37;
 goodN[372] = 622592; goodK[372] = 14; goodM[372] = 38;
 goodN[373] = 638976; goodK[373] = 14; goodM[373] = 39;
 goodN[374] = 655360; goodK[374] = 14; goodM[374] = 40;
 goodN[375] = 671744; goodK[375] = 14; goodM[375] = 41;
 goodN[376] = 688128; goodK[376] = 14; goodM[376] = 42;
 goodN[377] = 704512; goodK[377] = 14; goodM[377] = 43;
 goodN[378] = 720896; goodK[378] = 14; goodM[378] = 44;
 goodN[379] = 753664; goodK[379] = 15; goodM[379] = 23;
 goodN[380] = 786432; goodK[380] = 15; goodM[380] = 24;
 goodN[381] = 819200; goodK[381] = 15; goodM[381] = 25;
 goodN[382] = 851968; goodK[382] = 15; goodM[382] = 26;
 goodN[383] = 884736; goodK[383] = 15; goodM[383] = 27;
 goodN[384] = 917504; goodK[384] = 15; goodM[384] = 28;
 goodN[385] = 950272; goodK[385] = 15; goodM[385] = 29;
 goodN[386] = 983040; goodK[386] = 15; goodM[386] = 30;
 goodN[387] = 1015808; goodK[387] = 15; goodM[387] = 31;
 goodN[388] = 1048576; goodK[388] = 15; goodM[388] = 32;
 goodN[389] = 1081344; goodK[389] = 15; goodM[389] = 33;
 goodN[390] = 1114112; goodK[390] = 15; goodM[390] = 34;
 goodN[391] = 1146880; goodK[391] = 15; goodM[391] = 35;
 goodN[392] = 1179648; goodK[392] = 15; goodM[392] = 36;
 goodN[393] = 1212416; goodK[393] = 15; goodM[393] = 37;
 goodN[394] = 1245184; goodK[394] = 15; goodM[394] = 38;
 goodN[395] = 1277952; goodK[395] = 15; goodM[395] = 39;
 goodN[396] = 1310720; goodK[396] = 15; goodM[396] = 40;
 goodN[397] = 1343488; goodK[397] = 15; goodM[397] = 41;
 goodN[398] = 1376256; goodK[398] = 15; goodM[398] = 42;
 goodN[399] = 1409024; goodK[399] = 15; goodM[399] = 43;
 goodN[400] = 1441792; goodK[400] = 16; goodM[400] = 22;
 goodN[401] = 1507328; goodK[401] = 16; goodM[401] = 23;
 goodN[402] = 1572864; goodK[402] = 16; goodM[402] = 24;
 goodN[403] = 1638400; goodK[403] = 16; goodM[403] = 25;
 goodN[404] = 1703936; goodK[404] = 16; goodM[404] = 26;
 goodN[405] = 1769472; goodK[405] = 16; goodM[405] = 27;
 goodN[406] = 1835008; goodK[406] = 16; goodM[406] = 28;
 goodN[407] = 1900544; goodK[407] = 16; goodM[407] = 29;
 goodN[408] = 1966080; goodK[408] = 16; goodM[408] = 30;
 goodN[409] = 2031616; goodK[409] = 16; goodM[409] = 31;
 goodN[410] = 2097152; goodK[410] = 16; goodM[410] = 32;
 goodN[411] = 2162688; goodK[411] = 16; goodM[411] = 33;
 goodN[412] = 2228224; goodK[412] = 16; goodM[412] = 34;
 goodN[413] = 2293760; goodK[413] = 16; goodM[413] = 35;
 goodN[414] = 2359296; goodK[414] = 16; goodM[414] = 36;
 goodN[415] = 2424832; goodK[415] = 16; goodM[415] = 37;
 goodN[416] = 2490368; goodK[416] = 16; goodM[416] = 38;
 goodN[417] = 2555904; goodK[417] = 16; goodM[417] = 39;
 goodN[418] = 2621440; goodK[418] = 16; goodM[418] = 40;
 goodN[419] = 2686976; goodK[419] = 16; goodM[419] = 41;
 goodN[420] = 2752512; goodK[420] = 16; goodM[420] = 42;
 goodN[421] = 2883584; goodK[421] = 17; goodM[421] = 22;
 goodN[422] = 3014656; goodK[422] = 17; goodM[422] = 23;
 goodN[423] = 3145728; goodK[423] = 17; goodM[423] = 24;
 goodN[424] = 3276800; goodK[424] = 17; goodM[424] = 25;
 goodN[425] = 3407872; goodK[425] = 17; goodM[425] = 26;
 goodN[426] = 3538944; goodK[426] = 17; goodM[426] = 27;
 goodN[427] = 3670016; goodK[427] = 17; goodM[427] = 28;
 goodN[428] = 3801088; goodK[428] = 17; goodM[428] = 29;
 goodN[429] = 3932160; goodK[429] = 17; goodM[429] = 30;
 goodN[430] = 4063232; goodK[430] = 17; goodM[430] = 31;
 goodN[431] = 4194304; goodK[431] = 17; goodM[431] = 32;

  }


  inline void init1() {
 size = 173;
 goodN = new int[size];
 goodM = new int[size];
 goodK = new int[size];

 goodN[0] = 2; goodK[0] = 1; goodM[0] = 1;
 goodN[1] = 4; goodK[1] = 1; goodM[1] = 2;
 goodN[2] = 6; goodK[2] = 1; goodM[2] = 3;
 goodN[3] = 8; goodK[3] = 1; goodM[3] = 4;
 goodN[4] = 10; goodK[4] = 1; goodM[4] = 5;
 goodN[5] = 12; goodK[5] = 1; goodM[5] = 6;
 goodN[6] = 14; goodK[6] = 1; goodM[6] = 7;
 goodN[7] = 16; goodK[7] = 1; goodM[7] = 8;
 goodN[8] = 18; goodK[8] = 1; goodM[8] = 9;
 goodN[9] = 20; goodK[9] = 1; goodM[9] = 10;
 goodN[10] = 22; goodK[10] = 1; goodM[10] = 11;
 goodN[11] = 24; goodK[11] = 1; goodM[11] = 12;
 goodN[12] = 26; goodK[12] = 1; goodM[12] = 13;
 goodN[13] = 28; goodK[13] = 1; goodM[13] = 14;
 goodN[14] = 30; goodK[14] = 1; goodM[14] = 15;
 goodN[15] = 32; goodK[15] = 1; goodM[15] = 16;
 goodN[16] = 34; goodK[16] = 1; goodM[16] = 17;
 goodN[17] = 36; goodK[17] = 1; goodM[17] = 18;
 goodN[18] = 38; goodK[18] = 1; goodM[18] = 19;
 goodN[19] = 40; goodK[19] = 1; goodM[19] = 20;
 goodN[20] = 42; goodK[20] = 1; goodM[20] = 21;
 goodN[21] = 44; goodK[21] = 1; goodM[21] = 22;
 goodN[22] = 46; goodK[22] = 1; goodM[22] = 23;
 goodN[23] = 48; goodK[23] = 1; goodM[23] = 24;
 goodN[24] = 50; goodK[24] = 1; goodM[24] = 25;
 goodN[25] = 52; goodK[25] = 1; goodM[25] = 26;
 goodN[26] = 56; goodK[26] = 2; goodM[26] = 14;
 goodN[27] = 60; goodK[27] = 2; goodM[27] = 15;
 goodN[28] = 64; goodK[28] = 2; goodM[28] = 16;
 goodN[29] = 68; goodK[29] = 2; goodM[29] = 17;
 goodN[30] = 72; goodK[30] = 2; goodM[30] = 18;
 goodN[31] = 76; goodK[31] = 2; goodM[31] = 19;
 goodN[32] = 80; goodK[32] = 2; goodM[32] = 20;
 goodN[33] = 84; goodK[33] = 2; goodM[33] = 21;
 goodN[34] = 88; goodK[34] = 2; goodM[34] = 22;
 goodN[35] = 92; goodK[35] = 2; goodM[35] = 23;
 goodN[36] = 96; goodK[36] = 2; goodM[36] = 24;
 goodN[37] = 100; goodK[37] = 2; goodM[37] = 25;
 goodN[38] = 104; goodK[38] = 3; goodM[38] = 13;
 goodN[39] = 112; goodK[39] = 3; goodM[39] = 14;
 goodN[40] = 120; goodK[40] = 3; goodM[40] = 15;
 goodN[41] = 128; goodK[41] = 3; goodM[41] = 16;
 goodN[42] = 136; goodK[42] = 3; goodM[42] = 17;
 goodN[43] = 144; goodK[43] = 3; goodM[43] = 18;
 goodN[44] = 152; goodK[44] = 3; goodM[44] = 19;
 goodN[45] = 160; goodK[45] = 3; goodM[45] = 20;
 goodN[46] = 168; goodK[46] = 3; goodM[46] = 21;
 goodN[47] = 176; goodK[47] = 3; goodM[47] = 22;
 goodN[48] = 184; goodK[48] = 3; goodM[48] = 23;
 goodN[49] = 192; goodK[49] = 3; goodM[49] = 24;
 goodN[50] = 208; goodK[50] = 4; goodM[50] = 13;
 goodN[51] = 224; goodK[51] = 4; goodM[51] = 14;
 goodN[52] = 240; goodK[52] = 4; goodM[52] = 15;
 goodN[53] = 256; goodK[53] = 4; goodM[53] = 16;
 goodN[54] = 272; goodK[54] = 4; goodM[54] = 17;
 goodN[55] = 288; goodK[55] = 4; goodM[55] = 18;
 goodN[56] = 304; goodK[56] = 4; goodM[56] = 19;
 goodN[57] = 320; goodK[57] = 4; goodM[57] = 20;
 goodN[58] = 336; goodK[58] = 4; goodM[58] = 21;
 goodN[59] = 352; goodK[59] = 4; goodM[59] = 22;
 goodN[60] = 368; goodK[60] = 4; goodM[60] = 23;
 goodN[61] = 384; goodK[61] = 5; goodM[61] = 12;
 goodN[62] = 416; goodK[62] = 5; goodM[62] = 13;
 goodN[63] = 448; goodK[63] = 5; goodM[63] = 14;
 goodN[64] = 480; goodK[64] = 5; goodM[64] = 15;
 goodN[65] = 512; goodK[65] = 5; goodM[65] = 16;
 goodN[66] = 544; goodK[66] = 5; goodM[66] = 17;
 goodN[67] = 576; goodK[67] = 5; goodM[67] = 18;
 goodN[68] = 608; goodK[68] = 5; goodM[68] = 19;
 goodN[69] = 640; goodK[69] = 5; goodM[69] = 20;
 goodN[70] = 672; goodK[70] = 5; goodM[70] = 21;
 goodN[71] = 704; goodK[71] = 5; goodM[71] = 22;
 goodN[72] = 768; goodK[72] = 6; goodM[72] = 12;
 goodN[73] = 832; goodK[73] = 6; goodM[73] = 13;
 goodN[74] = 896; goodK[74] = 6; goodM[74] = 14;
 goodN[75] = 960; goodK[75] = 6; goodM[75] = 15;
 goodN[76] = 1024; goodK[76] = 6; goodM[76] = 16;
 goodN[77] = 1088; goodK[77] = 6; goodM[77] = 17;
 goodN[78] = 1152; goodK[78] = 6; goodM[78] = 18;
 goodN[79] = 1216; goodK[79] = 6; goodM[79] = 19;
 goodN[80] = 1280; goodK[80] = 6; goodM[80] = 20;
 goodN[81] = 1344; goodK[81] = 6; goodM[81] = 21;
 goodN[82] = 1408; goodK[82] = 7; goodM[82] = 11;
 goodN[83] = 1536; goodK[83] = 7; goodM[83] = 12;
 goodN[84] = 1664; goodK[84] = 7; goodM[84] = 13;
 goodN[85] = 1792; goodK[85] = 7; goodM[85] = 14;
 goodN[86] = 1920; goodK[86] = 7; goodM[86] = 15;
 goodN[87] = 2048; goodK[87] = 7; goodM[87] = 16;
 goodN[88] = 2176; goodK[88] = 7; goodM[88] = 17;
 goodN[89] = 2304; goodK[89] = 7; goodM[89] = 18;
 goodN[90] = 2432; goodK[90] = 7; goodM[90] = 19;
 goodN[91] = 2560; goodK[91] = 7; goodM[91] = 20;
 goodN[92] = 2816; goodK[92] = 8; goodM[92] = 11;
 goodN[93] = 3072; goodK[93] = 8; goodM[93] = 12;
 goodN[94] = 3328; goodK[94] = 8; goodM[94] = 13;
 goodN[95] = 3584; goodK[95] = 8; goodM[95] = 14;
 goodN[96] = 3840; goodK[96] = 8; goodM[96] = 15;
 goodN[97] = 4096; goodK[97] = 8; goodM[97] = 16;
 goodN[98] = 4352; goodK[98] = 8; goodM[98] = 17;
 goodN[99] = 4608; goodK[99] = 8; goodM[99] = 18;
 goodN[100] = 4864; goodK[100] = 8; goodM[100] = 19;
 goodN[101] = 5120; goodK[101] = 9; goodM[101] = 10;
 goodN[102] = 5632; goodK[102] = 9; goodM[102] = 11;
 goodN[103] = 6144; goodK[103] = 9; goodM[103] = 12;
 goodN[104] = 6656; goodK[104] = 9; goodM[104] = 13;
 goodN[105] = 7168; goodK[105] = 9; goodM[105] = 14;
 goodN[106] = 7680; goodK[106] = 9; goodM[106] = 15;
 goodN[107] = 8192; goodK[107] = 9; goodM[107] = 16;
 goodN[108] = 8704; goodK[108] = 9; goodM[108] = 17;
 goodN[109] = 9216; goodK[109] = 9; goodM[109] = 18;
 goodN[110] = 10240; goodK[110] = 10; goodM[110] = 10;
 goodN[111] = 11264; goodK[111] = 10; goodM[111] = 11;
 goodN[112] = 12288; goodK[112] = 10; goodM[112] = 12;
 goodN[113] = 13312; goodK[113] = 10; goodM[113] = 13;
 goodN[114] = 14336; goodK[114] = 10; goodM[114] = 14;
 goodN[115] = 15360; goodK[115] = 10; goodM[115] = 15;
 goodN[116] = 16384; goodK[116] = 10; goodM[116] = 16;
 goodN[117] = 17408; goodK[117] = 10; goodM[117] = 17;
 goodN[118] = 18432; goodK[118] = 11; goodM[118] = 9;
 goodN[119] = 20480; goodK[119] = 11; goodM[119] = 10;
 goodN[120] = 22528; goodK[120] = 11; goodM[120] = 11;
 goodN[121] = 24576; goodK[121] = 11; goodM[121] = 12;
 goodN[122] = 26624; goodK[122] = 11; goodM[122] = 13;
 goodN[123] = 28672; goodK[123] = 11; goodM[123] = 14;
 goodN[124] = 30720; goodK[124] = 11; goodM[124] = 15;
 goodN[125] = 32768; goodK[125] = 11; goodM[125] = 16;
 goodN[126] = 36864; goodK[126] = 12; goodM[126] = 9;
 goodN[127] = 40960; goodK[127] = 12; goodM[127] = 10;
 goodN[128] = 45056; goodK[128] = 12; goodM[128] = 11;
 goodN[129] = 49152; goodK[129] = 12; goodM[129] = 12;
 goodN[130] = 53248; goodK[130] = 12; goodM[130] = 13;
 goodN[131] = 57344; goodK[131] = 12; goodM[131] = 14;
 goodN[132] = 61440; goodK[132] = 12; goodM[132] = 15;
 goodN[133] = 65536; goodK[133] = 12; goodM[133] = 16;
 goodN[134] = 73728; goodK[134] = 13; goodM[134] = 9;
 goodN[135] = 81920; goodK[135] = 13; goodM[135] = 10;
 goodN[136] = 90112; goodK[136] = 13; goodM[136] = 11;
 goodN[137] = 98304; goodK[137] = 13; goodM[137] = 12;
 goodN[138] = 106496; goodK[138] = 13; goodM[138] = 13;
 goodN[139] = 114688; goodK[139] = 13; goodM[139] = 14;
 goodN[140] = 122880; goodK[140] = 13; goodM[140] = 15;
 goodN[141] = 131072; goodK[141] = 14; goodM[141] = 8;
 goodN[142] = 147456; goodK[142] = 14; goodM[142] = 9;
 goodN[143] = 163840; goodK[143] = 14; goodM[143] = 10;
 goodN[144] = 180224; goodK[144] = 14; goodM[144] = 11;
 goodN[145] = 196608; goodK[145] = 14; goodM[145] = 12;
 goodN[146] = 212992; goodK[146] = 14; goodM[146] = 13;
 goodN[147] = 229376; goodK[147] = 14; goodM[147] = 14;
 goodN[148] = 262144; goodK[148] = 15; goodM[148] = 8;
 goodN[149] = 294912; goodK[149] = 15; goodM[149] = 9;
 goodN[150] = 327680; goodK[150] = 15; goodM[150] = 10;
 goodN[151] = 360448; goodK[151] = 15; goodM[151] = 11;
 goodN[152] = 393216; goodK[152] = 15; goodM[152] = 12;
 goodN[153] = 425984; goodK[153] = 15; goodM[153] = 13;
 goodN[154] = 458752; goodK[154] = 16; goodM[154] = 7;
 goodN[155] = 524288; goodK[155] = 16; goodM[155] = 8;
 goodN[156] = 589824; goodK[156] = 16; goodM[156] = 9;
 goodN[157] = 655360; goodK[157] = 16; goodM[157] = 10;
 goodN[158] = 720896; goodK[158] = 16; goodM[158] = 11;
 goodN[159] = 786432; goodK[159] = 16; goodM[159] = 12;
 goodN[160] = 917504; goodK[160] = 17; goodM[160] = 7;
 goodN[161] = 1048576; goodK[161] = 17; goodM[161] = 8;
 goodN[162] = 1179648; goodK[162] = 17; goodM[162] = 9;
 goodN[163] = 1310720; goodK[163] = 17; goodM[163] = 10;
 goodN[164] = 1441792; goodK[164] = 17; goodM[164] = 11;
 goodN[165] = 1572864; goodK[165] = 18; goodM[165] = 6;
 goodN[166] = 1835008; goodK[166] = 18; goodM[166] = 7;
 goodN[167] = 2097152; goodK[167] = 18; goodM[167] = 8;
 goodN[168] = 2359296; goodK[168] = 18; goodM[168] = 9;
 goodN[169] = 2621440; goodK[169] = 18; goodM[169] = 10;
 goodN[170] = 3145728; goodK[170] = 19; goodM[170] = 6;
 goodN[171] = 3670016; goodK[171] = 19; goodM[171] = 7;
 goodN[172] = 4194304; goodK[172] = 19; goodM[172] = 8;

  }
# 773 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h"
  void determineGoodN(int n, sfixn d);





  int binarySearch(int n, int start, int end);





  void mul2C(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c);
  void mul2C1(UnivariateIntegerPolynomial*, UnivariateIntegerPolynomial*, UnivariateIntegerPolynomial*);
  void mul2C2(UnivariateIntegerPolynomial*, UnivariateIntegerPolynomial*, UnivariateIntegerPolynomial*);
# 796 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h"
  void RecoverProduct(sfixn*, int, int, mpz_class*);
  void RecoverProduct(sfixn*, sfixn*, int, int, mpz_class*);

  void ToMPZ(mpz_t, sfixn*);
  void CRTtoMPZ(mpz_t, sfixn*, sfixn*, int);
# 812 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulSSA.h"
  BivariatePolynomial * ToBivarMod(mpz_class*, int, sfixn);
  BivariatePolynomial * ToBivarMod(mpz_class*, int, sfixn, sfixn);

  void mpzToPolyMod(sfixn*, mpz_t, int, sfixn);
  void mpzToPolyMod(sfixn*, sfixn*, mpz_t, int, sfixn, sfixn);
};
# 17 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2
# 1 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulNaive.h" 1
       
# 10 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulNaive.h"
class MulNaive: public Mul{
 public:
  virtual UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){
   UnivariateIntegerPolynomial c((a->getSize() == 0 || b->getSize() == 0) ? 0 : (a->getSize() + b->getSize() - 1), a->getCoefficientDigits() + b->getCoefficientDigits() + ((a->getSize() == 0 || b->getSize() == 0) ? 0 : log2((a->getSize() < b->getSize()) ? a->getSize() : b->getSize())));
          mulNaiveSer(a, b, &c, 0);
                        return c;
  };
  virtual void multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c){
   mulNaiveSer(a, b, c, 0);
  };
  int BASE_MUL;
                MulNaive();
 private:
# 33 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulNaive.h"
  void mulNaiveSer(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);
# 56 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulNaive.h"
                void mulDnRNaivePar(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);
# 66 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/MulNaive.h"
  void mulIterNaivePar(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b, UnivariateIntegerPolynomial *c, int startIndex);

};
# 18 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h" 2

class Multiplication{





private:
 MulToom4 toom4;
 MulToom8 toom8;
 MulKS ks;
 MulNaive naive;
 MulSSA ssa;
public:
# 42 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h"
 void multiply(mpz_class * r, mpz_class *a, mpz_class *b, int aSize, int bSize){
  int worker = __cilkrts_get_nworkers();

  UnivariateIntegerPolynomial aPoly(aSize, a);
         UnivariateIntegerPolynomial bPoly(bSize, b);

  UnivariateIntegerPolynomial rPoly;

  if((aSize < 64 || bSize < 64)){

   rPoly = naive.multiply(&aPoly, &bPoly);
  } else if((worker == 1) || (aSize <= 1024 && bSize <= 1024)){

   rPoly = ks.multiply(&aPoly, &bPoly);
  } else if(worker <= 6){

   rPoly = toom4.multiply(&aPoly, &bPoly);
  } else {

   if(aSize >= 3000 && bSize >= 3000){

    rPoly = ssa.multiply(&aPoly, &bPoly);
   } else {

    rPoly = toom8.multiply(&aPoly, &bPoly);
   }
  }

  for(int i = 0; i < rPoly.getSize(); i++)
   r[i] = rPoly.getCoefficient(i);

  rPoly.freeHeap();
 }
# 84 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h"
        mpz_class * multiply(mpz_class *a, mpz_class *b, int aSize, int bSize){

                int worker = __cilkrts_get_nworkers();

                UnivariateIntegerPolynomial aPoly(aSize, a);
                UnivariateIntegerPolynomial bPoly(bSize, b);

  UnivariateIntegerPolynomial rPoly;

  if((aSize < 64 || bSize < 64)){

                        rPoly = naive.multiply(&aPoly, &bPoly);
                } else if((worker == 1) || (aSize <= 1024 && bSize <= 1024)){

                        rPoly = ks.multiply(&aPoly, &bPoly);
                } else if(worker <= 6){

                        rPoly = toom4.multiply(&aPoly, &bPoly);
                } else {

                        if(aSize >= 3000 && bSize >= 3000){

                                rPoly = ssa.multiply(&aPoly, &bPoly);
                        } else {

                                rPoly = toom8.multiply(&aPoly, &bPoly);
                        }
                }

  mpz_class * r = new mpz_class[rPoly.getSize()];

  for(int i = 0; i < rPoly.getSize(); i++)
                        r[i] = rPoly.getCoefficient(i);

  rPoly.freeHeap();

  return r;
        }
# 131 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h"
 void multiply(UnivariateIntegerPolynomial *r, UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){

         int worker = __cilkrts_get_nworkers();

  if((a->getSize() < 64 || b->getSize() < 64)){

                        naive.multiply(a, b, r);
                } else if((worker == 1) || (a->getSize() <= 1024 && b->getSize() <= 1024)){

                        ks.multiply(a, b, r);
                } else if(worker <= 6){

                        toom4.multiply(a, b, r);
                } else {

                        if(a->getSize() >= 3000 && b->getSize() >= 3000){

                                ssa.multiply(a, b, r);
                        } else {

                                toom8.multiply(a, b, r);
                        }
                }

 }
# 164 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/../../IntegerPolynomial/Multiplication/Multiplication.h"
 UnivariateIntegerPolynomial multiply(UnivariateIntegerPolynomial *a, UnivariateIntegerPolynomial *b){

  UnivariateIntegerPolynomial r;

  int worker = __cilkrts_get_nworkers();

  if((a->getSize() < 64 || b->getSize() < 64)){

                        r = naive.multiply(a, b);
                } else if((worker == 1) || (a->getSize() <= 1024 && b->getSize() <= 1024)){

                        r = ks.multiply(a, b);
                } else if(worker <= 6){

                        r = toom4.multiply(a, b);
                } else {

                        if(a->getSize() >= 3000 && b->getSize() >= 3000){

                                r = ssa.multiply(a, b);
                        } else {

                                r = toom8.multiply(a, b);
                        }
                }

  r.computeExposedSize();
  return r;
 }

};
# 11 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h" 2
# 23 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h"
unsigned long long getMaxBits(DyadicRationalNumber* a, int n);
unsigned long long getMaxBits(mpq_class* a, int n);
# 37 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h"
void univariateMultiplication(lfixq* mul, DyadicRationalNumber* a, int n, DyadicRationalNumber* b, int m);
void univariateMultiplication(lfixq* mul, mpq_class* a, int n, mpq_class* b, int m);
# 51 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h"
void univariateMultiplication(lfixq* mul, DyadicRationalNumber* a, int n, lfixz* b, int m);
void univariateMultiplication(lfixq* mul, mpq_class* a, int n, lfixz* b, int m);
# 66 "../../include/RationalNumberPolynomial/../DyadicRationalNumber/Multiplication/multiplication.h"
void univariateMultiplication(lfixz* mul, lfixz* a, int n, lfixz* b, int m);




void naiveUnivariateMultiplication(lfixz* mul, lfixz* a, int n, lfixz* b, int m);
# 7 "../../include/RationalNumberPolynomial/urpolynomial.h" 2



void ts_modulo (lfixz*, lfixz, lfixz, int);




class DenseUnivariateRationalPolynomial : public BPASUnivariatePolynomial<RationalNumber,DenseUnivariateRationalPolynomial>,
            public BPASEuclideanDomain<DenseUnivariateRationalPolynomial> {
 private:
  Symbol name;
  int curd;
  int n;
  lfixq* coef;

  inline void zeros() {
   for (int i = 0; i < n; ++i)
    coef[i] = 0;
  }
  bool isEqual(const DenseUnivariateRationalPolynomial&) const;

  void taylorShiftCVL();



  void taylorShiftDnC(int, int);



  void taylorShiftDnC(int);
  void binomials(lfixz*, int);
  void taylorShiftBasePower2(lfixz*, int);


  void taylorShiftIncrementalCilkFor(lfixq*, int, int);
  void tableauBase(lfixq*, int);
  void polygonBase(lfixq*, int, int, int);
  void taylorShiftBase(lfixq*, int);
  void taylorShift3RegularCilkFor(lfixq*, int, int);


  void taylorShiftTableau(int);
  void taylorShiftBase(lfixq*, lfixq*, int);
  void tableauBaseInplace(lfixq*, lfixq*, int, int);
  void tableauConstruction(lfixq*, lfixq*, int, int, int);
  void taylorShiftGeneral(lfixq*, lfixq*, int, int);


  lfixz positiveRootBound();
  lfixz cauchyRootBound();
  lfixz complexRootBound();
  int rootBoundExp();


  long taylorConstant(int, lfixz, int, lfixz);
  void genDescartes(Intervals* pIs, DenseUnivariateRationalPolynomial*, int);
  void isolateScaledUnivariatePolynomial(Intervals*, DenseUnivariateRationalPolynomial*, int);
  void isolatePositiveUnivariateRealRoots(Intervals*, DenseUnivariateRationalPolynomial*, int);
  void isolateUnivariateRealRoots(Intervals*, DenseUnivariateRationalPolynomial*, int);
  void refineUnivariateInterval(Interval*, lfixq, DenseUnivariateRationalPolynomial*, lfixq);
  void refineUnivariateIntervals(Intervals*, Intervals*, DenseUnivariateRationalPolynomial*, lfixq);
  void univariatePositiveRealRootIsolation(Intervals*, DenseUnivariateRationalPolynomial*, lfixq, int);
  void univariateRealRootIsolation(Intervals*, DenseUnivariateRationalPolynomial*, lfixq, int);


     void pomopo(const lfixq c, const lfixq t, const DenseUnivariateRationalPolynomial& b);
     void resetDegree();


  DenseUnivariateRationalPolynomial euclideanGCD (const DenseUnivariateRationalPolynomial& q) const;
  DenseUnivariateRationalPolynomial modularGCD (const DenseUnivariateRationalPolynomial& q) const;

 public:
  static mpz_class characteristic;
  static RingProperties properties;
# 91 "../../include/RationalNumberPolynomial/urpolynomial.h"
  DenseUnivariateRationalPolynomial () : curd(0), n(1), name("%") {
   coef = new lfixq[1];
   coef[0] = 0;
  }






  DenseUnivariateRationalPolynomial(int s) {
   if (s < 1) { s = 1; }
   n = s;
   coef = new lfixq[n];
   curd = 0;

   zeros();
   name = "%";
  }






  DenseUnivariateRationalPolynomial (const Integer& e) : curd(0), n(1), name("%") {
   coef = new lfixq[1];
   coef[0] = mpq_class(e.get_mpz());
  }

  DenseUnivariateRationalPolynomial (const RationalNumber& e) : curd(0), n(1), name("%") {
   coef = new lfixq[1];
   coef[0] = mpq_class(e.get_mpq());
  }






  DenseUnivariateRationalPolynomial(const DenseUnivariateRationalPolynomial& b) : curd(b.curd), name(b.name) {
   n = curd + 1;
   coef = new lfixq[n];
   std::copy(b.coef, b.coef+n, coef);
  }






  ~DenseUnivariateRationalPolynomial() {
   delete [] coef;
  }






  inline Integer degree() const {
   return curd;
  }






  inline RationalNumber leadingCoefficient() const {
   return coef[curd];
  }

  inline RationalNumber trailingCoefficient() const {
   for (size_t i = 0; i <= curd; ++i) {
    if (coef[i] != 0) {
     return coef[i];
    }
   }
   return 0;
  }

  inline Integer numberOfTerms() const {
   size_t c = 0;
   for (size_t i = 0; i <= curd; ++i) {
    if (coef[i] != 0){
     ++c;
    }
   }
   return c;
  }






  inline mpq_class* coefficients(int k=0) const {




   return &coef[k];
  }






  inline RationalNumber coefficient(int k) const {
   if (k < 0 || k >= n)
    return lfixq(0);
   return coef[k];
  }







  inline void setCoefficient(int k, const RationalNumber& value) {
   if (k >= n || k < 0) {
    std::cout << "BPAS: error, DUQP(" << n << ") but trying to access " << k << "." << std::endl;
    exit(1);
   }
   coef[k] = value.get_mpq();
   if (k > curd && value != 0)
    curd = k;
   resetDegree();
  }

  inline void setCoefficient(int k, double value) {
   setCoefficient(k, lfixq(value));
  }






  inline Symbol variable() const {
   return name;
  }






  inline void setVariableName (const Symbol& x) {
   name = x;
  }

  inline DenseUnivariateRationalPolynomial unitCanonical(DenseUnivariateRationalPolynomial* u = 
# 246 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                                                               __null
# 246 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                                                                   , DenseUnivariateRationalPolynomial* v = 
# 246 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                                                                                                            __null
# 246 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                                                                                                                ) const {
   RationalNumber lead = leadingCoefficient();
   RationalNumber leadInv = lead.inverse();
   DenseUnivariateRationalPolynomial ret = *this * leadInv;
   if (u != 
# 250 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
           __null
# 250 "../../include/RationalNumberPolynomial/urpolynomial.h"
               ) {
    *u = lead;
   }
   if (v != 
# 253 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
           __null
# 253 "../../include/RationalNumberPolynomial/urpolynomial.h"
               ) {
    *v = leadInv;
   }
   return ret;
  }






  inline DenseUnivariateRationalPolynomial& operator= (const DenseUnivariateRationalPolynomial& b) {
   if (this != &b) {
    if (n) { delete [] coef; n = 0; }
    name = b.name;
    curd = b.curd;
    n = curd + 1;
    coef = new lfixq[n];
    std::copy(b.coef, b.coef+n, coef);
   }
   return *this;
  }

  inline DenseUnivariateRationalPolynomial& operator= (const RationalNumber& r) {
   *this = DenseUnivariateRationalPolynomial(r);
   return *this;
  }






  inline bool operator!= (const DenseUnivariateRationalPolynomial& b) const {
   return !(isEqual(b));
  }






  inline bool operator== (const DenseUnivariateRationalPolynomial& b) const {
   return isEqual(b);
  }






  inline bool isZero () const {
   if (!curd)
    return (coef[0] == 0);
   return 0;
  }






  inline void zero() {
   curd = 0;
   zeros();

  }






  inline bool isOne() const {
   if (!curd)
    return (coef[0] == 1);
   return 0;
  }






  inline void one() {
   curd = 0;
   coef[0] = 1;
   for (int i = 1; i < n; ++i)
    coef[i] = 0;
  }






  inline bool isNegativeOne() const {
   if (!curd)
    return (coef[0] == -1);
   return 0;
  }






  inline void negativeOne() {
   curd = 0;
   coef[0] = -1;
   for (int i = 1; i < n; ++i)
    coef[i] = 0;
  }






  inline int isConstant() const {
   if (curd) { return 0; }
   else if (coef[0] >= 0) { return 1; }
   else { return -1; }
  }






  inline RationalNumber content() const {
   return !isZero();
  }

  inline DenseUnivariateRationalPolynomial primitivePart() const {

   std::cerr << "BPAS ERROR: DUQP::primitivePart NOT YET IMPLEMENTED" << std::endl;
   return (*this);
  }







  DenseUnivariateRationalPolynomial operator^ (long long int e) const;







  inline DenseUnivariateRationalPolynomial& operator^= (long long int e) {
   *this = *this ^ e;
   return *this;
  }







  DenseUnivariateRationalPolynomial operator<< (int k) const;







  inline DenseUnivariateRationalPolynomial& operator<<= (int k) {
   *this = *this << k;
   return *this;
  }
# 438 "../../include/RationalNumberPolynomial/urpolynomial.h"
  DenseUnivariateRationalPolynomial operator>> (int k) const;
# 447 "../../include/RationalNumberPolynomial/urpolynomial.h"
  inline DenseUnivariateRationalPolynomial& operator>>= (int k) {
   *this = *this >> k;
   return *this;
  }






  DenseUnivariateRationalPolynomial operator+ (const DenseUnivariateRationalPolynomial& b) const;






  inline DenseUnivariateRationalPolynomial& operator+= (const DenseUnivariateRationalPolynomial& b) {
   if (curd >= b.curd)
    add(b);
   else
    *this = *this + b;
   return *this;
  }






     void add(const DenseUnivariateRationalPolynomial& b);






  inline DenseUnivariateRationalPolynomial operator+ (const RationalNumber& c) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r += c);
  }

  inline DenseUnivariateRationalPolynomial operator+ (const mpq_class& c) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r += c);
  }






  inline DenseUnivariateRationalPolynomial& operator+= (const RationalNumber& c) {
   coef[0] += lfixq(c.get_mpq());
   return *this;
  }

  inline DenseUnivariateRationalPolynomial& operator+= (const mpq_class& c) {
   coef[0] += c;
   return *this;
  }

  inline friend DenseUnivariateRationalPolynomial operator+ (const mpq_class& c, const DenseUnivariateRationalPolynomial& p) {
   return (p + c);
  }






     DenseUnivariateRationalPolynomial operator- (const DenseUnivariateRationalPolynomial& b) const;






  inline DenseUnivariateRationalPolynomial& operator-= (const DenseUnivariateRationalPolynomial& b) {
   if (curd >= b.curd)
    subtract(b);
   else
    *this = *this - b;
   return *this;
  }






     DenseUnivariateRationalPolynomial operator- () const;






     void subtract(const DenseUnivariateRationalPolynomial& b);






  inline DenseUnivariateRationalPolynomial operator- (const RationalNumber& c) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r -= c);
  }

  inline DenseUnivariateRationalPolynomial operator- (const mpq_class& c) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r -= c);
  }






  inline DenseUnivariateRationalPolynomial& operator-= (const RationalNumber& c) {
   coef[0] -= lfixq(c.get_mpq());
   return *this;
  }

  inline DenseUnivariateRationalPolynomial& operator-= (const mpq_class& c) {
   coef[0] -= c;
   return *this;
  }

  inline friend DenseUnivariateRationalPolynomial operator- (const mpq_class& c, const DenseUnivariateRationalPolynomial& p) {
            return (-p + c);
        }






     DenseUnivariateRationalPolynomial operator* (const DenseUnivariateRationalPolynomial& b) const;






  inline DenseUnivariateRationalPolynomial& operator*= (const DenseUnivariateRationalPolynomial& b) {
   *this = *this * b;
   return *this;
  }






  inline DenseUnivariateRationalPolynomial operator* (const RationalNumber& e) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r *= e);
  }

  inline DenseUnivariateRationalPolynomial operator* (const mpq_class& e) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r *= e);
  }

  inline DenseUnivariateRationalPolynomial operator* (const sfixn& e) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r *= e);
  }






     DenseUnivariateRationalPolynomial& operator*= (const RationalNumber& e);

     DenseUnivariateRationalPolynomial& operator*= (const mpq_class& e);






     DenseUnivariateRationalPolynomial& operator*= (const sfixn& e);

  inline friend DenseUnivariateRationalPolynomial operator* (const mpq_class& c, const DenseUnivariateRationalPolynomial& p) {
            return (p * c);
        }

  inline friend DenseUnivariateRationalPolynomial operator* (const sfixn& c, const DenseUnivariateRationalPolynomial& p) {
   return (p * c);
  }







  inline DenseUnivariateRationalPolynomial operator/ (const DenseUnivariateRationalPolynomial& b) const{
   DenseUnivariateRationalPolynomial rem(*this);
   return (rem /= b);
  }







     DenseUnivariateRationalPolynomial& operator/= (const DenseUnivariateRationalPolynomial& b);

     inline DenseUnivariateRationalPolynomial operator% (const DenseUnivariateRationalPolynomial& b) const {
      DenseUnivariateRationalPolynomial ret(*this);
      ret %= b;
      return ret;
     }

     inline DenseUnivariateRationalPolynomial& operator%= (const DenseUnivariateRationalPolynomial& b) {
      *this = this->remainder(b);
      return *this;
     }






  inline DenseUnivariateRationalPolynomial operator/ (const RationalNumber& e) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r /= e);
  }

  inline DenseUnivariateRationalPolynomial operator/ (const mpq_class& e) const {
   DenseUnivariateRationalPolynomial r (*this);
   return (r /= e);
  }






     DenseUnivariateRationalPolynomial& operator/= (const RationalNumber& e);

     DenseUnivariateRationalPolynomial& operator/= (const mpq_class& e);

     friend DenseUnivariateRationalPolynomial operator/ (const mpq_class& c, const DenseUnivariateRationalPolynomial& p);







     DenseUnivariateRationalPolynomial monicDivide(const DenseUnivariateRationalPolynomial& b);
# 713 "../../include/RationalNumberPolynomial/urpolynomial.h"
     DenseUnivariateRationalPolynomial monicDivide(const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* rem) const;
# 724 "../../include/RationalNumberPolynomial/urpolynomial.h"
     DenseUnivariateRationalPolynomial lazyPseudoDivide (const DenseUnivariateRationalPolynomial& b, RationalNumber* c, RationalNumber* d=
# 724 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                                                                                                         __null
# 724 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                                                                                                             );
# 736 "../../include/RationalNumberPolynomial/urpolynomial.h"
     DenseUnivariateRationalPolynomial lazyPseudoDivide (const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* rem, RationalNumber* c, RationalNumber* d) const;
# 746 "../../include/RationalNumberPolynomial/urpolynomial.h"
     DenseUnivariateRationalPolynomial pseudoDivide (const DenseUnivariateRationalPolynomial& b, RationalNumber* d=
# 746 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                                                                                  __null
# 746 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                                                                                      );
# 757 "../../include/RationalNumberPolynomial/urpolynomial.h"
     DenseUnivariateRationalPolynomial pseudoDivide (const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* rem, RationalNumber* d) const;







     DenseUnivariateRationalPolynomial halfExtendedEuclidean (const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* g) const;
# 775 "../../include/RationalNumberPolynomial/urpolynomial.h"
     void diophantinEquationSolve(const DenseUnivariateRationalPolynomial& a, const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* s, DenseUnivariateRationalPolynomial* t) const;






     void differentiate(int k);





     inline void differentiate() {
      this->differentiate(1);
     }






     inline DenseUnivariateRationalPolynomial derivative(int k) const {
       DenseUnivariateRationalPolynomial a(*this);
       a.differentiate(k);
       return a;
     }





     inline DenseUnivariateRationalPolynomial derivative() const {
       return this->derivative(1);
     }
# 823 "../../include/RationalNumberPolynomial/urpolynomial.h"
     void integrate();





     inline DenseUnivariateRationalPolynomial integral() const {
       DenseUnivariateRationalPolynomial a(*this);
       a.integrate();
       return a;
      }







  RationalNumber evaluate(const RationalNumber& x) const;






     Integer evaluate(const Integer& x) const;






  template <class LargerRing>
  LargerRing evaluate(const LargerRing& x) const {

   LargerRing a;
   if (curd) {
    LargerRing px = (LargerRing)coef[curd];
    for (int i = curd-1; i > -1; --i){
     a = (LargerRing)coef[i];
     px = (px * x) + a;
    }
    return px;
   }
   return (LargerRing)coef[0];
  }






  bool isConstantTermZero() const;






     DenseUnivariateRationalPolynomial gcd (const DenseUnivariateRationalPolynomial& q, int type) const;

     inline DenseUnivariateRationalPolynomial gcd(const DenseUnivariateRationalPolynomial& q) const {
      return gcd(q, 0);
     }






     Factors<DenseUnivariateRationalPolynomial> squareFree() const;






  bool divideByVariableIfCan();






  int numberOfSignChanges();







  void reciprocal();






  void homothetic(int k=1);






  void scaleTransform(int k);






  void negativeVariable();






  void negate();







  mpz_class rootBound();






  void taylorShift(int ts=-1);
# 967 "../../include/RationalNumberPolynomial/urpolynomial.h"
  inline Intervals positiveRealRootIsolate (mpq_class width, int ts=-1) {
   Intervals pIs;
   univariatePositiveRealRootIsolation(&pIs, this, width, ts);
   std::vector<Symbol> xs;
   xs.push_back(variable());
   pIs.setVariableNames(xs);
   return pIs;
  }
# 990 "../../include/RationalNumberPolynomial/urpolynomial.h"
  inline void positiveRealRootIsolate (mpq_class width, Intervals pIs, int ts=-1) {

   univariatePositiveRealRootIsolation(&pIs, this, width, ts);
   std::vector<Symbol> xs;
   xs.push_back(variable());
   pIs.setVariableNames(xs);
  }
# 1005 "../../include/RationalNumberPolynomial/urpolynomial.h"
  inline Intervals realRootIsolate (mpq_class width, int ts=-1) {
   Intervals pIs;
   univariateRealRootIsolation(&pIs, this, width, ts);
   return pIs;
  }







  inline void refineRoot(Interval* a, mpq_class width) {
   refineUnivariateInterval(a, a->right+1, this, width);
  }







  inline Intervals refineRoots(Intervals& a, mpq_class width) {
   Intervals b;
   refineUnivariateIntervals(&b, &a, this, width);
   return b;
  }







  void print(std::ostream &out) const;

  ExpressionTree convertToExpressionTree() const;





  inline DenseUnivariateRationalPolynomial euclideanSize() const {
   return degree();
  }

  inline DenseUnivariateRationalPolynomial euclideanDivision(const DenseUnivariateRationalPolynomial& b, DenseUnivariateRationalPolynomial* q = 
# 1051 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                                                                                                               __null
# 1051 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                                                                                                                   ) const {
   std::cerr << "DenseUnivariateRationalPolynomial::euclideanDivision NOT YET IMPLEMENTED" << std::endl;

   return *this;
  }

  inline DenseUnivariateRationalPolynomial extendedEuclidean(const DenseUnivariateRationalPolynomial& b,
                   DenseUnivariateRationalPolynomial* s = 
# 1058 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                         __null
# 1058 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                             ,
                   DenseUnivariateRationalPolynomial* t = 
# 1059 "../../include/RationalNumberPolynomial/urpolynomial.h" 3 4
                                                         __null
# 1059 "../../include/RationalNumberPolynomial/urpolynomial.h"
                                                             ) const {
   std::cerr << "DenseUnivariateRationalPolynomial::extendedEuclidean NOT YET IMPLEMENTED" << std::endl;

   return *this;
  }

  inline DenseUnivariateRationalPolynomial quotient(const DenseUnivariateRationalPolynomial& b) const {
   std::cerr << "DenseUnivariateRationalPolynomial::quotient NOT YET IMPLEMENTED" << std::endl;

   return *this;
  }


  inline DenseUnivariateRationalPolynomial remainder(const DenseUnivariateRationalPolynomial& b) const {
   std::cerr << "DenseUnivariateRationalPolynomial::remainder NOT YET IMPLEMENTED" << std::endl;

   return *this;
  }
};
# 7 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 1



# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../Ring/Integer.hpp" 1
# 5 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../polynomial.h" 1
# 6 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 1





# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/modpoly.h" 1



# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/Multiplication/Multiplication.h" 1
# 5 "../../include/RationalNumberPolynomial/../IntegerPolynomial/modpoly.h" 2

sfixn nextprime(int* s, mpz_class m);
void monicGCD(sfixn* gp, int* gd, sfixn* fp, int fd, sfixn p, sfixn lc);



class UniModularSubresultantChain {
 public:
  int n;
  int* deg;
  int* size;
  sfixn** coef;

  UniModularSubresultantChain () : n (0) {}
  UniModularSubresultantChain (int _n) : n (_n) {
   if (n > 0) {
    deg = new int[n];
    size = new int[n];
    for (int i = 0; i < n; ++i)
     size[i] = deg[i] = 0;
    coef = new sfixn*[n];
   }
   else { n = 0; }
  }
  UniModularSubresultantChain (const UniModularSubresultantChain& s) : n (s.n) {
   deg = new int[n];
   size = new int[n];
   std::copy(s.deg, s.deg+n, deg);
   std::copy(s.size, s.size+n, size);
   coef = new sfixn*[n];
   for (int i = 0; i < n; ++i) {
    if (size[i] > 0) {
     coef[i] = new sfixn[size[i]];
     std::copy(s.coef[i], s.coef[i]+size[i], coef[i]);
    }
   }
  }
  ~UniModularSubresultantChain() {
   if (n) {
    for (int i = 0; i < n; ++i)
     if (size[i]) { delete [] coef[i]; }
    delete [] coef;
    delete [] deg;
    delete [] size;
   }
  }

  inline UniModularSubresultantChain& operator= (UniModularSubresultantChain s) {
   if (this != &s) {
    if (n) {
     for (int i = 0; i < n; ++i)
      if (size[i]) { delete [] coef[i]; }
     delete [] coef;
     delete [] deg;
     delete [] size;
    }
    n = s.n;
    deg = new int[n];
    size = new int[n];
    std::copy(s.deg, s.deg+n, deg);
    std::copy(s.size, s.size+n, size);
    if (n > 1) { coef = new sfixn*[n]; }
    for (int i = 0; i < n; ++i) {
     if (size[i] > 0) {
      coef[i] = new sfixn[size[i]];
      std::copy(s.coef[i], s.coef[i]+size[i], coef[i]);
     }
    }
   }
   return *this;
  }
  inline friend std::ostream& operator<< (std::ostream &out, UniModularSubresultantChain s) {
   if (!s.n) { out << "0"; }
   else {
    bool isFirst = 0, isZero = 1;
    for (int i = 0; i < s.n; ++i) {
     if (s.size[i]) {
      isZero = 1;
      if (isFirst) { out << "\n"; }
      for (int j = 0; j <= s.deg[i]; ++j) {
       if (s.coef[i][j]) {
        out << s.coef[i][j];
        if (j == 1) { out << "*x"; }
        else if (j) { out << "*x^" << j; }
        if (j < s.deg[i]) { out << "+"; }
        isZero = 0;
       }
      }
      if (isZero) { out << "0"; }
      isFirst = 1;
     }
    }
   }
   return out;
  }
};

template <class Ring>
class BiModularSubresultantChain {
 public:
  int n;
  int** deg;
  int* size;
  Ring** coef;

  BiModularSubresultantChain<Ring> () : n (0) {}
  BiModularSubresultantChain<Ring> (int _n) : n (_n) {
   if (n > 0) {
    if (n > 1) {
     deg = new int*[n];
     coef = new Ring*[n];
    }
    size = new int[n];
    for (int i = 0; i < n; ++i) {
     deg[i] = new int[2];
     deg[i][1] = deg[i][0] = 0;
     size[i] = 0;
    }
   }
   else { n = 0; }
  }
  BiModularSubresultantChain<Ring> (const BiModularSubresultantChain<Ring>& s) : n (s.n) {
   size = new int[n];
   std::copy(s.size, s.size+n, size);
   deg = new int*[n];
   coef = new Ring*[n];
   for (int i = 0; i < n; ++i) {
    if (size[i] > 0) {
     deg[i] = new int[2];
     std::copy(s.deg[i], s.deg[i]+2, deg[i]);
     coef[i] = new Ring[size[i]];
     std::copy(s.coef[i], s.coef[i]+size[i], coef[i]);
    }
   }
  }
  ~BiModularSubresultantChain<Ring> () {
   if (n) {
    for (int i = 0; i < n; ++i) {
     if (size[i]) {
      delete [] deg[i];
      delete [] coef[i];
     }
    }
    delete [] coef;
    delete [] deg;
    delete [] size;
   }
  }

  inline BiModularSubresultantChain<Ring>& operator= (BiModularSubresultantChain<Ring> s) {
   if (this != &s) {
    if (n) {
     for (int i = 0; i < n; ++i) {
      if (size[i]) {
       delete [] deg[i];
       delete [] coef[i];
      }
     }
     if (n > 1) {
      delete [] coef;
      delete [] deg;
     }
     delete [] size;
    }
    size = new int[n];
    std::copy(s.size, s.size+n, size);
    if (n > 1) {
     deg = new int*[n];
     coef = new Ring*[n];
    }
    for (int i = 0; i < n; ++i) {
     if (size[i] > 0) {
      deg[i] = new int[2];
      std::copy(s.deg[i], s.deg[i]+2, deg[i]);
      coef[i] = new Ring[size[i]];
      std::copy(s.coef[i], s.coef[i]+size[i], coef[i]);
     }
    }
   }
   return *this;
  }
  inline bool operator== (BiModularSubresultantChain<Ring>& s ) {
   for (int i = 0; i < n && i < s.n; ++i) {
    if (deg[i][1] != s.deg[i][1] || deg[i][0] != s.deg[i][0])
     return 0;
    for (int j = 0; j < size[i]; ++j) {
     if (coef[i][j] != s.coef[i][j])
      return 0;
    }
   }
   for (int i = n; i < s.n; ++i) {
    for (int j = 0; j < s.size[i]; ++j)
     if (s.coef[i][j] != 0) { return 0; }
   }
   for (int i = s.n; i < n; ++i) {
    for (int j = 0; j < size[i]; ++j)
     if (coef[i][j] != 0) { return 0; }
   }
   return 1;
  }
  inline friend std::ostream& operator<< (std::ostream &out, BiModularSubresultantChain<Ring> s) {
   bool isZero = 1;
   for (int i = 0; i < s.n; ++i) {
    if (s.size[i] && (s.deg[i][1] || s.deg[i][0] || s.coef[i][0] != 0)) {
     if (!isZero) { out << "\n"; }
     out << i << ": ";
     int k = 1 + s.deg[i][0];
     for (int j = 0; j <= s.deg[i][1]; ++j) {
      out << "(";
      for (int l = 0; l <= s.deg[i][0]; ++l) {
       out << s.coef[i][j*k+l];
       if (l == 1) { out << "*t"; }
       else if (l) { out << "*t^"<< l; }
       if (l < s.deg[i][0] && s.coef[i][j*k+l] >= 0) { out << "+"; }
      }
      out << ")";
      if (j == 1) { out << "*x"; }
      else if (j) { out << "*x^" << j; }
      if (j < s.deg[i][1]) { out << "+"; }
     }
     isZero = 0;
    }
   }
   if (isZero) { out << "0"; }
   return out;
  }
};






BiModularSubresultantChain<sfixn> modularSubresultantChain(mpz_class*, int*, mpz_class*, int*, sfixn);
BiModularSubresultantChain<mpz_class> modularSetSubresultantChain(mpz_class*, int*, mpz_class*, int*, sfixn*, int, mpz_class*);
BiModularSubresultantChain<mpz_class> modularStableSubresultantChain (mpz_class*, int*, mpz_class*, int*, int v=2);
# 7 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 2






class DenseUnivariateIntegerPolynomial : public BPASUnivariatePolynomial<Integer,DenseUnivariateIntegerPolynomial> {
 private:
  Symbol name;
  int curd;
  int n;
  mpz_class* coef;

  inline void zeros() {
   for (int i = 0; i < n; ++i)
    coef[i] = 0;
  }

     bool isEqual(const DenseUnivariateIntegerPolynomial& q) const;
     void pomopo(const mpz_class c, const mpz_class t, const DenseUnivariateIntegerPolynomial& b);
     void resetDegree();
  DenseUnivariateIntegerPolynomial euclideanGCD (const DenseUnivariateIntegerPolynomial& q) const;
  bool isDivide(DenseUnivariateIntegerPolynomial, DenseUnivariateIntegerPolynomial, const DenseUnivariateIntegerPolynomial&) const
  ;
  DenseUnivariateIntegerPolynomial modularGCD (const DenseUnivariateIntegerPolynomial& q) const;

 public:
  static mpz_class characteristic;
# 43 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  DenseUnivariateIntegerPolynomial () : curd(0), n(1), name("%") {
   coef = new mpz_class[1];
   coef[0] = 0;
  }





  DenseUnivariateIntegerPolynomial(int s) {
   if (s < 1) { s = 1; }
   n = s;
   coef = new mpz_class[n];
   curd = 0;

   zeros();
   name = "%";
  }





  DenseUnivariateIntegerPolynomial (const Integer& e) : curd(0), n(1), name("%") {
   coef = new mpz_class[1];
   coef[0] = e.get_mpz();
  }
  DenseUnivariateIntegerPolynomial (const RationalNumber& e) : curd(0), n(1), name("%") {
   if (e.get_den() == 1) {
    coef = new mpz_class[1];
    coef[0] = e.get_num().get_mpz();
   }
   else {
    std::cout << "BPAS error, try to construct a rational number in DUZP." << std::endl;
    exit(1);
   }
  }





  DenseUnivariateIntegerPolynomial(const DenseUnivariateIntegerPolynomial& b) : curd(b.curd), name(b.name) {
   n = curd + 1;
   coef = new mpz_class[n];
   std::copy(b.coef, b.coef+n, coef);
  }





  ~DenseUnivariateIntegerPolynomial() {
   delete [] coef;
  }






  inline Integer degree() const {
   return curd;
  }






  inline Integer leadingCoefficient() const {
   return coef[curd];
  }

  inline Integer trailingCoefficient() const {
   for(int i = 0; i <= curd; ++i) {
    if (coef[i] != 0) {
     return coef[i];
    }
   }
   return 0;
  }

  inline Integer numberOfTerms() const {
   size_t c = 0;
   for (size_t i = 0; i <= curd; ++i) {
    ++c;
   }
   return c;
  }






  inline mpz_class* coefficients(int k=0) const {




   return &coef[k];
  }





  inline Integer coefficient(int k) const {
   if (k < 0 || k >= n) {
    mpz_class z(0);
    return Integer(z);
   }
   return Integer(coef[k]);
  }






  inline void setCoefficient(int k, const mpz_class value) {
   if (k >= n || k < 0) {
    std::cout << "BPAS: error, DUZP(" << n << ") but trying to access " << k << "." << std::endl;
    exit(1);
   }
   coef[k] = value;
   if (k > curd && value != 0)
    curd = k;
   resetDegree();
  }
  inline void setCoefficient(int k, const Integer& value) {
   setCoefficient(k, value.get_mpz());
  }
  inline void setCoefficient(int k, const int value) {
   setCoefficient(k, mpz_class(value));
  }
# 188 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  inline void setCoefficient(Integer k, const Integer& value);






  inline Symbol variable() const {
   return name;
  }





  inline void setVariableName (const Symbol& x) {
   name = x;
  }





  inline DenseUnivariateIntegerPolynomial& operator= (const DenseUnivariateIntegerPolynomial& b) {
   if (this != &b) {
    if (n) { delete [] coef; n = 0; }
    name = b.name;
    curd = b.curd;
    n = curd + 1;
    coef = new mpz_class[n];
    std::copy(b.coef, b.coef+n, coef);
   }
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator= (const Integer& i) {
   *this = DenseUnivariateIntegerPolynomial(i);
   return *this;
  }






  inline bool operator!= (const DenseUnivariateIntegerPolynomial& b) const {
   return !(isEqual(b));
  }






  inline bool operator== (const DenseUnivariateIntegerPolynomial& b) const {
   return isEqual(b);
  }






  inline bool isZero () const {
   if (!curd)
    return (coef[0] == 0);
   return 0;
  }






  inline void zero() {
   curd = 0;
   zeros();
  }






  inline bool isOne() const {
   if (!curd)
    return (coef[0] == 1);
   return 0;
  }






  inline void one() {
   curd = 0;
   coef[0] = 1;
   for (int i = 1; i < n; ++i)
    coef[i] = 0;
  }






  inline bool isNegativeOne() const {
   if (!curd)
    return (coef[0] == -1);
   return 0;
  }






  inline void negativeOne() {
   curd = 0;
   coef[0] = -1;
   for (int i = 1; i < n; ++i)
    coef[i] = 0;
  }






  inline int isConstant() const {
   if (curd) { return 0; }
   else if (coef[0] >= 0) { return 1; }
   else { return -1; }
  }






     inline DenseUnivariateIntegerPolynomial unitCanonical(DenseUnivariateIntegerPolynomial* u = 
# 329 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
                                                                                                __null
# 329 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                                                                                                    , DenseUnivariateIntegerPolynomial* v = 
# 329 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
                                                                                                                                            __null
# 329 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                                                                                                                                                ) const {
      Integer lead = leadingCoefficient();
      Integer unit, uInv;
      lead.unitCanonical(&unit, &uInv);
      if (unit != 1) {
       if (u != 
# 334 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
               __null
# 334 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                   ) {
        *u = unit;
       }
       if (v != 
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
               __null
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                   ) {
        *v = uInv;
       }

       return *this * unit;

      }

      if (u != 
# 345 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
              __null
# 345 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                  ) {
       *u = Integer(1);
      }
      if (v != 
# 348 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
              __null
# 348 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                  ) {
       *v = Integer(1);
      }
      return *this;
     }
# 361 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  inline Integer content() const {
   mpz_class c = coef[0];
   for (int i = 1; i <= curd; ++i) {
    if (coef[i] != 0) {
     
# 365 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
    __gmpz_gcd
# 365 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
           (c.get_mpz_t(), c.get_mpz_t(), coef[i].get_mpz_t());
     if (c == 1)
      break;
    }
   }
   return Integer(c);
  }

  inline DenseUnivariateIntegerPolynomial primitivePart() const {

   std::cerr << "BPAS ERROR: DUZP::primitivePart NOT YET IMPLEMENTED" << std::endl;
   return *this;
  }






  inline bool isConstantTermZero() const {
   return (coef[0] == 0);
  }







     DenseUnivariateIntegerPolynomial operator^ (long long int e) const;







  inline DenseUnivariateIntegerPolynomial& operator^= (long long int e) {
   *this = *this ^ e;
   return *this;
  }







     DenseUnivariateIntegerPolynomial operator<< (int k) const;







  inline DenseUnivariateIntegerPolynomial& operator<<= (int k) {
   *this = *this << k;
   return *this;
  }
# 433 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
     DenseUnivariateIntegerPolynomial operator>> (int k) const;
# 442 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  inline DenseUnivariateIntegerPolynomial& operator>>= (int k) {
   *this = *this >> k;
   return *this;
  }






     DenseUnivariateIntegerPolynomial operator+ (const DenseUnivariateIntegerPolynomial& b) const;






  inline DenseUnivariateIntegerPolynomial& operator+= (const DenseUnivariateIntegerPolynomial& b) {
   if (curd >= b.curd)
    add(b);
   else
    *this = *this + b;
   return *this;
  }






     void add(const DenseUnivariateIntegerPolynomial& b);






  inline DenseUnivariateIntegerPolynomial operator+ (const Integer& c) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r += c);
  }

  inline DenseUnivariateIntegerPolynomial operator+ (const mpz_class& c) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r += c);
  }

  inline DenseUnivariateIntegerPolynomial operator+ (int c) const {
            DenseUnivariateIntegerPolynomial r (*this);
            return (r += c);
        }






  inline DenseUnivariateIntegerPolynomial& operator+= (const Integer& c) {
   coef[0] += c.get_mpz();
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator+= (const mpz_class& c) {
   coef[0] += c;
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator+= (int c) {
            coef[0] += c;
            return *this;
        }

  inline friend DenseUnivariateIntegerPolynomial operator+ (const mpz_class& c, const DenseUnivariateIntegerPolynomial& p) {
   return (p + c);
  }

  inline friend DenseUnivariateIntegerPolynomial operator+ (int c, const DenseUnivariateIntegerPolynomial& p) {
            return (p + c);
        }






     DenseUnivariateIntegerPolynomial operator- (const DenseUnivariateIntegerPolynomial& b) const;






  inline DenseUnivariateIntegerPolynomial& operator-= (const DenseUnivariateIntegerPolynomial& b) {
   if (curd >= b.curd)
    subtract(b);
   else
    *this = *this - b;
   return *this;
  }






     DenseUnivariateIntegerPolynomial operator- () const;






  inline void negate() {
   for (int i = 0; i <= curd; ++i) {
    coef[i] = -coef[i];
   }
  }






     void subtract(const DenseUnivariateIntegerPolynomial& b);






  inline DenseUnivariateIntegerPolynomial operator- (const Integer& c) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r -= c);
  }

  inline DenseUnivariateIntegerPolynomial operator- (const mpz_class& c) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r -= c);
  }

  inline DenseUnivariateIntegerPolynomial operator- (int c) const {
            DenseUnivariateIntegerPolynomial r (*this);
            return (r -= c);
        }






  inline DenseUnivariateIntegerPolynomial& operator-= (const Integer& c) {
   coef[0] -= c.get_mpz();
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator-= (const mpz_class& c) {
   coef[0] -= c;
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator-= (int c) {
            coef[0] -= c;
            return *this;
     }

  inline friend DenseUnivariateIntegerPolynomial operator- (const mpz_class& c, const DenseUnivariateIntegerPolynomial& p) {
   return (-p + c);
  }

  inline friend DenseUnivariateIntegerPolynomial operator- (int c, const DenseUnivariateIntegerPolynomial& p) {
            return (-p + c);
        }






     DenseUnivariateIntegerPolynomial operator* (const DenseUnivariateIntegerPolynomial& b) const;






  inline DenseUnivariateIntegerPolynomial& operator*= (const DenseUnivariateIntegerPolynomial& b) {
   *this = *this * b;
   return *this;
  }






  inline DenseUnivariateIntegerPolynomial operator* (const Integer& e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r *= e);
  }

  inline DenseUnivariateIntegerPolynomial operator* (const mpz_class& e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r *= e);
  }

  inline DenseUnivariateIntegerPolynomial operator* (int e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r *= e);
  }






  inline DenseUnivariateIntegerPolynomial& operator*= (const Integer& e) {
   mpz_class c = e.get_mpz();
   *this *= c;
   return *this;
  }

  inline DenseUnivariateIntegerPolynomial& operator*= (const mpz_class& e) {
   if (e != 0 && e != 1) {
    for (int i = 0; i <= curd; ++i)
     coef[i] *= e;
   }
   else if (e == 0) { zero(); }
   return *this;
  }






  inline DenseUnivariateIntegerPolynomial& operator*= (int e) {
   if (e != 0 && e != 1) {
    for (int i = 0; i <= curd; ++i)
     coef[i] *= e;
   }
   else if (e == 0) { zero(); }
   return *this;
  }

  inline friend DenseUnivariateIntegerPolynomial operator* (const mpz_class& e, const DenseUnivariateIntegerPolynomial& p) {
   return (p * e);
  }

  inline friend DenseUnivariateIntegerPolynomial operator* (int e, const DenseUnivariateIntegerPolynomial& p) {
            return (p * e);
        }







  inline DenseUnivariateIntegerPolynomial operator/ (const DenseUnivariateIntegerPolynomial& b) const {
   DenseUnivariateIntegerPolynomial rem(*this);
   return (rem /= b);
  }







     DenseUnivariateIntegerPolynomial& operator/= (const DenseUnivariateIntegerPolynomial& b);






  inline DenseUnivariateIntegerPolynomial operator/ (const Integer& e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r /= e);
  }

  inline DenseUnivariateIntegerPolynomial operator/ (const mpz_class& e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r /= e);
  }

  inline DenseUnivariateIntegerPolynomial operator/ (int e) const {
   DenseUnivariateIntegerPolynomial r (*this);
   return (r /= e);
  }






  inline DenseUnivariateIntegerPolynomial& operator/= (const Integer& e) {
   mpz_class c = e.get_mpz();
   return (*this /= c);
  }

     DenseUnivariateIntegerPolynomial& operator/= (const mpz_class& e);

  inline DenseUnivariateIntegerPolynomial& operator/= (int e) {
   return (*this /= mpz_class(e));
  }

     friend DenseUnivariateIntegerPolynomial operator/ (const mpz_class& e, const DenseUnivariateIntegerPolynomial& p);







     DenseUnivariateIntegerPolynomial monicDivide(const DenseUnivariateIntegerPolynomial& b);
# 766 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  inline DenseUnivariateIntegerPolynomial monicDivide(const DenseUnivariateIntegerPolynomial& b, DenseUnivariateIntegerPolynomial* rem) const {
   *rem = *this;
   return rem->monicDivide(b);
  }
# 780 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
     DenseUnivariateIntegerPolynomial lazyPseudoDivide (const DenseUnivariateIntegerPolynomial& b, Integer* c, Integer* d=
# 780 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
                                                                                                                         __null
# 780 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                                                                                                                             );
# 792 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
  inline DenseUnivariateIntegerPolynomial lazyPseudoDivide (const DenseUnivariateIntegerPolynomial& b, DenseUnivariateIntegerPolynomial* rem, Integer* c, Integer* d) const {
   *rem = *this;
   return rem->lazyPseudoDivide(b, c, d);
  }
# 805 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
     DenseUnivariateIntegerPolynomial pseudoDivide (const DenseUnivariateIntegerPolynomial& b, Integer* d=
# 805 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h" 3 4
                                                                                                         __null
# 805 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
                                                                                                             );
# 816 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
     DenseUnivariateIntegerPolynomial pseudoDivide (const DenseUnivariateIntegerPolynomial& b, DenseUnivariateIntegerPolynomial* rem, Integer* d) const;






     DenseUnivariateIntegerPolynomial gcd (const DenseUnivariateIntegerPolynomial& q, int type) const;

     inline DenseUnivariateIntegerPolynomial gcd (const DenseUnivariateIntegerPolynomial& q) const {
      return gcd(q, 0);
     }






     void differentiate(int k);





     inline void differentiate() {
      this->differentiate(1);
     }






      inline DenseUnivariateIntegerPolynomial derivative(int k) const {
       DenseUnivariateIntegerPolynomial a(*this);
       a.differentiate(k);
       return a;
      }





     inline DenseUnivariateIntegerPolynomial derivative() const {
       return this->derivative(1);
      }





     void integrate();





     inline DenseUnivariateIntegerPolynomial integral() {
       DenseUnivariateIntegerPolynomial a(*this);
       a.integrate();
       return a;
      }
# 893 "../../include/RationalNumberPolynomial/../IntegerPolynomial/uzpolynomial.h"
     Integer evaluate(const Integer& x) const;






     Factors<DenseUnivariateIntegerPolynomial> squareFree() const;







     void print(std::ostream &out) const;




     ExpressionTree convertToExpressionTree() const;
};
# 7 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 1




# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../polynomial.h" 1
# 6 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../IntegerPolynomial/uzpolynomial.h" 1
# 7 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../RationalNumberPolynomial/urpolynomial.h" 1
# 8 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/TemplateHelpers.hpp" 1
# 9 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 1






# 1 "/usr/include/assert.h" 1 3 4
# 8 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 2
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 9 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 2

# 1 "/usr/include/c++/7/math.h" 1 3
# 11 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 2


static time_t seedRand() {
 static int initRand = 0;
 static time_t t = time(
# 15 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
                       __null
# 15 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                           );
 if (!initRand) {
  srand(t);
  initRand = 1;
 }
 return t;
}

static void rand_mpz_t(unsigned long int coefBound, int includeNeg, mpz_t mpzVal) {
 static int initRand = 0;
 static gmp_randstate_t R_STATE;
 if (!initRand) {
  time_t t = seedRand();

  
# 29 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
 __gmp_randinit_default 
# 29 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                      (R_STATE);
  
# 30 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
 __gmp_randseed_ui
# 30 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                (R_STATE, t);

  initRand = 1;
 }

 
# 35 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
__gmpz_init
# 35 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
        (mpzVal);
 while(
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
      ((
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
      mpzVal
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
      )->_mp_size < 0 ? -1 : (
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
      mpzVal
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
      )->_mp_size > 0) 
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                      == 0) {
  
# 37 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
 __gmpz_urandomb
# 37 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
             (mpzVal, R_STATE, coefBound);
 }
 if (includeNeg && rand() % 2) {

  
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
 __gmpz_neg
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
        (mpzVal, mpzVal);

 }
}

static void rand_mpq_t(unsigned long int coefBound, int includeNeg, mpq_t mpqVal) {
 mpz_t mpzNum;
 mpz_t mpzDen;
 rand_mpz_t(coefBound,includeNeg,mpzNum);
 rand_mpz_t(coefBound,includeNeg,mpzDen);

 
# 52 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
__gmpq_init
# 52 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
        (mpqVal);

 
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
__gmpz_set
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
       (
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
        (&((
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
        mpqVal
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
        )->_mp_num))
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                          , mpzNum);
 
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
__gmpz_set
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
       (
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
        (&((
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
        mpqVal
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
        )->_mp_den))
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                          , mpzDen);
 
# 56 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
__gmpq_canonicalize
# 56 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                (mpqVal);
}
# 66 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
static int randValInRange(int low,int high) {
    return rand()%(high-low+1)+low;
}
# 77 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
static std::vector<int> randValsInRange(int low,int high,int numElems) {
 
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
(static_cast <bool> (
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
numElems <= (high-low+1)
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
) ? void (0) : __assert_fail (
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
"numElems <= (high-low+1)"
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp" 3 4
, "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp", 78, __extension__ __PRETTY_FUNCTION__))
# 78 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/../Utils/RandomHelpers.hpp"
                                 ;
 int index[numElems]={0},n;
 std::vector<int> out;
 bool check(false);

 for (auto i=0; i<numElems; ++i) {
  if (i==0)
   index[i] = randValInRange(low,high);
  else {
   while (check==false) {
    check = true;
    n = randValInRange(low,high);
    for (auto j=0; j<i; ++j) {
     if (index[j] == n)
      check = false;
    }
   }
   index[i] = n;
   check = false;
  }
 }
 for (auto i=0; i<numElems; ++i) {
  out.push_back(index[i]);
 }
 return out;
}
# 10 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 2
# 44 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
template <class Ring>
class SparseUnivariatePolynomial : public virtual BPASUnivariatePolynomial<Ring, SparseUnivariatePolynomial<Ring>>,
           private Derived_from<Ring, BPASRing<Ring>> {





private:
 Symbol name;
 std::vector< UnivariateTerm<Ring> > terms;

 inline bool isEqual(const SparseUnivariatePolynomial<Ring>& b) const {
  if (degree() > 0 && b.degree() > 0 && (name != b.name))
   return 0;
  int n = terms.size();
  int m = b.terms.size();
  if (n != m)
   return 0;
  for (int i = 0; i < n; ++i) {
   UnivariateTerm<Ring> t = b.terms[i];
   if (terms[i].coef != t.coef || terms[i].exp != t.exp)
    return 0;
  }
  return 1;
 }

 inline bool isEqual(const DenseUnivariateRationalPolynomial& b) const {
  if (name != b.variable())
   return 0;
  int n = degree(), m = b.degree();
  if (n != m)
   return 0;
  n = terms.size(), m++;
  int k = 0;
  for (int i = 0; i < m; ++i) {
   if (k < n && terms[k].exp == i) {
    if (terms[k].coef != b.coefficient(i))
     return 0;
    k++;
   }
   else if (b.coefficient(i) != 0)
    return 0;
  }
  return 1;
 }

 inline bool isEqual(const DenseUnivariateIntegerPolynomial& b) const {
  if (name != b.variable())
   return 0;
  int n = degree().get_si(), m = b.degree().get_si();
  if (n != m)
   return 0;
  n = terms.size(), m++;
  int k = 0;
  for (int i = 0; i < m; ++i) {
   if (k < n && terms[k].exp == i) {
    if (terms[k].coef != b.coefficient(i))
     return 0;
    k++;
   }
   else if (b.coefficient(i) != 0)
    return 0;
  }
  return 1;
 }


 inline void pomopo(UnivariateTerm<Ring> t, const SparseUnivariatePolynomial<Ring>& b) {
  int ai = 0, m = b.terms.size();
  int n = terms.size();
  int i;
# 173 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
  const UnivariateTerm<Ring>* bterms = b.terms.data();
  Ring prodCoef, tcoef = t.coef;
  int prodExp, tExp = t.exp, aExp;
  for (int i = 0; i < m; ++i) {
   prodCoef = tcoef * bterms[i].coef;
   prodExp = tExp + bterms[i].exp;

   if (ai >= terms.size()) {
    terms.emplace_back(prodCoef, prodExp);
    ai++;
   } else {
    aExp = terms[ai].exp;
    while (aExp < prodExp) {
     ++ai;
     if (ai < terms.size())
      aExp = terms[ai].exp;
     else {
      terms.emplace_back(prodCoef, prodExp);
      ++ai;
      break;
     }
    }
    if (aExp == prodExp) {
     terms[ai].coef += prodCoef;
     if (!terms[ai].coef.isZero()) {
      ++ai;
     } else {
      terms.erase(terms.begin()+ai);
     }
    }
    else if (aExp > prodExp) {
     terms.emplace(terms.begin()+ai, prodCoef, prodExp);
     ++ai;
    }
   }
  }
 }


 inline void pomopo(Ring c, UnivariateTerm<Ring> t, const SparseUnivariatePolynomial<Ring>& b) {
  int ai = 0, m = b.terms.size();

  for (int i = 0; i < m; ++i) {
   UnivariateTerm<Ring> product;
   product.coef = t.coef * b.terms[i].coef;
   product.exp = t.exp + b.terms[i].exp;

   if (ai >= terms.size()) {
    terms.push_back(product);
    ai++;
   }
   else {
    int e1 = terms[ai].exp, e2 = product.exp;
    while (e1 < e2) {
     terms[ai].coef *= c;
     ai++;
     if (ai < terms.size())
      e1 = terms[ai].exp;
     else {
      terms.push_back(product);
      ai++;
      break;
     }
    }
    if (e1 == e2) {
     terms[ai].coef *= c;
     terms[ai].coef += product.coef;
     if (terms[ai].coef.isZero())
      terms.erase(terms.begin()+ai);
     else { ai++; }
    }
    else if (e1 > e2) {
     terms.insert(terms.begin()+ai, product);
     ai++;
    }
   }
  }
  for (int i = ai; i < terms.size(); ++i)
   terms[i].coef *= c;
 }



 inline SparseUnivariatePolynomial<Ring> LazardSe(SparseUnivariatePolynomial<Ring>& sd, SparseUnivariatePolynomial<Ring>& sdm, Ring& y) const {
  int n = (sd.degree() - sdm.degree()).get_si() - 1;
  if (!n) { return sdm; }
  Ring x = sdm.leadingCoefficient();

  int a = (int) pow(2, floor(log2(n)));
  Ring c = x;
  SparseUnivariatePolynomial<Ring> se = sdm;

  n -= a;

  while (a != 1) {
   a >>= 1;
   c *= c;
   c /= y;
   if (n >= a) {
    c *= x;
    c /= y;
    n -= a;
   }
  }
  se *= c;

   se /= y;

  return se;
 }

 inline SparseUnivariatePolynomial<Ring> DucosSem(SparseUnivariatePolynomial<Ring>& a, SparseUnivariatePolynomial<Ring>& sdm, SparseUnivariatePolynomial<Ring>& se, Ring sd) const {

     Integer d = a.degree();
     int e = sdm.degree().get_si();
  SparseUnivariatePolynomial<Ring> res;
  res.name = name;
  Ring ec = se.leadingCoefficient();







  if (d == e){

   Ring dc = a.leadingCoefficient();
   Ring rTemp;
   SparseUnivariatePolynomial<Ring> supTemp;
   supTemp.name = name;

   res = a;
   res *= ec;
   rTemp = a.coefficient(e);
   supTemp = se;
   supTemp *= rTemp;
   res -= supTemp;
   res /= dc;
   res *= ec;

   rTemp = se.coefficient(e-1);
   supTemp.zero();
   supTemp.setCoefficient(0,rTemp);
   rTemp = -ec;
   supTemp.setCoefficient(1,rTemp);
   supTemp *= se;
   res += supTemp;

   res /= dc;
   return res;
  }
  else {

   Ring mc = sdm.leadingCoefficient();
   SparseUnivariatePolynomial<Ring>* P = new SparseUnivariatePolynomial<Ring>[d.get_si()];
   for (int i = 0; i < e; ++i) {
    P[i].setVariableName(name);
    P[i].setCoefficient(i, ec);
   }
   for (int i = e+1; d > i; ++i)
    P[i].setVariableName(name);
   P[e].setVariableName(name);
   P[e].setCoefficient(e, ec);
   P[e] -= se;
   ec.one();
   res.setCoefficient(1, ec);
   UnivariateTerm<Ring> t (ec, 1);
   for(int i = e+1; i < d; ++i) {
    if (!P[i-1].coefficient(e-1).isZero()) {
     ec = -P[i-1].coefficient(e-1);
    }
    else {
     ec.zero();
    }
    ec /= mc;
    P[i] = sdm;
    P[i] *= ec;

    P[i].pomopo(t, P[i-1]);
   }
   res *= P[d.get_si()-1];

   SparseUnivariatePolynomial<Ring> D;
   for (int i = 0; i < d; ++i) {
    P[i] *= a.coefficient(i);
    D += P[i];
   }
   D /= a.leadingCoefficient();
   delete [] P;

   ec = -res.coefficient(e);


   t.coef = mc;
   t.exp = 0;
   res.pomopo(mc, t, D);
   sdm *= ec;
   res += sdm;
   res /= sd;

   if ((d - e + 1) % 2 == 1) {
    return -res;
   }
   return res;
  }
 }

 inline UnivariateTerm<Ring> leadingTerm() const {
  int n = terms.size();
  if (n) { return terms[n-1]; }
  else { return UnivariateTerm<Ring>(); }
 }

public:
  mpz_class characteristic;
# 397 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 SparseUnivariatePolynomial<Ring> () : name("%"), terms() {
  Ring e;
  characteristic = e.characteristic;
 }






 SparseUnivariatePolynomial<Ring> (const SparseUnivariatePolynomial<Ring>& b) : name(b.name), terms(b.terms) {
  Ring e;
  characteristic = e.characteristic;
 }

 SparseUnivariatePolynomial<Ring> (int a) {
  UnivariateTerm<Ring> t;
  t.coef = Ring(a);
  terms.push_back(t);
 }

 SparseUnivariatePolynomial<Ring> (const Integer& c) {
  UnivariateTerm<Ring> t;
  t.coef = Ring(c);
  terms.push_back(t);
 }

 SparseUnivariatePolynomial<Ring> (const RationalNumber& c) {
  UnivariateTerm<Ring> t;
  t.coef = Ring(c);
  t.exp = 0;
  terms.push_back(t);
 }

 SparseUnivariatePolynomial<Ring> (const ComplexRationalNumber& c) {
  UnivariateTerm<Ring> t;
  t.coef = Ring(c);
  terms.push_back(t);
 }

 SparseUnivariatePolynomial<Ring> (const DenseUnivariateIntegerPolynomial& b) {
  name = b.variable();
  for (int i = 0; i <= b.degree().get_si(); ++i) {
   Ring e (Integer(b.coefficient(i)));
   if (!e.isZero()) {
    UnivariateTerm<Ring> t;
    t.coef = e;
    t.exp = i;
    terms.push_back(t);
   }
  }
 }

 SparseUnivariatePolynomial<Ring> (const DenseUnivariateRationalPolynomial& b) {
  name = b.variable();
  for (int i = 0; i <= b.degree().get_si(); ++i) {
   Ring e (RationalNumber(b.coefficient(i)));
   if (!e.isZero()) {
    UnivariateTerm<Ring> t;
    t.coef = e;
    t.exp = i;
    terms.push_back(t);
   }
  }
 }

 SparseUnivariatePolynomial<Ring> (Symbol sym) : name(sym), terms() {
  this->one();
  terms[0].exp = 1;
 }






 ~SparseUnivariatePolynomial<Ring> () {
  terms.clear();
 }






 inline Integer numberOfTerms() const {
  return terms.size();
 }






 inline Integer degree() const {
  int n = terms.size();
  if (n) { return terms[n-1].exp; }
  else { return 0; }
 }






 inline Ring leadingCoefficient() const {
  int n = terms.size();
  if (n) { return terms[n-1].coef; }
  else { return Ring(); }
 }

 inline Ring trailingCoefficient() const {
  int n = terms.size();
  if (n) {
   return terms[0].coef;
  } else {
   return Ring();
  }
 }






 inline Ring coefficient(int k) const {
  int n = terms.size();
  for (int i = 0; i < n; ++i) {
   if (k == terms[i].exp)
    return terms[i].coef;
   else if (k < terms[i].exp)
    break;
  }
  return Ring();
 }







 inline void setCoefficient(int e, const Ring& c) {
  UnivariateTerm<Ring> b;
  b.coef = c;
  b.exp = e;


  int k = terms.size() - 1;
  if ((k < 0 || b.exp > terms[k].exp) && !c.isZero())
   terms.push_back(b);
  else {
   for (int i = 0; i <= k; ++i) {
    int e1 = terms[i].exp, e2 = b.exp;
    if (e1 == e2) {
     terms[i].coef = b.coef;
     if (terms[i].coef.isZero())
      terms.erase(terms.begin()+i);
     break;
    }
    else if (e1 > e2) {
     if (!c.isZero())
      terms.insert(terms.begin()+i, b);
     break;
    }
   }
  }
 }






 inline Symbol variable() const {
  return name;
 }






 inline void setVariableName (const Symbol& c) {
  name = c;
 }

 inline SparseUnivariatePolynomial<Ring> unitCanonical(SparseUnivariatePolynomial<Ring>* u = 
# 584 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
                                                                                            __null
# 584 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
                                                                                                , SparseUnivariatePolynomial<Ring>* v = 
# 584 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
                                                                                                                                        __null
# 584 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
                                                                                                                                            ) const {
  Ring lead = leadingCoefficient();
  Ring ru, rv;
  Ring canon = lead.unitCanonical(&ru, &rv);
  SparseUnivariatePolynomial<Ring> ret = *this * ru;
  if (u != 
# 589 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
          __null
# 589 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
              ) {
   *u = ru;
  }
  if (v != 
# 592 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
          __null
# 592 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
              ) {
   *v = rv;
  }

  return ret;
 }






 inline SparseUnivariatePolynomial<Ring>& operator= (const SparseUnivariatePolynomial<Ring>& b) {
  if (this != &b) {
   terms.clear();
   name = b.name;
   terms = b.terms;
   Ring e;
   characteristic = e.characteristic;
  }
  return *this;
 }






 inline SparseUnivariatePolynomial<Ring>& operator= (const Ring& r) {
  terms.clear();
  UnivariateTerm<Ring> t;
  t.coef = Ring(r);
  terms.push_back(t);
  return *this;
 }







 inline bool operator!= (const SparseUnivariatePolynomial<Ring>& b) const {
  return !(isEqual(b));
 }






 inline bool operator== (const SparseUnivariatePolynomial<Ring>& b) const {
  return isEqual(b);
 }

 inline bool operator== (const DenseUnivariateRationalPolynomial& b) const {
  return isEqual(b);
 }

 inline bool operator== (const DenseUnivariateIntegerPolynomial& b) const {
  return isEqual(b);
 }






 inline bool isZero() const {
  return !(terms.size());
 }






 inline void zero() {
  terms.clear();
 }






 inline bool isOne() const {
  if (terms.size() == 1 && !terms[0].exp)
   return terms[0].coef.isOne();
  return 0;
 }






 inline void one() {
  terms.clear();
  UnivariateTerm<Ring> t;
  t.coef.one();
  t.exp = 0;
  terms.push_back(t);
 }






 inline bool isNegativeOne() const {
  if (terms.size() == 1 && !terms[0].exp)
   return terms[0].coef.isNegativeOne();
  return 0;
 }






 inline void negativeOne() {
  terms.clear();
  UnivariateTerm<Ring> t;
  t.coef.negativeOne();
  t.exp = 0;
  terms.push_back(t);
 }






 inline int isConstant() const {
  if (terms.size() == 1 && !terms[0].exp)
   return terms[0].coef.isConstant();
  return 0;
 }






 inline Ring convertToConstant() {
  if (terms.size() && !terms[0].exp)
   return terms[0].coef;
  else {
   Ring e;
   e.zero();
   return e;
  }
 }






 inline Ring content() const override {
  Ring c;
  int n = terms.size();
  if (n) {
   c = terms[0].coef;
   for (int i = 1; i < n; ++i) {
    c = c.gcd(terms[i].coef);
    if (c.isOne())
     break;
   }
  }

  return c;
 }

 inline SparseUnivariatePolynomial<Ring> primitivePart() const {

  std::cerr << "BPAS ERROR: SUP<Ring>::primitivePart NOT YET IMPLEMENTED" << std::endl;
  return (*this);
 }







 inline SparseUnivariatePolynomial<Ring> operator^ (long long int e) const {
  SparseUnivariatePolynomial<Ring> res;
  res.name = name;






  if (isZero() || isOne() || e == 1)
   res = *this;
  else if (e == 2)
   res = *this * *this;
  else if (e > 2) {
   SparseUnivariatePolynomial<Ring> x (*this);
   res.one();

   while (e) {
    if (e % 2) { res *= x; }
    x = x * x;
    e >>= 1;
   }
  }
  else if (!e)
   res.one();
  else {
   res = *this;
  }
  return res;
 }







 inline SparseUnivariatePolynomial<Ring>& operator^= (long long int e) {
  *this = *this ^ e;
  return *this;
 }







 inline SparseUnivariatePolynomial<Ring> operator<< (int k) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r <<= k);
 }







 inline SparseUnivariatePolynomial<Ring>& operator<<= (int k) {
  for (int i = 0; i < terms.size(); ++i)
   terms[i].exp += (unsigned long int) k;
  return *this;
 }
# 851 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> operator>> (int k) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r >>= k);
 }
# 863 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring>& operator>>= (int k) {
  int i = 0;
  unsigned long int e = (unsigned long int) k;
  while (i < terms.size()) {
   if (terms[i].exp >= e) {
    terms[i].exp -= e;
    i++;
   }
   else { terms.erase(terms.begin()); }
  }
  return *this;
 }






 inline SparseUnivariatePolynomial<Ring> operator+ (const SparseUnivariatePolynomial<Ring>& b) const {
  SparseUnivariatePolynomial<Ring> res(*this);
  return (res += b);
 }






 inline SparseUnivariatePolynomial<Ring>& operator+= (const SparseUnivariatePolynomial<Ring>& b) {
  if (!terms.size()) { return (*this = b); }
  if (!b.terms.size()) { return *this; }
  if (isConstant()) { return (*this = b + terms[0].coef); }
  if (b.isConstant()) { return (*this += b.terms[0].coef); }
  if (name != b.name) {
   std::cout << "BPAS: error, trying to add between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  int ai = 0;
  for (int i = 0; i < b.terms.size(); ++i) {
   UnivariateTerm<Ring> bt = b.terms[i];
   if (ai >= terms.size()) {
    terms.push_back(bt);
    ai++;
   }
   else {
    int e1 = terms[ai].exp, e2 = bt.exp;
    while (e1 < e2) {
     ai++;
     if (ai < terms.size())
      e1 = terms[ai].exp;
     else {
      terms.push_back(bt);
      ai++;
      break;
     }
    }
    if (e1 == e2) {
     terms[ai].coef += bt.coef;
     if (terms[ai].coef.isZero())
      terms.erase(terms.begin()+ai);
     else { ai++; }
    }
    else if (e1 > e2)
     terms.insert(terms.begin()+ai, bt);
   }
  }
  return *this;
 }






 inline SparseUnivariatePolynomial<Ring> operator+ (const Ring& e) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r += e);
 }






 inline SparseUnivariatePolynomial<Ring>& operator+= (const Ring& e) {
  if (!e.isZero()) {
   if (terms.size()) {
    UnivariateTerm<Ring> a = terms[0];
    if (a.exp) {
     a.coef = e;
     a.exp = 0;
     terms.insert(terms.begin(), a);
    }
    else {
     terms[0].coef += e;
     if (terms[0].coef.isZero())
      terms.erase(terms.begin());
    }
   }
   else {
    UnivariateTerm<Ring> a;
    a.coef = e;
    a.exp = 0;
    terms.push_back(a);
   }
  }
  return *this;
 }

 inline friend SparseUnivariatePolynomial<Ring> operator+ (const Ring& c, const SparseUnivariatePolynomial<Ring>& p) {
  return (p + c);
 }






 inline SparseUnivariatePolynomial<Ring> operator- () const {
  SparseUnivariatePolynomial<Ring> res;
  res.name = name;
  for (int i = 0; i < terms.size(); ++i) {
   UnivariateTerm<Ring> t;
   t.coef = -terms[i].coef;
   t.exp = terms[i].exp;
   res.terms.push_back(t);
  }
  return res;
 }






 inline SparseUnivariatePolynomial<Ring> operator- (const SparseUnivariatePolynomial<Ring>& b) const {
  SparseUnivariatePolynomial<Ring> res(*this);
  return (res -= b);
 }






 inline SparseUnivariatePolynomial<Ring>& operator-= (const SparseUnivariatePolynomial<Ring>& b) {
  if (!terms.size()) { return (*this = -b); }
  if (!b.terms.size()) { return *this; }
  if (isConstant()) { return (*this = -b + terms[0].coef); }
  if (b.isConstant()) { return (*this -= b.terms[0].coef); }
  if (name != b.name) {
   std::cout << "BPAS: error, trying to subtract between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  int ai = 0;
  for (int i = 0; i < b.terms.size(); ++i) {
   UnivariateTerm<Ring> t = b.terms[i];
   t.coef = -t.coef;

   if (ai >= terms.size()) {
    terms.push_back(t);
    ai++;
   }
   else {
    int e1 = terms[ai].exp, e2 = t.exp;
    while (e1 < e2) {
     ai++;
     if (ai < terms.size())
      e1 = terms[ai].exp;
     else {
      terms.push_back(t);
      ai++;
      break;
     }
    }
    if (e1 == e2) {
     terms[ai].coef += t.coef;
     if (terms[ai].coef.isZero())
      terms.erase(terms.begin()+ai);
     else { ai++; }
    }
    else if (e1 > e2)
     terms.insert(terms.begin()+ai, t);
   }
  }
  return *this;
 }






 inline SparseUnivariatePolynomial<Ring> operator- (const Ring& e) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r -= e);
 }






 inline SparseUnivariatePolynomial<Ring>& operator-= (const Ring& e) {
  if (!e.isZero()) {
   if (terms.size()) {
    UnivariateTerm<Ring> t = terms[0];
    if (t.exp) {
     t.coef = -e;
     t.exp = 0;
     terms.insert(terms.begin(), t);
    }
    else {
     terms[0].coef -= e;
     if (terms[0].coef.isZero())
      terms.erase(terms.begin());
    }
   }
   else {
    UnivariateTerm<Ring> t;
    t.coef = -e;
    t.exp = 0;
    terms.push_back(t);
   }
  }
  return *this;
 }

 inline friend SparseUnivariatePolynomial<Ring> operator- (const Ring& c, const SparseUnivariatePolynomial<Ring>& p) {
  return (-p + c);
 }






 inline SparseUnivariatePolynomial<Ring> operator* (const SparseUnivariatePolynomial<Ring>& b) const {
  int n = terms.size(), m = b.terms.size();
  if (!n)
   return *this;
  if (!m)
   return b;

  SparseUnivariatePolynomial<Ring> res;
  if (degree() == 0) {
   for (int i = 0; i < m; ++i) {
    UnivariateTerm<Ring> bt = b.terms[i];
    UnivariateTerm<Ring> t;
    t.coef = terms[0].coef * bt.coef;
    t.exp = bt.exp;
    res.terms.push_back(t);
   }
   res.name = b.name;
   return res;
  }
  res.name = name;
  if (b.degree() == 0) {
   UnivariateTerm<Ring> bt = b.terms[0];
   for (int i = 0; i < n; ++i) {
    UnivariateTerm<Ring> t;
    t.coef = terms[i].coef * bt.coef;
    t.exp = terms[i].exp;
    res.terms.push_back(t);
   }
   return res;
  }

  if (name != b.name) {
   std::cout << "BPAS: error, trying to multiply between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  if (n + m < 64) {
   if (n <= m) {
    for (int i = 0; i < n; ++i)
     res.pomopo(terms[i], b);
   }
   else {
    for (int i = 0; i < m; ++i)
     res.pomopo(b.terms[i], *this);
   }
  }
  else {
   int s = (m > n) ? m : n;
   s >>= 1;
   SparseUnivariatePolynomial<Ring> f0, f1;
   f0.name = f1.name = name;
   for (int i = 0; i < n; ++i) {
    if (terms[i].exp < s)
     f0.terms.push_back(terms[i]);
    else {
     UnivariateTerm<Ring> t (terms[i].coef, terms[i].exp-s);
     f1.terms.push_back(t);
    }
   }
   SparseUnivariatePolynomial<Ring> g0, g1;
   g0.name = g1.name = name;
   for (int i = 0; i < m; ++i) {
    if (b.terms[i].exp < s)
     g0.terms.push_back(b.terms[i]);
    else {
     UnivariateTerm<Ring> t (b.terms[i].coef, b.terms[i].exp-s);
     g1.terms.push_back(t);
    }
   }
   SparseUnivariatePolynomial<Ring> t0, t1;
   t0.name = t1.name = name;
   n = f0.terms.size(), m = g0.terms.size();
   if (n <= m) {
    for (int i = 0; i < n; ++i)
     res.pomopo(f0.terms[i], g0);
   }
   else {
    for (int i = 0; i < m; ++i)
     res.pomopo(g0.terms[i], f0);
   }
   n = f1.terms.size(), m = g1.terms.size();
   if (n <= m) {
    for (int i = 0; i < n; ++i)
     t0.pomopo(f1.terms[i], g1);
   }
   else {
    for (int i = 0; i < m; ++i)
     t0.pomopo(g1.terms[i], f1);
   }
   f0 += f1, g0 += g1;
   n = f0.terms.size(), m = g0.terms.size();
   if (n <= m) {
    for (int i = 0; i < n; ++i)
     t1.pomopo(f0.terms[i], g0);
   }
   else {
    for (int i = 0; i < m; ++i)
     t1.pomopo(g0.terms[i], f0);
   }
   t1 -= res + t0;
   for (int i = 0; i < t1.terms.size(); ++i)
    t1.terms[i].exp += s;
   s <<= 1;
   for (int i = 0; i < t0.terms.size(); ++i)
    t0.terms[i].exp += s;
   res += t0 + t1;
  }
  return res;
 }






 inline SparseUnivariatePolynomial<Ring>& operator*= (const SparseUnivariatePolynomial<Ring>& b) {
  *this = *this * b;
  return *this;
 }






 inline SparseUnivariatePolynomial<Ring> operator* (const Ring& c) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r *= c);
 }

 inline SparseUnivariatePolynomial<Ring> operator* (const sfixn& e) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r *= e);
 }






 inline SparseUnivariatePolynomial<Ring>& operator*= (const Ring& c) {
  if (!isZero()) {
   if (!c.isZero() && !c.isOne()) {
    for (int i = 0; i < terms.size(); ++i)
     terms[i].coef *= c;
   }
   else if (c.isZero())
    terms.clear();
  }
  return *this;
 }

 inline SparseUnivariatePolynomial<Ring>& operator*= (const sfixn& e) {
  if (e != 0 && e != 1) {
   for (int i = 0; i < terms.size(); ++i)
    terms[i].coef *= e;
  }
  else if (e == 0) { zero(); }
  return *this;
 }

 inline friend SparseUnivariatePolynomial<Ring> operator* (const Ring& e, const SparseUnivariatePolynomial<Ring>& p) {
  return (p * e);
 }

 inline friend SparseUnivariatePolynomial<Ring> operator* (const sfixn& e, const SparseUnivariatePolynomial<Ring>& p) {
  return (p * e);
 }







 inline SparseUnivariatePolynomial<Ring> operator/ (const SparseUnivariatePolynomial<Ring>& b) const {
  SparseUnivariatePolynomial<Ring> rem(*this);
  return (rem /= b);
 }







 inline SparseUnivariatePolynomial<Ring>& operator/= (const SparseUnivariatePolynomial<Ring>& b) {
  if (b.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  if (b.isConstant()) { return (*this /= b.terms[0].coef); }
  if (isConstant()) {
   zero();
   return *this;
  }
  if (name != b.name) {
   std::cout << "BPAS: error, trying to exact divide between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  SparseUnivariatePolynomial<Ring> q;
  q.name = name;

  Integer db = b.degree();
  UnivariateTerm<Ring> bt = b.leadingTerm();

  if (db == 1 && bt.coef.isOne()) {
   if (b.terms.size() > 1) {
    int k = 0;
    Ring e, prev;
    UnivariateTerm<Ring> t, at = leadingTerm();
    if (!terms[0].exp) {
     prev = t.coef = terms[0].coef / b.terms[0].coef;
     t.exp = 0;
     q.terms.push_back(t);
     k++;
    }
    else { prev.zero(); }
    for (int i = 1; i < at.exp; ++i) {
     if (k < terms.size() && terms[k].exp == i) {
      e = terms[k].coef;
      k++;
     }
     else { e.zero(); }
     t.coef = (e - prev) / b.terms[0].coef;
     if (!t.coef.isZero()) {
      t.exp = i;
      q.terms.push_back(t);
     }
     prev = t.coef;
    }
    if (prev == at.coef)
     return (*this = q);
    else {
     std::cout << "BPAS: error, not exact division in SparseUnivariatePolynomial<Ring>." << std::endl;
     exit(1);
    }
   }
   else {
    if (!terms[0].exp) {
     std::cout << "BPAS: error, not exact division in SparseUnivariatePolynomial<Ring>." << std::endl;
     exit(1);
    }
    else {
     for (int i = 0; i < terms.size(); ++i)
      terms[i].exp--;
     return *this;
    }
   }
  }

  while (!isZero() && degree() >= db) {
   UnivariateTerm<Ring> at = leadingTerm();
   UnivariateTerm<Ring> lc, nlc;
   lc.coef = at.coef / bt.coef;
   lc.exp = at.exp - bt.exp;
   nlc.coef = -lc.coef;
   nlc.exp = lc.exp;
   pomopo(nlc, b);
   q.terms.insert(q.terms.begin(), lc);
  }
  if (!isZero()) {
   std::cout << "BPAS: error, not exact division in SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  return (*this = q);
 }






 inline SparseUnivariatePolynomial<Ring> operator/ (const Ring& e) const {
  SparseUnivariatePolynomial<Ring> r (*this);
  return (r /= e);
 }






 inline SparseUnivariatePolynomial<Ring>& operator/= (const Ring& e) {
  if (e.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  else if (!e.isOne()) {
   int i = 0;
   while (i < terms.size()) {
    terms[i].coef /= e;
    if (terms[i].coef.isZero())
     terms.erase(terms.begin()+i);
    else { ++i; }
   }
  }
  return *this;
 }

 inline friend SparseUnivariatePolynomial<Ring> operator/ (const Ring& e, const SparseUnivariatePolynomial<Ring>& p) {
  if (p.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  SparseUnivariatePolynomial<Ring> q;
  q.name = p.name;

  if (p.isConstant()) {
   q += e;
   return (q /= p.terms[0].coef);
  }
  else { return q; }
 }






 inline void negate() {
  for (int i = 0; i < terms.size(); ++i)
   terms[i].coef = -terms[i].coef;
 }
# 1435 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> monicDivide(const SparseUnivariatePolynomial<Ring>& b) {
  if (b.isZero()) {
   std::cout << "BPAS: error, dividend is zero from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  else if (!b.leadingCoefficient().isOne()) {
   std::cout << "BPAS: error, leading coefficient is not one in monicDivide() from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }

  if (b.isConstant()) {
   SparseUnivariatePolynomial<Ring> r (*this);
   zero();
   return r;
  }
  if (isConstant()) {
   SparseUnivariatePolynomial<Ring> r;
   r.zero();
   return r;
  }
  if (name != b.name) {
   std::cout << "BPAS: error, trying to monic divide between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  SparseUnivariatePolynomial<Ring> quo;
  quo.name = name;
  UnivariateTerm<Ring> bt = b.leadingTerm();
  while (degree() >= b.degree()) {
   UnivariateTerm<Ring> at = leadingTerm();
   UnivariateTerm<Ring> nlc;
   nlc.coef = -at.coef;
   nlc.exp = at.exp - bt.exp;
   pomopo(nlc, b);
   at.exp = nlc.exp;
   quo.terms.insert(quo.terms.begin(), at);
  }
  return quo;
 }
# 1483 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> monicDivide(const SparseUnivariatePolynomial<Ring>& b, SparseUnivariatePolynomial<Ring>* rem) const {
  std::cout << "*this " << *this << std::endl;
  *rem = *this; std::cout<< "salam"<<std::endl;
  return rem->monicDivide(b);
 }
# 1498 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> lazyPseudoDivide (const SparseUnivariatePolynomial<Ring>& b, Ring* c, Ring* d=
# 1498 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
                                                                                                                      __null
# 1498 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
                                                                                                                          ) {
  if (d == 
# 1499 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
          __null
# 1499 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
              )
   d = new Ring;
  Integer da = degree(), db = b.degree();
  if (b.isZero() || db == 0) {
   std::cout << "BPAS: error, dividend is zero or constant from SparseUnivariatePolynomial<Ring>." << std::endl;
   exit(1);
  }
  c->one(), d->one();
  if (isConstant()) {
   SparseUnivariatePolynomial<Ring> r;
   r.zero();
   return r;
  }
  if (name != b.name) {
   std::cout << "BPAS: error, trying to pseudo divide between Ring[" << name << "] and Ring[" << b.name << "]." << std::endl;
   exit(1);
  }

  if (da < db) {
   SparseUnivariatePolynomial<Ring> r;
   r.name = name;
   return r;
  }

  SparseUnivariatePolynomial<Ring> quo;
  quo.name = name;
  Ring blc = b.leadingTerm().coef;

  int e = 0;
  Integer diff = da - db;
  while (degree() >= db) {
   UnivariateTerm<Ring> at = leadingTerm();
   UnivariateTerm<Ring> nlc;
   nlc.coef = -at.coef;
   nlc.exp = at.exp - db.get_si();

   *c *= blc;
   e++;
   pomopo(blc, nlc, b);
   at.exp = nlc.exp;
   quo.terms.insert(quo.terms.begin(), at);
  }
  for (int i = e; diff >= i; ++i)
   *d *= blc;
  return quo;
 }
# 1556 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> lazyPseudoDivide (const SparseUnivariatePolynomial<Ring>& b, SparseUnivariatePolynomial<Ring>* rem, Ring* c, Ring* d) const {
  *rem = *this;
  return rem->lazyPseudoDivide(b, c, d);
 }
# 1569 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> pseudoDivide (const SparseUnivariatePolynomial<Ring>& b, Ring* d=
# 1569 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
                                                                                                         __null
# 1569 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
                                                                                                             ) {
  Ring c;
  if (d == 
# 1571 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h" 3 4
          __null
# 1571 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
              )
   d = new Ring;
  SparseUnivariatePolynomial<Ring> quo = lazyPseudoDivide(b, &c, d);
  quo *= *d;
  *this *= *d;
  *d *= c;
  return quo;
 }
# 1589 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> pseudoDivide (const SparseUnivariatePolynomial<Ring>& b, SparseUnivariatePolynomial<Ring>* rem, Ring* d) const {
  Ring c;
  SparseUnivariatePolynomial<Ring> quo = lazyPseudoDivide(b, rem, &c, d);
  quo *= *d;
  *rem *= *d;
  *d *= c;
  return quo;
 }






 inline void differentiate(int k) {
  if (k <= 0) { return; }
  int i = 0;
  while (i < terms.size()) {
   if (terms[i].exp >= k) {
    for (int j = 0; j < k; ++j)
     terms[i].coef *= Ring(terms[i].exp - j);
    terms[i].exp -= k;
    i++;
   }
   else
    terms.erase(terms.begin());
  }
 }





 inline void differentiate() {
  this->differentiate(1);
 }






 inline SparseUnivariatePolynomial<Ring> derivative(int k) const {
  SparseUnivariatePolynomial<Ring> a(*this);
  a.differentiate(k);
  return a;
 }





 inline SparseUnivariatePolynomial<Ring> derivative() const {
  return this->derivative(0);
 }






 inline void integrate() {
  int i = terms.size()-1;
  while (i > -1) {
   terms[i].coef /= (terms[i].exp + 1);
   terms[i].exp += 1;
   i--;
  }
 }





 inline SparseUnivariatePolynomial<Ring> integral() const {
  SparseUnivariatePolynomial<Ring> a(*this);
  a.integrate();
  return a;
 }






 inline bool isConstantTermZero() const {
  if (isZero())
   return 1;
  int n = terms.size();
  if (n && terms[0].exp == 0 && terms[0].coef == Ring(0))
   return 1;
  return 0;
 }






 inline Ring evaluate(const Ring& x) const {
  int d = terms.size() - 1;
  if (d < 0) { return Ring(); }
  int e = terms[d].exp - 1;
  Ring px = terms[d].coef;
  d--;
  for (int i = e; i > -1; --i) {
   px *= x;
   if (i == terms[d].exp && d > -1) {
    px += terms[d].coef;
    d--;
   }
  }
  return px;
 }






 template <class LargerRing>
 inline LargerRing evaluate(const LargerRing& x) const {

  int d = terms.size() - 1;
  if (d < 0) { return LargerRing(); }
  int e = terms[d].exp - 1;
  LargerRing px = (LargerRing)terms[d].coef;
  LargerRing a;
  d--;
  for (int i = e; i > -1; --i) {
   px *= x;
   if (i == terms[d].exp && d > -1) {
    a = (LargerRing)terms[d].coef;
    px += a;
    d--;
   }
  }
  return px;
 }

 inline void fillChain (std::vector<SparseUnivariatePolynomial<Ring>>& chain) const {
  SparseUnivariatePolynomial<Ring> zero;
  zero.zero();
  int fullSize(chain[chain.size()-2].degree().get_ui()+2);
  int delta;


  if (chain.size() < fullSize) {
   chain.reserve(fullSize);
   for (int i=chain.size()-2; i>0; --i) {
    if (chain[i].degree() != chain[i-1].degree()+1) {
     delta = chain[i].degree().get_ui() - chain[i-1].degree().get_ui();
     if (i > 1) {
      i = i-1;
      for (int j=0; j<delta-2; ++j)
       chain.insert(chain.begin()+i,zero);
     }
     else {
      for (int j=0; j<delta-1; ++j)
       chain.insert(chain.begin()+i,zero);
     }
    }
   }
   if (chain[0].degree() != 0) {
     for (int j=0; j<chain[0].degree(); ++j)
      chain.insert(chain.begin(),zero);
   }
  }

 }







 inline std::vector< SparseUnivariatePolynomial<Ring> > subresultantChain (const SparseUnivariatePolynomial<Ring>& q, int filled=0) const {
  if (name != q.name) {
   std::cout << "BPAS: error, trying to compute subresultant chains between Ring[" << name << "] and Ring[" << q.name << "]." << std::endl;
   exit(1);
  }

  if (degree() == 0 || q.degree() == 0){
   std::cout << "BPAS: error, Input polynomials to subresultantChain must have positive degree." << std::endl;
   exit(1);
  }

  std::vector< SparseUnivariatePolynomial<Ring> > S;
  SparseUnivariatePolynomial<Ring> a, b;
  if (q.degree() > degree()) {
   a = q;
   b = *this;
  }
  else {
   a = *this;
   b = q;
  }

  int k = (a.degree() - b.degree()).get_si();
  Ring s = b.leadingCoefficient() ^ k;

  SparseUnivariatePolynomial<Ring> A = b, B = a, C = -b;
  if (k > 1) {
   b *= b.leadingCoefficient()^(k-1);
  }
  S.push_back(b);
  S.push_back(a);
  B.pseudoDivide(C);
  Integer delta = 0;
  while (true) {
      if (B.isZero())
    break;
   S.insert(S.begin(), B);
   delta = A.degree() - B.degree();
   if (delta > 1) {
       C = LazardSe(S[1], S[0], s);
    S.insert(S.begin(), C);
   }
   else { C = B; }
   if (B.degree() == 0)
       break;
   B = DucosSem(A, B, C, s);
   A = C;
   s = A.leadingCoefficient();
  }

  if (S.at(0).degree() > 0) {
   S.insert(S.begin(), B);
  }
  if (filled) {
   std::cerr << "filling chain..." << std::endl;
   fillChain(S);
  }
  return S;
 }






 inline std::vector<SparseUnivariatePolynomial<Ring> > monomialBasisSubresultantChain(const SparseUnivariatePolynomial<Ring>& q) {
  std::vector< SparseUnivariatePolynomial<Ring> > s = this->subresultantChain(q);
  SparseUnivariatePolynomial<Ring> sup;
  int delta,n;
  for (int i=s.size()-2; i>0; --i) {
   delta = s.at(i).degree() - s.at(i-1).degree();
   if (delta > 1) {
    if (i == 1 && s.at(i-1).isZero())
     n = delta-1;
    else
     n = delta-2;
    for (int j=0; j<n; j++)
     s.insert(s.begin()+i-1,sup);
   }
  }
  return s;
# 1910 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 }
# 1920 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
 inline SparseUnivariatePolynomial<Ring> resultant (const SparseUnivariatePolynomial<Ring>& q) {
  std::vector< SparseUnivariatePolynomial<Ring> > s = subresultantChain(q);
  return s[0];
 }






 inline SparseUnivariatePolynomial<Ring> gcd (const SparseUnivariatePolynomial<Ring>& q) const {
  if (isZero()) { return q; }
  if (q.isZero()) { return *this; }
  if (name != q.name) {
   std::cout << "BPAS: error, trying to compute GCD between Ring[" << name << "] and Ring[" << q.name << "]." << std::endl;
   exit(1);
  }

  SparseUnivariatePolynomial<Ring> a(*this), b(q);
  if (a.degree() == 0 || b.degree() == 0) {
   a.one();
   return a;
  }

  SparseUnivariatePolynomial<Ring> r;
  r.name = name;


  Ring rng;
# 1957 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
   Ring ca, cb, cr;
   ca = a.content();
   a /= ca;
   cb = b.content();
   b /= cb;
   std::vector< SparseUnivariatePolynomial<Ring> > R = a.subresultantChain(b);

   r.setCoefficient(0, ca.gcd(cb));

   int n = R.size();
   bool isZero = 0;
   if (n) {
    isZero = 1;
    for (int i = 0; i < n; ++i) {
     if (!R[i].isZero()) {
      cr = R[i].content();
      R[i] /= cr;
      r *= R[i];
      isZero = 0;
      break;
     }
    }
   }
   if (isZero) {
    if (a.degree() <= b.degree()) { r *= a; }
    else { r *= b; }
   }

  return r;
 }






 inline Factors<SparseUnivariatePolynomial<Ring>> squareFree() const {
  std::vector< SparseUnivariatePolynomial<Ring> > sf;
  int d = terms.size()-1;
  if (!terms[d].exp)
   sf.push_back(*this);
  else if (terms[d].exp == 1) {
   SparseUnivariatePolynomial<Ring> t;
   t.name = name;
   t += terms[d].coef;
   sf.push_back(t);
   t = *this / terms[d].coef;
   sf.push_back(t);
  }
  else {
   SparseUnivariatePolynomial<Ring> a (*this), b(*this);
   b.differentiate(1);
   SparseUnivariatePolynomial<Ring> g = a.gcd(b);
   g /= g.content();
   SparseUnivariatePolynomial<Ring> x = a / g;
   SparseUnivariatePolynomial<Ring> y = b / g;
   SparseUnivariatePolynomial<Ring> z = -x;
   z.differentiate(1);
   z += y;

   while (!z.isZero()) {
    g = x.gcd(z);
    g /= g.content();
    sf.push_back(g);
    x /= g;
    y = z / g;
    z = -x;
    z.differentiate(1);
    z += y;
   }
   sf.push_back(x);

   Ring e;
   e.one();
   for (int i = 0; i < sf.size(); ++i) {
    e *= sf[i].leadingCoefficient();
    sf[i] /= sf[i].leadingCoefficient();
   }
   SparseUnivariatePolynomial<Ring> t;
   t.name = name;
   t += e;
   sf.insert(sf.begin(), t);
  }

  Factors<SparseUnivariatePolynomial<Ring>> f;
  f.setRingElement(sf[0]);
  for (int i = 1; i < sf.size(); ++i) {
   f.addFactor(sf[i], i);
  }

  return f;
 }







 inline void print (std::ostream &out) const {
  int n = terms.size();
  if (!n) { out << "0"; }
  for (int i = 0; i < n; ++i) {
   if (this->terms[i].exp) {
    if (this->terms[i].coef.isNegativeOne())
     out << "-";
    else if (i && this->terms[i].coef.isConstant() >= 0)
     out << "+";
    if (!this->terms[i].coef.isConstant())
     out << "(" << this->terms[i].coef << ")*";
    else if (!this->terms[i].coef.isOne() && !this->terms[i].coef.isNegativeOne())
     out << this->terms[i].coef << "*";
    out << this->name;
    if (this->terms[i].exp > 1)
     out << "^" << this->terms[i].exp;
   }
   else {
    if (this->terms[i].coef.isConstant()) { out << this->terms[i].coef; }
    else { out << "(" << this->terms[i].coef << ")"; }
   }
  }
 }

 inline ExpressionTree convertToExpressionTree() const {

  std::cerr << "BPAS ERROR: SMP<Ring>::convertToExpressionTree NOT YET IMPLEMENTED" << std::endl;
  return ExpressionTree();
 }

 inline DenseUnivariateRationalPolynomial convertToDUQP() {
  bool isDense = 1;
  int k = 0, n = terms.size(), d = 0;
  if (n) { d = terms[n-1].exp; }
  DenseUnivariateRationalPolynomial res(d+1);
  res.setVariableName(name);
  for (int i = 0; i <= d; ++i) {
   if (k < n) {
    if (!terms[k].coef.isConstant()) {
     isDense = 0;
     break;
    }
    else if (terms[k].exp == i) {
     res.setCoefficient(i, RationalNumber(terms[k].coef));
     k++;
    }
   }
  }
  if (!isDense) { res.zero(); }
  return res;
 }

 inline DenseUnivariateIntegerPolynomial convertToDUZP() {
  bool isDense = 1;
  int k = 0, n = terms.size(), d = 0;
  if (n) { d = terms[n-1].exp; }
  DenseUnivariateIntegerPolynomial res(d+1);
  res.setVariableName(name);
  for (int i = 0; i <= d; ++i) {
   if (k < n) {
    if (!terms[k].coef.isConstant()) {
     isDense = 0;
     break;
    }
    else if (terms[k].exp == i) {
     res.setCoefficient(i, Integer(terms[k].coef));
     k++;
    }
   }
  }
  if (!isDense) { res.zero(); }
  return res;
 }
};
# 2140 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RingPolynomial/upolynomial.h"
static SparseUnivariatePolynomial<RationalNumber> randomSUPQPolynomial(int n, double sparsity, unsigned long int coefBound){
 int k;
 mpq_t randVal;
 rand_mpq_t(coefBound,1,randVal);
 mpq_class coef(randVal);
 SparseUnivariatePolynomial<RationalNumber> P;
 P.setCoefficient(n, coef);
 int nTerms = ceil(sparsity*n);
 int index;
 for(int i = 0; i < nTerms; i++) {

  index = rand() % n;
  rand_mpq_t(coefBound,1,randVal);
  coef = mpq_class(randVal);
  P.setCoefficient(index, coef);
 }

 return P;
}
# 8 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/mrpolynomial.h" 1
# 9 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp" 1







# 1 "/usr/include/c++/7/iomanip" 1 3
# 36 "/usr/include/c++/7/iomanip" 3
       
# 37 "/usr/include/c++/7/iomanip" 3
# 45 "/usr/include/c++/7/iomanip" 3
# 1 "/usr/include/c++/7/bits/quoted_string.h" 1 3
# 33 "/usr/include/c++/7/bits/quoted_string.h" 3
       
# 34 "/usr/include/c++/7/bits/quoted_string.h" 3







# 40 "/usr/include/c++/7/bits/quoted_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace __detail {
 




    template<typename _String, typename _CharT>
      struct _Quoted_string
      {
 static_assert(is_reference<_String>::value
     || is_pointer<_String>::value,
        "String type must be pointer or reference");

 _Quoted_string(_String __str, _CharT __del, _CharT __esc)
 : _M_string(__str), _M_delim{__del}, _M_escape{__esc}
 { }

 _Quoted_string&
 operator=(_Quoted_string&) = delete;

 _String _M_string;
 _CharT _M_delim;
 _CharT _M_escape;
      };







    template<typename _CharT, typename _Traits>
      std::basic_ostream<_CharT, _Traits>&
      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
   const _Quoted_string<const _CharT*, _CharT>& __str)
      {
 std::basic_ostringstream<_CharT, _Traits> __ostr;
 __ostr << __str._M_delim;
 for (const _CharT* __c = __str._M_string; *__c; ++__c)
   {
     if (*__c == __str._M_delim || *__c == __str._M_escape)
       __ostr << __str._M_escape;
     __ostr << *__c;
   }
 __ostr << __str._M_delim;

 return __os << __ostr.str();
      }







    template<typename _CharT, typename _Traits, typename _String>
      std::basic_ostream<_CharT, _Traits>&
      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
   const _Quoted_string<_String, _CharT>& __str)
      {
 std::basic_ostringstream<_CharT, _Traits> __ostr;
 __ostr << __str._M_delim;
 for (auto& __c : __str._M_string)
   {
     if (__c == __str._M_delim || __c == __str._M_escape)
       __ostr << __str._M_escape;
     __ostr << __c;
   }
 __ostr << __str._M_delim;

 return __os << __ostr.str();
      }





    template<typename _CharT, typename _Traits, typename _Alloc>
      std::basic_istream<_CharT, _Traits>&
      operator>>(std::basic_istream<_CharT, _Traits>& __is,
   const _Quoted_string<basic_string<_CharT, _Traits, _Alloc>&,
          _CharT>& __str)
      {
 _CharT __c;
 __is >> __c;
 if (!__is.good())
   return __is;
 if (__c != __str._M_delim)
   {
     __is.unget();
     __is >> __str._M_string;
     return __is;
   }
 __str._M_string.clear();
 std::ios_base::fmtflags __flags
   = __is.flags(__is.flags() & ~std::ios_base::skipws);
 do
   {
     __is >> __c;
     if (!__is.good())
       break;
     if (__c == __str._M_escape)
       {
  __is >> __c;
  if (!__is.good())
    break;
       }
     else if (__c == __str._M_delim)
       break;
     __str._M_string += __c;
   }
 while (true);
 __is.setf(__flags);

 return __is;
      }

 
  }
}
# 46 "/usr/include/c++/7/iomanip" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{





  struct _Resetiosflags { ios_base::fmtflags _M_mask; };
# 65 "/usr/include/c++/7/iomanip" 3
  inline _Resetiosflags
  resetiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)
    {
      __is.setf(ios_base::fmtflags(0), __f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
    {
      __os.setf(ios_base::fmtflags(0), __f._M_mask);
      return __os;
    }


  struct _Setiosflags { ios_base::fmtflags _M_mask; };
# 95 "/usr/include/c++/7/iomanip" 3
  inline _Setiosflags
  setiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)
    {
      __is.setf(__f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
    {
      __os.setf(__f._M_mask);
      return __os;
    }


  struct _Setbase { int _M_base; };
# 126 "/usr/include/c++/7/iomanip" 3
  inline _Setbase
  setbase(int __base)
  { return { __base }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)
    {
      __is.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
    {
      __os.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __os;
    }


  template<typename _CharT>
    struct _Setfill { _CharT _M_c; };
# 163 "/usr/include/c++/7/iomanip" 3
  template<typename _CharT>
    inline _Setfill<_CharT>
    setfill(_CharT __c)
    { return { __c }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)
    {
      __is.fill(__f._M_c);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
    {
      __os.fill(__f._M_c);
      return __os;
    }


  struct _Setprecision { int _M_n; };
# 194 "/usr/include/c++/7/iomanip" 3
  inline _Setprecision
  setprecision(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)
    {
      __is.precision(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
    {
      __os.precision(__f._M_n);
      return __os;
    }


  struct _Setw { int _M_n; };
# 224 "/usr/include/c++/7/iomanip" 3
  inline _Setw
  setw(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)
    {
      __is.width(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
    {
      __os.width(__f._M_n);
      return __os;
    }



  template<typename _MoneyT>
    struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };
# 257 "/usr/include/c++/7/iomanip" 3
  template<typename _MoneyT>
    inline _Get_money<_MoneyT>
    get_money(_MoneyT& __mon, bool __intl = false)
    { return { __mon, __intl }; }

  template<typename _CharT, typename _Traits, typename _MoneyT>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_money<_MoneyT> __f)
    {
      typename basic_istream<_CharT, _Traits>::sentry __cerb(__is, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       typedef istreambuf_iterator<_CharT, _Traits> _Iter;
       typedef money_get<_CharT, _Iter> _MoneyGet;

       const _MoneyGet& __mg = use_facet<_MoneyGet>(__is.getloc());
       __mg.get(_Iter(__is.rdbuf()), _Iter(), __f._M_intl,
         __is, __err, __f._M_mon);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __is._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __is._M_setstate(ios_base::badbit); }
   if (__err)
     __is.setstate(__err);
 }
      return __is;
    }


  template<typename _MoneyT>
    struct _Put_money { const _MoneyT& _M_mon; bool _M_intl; };
# 304 "/usr/include/c++/7/iomanip" 3
  template<typename _MoneyT>
    inline _Put_money<_MoneyT>
    put_money(const _MoneyT& __mon, bool __intl = false)
    { return { __mon, __intl }; }

  template<typename _CharT, typename _Traits, typename _MoneyT>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
    {
      typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       typedef ostreambuf_iterator<_CharT, _Traits> _Iter;
       typedef money_put<_CharT, _Iter> _MoneyPut;

       const _MoneyPut& __mp = use_facet<_MoneyPut>(__os.getloc());
       if (__mp.put(_Iter(__os.rdbuf()), __f._M_intl, __os,
      __os.fill(), __f._M_mon).failed())
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __os._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __os._M_setstate(ios_base::badbit); }
   if (__err)
     __os.setstate(__err);
 }
      return __os;
    }

  template<typename _CharT>
    struct _Put_time
    {
      const std::tm* _M_tmb;
      const _CharT* _M_fmt;
    };
# 356 "/usr/include/c++/7/iomanip" 3
  template<typename _CharT>
    inline _Put_time<_CharT>
    put_time(const std::tm* __tmb, const _CharT* __fmt)
    { return { __tmb, __fmt }; }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
    {
      typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);
      if (__cerb)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              typedef ostreambuf_iterator<_CharT, _Traits> _Iter;
              typedef time_put<_CharT, _Iter> _TimePut;

              const _CharT* const __fmt_end = __f._M_fmt +
                _Traits::length(__f._M_fmt);

              const _TimePut& __mp = use_facet<_TimePut>(__os.getloc());
              if (__mp.put(_Iter(__os.rdbuf()), __os, __os.fill(),
                           __f._M_tmb, __f._M_fmt, __fmt_end).failed())
                __err |= ios_base::badbit;
            }
          catch(__cxxabiv1::__forced_unwind&)
            {
              __os._M_setstate(ios_base::badbit);
              throw;
            }
          catch(...)
            { __os._M_setstate(ios_base::badbit); }
          if (__err)
            __os.setstate(__err);
        }
      return __os;
    }

  template<typename _CharT>
    struct _Get_time
    {
      std::tm* _M_tmb;
      const _CharT* _M_fmt;
    };
# 411 "/usr/include/c++/7/iomanip" 3
  template<typename _CharT>
    inline _Get_time<_CharT>
    get_time(std::tm* __tmb, const _CharT* __fmt)
    { return { __tmb, __fmt }; }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_time<_CharT> __f)
    {
      typename basic_istream<_CharT, _Traits>::sentry __cerb(__is, false);
      if (__cerb)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              typedef istreambuf_iterator<_CharT, _Traits> _Iter;
              typedef time_get<_CharT, _Iter> _TimeGet;

              const _CharT* const __fmt_end = __f._M_fmt +
                _Traits::length(__f._M_fmt);

              const _TimeGet& __mg = use_facet<_TimeGet>(__is.getloc());
              __mg.get(_Iter(__is.rdbuf()), _Iter(), __is,
                       __err, __f._M_tmb, __f._M_fmt, __fmt_end);
            }
          catch(__cxxabiv1::__forced_unwind&)
            {
              __is._M_setstate(ios_base::badbit);
              throw;
            }
          catch(...)
            { __is._M_setstate(ios_base::badbit); }
          if (__err)
            __is.setstate(__err);
        }
      return __is;
    }
# 459 "/usr/include/c++/7/iomanip" 3
  template<typename _CharT>
    inline auto
    quoted(const _CharT* __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<const _CharT*, _CharT>(__string, __delim,
            __escape);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline auto
    quoted(const basic_string<_CharT, _Traits, _Alloc>& __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<
   const basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
    __string, __delim, __escape);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline auto
    quoted(basic_string<_CharT, _Traits, _Alloc>& __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<
   basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
    __string, __delim, __escape);
    }
# 496 "/usr/include/c++/7/iomanip" 3
  extern template ostream& operator<<(ostream&, _Setfill<char>);
  extern template ostream& operator<<(ostream&, _Setiosflags);
  extern template ostream& operator<<(ostream&, _Resetiosflags);
  extern template ostream& operator<<(ostream&, _Setbase);
  extern template ostream& operator<<(ostream&, _Setprecision);
  extern template ostream& operator<<(ostream&, _Setw);
  extern template istream& operator>>(istream&, _Setfill<char>);
  extern template istream& operator>>(istream&, _Setiosflags);
  extern template istream& operator>>(istream&, _Resetiosflags);
  extern template istream& operator>>(istream&, _Setbase);
  extern template istream& operator>>(istream&, _Setprecision);
  extern template istream& operator>>(istream&, _Setw);


  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);
  extern template wostream& operator<<(wostream&, _Setiosflags);
  extern template wostream& operator<<(wostream&, _Resetiosflags);
  extern template wostream& operator<<(wostream&, _Setbase);
  extern template wostream& operator<<(wostream&, _Setprecision);
  extern template wostream& operator<<(wostream&, _Setw);
  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);
  extern template wistream& operator>>(wistream&, _Setiosflags);
  extern template wistream& operator>>(wistream&, _Resetiosflags);
  extern template wistream& operator>>(wistream&, _Setbase);
  extern template wistream& operator>>(wistream&, _Setprecision);
  extern template wistream& operator>>(wistream&, _Setw);




}
# 9 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp" 2


# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 1
# 20 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"

# 20 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
extern "C" {


# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 24 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 2




# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 1





# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 7 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 2


typedef int degree_t;

typedef long long unsigned int degrees_t;

typedef int cmpExp_t;
# 31 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
static inline cmpExp_t compareExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, int nvar) {
 if (nvar == 0) {
  return 0;
 }
 if (degs_a == 0 || degs_b == 0) {
  fprintf(
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 36 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "compareExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 degree_t diff = a[0] - b[0];
 int i = 1;
 while (diff == 0 && i < nvar) {
  diff = a[i] - b[i];
  ++i;
 }
 return diff;
}



static inline cmpExp_t isLessExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, int nvar) {
 if (nvar == 0) {
  return 0;
 }
 if (degs_a == 0 || degs_b == 0) {
  fprintf(
# 58 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 58 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "isLessExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 for (int k = 0; k < nvar; ++k) {
  if (a[k] < b[k]) {
   return 1;
  }
  if (a[k] > b[k]) {
   return 0;
  }
 }

 return 0;
}



static inline cmpExp_t isEqualExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, int nvar) {
 if (nvar == 0) {
  return 1;
 }
 if (degs_a == 0 || degs_b == 0) {
  fprintf(
# 83 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 83 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "isLessExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 for (int k = 0; k < nvar; ++k) {
  if (a[k] != b[k]) {
   return 0;
  }
 }

 return 1;
}



static inline cmpExp_t isGreaterExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, int nvar) {
 if (nvar == 0) {
  return 0;
 }
 if (degs_a == 0 || degs_b == 0) {
  fprintf(
# 105 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 105 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "isGreaterExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 for (int k = 0; k < nvar; ++k) {
  if (a[k] > b[k]) {
   return 1;
  }
  if (a[k] < b[k]) {
   return 0;
  }
 }

 return 0;
}







static inline cmpExp_t isZeroExponentVector_unpk(degrees_t degs, int nvar) {
 if (nvar == 0) {
  return 1;
 }
 if (degs == 0) {
  fprintf(
# 134 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 134 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "isZeroExponentVector_unpk: exponent pointer is NULL!\n");
  free((int*)-1);
  exit(1);
 }
 degree_t* degs_unpk = (degree_t*) degs;
 for (int k = 0; k < nvar; ++k) {
  if (degs_unpk[k] > 0) {
   return 0;
  }
 }
 return 1;
}

static inline void setExponentVector_unpk(degrees_t dest, degrees_t src, int nvar) {
 if (nvar == 0) {
  return;
 }
 degree_t* dest_p = (degree_t*) dest;
 degree_t* src_p = (degree_t*) src;
 memcpy(dest_p, src_p, nvar*sizeof(degree_t));
}







static inline void addExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, degrees_t degs_c, int nvar) {
 if (nvar == 0) {
  return;
 }
 if (degs_a == 0 || degs_b == 0 || degs_c == 0) {
  fprintf(
# 167 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 167 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "addExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 degree_t* c = (degree_t*) degs_c;
 for (int k = 0; k < nvar; ++k) {
  c[k] = a[k] + b[k];
 }
}
# 189 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
static inline void subtractExponentVectors_unpk(degrees_t degs_a, degrees_t degs_b, degrees_t degs_c, int nvar) {
 if (nvar == 0) {
  return;
 }
 if (degs_a == 0 || degs_b == 0 || degs_c == 0) {
  fprintf(
# 194 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
         stderr
# 194 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
               , "subtractExponentVectors_unpk: exponent pointer is NULL!\n");
  exit(1);
 }

 degree_t* a = (degree_t*) degs_a;
 degree_t* b = (degree_t*) degs_b;
 degree_t* c = (degree_t*) degs_c;
 for (int k = 0; k < nvar; ++k) {
  c[k] = a[k] - b[k];
 }
}


static degrees_t* getMaxExpArray (int nvar);
static degrees_t* getExpMaskArray(int nvar);
static int* getExpOffsetArray(int nvar);

static inline int isPackableExponentVector(degree_t* degs, int nvar) {
 degrees_t* maxExps = getMaxExpArray(nvar);
 int ret = 1;
 for (int k = 0; k < nvar; ++k) {
  if ((degrees_t) degs[k] > maxExps[k]) {
   ret = 0;
   break;
  }
 }
 free(maxExps);
 return ret;
}

static inline void unpackExponentVector(degrees_t packedExp, degree_t* unpackedExp, int nvar) {
 degrees_t* masks = getExpMaskArray(nvar);
 int* sizes = getExpOffsetArray(nvar);

 for (int k = 0; k < nvar; ++k) {
  unpackedExp[k] = ( ((packedExp) & (masks[k])) >> (sizes[k]));
 }

 free(masks);
 free(sizes);
}
# 1983 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
typedef int (*DivTest_ptr)(degrees_t, degrees_t);


static inline int monomialDivideTest_1(degrees_t adegs, degrees_t bdegs) {
 return adegs >= bdegs;
}


static inline int monomialDivideTest_2(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xffffffff00000000) < (bdegs & 0xffffffff00000000) ||
      (adegs & 0x00000000ffffffff) < (bdegs & 0x00000000ffffffff) );
}


static inline int monomialDivideTest_3(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xffff000000000000) < (bdegs & 0xffff000000000000) ||
      (adegs & 0x0000fffff0000000) < (bdegs & 0x0000fffff0000000) ||
      (adegs & 0x000000000fffffff) < (bdegs & 0x000000000fffffff) );
}


static inline int monomialDivideTest_4(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xffc0000000000000) < (bdegs & 0xffc0000000000000) ||
      (adegs & 0x003ffc0000000000) < (bdegs & 0x003ffc0000000000) ||
      (adegs & 0x000003ffff000000) < (bdegs & 0x000003ffff000000) ||
      (adegs & 0x0000000000ffffff) < (bdegs & 0x0000000000ffffff) );
}


static inline int monomialDivideTest_5(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xff00000000000000) < (bdegs & 0xff00000000000000) ||
      (adegs & 0x00ffc00000000000) < (bdegs & 0x00ffc00000000000) ||
      (adegs & 0x00003ffc00000000) < (bdegs & 0x00003ffc00000000) ||
      (adegs & 0x00000003fffc0000) < (bdegs & 0x00000003fffc0000) ||
      (adegs & 0x000000000003ffff) < (bdegs & 0x000000000003ffff) );
}


static inline int monomialDivideTest_6(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xff80000000000000) < (bdegs & 0xff80000000000000) ||
      (adegs & 0x007fe00000000000) < (bdegs & 0x007fe00000000000) ||
      (adegs & 0x00001ff800000000) < (bdegs & 0x00001ff800000000) ||
      (adegs & 0x00000007ff000000) < (bdegs & 0x00000007ff000000) ||
      (adegs & 0x0000000000fff000) < (bdegs & 0x0000000000fff000) ||
      (adegs & 0x0000000000000fff) < (bdegs & 0x0000000000000fff) );
}


static inline int monomialDivideTest_7(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xff00000000000000) < (bdegs & 0xff00000000000000) ||
      (adegs & 0x00ff000000000000) < (bdegs & 0x00ff000000000000) ||
      (adegs & 0x0000ff0000000000) < (bdegs & 0x0000ff0000000000) ||
      (adegs & 0x000000ff80000000) < (bdegs & 0x000000ff80000000) ||
      (adegs & 0x000000007fe00000) < (bdegs & 0x000000007fe00000) ||
      (adegs & 0x00000000001ff800) < (bdegs & 0x00000000001ff800) ||
      (adegs & 0x00000000000007ff) < (bdegs & 0x00000000000007ff) );
}


static inline int monomialDivideTest_8(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xfe00000000000000) < (bdegs & 0xfe00000000000000) ||
      (adegs & 0x01fc000000000000) < (bdegs & 0x01fc000000000000) ||
      (adegs & 0x0003f80000000000) < (bdegs & 0x0003f80000000000) ||
      (adegs & 0x000007f800000000) < (bdegs & 0x000007f800000000) ||
      (adegs & 0x00000007f8000000) < (bdegs & 0x00000007f8000000) ||
      (adegs & 0x0000000007fc0000) < (bdegs & 0x0000000007fc0000) ||
      (adegs & 0x000000000003fe00) < (bdegs & 0x000000000003fe00) ||
      (adegs & 0x00000000000001ff) < (bdegs & 0x00000000000001ff) );
}


static inline int monomialDivideTest_9(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xfe00000000000000) < (bdegs & 0xfe00000000000000) ||
      (adegs & 0x01fc000000000000) < (bdegs & 0x01fc000000000000) ||
      (adegs & 0x0003f80000000000) < (bdegs & 0x0003f80000000000) ||
      (adegs & 0x000007f000000000) < (bdegs & 0x000007f000000000) ||
      (adegs & 0x0000000fe0000000) < (bdegs & 0x0000000fe0000000) ||
      (adegs & 0x000000001fc00000) < (bdegs & 0x000000001fc00000) ||
      (adegs & 0x00000000003f8000) < (bdegs & 0x00000000003f8000) ||
      (adegs & 0x0000000000007f00) < (bdegs & 0x0000000000007f00) ||
      (adegs & 0x00000000000000ff) < (bdegs & 0x00000000000000ff) );
}


static inline int monomialDivideTest_10(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xfc00000000000000) < (bdegs & 0xfc00000000000000) ||
      (adegs & 0x03f0000000000000) < (bdegs & 0x03f0000000000000) ||
      (adegs & 0x000fc00000000000) < (bdegs & 0x000fc00000000000) ||
      (adegs & 0x00003f0000000000) < (bdegs & 0x00003f0000000000) ||
      (adegs & 0x000000fc00000000) < (bdegs & 0x000000fc00000000) ||
      (adegs & 0x00000003f0000000) < (bdegs & 0x00000003f0000000) ||
      (adegs & 0x000000000fe00000) < (bdegs & 0x000000000fe00000) ||
      (adegs & 0x00000000001fc000) < (bdegs & 0x00000000001fc000) ||
      (adegs & 0x0000000000003f80) < (bdegs & 0x0000000000003f80) ||
      (adegs & 0x000000000000007f) < (bdegs & 0x000000000000007f) );
}


static inline int monomialDivideTest_11(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf800000000000000) < (bdegs & 0xf800000000000000) ||
      (adegs & 0x07c0000000000000) < (bdegs & 0x07c0000000000000) ||
      (adegs & 0x003f000000000000) < (bdegs & 0x003f000000000000) ||
      (adegs & 0x0000fc0000000000) < (bdegs & 0x0000fc0000000000) ||
      (adegs & 0x000003f000000000) < (bdegs & 0x000003f000000000) ||
      (adegs & 0x0000000fc0000000) < (bdegs & 0x0000000fc0000000) ||
      (adegs & 0x000000003f000000) < (bdegs & 0x000000003f000000) ||
      (adegs & 0x0000000000fc0000) < (bdegs & 0x0000000000fc0000) ||
      (adegs & 0x000000000003f000) < (bdegs & 0x000000000003f000) ||
      (adegs & 0x0000000000000fc0) < (bdegs & 0x0000000000000fc0) ||
      (adegs & 0x000000000000003f) < (bdegs & 0x000000000000003f) );
}


static inline int monomialDivideTest_12(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf800000000000000) < (bdegs & 0xf800000000000000) ||
      (adegs & 0x07c0000000000000) < (bdegs & 0x07c0000000000000) ||
      (adegs & 0x003e000000000000) < (bdegs & 0x003e000000000000) ||
      (adegs & 0x0001f00000000000) < (bdegs & 0x0001f00000000000) ||
      (adegs & 0x00000f8000000000) < (bdegs & 0x00000f8000000000) ||
      (adegs & 0x0000007c00000000) < (bdegs & 0x0000007c00000000) ||
      (adegs & 0x00000003e0000000) < (bdegs & 0x00000003e0000000) ||
      (adegs & 0x000000001f000000) < (bdegs & 0x000000001f000000) ||
      (adegs & 0x0000000000fc0000) < (bdegs & 0x0000000000fc0000) ||
      (adegs & 0x000000000003f000) < (bdegs & 0x000000000003f000) ||
      (adegs & 0x0000000000000fc0) < (bdegs & 0x0000000000000fc0) ||
      (adegs & 0x000000000000003f) < (bdegs & 0x000000000000003f) );
}


static inline int monomialDivideTest_13(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf000000000000000) < (bdegs & 0xf000000000000000) ||
      (adegs & 0x0f80000000000000) < (bdegs & 0x0f80000000000000) ||
      (adegs & 0x007c000000000000) < (bdegs & 0x007c000000000000) ||
      (adegs & 0x0003e00000000000) < (bdegs & 0x0003e00000000000) ||
      (adegs & 0x00001f0000000000) < (bdegs & 0x00001f0000000000) ||
      (adegs & 0x000000f800000000) < (bdegs & 0x000000f800000000) ||
      (adegs & 0x00000007c0000000) < (bdegs & 0x00000007c0000000) ||
      (adegs & 0x000000003e000000) < (bdegs & 0x000000003e000000) ||
      (adegs & 0x0000000001f00000) < (bdegs & 0x0000000001f00000) ||
      (adegs & 0x00000000000f8000) < (bdegs & 0x00000000000f8000) ||
      (adegs & 0x0000000000007c00) < (bdegs & 0x0000000000007c00) ||
      (adegs & 0x00000000000003e0) < (bdegs & 0x00000000000003e0) ||
      (adegs & 0x000000000000001f) < (bdegs & 0x000000000000001f) );
}


static inline int monomialDivideTest_14(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf000000000000000) < (bdegs & 0xf000000000000000) ||
      (adegs & 0x0f00000000000000) < (bdegs & 0x0f00000000000000) ||
      (adegs & 0x00f0000000000000) < (bdegs & 0x00f0000000000000) ||
      (adegs & 0x000f000000000000) < (bdegs & 0x000f000000000000) ||
      (adegs & 0x0000f00000000000) < (bdegs & 0x0000f00000000000) ||
      (adegs & 0x00000f0000000000) < (bdegs & 0x00000f0000000000) ||
      (adegs & 0x000000f800000000) < (bdegs & 0x000000f800000000) ||
      (adegs & 0x00000007c0000000) < (bdegs & 0x00000007c0000000) ||
      (adegs & 0x000000003e000000) < (bdegs & 0x000000003e000000) ||
      (adegs & 0x0000000001f00000) < (bdegs & 0x0000000001f00000) ||
      (adegs & 0x00000000000f8000) < (bdegs & 0x00000000000f8000) ||
      (adegs & 0x0000000000007c00) < (bdegs & 0x0000000000007c00) ||
      (adegs & 0x00000000000003e0) < (bdegs & 0x00000000000003e0) ||
      (adegs & 0x000000000000001f) < (bdegs & 0x000000000000001f) );
}


static inline int monomialDivideTest_15(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf000000000000000) < (bdegs & 0xf000000000000000) ||
      (adegs & 0x0f00000000000000) < (bdegs & 0x0f00000000000000) ||
      (adegs & 0x00f0000000000000) < (bdegs & 0x00f0000000000000) ||
      (adegs & 0x000f000000000000) < (bdegs & 0x000f000000000000) ||
      (adegs & 0x0000f00000000000) < (bdegs & 0x0000f00000000000) ||
      (adegs & 0x00000f0000000000) < (bdegs & 0x00000f0000000000) ||
      (adegs & 0x000000f000000000) < (bdegs & 0x000000f000000000) ||
      (adegs & 0x0000000f00000000) < (bdegs & 0x0000000f00000000) ||
      (adegs & 0x00000000f0000000) < (bdegs & 0x00000000f0000000) ||
      (adegs & 0x000000000f000000) < (bdegs & 0x000000000f000000) ||
      (adegs & 0x0000000000f00000) < (bdegs & 0x0000000000f00000) ||
      (adegs & 0x00000000000f8000) < (bdegs & 0x00000000000f8000) ||
      (adegs & 0x0000000000007c00) < (bdegs & 0x0000000000007c00) ||
      (adegs & 0x00000000000003e0) < (bdegs & 0x00000000000003e0) ||
      (adegs & 0x000000000000001f) < (bdegs & 0x000000000000001f) );
}


static inline int monomialDivideTest_16(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xf000000000000000) < (bdegs & 0xf000000000000000) ||
      (adegs & 0x0f00000000000000) < (bdegs & 0x0f00000000000000) ||
      (adegs & 0x00f0000000000000) < (bdegs & 0x00f0000000000000) ||
      (adegs & 0x000f000000000000) < (bdegs & 0x000f000000000000) ||
      (adegs & 0x0000f00000000000) < (bdegs & 0x0000f00000000000) ||
      (adegs & 0x00000f0000000000) < (bdegs & 0x00000f0000000000) ||
      (adegs & 0x000000f000000000) < (bdegs & 0x000000f000000000) ||
      (adegs & 0x0000000f00000000) < (bdegs & 0x0000000f00000000) ||
      (adegs & 0x00000000f0000000) < (bdegs & 0x00000000f0000000) ||
      (adegs & 0x000000000f000000) < (bdegs & 0x000000000f000000) ||
      (adegs & 0x0000000000f00000) < (bdegs & 0x0000000000f00000) ||
      (adegs & 0x00000000000f0000) < (bdegs & 0x00000000000f0000) ||
      (adegs & 0x000000000000f000) < (bdegs & 0x000000000000f000) ||
      (adegs & 0x0000000000000f00) < (bdegs & 0x0000000000000f00) ||
      (adegs & 0x00000000000000f0) < (bdegs & 0x00000000000000f0) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_17(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xe000000000000000) < (bdegs & 0xe000000000000000) ||
      (adegs & 0x1c00000000000000) < (bdegs & 0x1c00000000000000) ||
      (adegs & 0x0380000000000000) < (bdegs & 0x0380000000000000) ||
      (adegs & 0x0070000000000000) < (bdegs & 0x0070000000000000) ||
      (adegs & 0x000f000000000000) < (bdegs & 0x000f000000000000) ||
      (adegs & 0x0000f00000000000) < (bdegs & 0x0000f00000000000) ||
      (adegs & 0x00000f0000000000) < (bdegs & 0x00000f0000000000) ||
      (adegs & 0x000000f000000000) < (bdegs & 0x000000f000000000) ||
      (adegs & 0x0000000f00000000) < (bdegs & 0x0000000f00000000) ||
      (adegs & 0x00000000f0000000) < (bdegs & 0x00000000f0000000) ||
      (adegs & 0x000000000f000000) < (bdegs & 0x000000000f000000) ||
      (adegs & 0x0000000000f00000) < (bdegs & 0x0000000000f00000) ||
      (adegs & 0x00000000000f0000) < (bdegs & 0x00000000000f0000) ||
      (adegs & 0x000000000000f000) < (bdegs & 0x000000000000f000) ||
      (adegs & 0x0000000000000f00) < (bdegs & 0x0000000000000f00) ||
      (adegs & 0x00000000000000f0) < (bdegs & 0x00000000000000f0) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_18(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xe000000000000000) < (bdegs & 0xe000000000000000) ||
      (adegs & 0x1c00000000000000) < (bdegs & 0x1c00000000000000) ||
      (adegs & 0x0380000000000000) < (bdegs & 0x0380000000000000) ||
      (adegs & 0x0070000000000000) < (bdegs & 0x0070000000000000) ||
      (adegs & 0x000e000000000000) < (bdegs & 0x000e000000000000) ||
      (adegs & 0x0001c00000000000) < (bdegs & 0x0001c00000000000) ||
      (adegs & 0x0000380000000000) < (bdegs & 0x0000380000000000) ||
      (adegs & 0x0000070000000000) < (bdegs & 0x0000070000000000) ||
      (adegs & 0x000000f000000000) < (bdegs & 0x000000f000000000) ||
      (adegs & 0x0000000f00000000) < (bdegs & 0x0000000f00000000) ||
      (adegs & 0x00000000f0000000) < (bdegs & 0x00000000f0000000) ||
      (adegs & 0x000000000f000000) < (bdegs & 0x000000000f000000) ||
      (adegs & 0x0000000000f00000) < (bdegs & 0x0000000000f00000) ||
      (adegs & 0x00000000000f0000) < (bdegs & 0x00000000000f0000) ||
      (adegs & 0x000000000000f000) < (bdegs & 0x000000000000f000) ||
      (adegs & 0x0000000000000f00) < (bdegs & 0x0000000000000f00) ||
      (adegs & 0x00000000000000f0) < (bdegs & 0x00000000000000f0) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_19(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xe000000000000000) < (bdegs & 0xe000000000000000) ||
      (adegs & 0x1c00000000000000) < (bdegs & 0x1c00000000000000) ||
      (adegs & 0x0380000000000000) < (bdegs & 0x0380000000000000) ||
      (adegs & 0x0070000000000000) < (bdegs & 0x0070000000000000) ||
      (adegs & 0x000e000000000000) < (bdegs & 0x000e000000000000) ||
      (adegs & 0x0001c00000000000) < (bdegs & 0x0001c00000000000) ||
      (adegs & 0x0000380000000000) < (bdegs & 0x0000380000000000) ||
      (adegs & 0x0000070000000000) < (bdegs & 0x0000070000000000) ||
      (adegs & 0x000000e000000000) < (bdegs & 0x000000e000000000) ||
      (adegs & 0x0000001c00000000) < (bdegs & 0x0000001c00000000) ||
      (adegs & 0x0000000380000000) < (bdegs & 0x0000000380000000) ||
      (adegs & 0x0000000070000000) < (bdegs & 0x0000000070000000) ||
      (adegs & 0x000000000f000000) < (bdegs & 0x000000000f000000) ||
      (adegs & 0x0000000000f00000) < (bdegs & 0x0000000000f00000) ||
      (adegs & 0x00000000000f0000) < (bdegs & 0x00000000000f0000) ||
      (adegs & 0x000000000000f000) < (bdegs & 0x000000000000f000) ||
      (adegs & 0x0000000000000f00) < (bdegs & 0x0000000000000f00) ||
      (adegs & 0x00000000000000f0) < (bdegs & 0x00000000000000f0) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_20(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xe000000000000000) < (bdegs & 0xe000000000000000) ||
      (adegs & 0x1c00000000000000) < (bdegs & 0x1c00000000000000) ||
      (adegs & 0x0380000000000000) < (bdegs & 0x0380000000000000) ||
      (adegs & 0x0070000000000000) < (bdegs & 0x0070000000000000) ||
      (adegs & 0x000e000000000000) < (bdegs & 0x000e000000000000) ||
      (adegs & 0x0001c00000000000) < (bdegs & 0x0001c00000000000) ||
      (adegs & 0x0000380000000000) < (bdegs & 0x0000380000000000) ||
      (adegs & 0x0000070000000000) < (bdegs & 0x0000070000000000) ||
      (adegs & 0x000000e000000000) < (bdegs & 0x000000e000000000) ||
      (adegs & 0x0000001c00000000) < (bdegs & 0x0000001c00000000) ||
      (adegs & 0x0000000380000000) < (bdegs & 0x0000000380000000) ||
      (adegs & 0x0000000070000000) < (bdegs & 0x0000000070000000) ||
      (adegs & 0x000000000e000000) < (bdegs & 0x000000000e000000) ||
      (adegs & 0x0000000001c00000) < (bdegs & 0x0000000001c00000) ||
      (adegs & 0x0000000000380000) < (bdegs & 0x0000000000380000) ||
      (adegs & 0x0000000000070000) < (bdegs & 0x0000000000070000) ||
      (adegs & 0x000000000000f000) < (bdegs & 0x000000000000f000) ||
      (adegs & 0x0000000000000f00) < (bdegs & 0x0000000000000f00) ||
      (adegs & 0x00000000000000f0) < (bdegs & 0x00000000000000f0) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_21(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xe000000000000000) < (bdegs & 0xe000000000000000) ||
      (adegs & 0x1c00000000000000) < (bdegs & 0x1c00000000000000) ||
      (adegs & 0x0380000000000000) < (bdegs & 0x0380000000000000) ||
      (adegs & 0x0070000000000000) < (bdegs & 0x0070000000000000) ||
      (adegs & 0x000e000000000000) < (bdegs & 0x000e000000000000) ||
      (adegs & 0x0001c00000000000) < (bdegs & 0x0001c00000000000) ||
      (adegs & 0x0000380000000000) < (bdegs & 0x0000380000000000) ||
      (adegs & 0x0000070000000000) < (bdegs & 0x0000070000000000) ||
      (adegs & 0x000000e000000000) < (bdegs & 0x000000e000000000) ||
      (adegs & 0x0000001c00000000) < (bdegs & 0x0000001c00000000) ||
      (adegs & 0x0000000380000000) < (bdegs & 0x0000000380000000) ||
      (adegs & 0x0000000070000000) < (bdegs & 0x0000000070000000) ||
      (adegs & 0x000000000e000000) < (bdegs & 0x000000000e000000) ||
      (adegs & 0x0000000001c00000) < (bdegs & 0x0000000001c00000) ||
      (adegs & 0x0000000000380000) < (bdegs & 0x0000000000380000) ||
      (adegs & 0x0000000000070000) < (bdegs & 0x0000000000070000) ||
      (adegs & 0x000000000000e000) < (bdegs & 0x000000000000e000) ||
      (adegs & 0x0000000000001c00) < (bdegs & 0x0000000000001c00) ||
      (adegs & 0x0000000000000380) < (bdegs & 0x0000000000000380) ||
      (adegs & 0x0000000000000070) < (bdegs & 0x0000000000000070) ||
      (adegs & 0x000000000000000f) < (bdegs & 0x000000000000000f) );
}


static inline int monomialDivideTest_22(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0e00000000000000) < (bdegs & 0x0e00000000000000) ||
      (adegs & 0x01c0000000000000) < (bdegs & 0x01c0000000000000) ||
      (adegs & 0x0038000000000000) < (bdegs & 0x0038000000000000) ||
      (adegs & 0x0007000000000000) < (bdegs & 0x0007000000000000) ||
      (adegs & 0x0000e00000000000) < (bdegs & 0x0000e00000000000) ||
      (adegs & 0x00001c0000000000) < (bdegs & 0x00001c0000000000) ||
      (adegs & 0x0000038000000000) < (bdegs & 0x0000038000000000) ||
      (adegs & 0x0000007000000000) < (bdegs & 0x0000007000000000) ||
      (adegs & 0x0000000e00000000) < (bdegs & 0x0000000e00000000) ||
      (adegs & 0x00000001c0000000) < (bdegs & 0x00000001c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_23(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0038000000000000) < (bdegs & 0x0038000000000000) ||
      (adegs & 0x0007000000000000) < (bdegs & 0x0007000000000000) ||
      (adegs & 0x0000e00000000000) < (bdegs & 0x0000e00000000000) ||
      (adegs & 0x00001c0000000000) < (bdegs & 0x00001c0000000000) ||
      (adegs & 0x0000038000000000) < (bdegs & 0x0000038000000000) ||
      (adegs & 0x0000007000000000) < (bdegs & 0x0000007000000000) ||
      (adegs & 0x0000000e00000000) < (bdegs & 0x0000000e00000000) ||
      (adegs & 0x00000001c0000000) < (bdegs & 0x00000001c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_24(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000e00000000000) < (bdegs & 0x0000e00000000000) ||
      (adegs & 0x00001c0000000000) < (bdegs & 0x00001c0000000000) ||
      (adegs & 0x0000038000000000) < (bdegs & 0x0000038000000000) ||
      (adegs & 0x0000007000000000) < (bdegs & 0x0000007000000000) ||
      (adegs & 0x0000000e00000000) < (bdegs & 0x0000000e00000000) ||
      (adegs & 0x00000001c0000000) < (bdegs & 0x00000001c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_25(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000038000000000) < (bdegs & 0x0000038000000000) ||
      (adegs & 0x0000007000000000) < (bdegs & 0x0000007000000000) ||
      (adegs & 0x0000000e00000000) < (bdegs & 0x0000000e00000000) ||
      (adegs & 0x00000001c0000000) < (bdegs & 0x00000001c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_26(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000e00000000) < (bdegs & 0x0000000e00000000) ||
      (adegs & 0x00000001c0000000) < (bdegs & 0x00000001c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_27(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000038000000) < (bdegs & 0x0000000038000000) ||
      (adegs & 0x0000000007000000) < (bdegs & 0x0000000007000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_28(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000030000000) < (bdegs & 0x0000000030000000) ||
      (adegs & 0x000000000c000000) < (bdegs & 0x000000000c000000) ||
      (adegs & 0x0000000003000000) < (bdegs & 0x0000000003000000) ||
      (adegs & 0x0000000000e00000) < (bdegs & 0x0000000000e00000) ||
      (adegs & 0x00000000001c0000) < (bdegs & 0x00000000001c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_29(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000030000000) < (bdegs & 0x0000000030000000) ||
      (adegs & 0x000000000c000000) < (bdegs & 0x000000000c000000) ||
      (adegs & 0x0000000003000000) < (bdegs & 0x0000000003000000) ||
      (adegs & 0x0000000000c00000) < (bdegs & 0x0000000000c00000) ||
      (adegs & 0x0000000000300000) < (bdegs & 0x0000000000300000) ||
      (adegs & 0x00000000000c0000) < (bdegs & 0x00000000000c0000) ||
      (adegs & 0x0000000000038000) < (bdegs & 0x0000000000038000) ||
      (adegs & 0x0000000000007000) < (bdegs & 0x0000000000007000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_30(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000030000000) < (bdegs & 0x0000000030000000) ||
      (adegs & 0x000000000c000000) < (bdegs & 0x000000000c000000) ||
      (adegs & 0x0000000003000000) < (bdegs & 0x0000000003000000) ||
      (adegs & 0x0000000000c00000) < (bdegs & 0x0000000000c00000) ||
      (adegs & 0x0000000000300000) < (bdegs & 0x0000000000300000) ||
      (adegs & 0x00000000000c0000) < (bdegs & 0x00000000000c0000) ||
      (adegs & 0x0000000000030000) < (bdegs & 0x0000000000030000) ||
      (adegs & 0x000000000000c000) < (bdegs & 0x000000000000c000) ||
      (adegs & 0x0000000000003000) < (bdegs & 0x0000000000003000) ||
      (adegs & 0x0000000000000e00) < (bdegs & 0x0000000000000e00) ||
      (adegs & 0x00000000000001c0) < (bdegs & 0x00000000000001c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_31(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000030000000) < (bdegs & 0x0000000030000000) ||
      (adegs & 0x000000000c000000) < (bdegs & 0x000000000c000000) ||
      (adegs & 0x0000000003000000) < (bdegs & 0x0000000003000000) ||
      (adegs & 0x0000000000c00000) < (bdegs & 0x0000000000c00000) ||
      (adegs & 0x0000000000300000) < (bdegs & 0x0000000000300000) ||
      (adegs & 0x00000000000c0000) < (bdegs & 0x00000000000c0000) ||
      (adegs & 0x0000000000030000) < (bdegs & 0x0000000000030000) ||
      (adegs & 0x000000000000c000) < (bdegs & 0x000000000000c000) ||
      (adegs & 0x0000000000003000) < (bdegs & 0x0000000000003000) ||
      (adegs & 0x0000000000000c00) < (bdegs & 0x0000000000000c00) ||
      (adegs & 0x0000000000000300) < (bdegs & 0x0000000000000300) ||
      (adegs & 0x00000000000000c0) < (bdegs & 0x00000000000000c0) ||
      (adegs & 0x0000000000000038) < (bdegs & 0x0000000000000038) ||
      (adegs & 0x0000000000000007) < (bdegs & 0x0000000000000007) );
}


static inline int monomialDivideTest_32(degrees_t adegs, degrees_t bdegs) {
 return !( (adegs & 0xc000000000000000) < (bdegs & 0xc000000000000000) ||
      (adegs & 0x3000000000000000) < (bdegs & 0x3000000000000000) ||
      (adegs & 0x0c00000000000000) < (bdegs & 0x0c00000000000000) ||
      (adegs & 0x0300000000000000) < (bdegs & 0x0300000000000000) ||
      (adegs & 0x00c0000000000000) < (bdegs & 0x00c0000000000000) ||
      (adegs & 0x0030000000000000) < (bdegs & 0x0030000000000000) ||
      (adegs & 0x000c000000000000) < (bdegs & 0x000c000000000000) ||
      (adegs & 0x0003000000000000) < (bdegs & 0x0003000000000000) ||
      (adegs & 0x0000c00000000000) < (bdegs & 0x0000c00000000000) ||
      (adegs & 0x0000300000000000) < (bdegs & 0x0000300000000000) ||
      (adegs & 0x00000c0000000000) < (bdegs & 0x00000c0000000000) ||
      (adegs & 0x0000030000000000) < (bdegs & 0x0000030000000000) ||
      (adegs & 0x000000c000000000) < (bdegs & 0x000000c000000000) ||
      (adegs & 0x0000003000000000) < (bdegs & 0x0000003000000000) ||
      (adegs & 0x0000000c00000000) < (bdegs & 0x0000000c00000000) ||
      (adegs & 0x0000000300000000) < (bdegs & 0x0000000300000000) ||
      (adegs & 0x00000000c0000000) < (bdegs & 0x00000000c0000000) ||
      (adegs & 0x0000000030000000) < (bdegs & 0x0000000030000000) ||
      (adegs & 0x000000000c000000) < (bdegs & 0x000000000c000000) ||
      (adegs & 0x0000000003000000) < (bdegs & 0x0000000003000000) ||
      (adegs & 0x0000000000c00000) < (bdegs & 0x0000000000c00000) ||
      (adegs & 0x0000000000300000) < (bdegs & 0x0000000000300000) ||
      (adegs & 0x00000000000c0000) < (bdegs & 0x00000000000c0000) ||
      (adegs & 0x0000000000030000) < (bdegs & 0x0000000000030000) ||
      (adegs & 0x000000000000c000) < (bdegs & 0x000000000000c000) ||
      (adegs & 0x0000000000003000) < (bdegs & 0x0000000000003000) ||
      (adegs & 0x0000000000000c00) < (bdegs & 0x0000000000000c00) ||
      (adegs & 0x0000000000000300) < (bdegs & 0x0000000000000300) ||
      (adegs & 0x00000000000000c0) < (bdegs & 0x00000000000000c0) ||
      (adegs & 0x0000000000000030) < (bdegs & 0x0000000000000030) ||
      (adegs & 0x000000000000000c) < (bdegs & 0x000000000000000c) ||
      (adegs & 0x0000000000000003) < (bdegs & 0x0000000000000003) );
}


static DivTest_ptr getMonomialDivideTestFuncPtr(int nvar) {
 switch (nvar) {
  case 1: { return monomialDivideTest_1; }
  case 2: { return monomialDivideTest_2; }
  case 3: { return monomialDivideTest_3; }
  case 4: { return monomialDivideTest_4; }
  case 5: { return monomialDivideTest_5; }
  case 6: { return monomialDivideTest_6; }
  case 7: { return monomialDivideTest_7; }
  case 8: { return monomialDivideTest_8; }
  case 9: { return monomialDivideTest_9; }
  case 10: { return monomialDivideTest_10; }
  case 11: { return monomialDivideTest_11; }
  case 12: { return monomialDivideTest_12; }
  case 13: { return monomialDivideTest_13; }
  case 14: { return monomialDivideTest_14; }
  case 15: { return monomialDivideTest_15; }
  case 16: { return monomialDivideTest_16; }
  case 17: { return monomialDivideTest_17; }
  case 18: { return monomialDivideTest_18; }
  case 19: { return monomialDivideTest_19; }
  case 20: { return monomialDivideTest_20; }
  case 21: { return monomialDivideTest_21; }
  case 22: { return monomialDivideTest_22; }
  case 23: { return monomialDivideTest_23; }
  case 24: { return monomialDivideTest_24; }
  case 25: { return monomialDivideTest_25; }
  case 26: { return monomialDivideTest_26; }
  case 27: { return monomialDivideTest_27; }
  case 28: { return monomialDivideTest_28; }
  case 29: { return monomialDivideTest_29; }
  case 30: { return monomialDivideTest_30; }
  case 31: { return monomialDivideTest_31; }
  case 32: { return monomialDivideTest_32; }
 }
 return 
# 2677 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
       __null
# 2677 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
           ;
}







static inline int monomialDivideTest_unpk(degrees_t adegs, degrees_t bdegs, int nvar) {
 degree_t* adegs_pt = (degree_t*) adegs;
 degree_t* bdegs_pt = (degree_t*) bdegs;
 for(int i = 0; i < nvar; ++i) {
  if (adegs_pt[i] < bdegs_pt[i]) {
   return 0;
  }
 }
 return 1;
}







static inline int monomialDivideTest(degrees_t adegs, degrees_t bdegs, int nvar) {
 switch (nvar) {
  case 1: {
   return adegs >= bdegs;
  }
  case 2: {
   return monomialDivideTest_2(adegs,bdegs);
  }
  case 3: {
   return monomialDivideTest_3(adegs,bdegs);
  }
  case 4: {
   return monomialDivideTest_4(adegs,bdegs);
  }
  case 5: {
   return monomialDivideTest_5(adegs,bdegs);
  }
  case 6: {
   return monomialDivideTest_6(adegs,bdegs);
  }
  case 7: {
   return monomialDivideTest_7(adegs,bdegs);
  }
  case 8: {
   return monomialDivideTest_8(adegs,bdegs);
  }
  case 9: {
   return monomialDivideTest_9(adegs,bdegs);
  }
  case 10: {
   return monomialDivideTest_10(adegs,bdegs);
  }
  case 11: {
   return monomialDivideTest_11(adegs,bdegs);
  }
  case 12: {
   return monomialDivideTest_12(adegs,bdegs);
  }
  case 13: {
   return monomialDivideTest_13(adegs,bdegs);
  }
  case 14: {
   return monomialDivideTest_14(adegs,bdegs);
  }
  case 15: {
   return monomialDivideTest_15(adegs,bdegs);
  }
  case 16: {
   return monomialDivideTest_16(adegs,bdegs);
  }
  case 17: {
   return monomialDivideTest_17(adegs,bdegs);
  }
  case 18: {
   return monomialDivideTest_18(adegs,bdegs);
  }
  case 19: {
   return monomialDivideTest_19(adegs,bdegs);
  }
  case 20: {
   return monomialDivideTest_20(adegs,bdegs);
  }
  case 21: {
   return monomialDivideTest_21(adegs,bdegs);
  }
  case 22: {
   return monomialDivideTest_22(adegs,bdegs);
  }
  case 23: {
   return monomialDivideTest_23(adegs,bdegs);
  }
  case 24: {
   return monomialDivideTest_24(adegs,bdegs);
  }
  case 25: {
   return monomialDivideTest_25(adegs,bdegs);
  }
  case 26: {
   return monomialDivideTest_26(adegs,bdegs);
  }
  case 27: {
   return monomialDivideTest_27(adegs,bdegs);
  }
  case 28: {
   return monomialDivideTest_28(adegs,bdegs);
  }
  case 29: {
   return monomialDivideTest_29(adegs,bdegs);
  }
  case 30: {
   return monomialDivideTest_30(adegs,bdegs);
  }
  case 31: {
   return monomialDivideTest_31(adegs,bdegs);
  }
  case 32: {
   return monomialDivideTest_32(adegs,bdegs);
  }
  default : {
   fprintf(
# 2802 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
          stderr
# 2802 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                , "MONOMIAL DIVIDE TEST NOT IMPLEMENTED FOR NVAR %d\n", nvar);
   exit(-1);
  }
 }

 return 0;
}

static int getMVarExpOffset(int nvar) {
 switch(nvar) {
     case 1: {
   return 0;
     }
     case 2: {
   return 32;
     }
     case 3: {
   return 48;
     }
     case 4: {
   return 54;
     }
     case 5: {
   return 56;
     }
     case 6: {
   return 55;
     }
     case 7: {
   return 56;
  }
     case 8: {
      return 57;
     }
     case 9: {
      return 57;
     }
     case 10: {
   return 58;
     }
     case 11: {
   return 59;
     }
     case 12: {
   return 59;
     }
     case 13: {
   return 60;
     }
     case 14: {
   return 60;
     }
     case 15: {
   return 60;
     }
     case 16: {
   return 60;
     }
     case 17: {
   return 61;
     }
     case 18: {
   return 61;
  }
     case 19: {
   return 61;
     }
     case 20: {
   return 61;
     }
     case 21: {
   return 61;
     }
     case 22: {
   return 62;
     }
     case 23: {
   return 62;
     }
     case 24: {
   return 62;
     }
     case 25: {
   return 62;
     }
     case 26: {
   return 62;
     }
     case 27: {
   return 62;
  }
     case 28: {
   return 62;
     }
     case 29: {
   return 62;
     }
     case 30: {
   return 62;
     }
     case 31: {
   return 62;
     }
     case 32: {
   return 62;
     }
     default : {
      fprintf(
# 2909 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
             stderr
# 2909 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                   , "EXP SIZES NOT DEFINED FOR NVAR %d\n",nvar);
      return -1;
     }
    }
}

static int* getExpOffsetArray (int nvar) {
 int* sizes = (int*) calloc(nvar, sizeof(int));
    switch(nvar) {
     case 1: {
      sizes[0] = 0;
      break;
     }
     case 2: {
   sizes[0] = 32;
   sizes[1] = 0;
      break;
     }
     case 3: {
   sizes[0] = 48;
   sizes[1] = 28;
   sizes[2] = 0;
      break;
     }
     case 4: {
   sizes[0] = 54;
   sizes[1] = 42;
   sizes[2] = 24;
   sizes[3] = 0;
      break;
     }
     case 5: {
   sizes[0] = 56;
   sizes[1] = 46;
   sizes[2] = 34;
   sizes[3] = 18;
   sizes[4] = 0;
      break;
     }
     case 6: {
   sizes[0] = 55;
   sizes[1] = 45;
   sizes[2] = 35;
   sizes[3] = 24;
   sizes[4] = 12;
   sizes[5] = 0;
   break;
     }
     case 7: {
   sizes[0] = 56;
   sizes[1] = 48;
   sizes[2] = 40;
   sizes[3] = 31;
   sizes[4] = 21;
   sizes[5] = 11;
   sizes[6] = 0;
   break;
  }
     case 8: {
      sizes[0] = 57;
      sizes[1] = 50;
      sizes[2] = 43;
      sizes[3] = 35;
      sizes[4] = 27;
      sizes[5] = 18;
      sizes[6] = 9;
      sizes[7] = 0;
      break;
     }
     case 9: {
      sizes[0] = 57;
      sizes[1] = 50;
      sizes[2] = 43;
      sizes[3] = 36;
      sizes[4] = 29;
      sizes[5] = 22;
      sizes[6] = 15;
      sizes[7] = 8;
      sizes[8] = 0;
      break;
     }
     case 10: {
   sizes[0] = 58;
   sizes[1] = 52;
   sizes[2] = 46;
   sizes[3] = 40;
   sizes[4] = 34;
   sizes[5] = 28;
   sizes[6] = 21;
   sizes[7] = 14;
   sizes[8] = 7;
   sizes[9] = 0;
      break;
     }
     case 11: {
   sizes[0] = 59;
   sizes[1] = 54;
   sizes[2] = 48;
   sizes[3] = 42;
   sizes[4] = 36;
   sizes[5] = 30;
   sizes[6] = 24;
   sizes[7] = 18;
   sizes[8] = 12;
   sizes[9] = 6;
   sizes[10] = 0;
   break;
     }
     case 12: {
   sizes[0] = 59;
   sizes[1] = 54;
   sizes[2] = 49;
   sizes[3] = 44;
   sizes[4] = 39;
   sizes[5] = 34;
   sizes[6] = 29;
   sizes[7] = 24;
   sizes[8] = 18;
   sizes[9] = 12;
   sizes[10] = 6;
   sizes[11] = 0;
   break;
     }
     case 13: {
   sizes[0] = 60;
   sizes[1] = 55;
   sizes[2] = 50;
   sizes[3] = 45;
   sizes[4] = 40;
   sizes[5] = 35;
   sizes[6] = 30;
   sizes[7] = 25;
   sizes[8] = 20;
   sizes[9] = 15;
   sizes[10] = 10;
   sizes[11] = 5;
   sizes[12] = 0;
      break;
     }
     case 14: {
   sizes[0] = 60;
   sizes[1] = 56;
   sizes[2] = 52;
   sizes[3] = 48;
   sizes[4] = 44;
   sizes[5] = 40;
   sizes[6] = 35;
   sizes[7] = 30;
   sizes[8] = 25;
   sizes[9] = 20;
   sizes[10] = 15;
   sizes[11] = 10;
   sizes[12] = 5;
   sizes[13] = 0;
      break;
     }
     case 15: {
   sizes[0] = 60;
   sizes[1] = 56;
   sizes[2] = 52;
   sizes[3] = 48;
   sizes[4] = 44;
   sizes[5] = 40;
   sizes[6] = 36;
   sizes[7] = 32;
   sizes[8] = 28;
   sizes[9] = 24;
   sizes[10] = 20;
   sizes[11] = 15;
   sizes[12] = 10;
   sizes[13] = 5;
   sizes[14] = 0;
      break;
     }
     case 16: {
   sizes[0] = 60;
   sizes[1] = 56;
   sizes[2] = 52;
   sizes[3] = 48;
   sizes[4] = 44;
   sizes[5] = 40;
   sizes[6] = 36;
   sizes[7] = 32;
   sizes[8] = 28;
   sizes[9] = 24;
   sizes[10] = 20;
   sizes[11] = 16;
   sizes[12] = 12;
   sizes[13] = 8;
   sizes[14] = 4;
   sizes[15] = 0;
      break;
     }
     case 17: {
   sizes[0] = 61;
   sizes[1] = 58;
   sizes[2] = 55;
   sizes[3] = 52;
   sizes[4] = 48;
   sizes[5] = 44;
   sizes[6] = 40;
   sizes[7] = 36;
   sizes[8] = 32;
   sizes[9] = 28;
   sizes[10] = 24;
   sizes[11] = 20;
   sizes[12] = 16;
   sizes[13] = 12;
   sizes[14] = 8;
   sizes[15] = 4;
   sizes[16] = 0;
      break;
     }
     case 18: {
   sizes[0] = 61;
   sizes[1] = 58;
   sizes[2] = 55;
   sizes[3] = 52;
   sizes[4] = 49;
   sizes[5] = 46;
   sizes[6] = 43;
   sizes[7] = 40;
   sizes[8] = 36;
   sizes[9] = 32;
   sizes[10] = 28;
   sizes[11] = 24;
   sizes[12] = 20;
   sizes[13] = 16;
   sizes[14] = 12;
   sizes[15] = 8;
   sizes[16] = 4;
   sizes[17] = 0;
      break;
     }
     case 19: {
   sizes[0] = 61;
   sizes[1] = 58;
   sizes[2] = 55;
   sizes[3] = 52;
   sizes[4] = 49;
   sizes[5] = 46;
   sizes[6] = 43;
   sizes[7] = 40;
   sizes[8] = 37;
   sizes[9] = 34;
   sizes[10] = 31;
   sizes[11] = 28;
   sizes[12] = 24;
   sizes[13] = 20;
   sizes[14] = 16;
   sizes[15] = 12;
   sizes[16] = 8;
   sizes[17] = 4;
   sizes[18] = 0;
      break;
     }
     case 20: {
   sizes[0] = 61;
   sizes[1] = 58;
   sizes[2] = 55;
   sizes[3] = 52;
   sizes[4] = 49;
   sizes[5] = 46;
   sizes[6] = 43;
   sizes[7] = 40;
   sizes[8] = 37;
   sizes[9] = 34;
   sizes[10] = 31;
   sizes[11] = 28;
   sizes[12] = 25;
   sizes[13] = 22;
   sizes[14] = 19;
   sizes[15] = 16;
   sizes[16] = 12;
   sizes[17] = 8;
   sizes[18] = 4;
   sizes[19] = 0;
      break;
     }
     case 21: {
   sizes[0] = 61;
   sizes[1] = 58;
   sizes[2] = 55;
   sizes[3] = 52;
   sizes[4] = 49;
   sizes[5] = 46;
   sizes[6] = 43;
   sizes[7] = 40;
   sizes[8] = 37;
   sizes[9] = 34;
   sizes[10] = 31;
   sizes[11] = 28;
   sizes[12] = 25;
   sizes[13] = 22;
   sizes[14] = 19;
   sizes[15] = 16;
   sizes[16] = 13;
   sizes[17] = 10;
   sizes[18] = 7;
   sizes[19] = 4;
   sizes[20] = 0;
      break;
     }
     case 22: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 57;
   sizes[3] = 54;
   sizes[4] = 51;
   sizes[5] = 48;
   sizes[6] = 45;
   sizes[7] = 42;
   sizes[8] = 39;
   sizes[9] = 36;
   sizes[10] = 33;
   sizes[11] = 30;
   sizes[12] = 27;
   sizes[13] = 24;
   sizes[14] = 21;
   sizes[15] = 18;
   sizes[16] = 15;
   sizes[17] = 12;
   sizes[18] = 9;
   sizes[19] = 6;
   sizes[20] = 3;
   sizes[21] = 0;
      break;
     }
     case 23: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 53;
   sizes[5] = 51;
   sizes[6] = 48;
   sizes[7] = 45;
   sizes[8] = 42;
   sizes[9] = 39;
   sizes[10] = 36;
   sizes[11] = 33;
   sizes[12] = 30;
   sizes[13] = 27;
   sizes[14] = 24;
   sizes[15] = 21;
   sizes[16] = 18;
   sizes[17] = 15;
   sizes[18] = 12;
   sizes[19] = 9;
   sizes[20] = 6;
   sizes[21] = 3;
   sizes[22] = 0;
      break;
     }
     case 24: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 45;
   sizes[9] = 42;
   sizes[10] = 39;
   sizes[11] = 36;
   sizes[12] = 33;
   sizes[13] = 30;
   sizes[14] = 27;
   sizes[15] = 24;
   sizes[16] = 21;
   sizes[17] = 18;
   sizes[18] = 15;
   sizes[19] = 12;
   sizes[20] = 9;
   sizes[21] = 6;
   sizes[22] = 3;
   sizes[23] = 0;
      break;
     }
     case 25: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 39;
   sizes[12] = 36;
   sizes[13] = 33;
   sizes[14] = 30;
   sizes[15] = 27;
   sizes[16] = 24;
   sizes[17] = 21;
   sizes[18] = 18;
   sizes[19] = 15;
   sizes[20] = 12;
   sizes[21] = 9;
   sizes[22] = 6;
   sizes[23] = 3;
   sizes[24] = 0;
      break;
     }
     case 26: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 33;
   sizes[15] = 30;
   sizes[16] = 27;
   sizes[17] = 24;
   sizes[18] = 21;
   sizes[19] = 18;
   sizes[20] = 15;
   sizes[21] = 12;
   sizes[22] = 9;
   sizes[23] = 6;
   sizes[24] = 3;
   sizes[25] = 0;
      break;
     }
     case 27: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 27;
   sizes[18] = 24;
   sizes[19] = 21;
   sizes[20] = 18;
   sizes[21] = 15;
   sizes[22] = 12;
   sizes[23] = 9;
   sizes[24] = 6;
   sizes[25] = 3;
   sizes[26] = 0;
      break;
     }
     case 28: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 28;
   sizes[18] = 26;
   sizes[19] = 24;
   sizes[20] = 21;
   sizes[21] = 18;
   sizes[22] = 15;
   sizes[23] = 12;
   sizes[24] = 9;
   sizes[25] = 6;
   sizes[26] = 3;
   sizes[27] = 0;
      break;
     }
     case 29: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 28;
   sizes[18] = 26;
   sizes[19] = 24;
   sizes[20] = 22;
   sizes[21] = 20;
   sizes[22] = 18;
   sizes[23] = 15;
   sizes[24] = 12;
   sizes[25] = 9;
   sizes[26] = 6;
   sizes[27] = 3;
   sizes[28] = 0;
      break;
     }
     case 30: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 28;
   sizes[18] = 26;
   sizes[19] = 24;
   sizes[20] = 22;
   sizes[21] = 20;
   sizes[22] = 18;
   sizes[23] = 16;
   sizes[24] = 14;
   sizes[25] = 12;
   sizes[26] = 9;
   sizes[27] = 6;
   sizes[28] = 3;
   sizes[29] = 0;
      break;
     }
     case 31: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 28;
   sizes[18] = 26;
   sizes[19] = 24;
   sizes[20] = 22;
   sizes[21] = 20;
   sizes[22] = 18;
   sizes[23] = 16;
   sizes[24] = 14;
   sizes[25] = 12;
   sizes[26] = 10;
   sizes[27] = 8;
   sizes[28] = 6;
   sizes[29] = 3;
   sizes[30] = 0;
      break;
     }
     case 32: {
   sizes[0] = 62;
   sizes[1] = 60;
   sizes[2] = 58;
   sizes[3] = 56;
   sizes[4] = 54;
   sizes[5] = 52;
   sizes[6] = 50;
   sizes[7] = 48;
   sizes[8] = 46;
   sizes[9] = 44;
   sizes[10] = 42;
   sizes[11] = 40;
   sizes[12] = 38;
   sizes[13] = 36;
   sizes[14] = 34;
   sizes[15] = 32;
   sizes[16] = 30;
   sizes[17] = 28;
   sizes[18] = 26;
   sizes[19] = 24;
   sizes[20] = 22;
   sizes[21] = 20;
   sizes[22] = 18;
   sizes[23] = 16;
   sizes[24] = 14;
   sizes[25] = 12;
   sizes[26] = 10;
   sizes[27] = 8;
   sizes[28] = 6;
   sizes[29] = 4;
   sizes[30] = 2;
   sizes[31] = 0;
      break;
     }
     default : {
      fprintf(
# 3543 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
             stderr
# 3543 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                   , "EXP SIZES NOT DEFINED FOR NVAR %d\n",nvar);
      return 
# 3544 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
            __null
# 3544 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                ;
     }
    }
    return sizes;
}

static degrees_t getMVarExpMask(int nvar) {
 switch(nvar) {
     case 1: {
   return 0xffffffffffffffff;
     }
     case 2: {
   return 0xffffffff00000000;
     }
     case 3: {
   return 0xffff000000000000;
     }
     case 4: {
   return 0xffc0000000000000;
     }
     case 5: {
   return 0xff00000000000000;
     }
     case 6: {
   return 0xff80000000000000;
     }
     case 7: {
   return 0xff00000000000000;
  }
     case 8: {
      return 0xfe00000000000000;
     }
     case 9: {
      return 0xfe00000000000000;
     }
     case 10: {
   return 0xfc00000000000000;
     }
     case 11: {
   return 0xf800000000000000;
     }
     case 12: {
   return 0xf800000000000000;
     }
     case 13: {
   return 0xf000000000000000;
     }
     case 14: {
   return 0xf000000000000000;
     }
     case 15: {
   return 0xf000000000000000;
     }
     case 16: {
   return 0xf000000000000000;
     }
     case 17: {
   return 0xe000000000000000;
     }
     case 18: {
   return 0xe000000000000000;
  }
     case 19: {
   return 0xe000000000000000;
     }
     case 20: {
   return 0xe000000000000000;
     }
     case 21: {
   return 0xe000000000000000;
     }
     case 22: {
   return 0xc000000000000000;
     }
     case 23: {
   return 0xc000000000000000;
     }
     case 24: {
   return 0xc000000000000000;
     }
     case 25: {
   return 0xc000000000000000;
     }
     case 26: {
   return 0xc000000000000000;
     }
     case 27: {
   return 0xc000000000000000;
  }
     case 28: {
   return 0xc000000000000000;
     }
     case 29: {
   return 0xc000000000000000;
     }
     case 30: {
   return 0xc000000000000000;
     }
     case 31: {
   return 0xc000000000000000;
     }
     case 32: {
   return 0xc000000000000000;
     }
     default : {
      fprintf(
# 3649 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
             stderr
# 3649 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                   , "EXP MASKS NOT DEFINED FOR NVAR %d\n",nvar);
      return 0;
     }
    }
}

static degrees_t* getExpMaskArray (int nvar) {
 degrees_t* masks = (degrees_t*) calloc(nvar, sizeof(degrees_t));
    switch(nvar) {
     case 1: {
      masks[0] = 0xffffffffffffffff;
      break;
     }
     case 2: {
   masks[0] = 0xffffffff00000000;
   masks[1] = 0x00000000ffffffff;
      break;
     }
     case 3: {
   masks[0] = 0xffff000000000000;
   masks[1] = 0x0000fffff0000000;
   masks[2] = 0x000000000fffffff;
      break;
     }
     case 4: {
   masks[0] = 0xffc0000000000000;
   masks[1] = 0x003ffc0000000000;
   masks[2] = 0x000003ffff000000;
   masks[3] = 0x0000000000ffffff;
      break;
     }
     case 5: {
   masks[0] = 0xff00000000000000;
   masks[1] = 0x00ffc00000000000;
   masks[2] = 0x00003ffc00000000;
   masks[3] = 0x00000003fffc0000;
   masks[4] = 0x000000000003ffff;
      break;
     }
     case 6: {
   masks[0] = 0xff80000000000000;
   masks[1] = 0x007fe00000000000;
   masks[2] = 0x00001ff800000000;
   masks[3] = 0x00000007ff000000;
   masks[4] = 0x0000000000fff000;
   masks[5] = 0x0000000000000fff;
   break;
     }
     case 7: {
   masks[0] = 0xff00000000000000;
   masks[1] = 0x00ff000000000000;
   masks[2] = 0x0000ff0000000000;
   masks[3] = 0x000000ff80000000;
   masks[4] = 0x000000007fe00000;
   masks[5] = 0x00000000001ff800;
   masks[6] = 0x00000000000007ff;
   break;
  }
     case 8: {
   masks[0] = 0xfe00000000000000;
   masks[1] = 0x01fc000000000000;
   masks[2] = 0x0003f80000000000;
   masks[3] = 0x000007f800000000;
   masks[4] = 0x00000007f8000000;
   masks[5] = 0x0000000007fc0000;
   masks[6] = 0x000000000003fe00;
   masks[7] = 0x00000000000001ff;
      break;
     }
     case 9: {
   masks[0] = 0xfe00000000000000;
   masks[1] = 0x01fc000000000000;
   masks[2] = 0x0003f80000000000;
   masks[3] = 0x000007f000000000;
   masks[4] = 0x0000000fe0000000;
   masks[5] = 0x000000001fc00000;
   masks[6] = 0x00000000003f8000;
   masks[7] = 0x0000000000007f00;
   masks[8] = 0x00000000000000ff;
      break;
     }
     case 10: {
   masks[0] = 0xfc00000000000000;
   masks[1] = 0x03f0000000000000;
   masks[2] = 0x000fc00000000000;
   masks[3] = 0x00003f0000000000;
   masks[4] = 0x000000fc00000000;
   masks[5] = 0x00000003f0000000;
   masks[6] = 0x000000000fe00000;
   masks[7] = 0x00000000001fc000;
   masks[8] = 0x0000000000003f80;
   masks[9] = 0x000000000000007f;
      break;
     }
     case 11: {
   masks[0] = 0xf800000000000000;
   masks[1] = 0x07c0000000000000;
   masks[2] = 0x003f000000000000;
   masks[3] = 0x0000fc0000000000;
   masks[4] = 0x000003f000000000;
   masks[5] = 0x0000000fc0000000;
   masks[6] = 0x000000003f000000;
   masks[7] = 0x0000000000fc0000;
   masks[8] = 0x000000000003f000;
   masks[9] = 0x0000000000000fc0;
   masks[10] = 0x000000000000003f;
   break;
     }
     case 12: {
   masks[0] = 0xf800000000000000;
   masks[1] = 0x07c0000000000000;
   masks[2] = 0x003e000000000000;
   masks[3] = 0x0001f00000000000;
   masks[4] = 0x00000f8000000000;
   masks[5] = 0x0000007c00000000;
   masks[6] = 0x00000003e0000000;
   masks[7] = 0x000000001f000000;
   masks[8] = 0x0000000000fc0000;
   masks[9] = 0x000000000003f000;
   masks[10] = 0x0000000000000fc0;
   masks[11] = 0x000000000000003f;
   break;
     }
     case 13: {
   masks[0] = 0xf000000000000000;
   masks[1] = 0x0f80000000000000;
   masks[2] = 0x007c000000000000;
   masks[3] = 0x0003e00000000000;
   masks[4] = 0x00001f0000000000;
   masks[5] = 0x000000f800000000;
   masks[6] = 0x00000007c0000000;
   masks[7] = 0x000000003e000000;
   masks[8] = 0x0000000001f00000;
   masks[9] = 0x00000000000f8000;
   masks[10] = 0x0000000000007c00;
   masks[11] = 0x00000000000003e0;
   masks[12] = 0x000000000000001f;
      break;
     }
     case 14: {
   masks[0] = 0xf000000000000000;
   masks[1] = 0x0f00000000000000;
   masks[2] = 0x00f0000000000000;
   masks[3] = 0x000f000000000000;
   masks[4] = 0x0000f00000000000;
   masks[5] = 0x00000f0000000000;
   masks[6] = 0x000000f800000000;
   masks[7] = 0x00000007c0000000;
   masks[8] = 0x000000003e000000;
   masks[9] = 0x0000000001f00000;
   masks[10] = 0x00000000000f8000;
   masks[11] = 0x0000000000007c00;
   masks[12] = 0x00000000000003e0;
   masks[13] = 0x000000000000001f;
      break;
     }
     case 15: {
   masks[0] = 0xf000000000000000;
   masks[1] = 0x0f00000000000000;
   masks[2] = 0x00f0000000000000;
   masks[3] = 0x000f000000000000;
   masks[4] = 0x0000f00000000000;
   masks[5] = 0x00000f0000000000;
   masks[6] = 0x000000f000000000;
   masks[7] = 0x0000000f00000000;
   masks[8] = 0x00000000f0000000;
   masks[9] = 0x000000000f000000;
   masks[10] = 0x0000000000f00000;
   masks[11] = 0x00000000000f8000;
   masks[12] = 0x0000000000007c00;
   masks[13] = 0x00000000000003e0;
   masks[14] = 0x000000000000001f;
      break;
     }
     case 16: {
   masks[0] = 0xf000000000000000;
   masks[1] = 0x0f00000000000000;
   masks[2] = 0x00f0000000000000;
   masks[3] = 0x000f000000000000;
   masks[4] = 0x0000f00000000000;
   masks[5] = 0x00000f0000000000;
   masks[6] = 0x000000f000000000;
   masks[7] = 0x0000000f00000000;
   masks[8] = 0x00000000f0000000;
   masks[9] = 0x000000000f000000;
   masks[10] = 0x0000000000f00000;
   masks[11] = 0x00000000000f0000;
   masks[12] = 0x000000000000f000;
   masks[13] = 0x0000000000000f00;
   masks[14] = 0x00000000000000f0;
   masks[15] = 0x000000000000000f;
      break;
     }
     case 17: {
   masks[0] = 0xe000000000000000;
   masks[1] = 0x1c00000000000000;
   masks[2] = 0x0380000000000000;
   masks[3] = 0x0070000000000000;
   masks[4] = 0x000f000000000000;
   masks[5] = 0x0000f00000000000;
   masks[6] = 0x00000f0000000000;
   masks[7] = 0x000000f000000000;
   masks[8] = 0x0000000f00000000;
   masks[9] = 0x00000000f0000000;
   masks[10] = 0x000000000f000000;
   masks[11] = 0x0000000000f00000;
   masks[12] = 0x00000000000f0000;
   masks[13] = 0x000000000000f000;
   masks[14] = 0x0000000000000f00;
   masks[15] = 0x00000000000000f0;
   masks[16] = 0x000000000000000f;
      break;
     }
     case 18: {
   masks[0] = 0xe000000000000000;
   masks[1] = 0x1c00000000000000;
   masks[2] = 0x0380000000000000;
   masks[3] = 0x0070000000000000;
   masks[4] = 0x000e000000000000;
   masks[5] = 0x0001c00000000000;
   masks[6] = 0x0000380000000000;
   masks[7] = 0x0000070000000000;
   masks[8] = 0x000000f000000000;
   masks[9] = 0x0000000f00000000;
   masks[10] = 0x00000000f0000000;
   masks[11] = 0x000000000f000000;
   masks[12] = 0x0000000000f00000;
   masks[13] = 0x00000000000f0000;
   masks[14] = 0x000000000000f000;
   masks[15] = 0x0000000000000f00;
   masks[16] = 0x00000000000000f0;
   masks[17] = 0x000000000000000f;
      break;
     }
     case 19: {
   masks[0] = 0xe000000000000000;
   masks[1] = 0x1c00000000000000;
   masks[2] = 0x0380000000000000;
   masks[3] = 0x0070000000000000;
   masks[4] = 0x000e000000000000;
   masks[5] = 0x0001c00000000000;
   masks[6] = 0x0000380000000000;
   masks[7] = 0x0000070000000000;
   masks[8] = 0x000000e000000000;
   masks[9] = 0x0000001c00000000;
   masks[10] = 0x0000000380000000;
   masks[11] = 0x0000000070000000;
   masks[12] = 0x000000000f000000;
   masks[13] = 0x0000000000f00000;
   masks[14] = 0x00000000000f0000;
   masks[15] = 0x000000000000f000;
   masks[16] = 0x0000000000000f00;
   masks[17] = 0x00000000000000f0;
   masks[18] = 0x000000000000000f;
      break;
     }
     case 20: {
   masks[0] = 0xe000000000000000;
   masks[1] = 0x1c00000000000000;
   masks[2] = 0x0380000000000000;
   masks[3] = 0x0070000000000000;
   masks[4] = 0x000e000000000000;
   masks[5] = 0x0001c00000000000;
   masks[6] = 0x0000380000000000;
   masks[7] = 0x0000070000000000;
   masks[8] = 0x000000e000000000;
   masks[9] = 0x0000001c00000000;
   masks[10] = 0x0000000380000000;
   masks[11] = 0x0000000070000000;
   masks[12] = 0x000000000e000000;
   masks[13] = 0x0000000001c00000;
   masks[14] = 0x0000000000380000;
   masks[15] = 0x0000000000070000;
   masks[16] = 0x000000000000f000;
   masks[17] = 0x0000000000000f00;
   masks[18] = 0x00000000000000f0;
   masks[19] = 0x000000000000000f;
      break;
     }
     case 21: {
   masks[0] = 0xe000000000000000;
   masks[1] = 0x1c00000000000000;
   masks[2] = 0x0380000000000000;
   masks[3] = 0x0070000000000000;
   masks[4] = 0x000e000000000000;
   masks[5] = 0x0001c00000000000;
   masks[6] = 0x0000380000000000;
   masks[7] = 0x0000070000000000;
   masks[8] = 0x000000e000000000;
   masks[9] = 0x0000001c00000000;
   masks[10] = 0x0000000380000000;
   masks[11] = 0x0000000070000000;
   masks[12] = 0x000000000e000000;
   masks[13] = 0x0000000001c00000;
   masks[14] = 0x0000000000380000;
   masks[15] = 0x0000000000070000;
   masks[16] = 0x000000000000e000;
   masks[17] = 0x0000000000001c00;
   masks[18] = 0x0000000000000380;
   masks[19] = 0x0000000000000070;
   masks[20] = 0x000000000000000f;
      break;
     }
     case 22: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0e00000000000000;
   masks[3] = 0x01c0000000000000;
   masks[4] = 0x0038000000000000;
   masks[5] = 0x0007000000000000;
   masks[6] = 0x0000e00000000000;
   masks[7] = 0x00001c0000000000;
   masks[8] = 0x0000038000000000;
   masks[9] = 0x0000007000000000;
   masks[10] = 0x0000000e00000000;
   masks[11] = 0x00000001c0000000;
   masks[12] = 0x0000000038000000;
   masks[13] = 0x0000000007000000;
   masks[14] = 0x0000000000e00000;
   masks[15] = 0x00000000001c0000;
   masks[16] = 0x0000000000038000;
   masks[17] = 0x0000000000007000;
   masks[18] = 0x0000000000000e00;
   masks[19] = 0x00000000000001c0;
   masks[20] = 0x0000000000000038;
   masks[21] = 0x0000000000000007;
      break;
     }
     case 23: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0038000000000000;
   masks[6] = 0x0007000000000000;
   masks[7] = 0x0000e00000000000;
   masks[8] = 0x00001c0000000000;
   masks[9] = 0x0000038000000000;
   masks[10] = 0x0000007000000000;
   masks[11] = 0x0000000e00000000;
   masks[12] = 0x00000001c0000000;
   masks[13] = 0x0000000038000000;
   masks[14] = 0x0000000007000000;
   masks[15] = 0x0000000000e00000;
   masks[16] = 0x00000000001c0000;
   masks[17] = 0x0000000000038000;
   masks[18] = 0x0000000000007000;
   masks[19] = 0x0000000000000e00;
   masks[20] = 0x00000000000001c0;
   masks[21] = 0x0000000000000038;
   masks[22] = 0x0000000000000007;
      break;
     }
     case 24: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000e00000000000;
   masks[9] = 0x00001c0000000000;
   masks[10] = 0x0000038000000000;
   masks[11] = 0x0000007000000000;
   masks[12] = 0x0000000e00000000;
   masks[13] = 0x00000001c0000000;
   masks[14] = 0x0000000038000000;
   masks[15] = 0x0000000007000000;
   masks[16] = 0x0000000000e00000;
   masks[17] = 0x00000000001c0000;
   masks[18] = 0x0000000000038000;
   masks[19] = 0x0000000000007000;
   masks[20] = 0x0000000000000e00;
   masks[21] = 0x00000000000001c0;
   masks[22] = 0x0000000000000038;
   masks[23] = 0x0000000000000007;
      break;
     }
     case 25: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000038000000000;
   masks[12] = 0x0000007000000000;
   masks[13] = 0x0000000e00000000;
   masks[14] = 0x00000001c0000000;
   masks[15] = 0x0000000038000000;
   masks[16] = 0x0000000007000000;
   masks[17] = 0x0000000000e00000;
   masks[18] = 0x00000000001c0000;
   masks[19] = 0x0000000000038000;
   masks[20] = 0x0000000000007000;
   masks[21] = 0x0000000000000e00;
   masks[22] = 0x00000000000001c0;
   masks[23] = 0x0000000000000038;
   masks[24] = 0x0000000000000007;
      break;
     }
     case 26: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000e00000000;
   masks[15] = 0x00000001c0000000;
   masks[16] = 0x0000000038000000;
   masks[17] = 0x0000000007000000;
   masks[18] = 0x0000000000e00000;
   masks[19] = 0x00000000001c0000;
   masks[20] = 0x0000000000038000;
   masks[21] = 0x0000000000007000;
   masks[22] = 0x0000000000000e00;
   masks[23] = 0x00000000000001c0;
   masks[24] = 0x0000000000000038;
   masks[25] = 0x0000000000000007;
      break;
     }
     case 27: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000038000000;
   masks[18] = 0x0000000007000000;
   masks[19] = 0x0000000000e00000;
   masks[20] = 0x00000000001c0000;
   masks[21] = 0x0000000000038000;
   masks[22] = 0x0000000000007000;
   masks[23] = 0x0000000000000e00;
   masks[24] = 0x00000000000001c0;
   masks[25] = 0x0000000000000038;
   masks[26] = 0x0000000000000007;
      break;
     }
     case 28: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000030000000;
   masks[18] = 0x000000000c000000;
   masks[19] = 0x0000000003000000;
   masks[20] = 0x0000000000e00000;
   masks[21] = 0x00000000001c0000;
   masks[22] = 0x0000000000038000;
   masks[23] = 0x0000000000007000;
   masks[24] = 0x0000000000000e00;
   masks[25] = 0x00000000000001c0;
   masks[26] = 0x0000000000000038;
   masks[27] = 0x0000000000000007;
      break;
     }
     case 29: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000030000000;
   masks[18] = 0x000000000c000000;
   masks[19] = 0x0000000003000000;
   masks[20] = 0x0000000000c00000;
   masks[21] = 0x0000000000300000;
   masks[22] = 0x00000000000c0000;
   masks[23] = 0x0000000000038000;
   masks[24] = 0x0000000000007000;
   masks[25] = 0x0000000000000e00;
   masks[26] = 0x00000000000001c0;
   masks[27] = 0x0000000000000038;
   masks[28] = 0x0000000000000007;
      break;
     }
     case 30: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000030000000;
   masks[18] = 0x000000000c000000;
   masks[19] = 0x0000000003000000;
   masks[20] = 0x0000000000c00000;
   masks[21] = 0x0000000000300000;
   masks[22] = 0x00000000000c0000;
   masks[23] = 0x0000000000030000;
   masks[24] = 0x000000000000c000;
   masks[25] = 0x0000000000003000;
   masks[26] = 0x0000000000000e00;
   masks[27] = 0x00000000000001c0;
   masks[28] = 0x0000000000000038;
   masks[29] = 0x0000000000000007;
      break;
     }
     case 31: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000030000000;
   masks[18] = 0x000000000c000000;
   masks[19] = 0x0000000003000000;
   masks[20] = 0x0000000000c00000;
   masks[21] = 0x0000000000300000;
   masks[22] = 0x00000000000c0000;
   masks[23] = 0x0000000000030000;
   masks[24] = 0x000000000000c000;
   masks[25] = 0x0000000000003000;
   masks[26] = 0x0000000000000c00;
   masks[27] = 0x0000000000000300;
   masks[28] = 0x00000000000000c0;
   masks[29] = 0x0000000000000038;
   masks[30] = 0x0000000000000007;
      break;
     }
     case 32: {
   masks[0] = 0xc000000000000000;
   masks[1] = 0x3000000000000000;
   masks[2] = 0x0c00000000000000;
   masks[3] = 0x0300000000000000;
   masks[4] = 0x00c0000000000000;
   masks[5] = 0x0030000000000000;
   masks[6] = 0x000c000000000000;
   masks[7] = 0x0003000000000000;
   masks[8] = 0x0000c00000000000;
   masks[9] = 0x0000300000000000;
   masks[10] = 0x00000c0000000000;
   masks[11] = 0x0000030000000000;
   masks[12] = 0x000000c000000000;
   masks[13] = 0x0000003000000000;
   masks[14] = 0x0000000c00000000;
   masks[15] = 0x0000000300000000;
   masks[16] = 0x00000000c0000000;
   masks[17] = 0x0000000030000000;
   masks[18] = 0x000000000c000000;
   masks[19] = 0x0000000003000000;
   masks[20] = 0x0000000000c00000;
   masks[21] = 0x0000000000300000;
   masks[22] = 0x00000000000c0000;
   masks[23] = 0x0000000000030000;
   masks[24] = 0x000000000000c000;
   masks[25] = 0x0000000000003000;
   masks[26] = 0x0000000000000c00;
   masks[27] = 0x0000000000000300;
   masks[28] = 0x00000000000000c0;
   masks[29] = 0x0000000000000030;
   masks[30] = 0x000000000000000c;
   masks[31] = 0x0000000000000003;
      break;
     }
     default : {
      fprintf(
# 4283 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
             stderr
# 4283 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                   , "EXP MASK ARRAY NOT DEFINED FOR NVAR %d\n",nvar);
      return 
# 4284 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
            __null
# 4284 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                ;
     }
    }
    return masks;
}

static degrees_t* getMaxExpArray (int nvar) {
 degrees_t* maxExps = (degrees_t*) calloc(nvar, sizeof(degrees_t));

 switch(nvar) {
  case 1: {
   maxExps[0] = 0xffffffff;
   break;
  }
  case 2: {
   maxExps[0] = 0xffffffff;
   maxExps[1] = 0xffffffff;
   break;
  }
  case 3: {
   maxExps[0] = 0xffff;
   maxExps[1] = 0xfffff;
   maxExps[2] = 0xfffffff;
   break;
  }
  case 4: {
   maxExps[0] = 0x3ff;
   maxExps[1] = 0xfff;
   maxExps[2] = 0x3ffff;
   maxExps[3] = 0xffffff;
   break;
  }
  case 5: {
   maxExps[0] = 0xff;
   maxExps[1] = 0x3ff;
   maxExps[2] = 0xfff;
   maxExps[3] = 0xffff;
   maxExps[4] = 0x3ffff;
   break;
  }
  case 6: {
   maxExps[0] = 0x1ff;
   maxExps[1] = 0x3ff;
   maxExps[2] = 0x3ff;
   maxExps[3] = 0x7ff;
   maxExps[4] = 0xfff;
   maxExps[5] = 0xfff;
   break;
  }
  case 7: {
   maxExps[0] = 0xff;
   maxExps[1] = 0xff;
   maxExps[2] = 0xff;
   maxExps[3] = 0x1ff;
   maxExps[4] = 0x3ff;
   maxExps[5] = 0x3ff;
   maxExps[6] = 0x7ff;
   break;
  }
  case 8: {
   maxExps[0] = 0x7f;
   maxExps[1] = 0x7f;
   maxExps[2] = 0x7f;
   maxExps[3] = 0xff;
   maxExps[4] = 0xff;
   maxExps[5] = 0x1ff;
   maxExps[6] = 0x1ff;
   maxExps[7] = 0x1ff;
   break;
  }
  case 9: {
   maxExps[0] = 0x7f;
   maxExps[1] = 0x7f;
   maxExps[2] = 0x7f;
   maxExps[3] = 0x7f;
   maxExps[4] = 0x7f;
   maxExps[5] = 0x7f;
   maxExps[6] = 0x7f;
   maxExps[7] = 0x7f;
   maxExps[8] = 0xff;
   break;
  }
  case 10: {
   maxExps[0] = 0x3f;
   maxExps[1] = 0x3f;
   maxExps[2] = 0x3f;
   maxExps[3] = 0x3f;
   maxExps[4] = 0x3f;
   maxExps[5] = 0x3f;
   maxExps[6] = 0x7f;
   maxExps[7] = 0x7f;
   maxExps[8] = 0x7f;
   maxExps[9] = 0x7f;
   break;
  }
  case 11: {
   maxExps[0] = 0x1f;
   maxExps[1] = 0x1f;
   maxExps[2] = 0x3f;
   maxExps[3] = 0x3f;
   maxExps[4] = 0x3f;
   maxExps[5] = 0x3f;
   maxExps[6] = 0x3f;
   maxExps[7] = 0x3f;
   maxExps[8] = 0x3f;
   maxExps[9] = 0x3f;
   maxExps[10] = 0x3f;
   break;
  }
  case 12: {
   maxExps[0] = 0x1f;
   maxExps[1] = 0x1f;
   maxExps[2] = 0x1f;
   maxExps[3] = 0x1f;
   maxExps[4] = 0x1f;
   maxExps[5] = 0x1f;
   maxExps[6] = 0x1f;
   maxExps[7] = 0x1f;
   maxExps[8] = 0x3f;
   maxExps[9] = 0x3f;
   maxExps[10] = 0x3f;
   maxExps[11] = 0x3f;
   break;
  }
  case 13: {
   maxExps[0] = 0xf;
   maxExps[1] = 0x1f;
   maxExps[2] = 0x1f;
   maxExps[3] = 0x1f;
   maxExps[4] = 0x1f;
   maxExps[5] = 0x1f;
   maxExps[6] = 0x1f;
   maxExps[7] = 0x1f;
   maxExps[8] = 0x1f;
   maxExps[9] = 0x1f;
   maxExps[10] = 0x1f;
   maxExps[11] = 0x1f;
   maxExps[12] = 0x1f;
   break;
  }
  case 14: {
   maxExps[0] = 0xf;
   maxExps[1] = 0xf;
   maxExps[2] = 0xf;
   maxExps[3] = 0xf;
   maxExps[4] = 0xf;
   maxExps[5] = 0xf;
   maxExps[6] = 0x1f;
   maxExps[7] = 0x1f;
   maxExps[8] = 0x1f;
   maxExps[9] = 0x1f;
   maxExps[10] = 0x1f;
   maxExps[11] = 0x1f;
   maxExps[12] = 0x1f;
   maxExps[13] = 0x1f;
   break;
  }
  case 15: {
   maxExps[0] = 0xf;
   maxExps[1] = 0xf;
   maxExps[2] = 0xf;
   maxExps[3] = 0xf;
   maxExps[4] = 0xf;
   maxExps[5] = 0xf;
   maxExps[6] = 0xf;
   maxExps[7] = 0xf;
   maxExps[8] = 0xf;
   maxExps[9] = 0xf;
   maxExps[10] = 0xf;
   maxExps[11] = 0x1f;
   maxExps[12] = 0x1f;
   maxExps[13] = 0x1f;
   maxExps[14] = 0x1f;
   break;
  }
  case 16: {
   maxExps[0] = 0xf;
   maxExps[1] = 0xf;
   maxExps[2] = 0xf;
   maxExps[3] = 0xf;
   maxExps[4] = 0xf;
   maxExps[5] = 0xf;
   maxExps[6] = 0xf;
   maxExps[7] = 0xf;
   maxExps[8] = 0xf;
   maxExps[9] = 0xf;
   maxExps[10] = 0xf;
   maxExps[11] = 0xf;
   maxExps[12] = 0xf;
   maxExps[13] = 0xf;
   maxExps[14] = 0xf;
   maxExps[15] = 0xf;
   break;
  }
  case 17: {
   maxExps[0] = 0x7;
   maxExps[1] = 0x7;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0xf;
   maxExps[5] = 0xf;
   maxExps[6] = 0xf;
   maxExps[7] = 0xf;
   maxExps[8] = 0xf;
   maxExps[9] = 0xf;
   maxExps[10] = 0xf;
   maxExps[11] = 0xf;
   maxExps[12] = 0xf;
   maxExps[13] = 0xf;
   maxExps[14] = 0xf;
   maxExps[15] = 0xf;
   maxExps[16] = 0xf;
   break;
  }
  case 18: {
   maxExps[0] = 0x7;
   maxExps[1] = 0x7;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0x7;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0xf;
   maxExps[9] = 0xf;
   maxExps[10] = 0xf;
   maxExps[11] = 0xf;
   maxExps[12] = 0xf;
   maxExps[13] = 0xf;
   maxExps[14] = 0xf;
   maxExps[15] = 0xf;
   maxExps[16] = 0xf;
   maxExps[17] = 0xf;
   break;
  }
  case 19: {
   maxExps[0] = 0x7;
   maxExps[1] = 0x7;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0x7;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0xf;
   maxExps[13] = 0xf;
   maxExps[14] = 0xf;
   maxExps[15] = 0xf;
   maxExps[16] = 0xf;
   maxExps[17] = 0xf;
   maxExps[18] = 0xf;
   break;
  }
  case 20: {
   maxExps[0] = 0x7;
   maxExps[1] = 0x7;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0x7;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0xf;
   maxExps[17] = 0xf;
   maxExps[18] = 0xf;
   maxExps[19] = 0xf;
   break;
  }
  case 21: {
   maxExps[0] = 0x7;
   maxExps[1] = 0x7;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0x7;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0xf;
   break;
  }
  case 22: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x7;
   maxExps[3] = 0x7;
   maxExps[4] = 0x7;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   break;
  }
  case 23: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x7;
   maxExps[6] = 0x7;
   maxExps[7] = 0x7;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   break;
  }
  case 24: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x7;
   maxExps[9] = 0x7;
   maxExps[10] = 0x7;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   maxExps[23] = 0x7;
   break;
  }
  case 25: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x7;
   maxExps[12] = 0x7;
   maxExps[13] = 0x7;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   maxExps[23] = 0x7;
   maxExps[24] = 0x7;
   break;
  }
  case 26: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x7;
   maxExps[15] = 0x7;
   maxExps[16] = 0x7;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   maxExps[23] = 0x7;
   maxExps[24] = 0x7;
   maxExps[25] = 0x7;
   break;
  }
  case 27: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x7;
   maxExps[18] = 0x7;
   maxExps[19] = 0x7;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   maxExps[23] = 0x7;
   maxExps[24] = 0x7;
   maxExps[25] = 0x7;
   maxExps[26] = 0x7;
   break;
  }
  case 28: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x3;
   maxExps[18] = 0x3;
   maxExps[19] = 0x3;
   maxExps[20] = 0x7;
   maxExps[21] = 0x7;
   maxExps[22] = 0x7;
   maxExps[23] = 0x7;
   maxExps[24] = 0x7;
   maxExps[25] = 0x7;
   maxExps[26] = 0x7;
   maxExps[27] = 0x7;
   break;
  }
  case 29: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x3;
   maxExps[18] = 0x3;
   maxExps[19] = 0x3;
   maxExps[20] = 0x3;
   maxExps[21] = 0x3;
   maxExps[22] = 0x3;
   maxExps[23] = 0x7;
   maxExps[24] = 0x7;
   maxExps[25] = 0x7;
   maxExps[26] = 0x7;
   maxExps[27] = 0x7;
   maxExps[28] = 0x7;
   break;
  }
  case 30: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x3;
   maxExps[18] = 0x3;
   maxExps[19] = 0x3;
   maxExps[20] = 0x3;
   maxExps[21] = 0x3;
   maxExps[22] = 0x3;
   maxExps[23] = 0x3;
   maxExps[24] = 0x3;
   maxExps[25] = 0x3;
   maxExps[26] = 0x7;
   maxExps[27] = 0x7;
   maxExps[28] = 0x7;
   maxExps[29] = 0x7;
   break;
  }
  case 31: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x3;
   maxExps[18] = 0x3;
   maxExps[19] = 0x3;
   maxExps[20] = 0x3;
   maxExps[21] = 0x3;
   maxExps[22] = 0x3;
   maxExps[23] = 0x3;
   maxExps[24] = 0x3;
   maxExps[25] = 0x3;
   maxExps[26] = 0x3;
   maxExps[27] = 0x3;
   maxExps[28] = 0x3;
   maxExps[29] = 0x7;
   maxExps[30] = 0x7;
   break;
  }
  case 32: {
   maxExps[0] = 0x3;
   maxExps[1] = 0x3;
   maxExps[2] = 0x3;
   maxExps[3] = 0x3;
   maxExps[4] = 0x3;
   maxExps[5] = 0x3;
   maxExps[6] = 0x3;
   maxExps[7] = 0x3;
   maxExps[8] = 0x3;
   maxExps[9] = 0x3;
   maxExps[10] = 0x3;
   maxExps[11] = 0x3;
   maxExps[12] = 0x3;
   maxExps[13] = 0x3;
   maxExps[14] = 0x3;
   maxExps[15] = 0x3;
   maxExps[16] = 0x3;
   maxExps[17] = 0x3;
   maxExps[18] = 0x3;
   maxExps[19] = 0x3;
   maxExps[20] = 0x3;
   maxExps[21] = 0x3;
   maxExps[22] = 0x3;
   maxExps[23] = 0x3;
   maxExps[24] = 0x3;
   maxExps[25] = 0x3;
   maxExps[26] = 0x3;
   maxExps[27] = 0x3;
   maxExps[28] = 0x3;
   maxExps[29] = 0x3;
   maxExps[30] = 0x3;
   maxExps[31] = 0x3;
   break;
  }
 }

 return maxExps;
}


static int checkValidMonomialMult(degrees_t maxA, degrees_t maxB, int nvar) {
 if (nvar <= 0) {
  return 1;
 }

 degrees_t* masks = getExpMaskArray(nvar);
 int* sizes = getExpOffsetArray(nvar);
 degrees_t* maxExps = getMaxExpArray(nvar);

 degree_t a, b;
 for (int j = 0; j < nvar; ++j) {
  a = ( ((maxA) & (masks[j])) >> (sizes[j]));
  b = ( ((maxB) & (masks[j])) >> (sizes[j]));
  if ((degrees_t) (a + b) > maxExps[j]) {
   fprintf(
# 4938 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 3 4
          stderr
# 4938 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h"
                , "SMQP ERROR: Overflow in exponent packing for mult at index %d; %d + %d.\n", j, a, b);
   free((void*) -1);

   exit(1);
  }
 }

 free(masks);
 free(sizes);
 free(maxExps);
 return 1;
}

static int monomialMultFitsPacked(degrees_t maxA, degrees_t maxB, int nvar) {
 if (nvar <= 0) {
  return 1;
 }

 degrees_t* masks = getExpMaskArray(nvar);
 int* sizes = getExpOffsetArray(nvar);
 degrees_t* maxExps = getMaxExpArray(nvar);

 int fits = 1;
 degree_t a, b;
 for (int j = 0; j < nvar; ++j) {
  a = ( ((maxA) & (masks[j])) >> (sizes[j]));
  b = ( ((maxB) & (masks[j])) >> (sizes[j]));
  if ((degrees_t) (a + b) > maxExps[j]) {
   fits = 0;
   break;
  }
 }

 free(masks);
 free(sizes);
 free(maxExps);
 return fits;
}
# 29 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 1
# 20 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
extern "C" {


# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 24 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 2




# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h" 1






extern "C" {


# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/ExponentPackingDefines.h" 1
# 11 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h" 2



typedef struct AAElem AAElem_t;
typedef struct AltArr AltArr_t;
typedef struct AltArrDegList AltArrDegList_t;
typedef mpq_t ratNum_t;
typedef struct ProductHeap_AA ProductHeap_AA;
typedef struct ProductHeapChain_AA ProductHeapChain_AA;
# 42 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h"
AltArr_t* makePolynomial_AA_unpk(int allocSize, int nvar);

void freePolynomial_AA_unpk(AltArr_t* aa);

void unpackExponentVectors_AA_inp(AltArr_t* aa);

void unpackExponentVector(degrees_t packedExp, degree_t* unpackedExp, int nvar);

void tryPackExponentVectors_AA_inp(AltArr_t* aa);

void packExponentVectors_AA_inp(AltArr_t* aa);

int monomialDivideTest_AA_unpk(AltArr_t* a, int idxa, AltArr_t* b, int idxb);

void printDegs_AA_unpk(FILE* fp, degrees_t degs, const char** syms, int nvar);

void printPoly_AA_unpk(FILE* fp, const AltArr_t* aa, const char** syms, int nvar);

int isExactlyEqual_AA_unpk(AltArr_t* a, AltArr_t* b);

void nonZeroVariables_AA_unpk(AltArr_t* a, int* vars);

degree_t totalDegree_AA_unpk(AltArr_t* aa);

degree_t partialDegree_AA_unpk(AltArr_t* aa, int k);

void partialDegrees_AA_unpk(AltArr_t* aa, degree_t* degsList);

degree_t mainDegree_AA_unpk(AltArr_t* aa);

int mainVariable_AA_unpk(AltArr_t* aa);

void coefficient_AA_unpk(AltArr_t* aa, const degree_t* degs, int nvar, mpq_t retCoef);

void setCoefficient_AA_unpk(AltArr_t* aa, const degree_t* degs, int nvar, const mpq_t coef);

int isEqualWithVariableOrdering_AA_unpk(AltArr_t* a, AltArr_t* b, const int* xs, int xsSize);

void expandNumVars_AA_unpk(AltArr_t* aa, int newNvar);

void expandNumVarsLeft_AA_unpk(AltArr_t* aa, int newNvar);







void shrinkNumVarsAtIdx_AA_unpk(AltArr_t* aa, int idx);

void shrinkAndReorderVars_AA_unpk(AltArr_t* aa, int* varMap, int varmapSize);

void reorderVars_AA_unpk(AltArr_t* aa, int* varMap, int varMapSize);

void setDegrees_AA_inp_unpk(AltArr_t* aa, int idx, const degree_t* degsList, int nvar);




void resizePolynomial_AA_unpk(AltArr_t* aa, int allocSize);




AltArr_t* deepCopyPolynomial_AA_unpk(AltArr_t* aa);

AltArrDegList_t* deepCopyPolynomial_AADegListFromAA_unpk(AltArr_t* aa);

void mergeSortPolynomial_AA_unpk(AltArr_t* aa);

AltArr_t* sortPolynomial_AA_unpk(AltArr_t* aa);

void condensePolyomial_AA_unpk(AltArr_t* aa);

extern void negatePolynomial_AA(AltArr_t* aa);
static inline void negatePolynomial_AA_unpk(AltArr_t* aa) {
 negatePolynomial_AA(aa);
}

extern void multiplyByRational_AA_inp(AltArr_t* aa, const mpq_t z);
static inline void multiplyByRational_AA_inp_unpk(AltArr_t* aa, const mpq_t z) {
 multiplyByRational_AA_inp(aa, z);
}

void evalPolyToVal_AA_unpk(const AltArr_t* aa, ratNum_t* vals, int nvar, ratNum_t res);

AltArr_t* evaluatePoly_AA_unpk(AltArr_t* aa, int* active, ratNum_t* vals, int nvar);







AltArr_t* mainLShiftPolynomial_AA_unpk (AltArr_t* aa, int n);
AltArr_t* mainLShiftPolynomial_AA_inp_unpk (AltArr_t* aa, int n);




AltArr_t* leadingTerm_AA_unpk (AltArr_t* aa, int nvar);






int leadingVariable_AA_unpk (AltArr_t* aa);






int mainLeadingDegree_AA_unpk (AltArr_t* aa);







AltArr_t* mainLeadingCoefficient_AA_unpk (AltArr_t* aa);
# 173 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h"
AltArr_t* mainCoefficientAtIdx_AA_unpk (AltArr_t* aa, int e);





AltArr_t* maxPolynomials_AA_unpk (AltArr_t* a, AltArr_t* b);





AltArr_t* maxPolynomials_AA_inp_unpk (AltArr_t* a, AltArr_t* b);







void addRationalNumber_AA_inp_unpk(AltArr_t* aa, const mpq_t coef);

AltArr_t* addPolynomials_AA_unpk(AltArr_t* a, AltArr_t* b, int nvar);

AltArr_t* subPolynomials_AA_unpk(AltArr_t* a, AltArr_t* b, int nvar);

AltArr_t* addPolynomials_AA_inp_unpk(AltArr_t* a, AltArr_t* b, int nvar);

AltArr_t* subPolynomials_AA_inp_unpk(AltArr_t* a, AltArr_t* b, int nvar);




void prodheapInsert_AA_unpk(ProductHeap_AA* h, ProductHeapChain_AA* chain, register degrees_t degs);







ProductHeapChain_AA* prodheapRemoveMax_AA_unpk(ProductHeap_AA* h);

AltArr_t* multiplyPolynomials_AA_unpk(AltArr_t* a, AltArr_t* b, int nvar);





void divideBySingleTerm_AA_unpk(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int nvar);

void dividePolynomials_AA_unpk(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, register int nvar);

void exactDividePolynomials_AA_unpk (AltArr_t* c, AltArr_t* b, AltArr_t** res_a, register int nvar);

int divideTestSingleTerm_AA_unpk(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, int nvar);







int divideTest_AA_unpk(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, int nvar);





void divideByLeadingTerms_AA_unpk (AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int nvar);
# 254 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h"
AltArr_t* derivative_AA_unpk(AltArr_t* aa, int idx, int k);
# 264 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h"
AltArr_t* integral_AA_unpk(AltArr_t* aa, int idx, int k);

AltArr_t* integrateExpand_AA_unpk(AltArr_t* aa, int k);





void integrateExpand_AA_inp_unpk(AltArr_t* aa, int k);







AltArr_t* univariateGCD_AA_unpk(AltArr_t* a, AltArr_t* b);
# 289 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Unpacked.h"
AltArr_t* commonFactor_AA_unpk(AltArr_t* a, AltArr_t** factored);

void univarEvaluate_AA_unpk(AltArr_t* aa, const mpq_t point, mpq_t res);


}
# 29 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 2
# 61 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
typedef long int polysize_t;

typedef mpq_t ratNum_t;
# 91 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
typedef struct Node {
 ratNum_t coef;
 degrees_t degs;

 struct Node* next;
} Node;




static inline void freeNode(Node* node) {
 if (node != 
# 102 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
            __null
# 102 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                ) {
  
# 103 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
 __gmpq_clear
# 103 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
          (node->coef);

  free(node);
 }
}





static inline Node* deepCopyNode(Node* node, int nvar) {
 Node* newNode = (Node*) calloc(1, sizeof(Node));
 newNode->degs = node->degs;
 
# 116 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
__gmpq_init
# 116 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
        (newNode->coef);
 
# 117 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
__gmpq_set
# 117 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
       (newNode->coef, node->coef);
 newNode->next = 
# 118 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
                __null
# 118 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                    ;

 return newNode;
}




void freePolynomial(Node* node);




Node* deepCopyPolynomial(Node* node, int nvar);






polysize_t numberOfTermsNode(Node* node);







Node* sortPolynomial(Node** poly, int nvar);





void condensePolyomial(Node* poly, int nvar);
# 162 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* addTerm(Node* trailingTerm, degrees_t d, const ratNum_t coef);







Node* addZeroTerm(Node* trailingTerm, degrees_t d);





Node* multiplyTerms(Node* a, Node* b, int nvar);





void negatePolynomial(Node* a);
# 191 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* evaluatePoly(const Node* a, const int* active, const mpq_t* vals, int nvar);




Node* leadingTerm (Node* a);






typedef struct AAElem {
 ratNum_t coef;
 degrees_t degs;
} AAElem_t;

typedef struct AltArr {
 int size;
 int alloc;
 int nvar;
 int unpacked;
 AAElem_t* elems;
} AltArr_t;




static inline void freePolynomial_AA(AltArr_t* aa) {
    if (aa == 
# 220 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             __null 
# 220 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                  || aa->size == 0){
  return;
    }

 if (aa->unpacked) {
  degree_t* degs_unpk = (degree_t*) aa->elems[0].degs;
  free(degs_unpk);
 }

 int size = aa->size;
 AAElem_t* elems = aa->elems;
 for (int i = 0; i < size; ++i) {
     
# 232 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
    __gmpq_clear
# 232 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
             (elems[i].coef);
 }
 free(aa->elems);
 free(aa);
}

typedef struct AAElem_DegList {
 ratNum_t coef;
 degree_t* degs;
} AAElem_DegList_t;

typedef struct AltArrDegList {
 int size;
 int alloc;
 int nvar;
 AAElem_DegList_t* elems;
} AltArrDegList_t;

static inline void freePolynomial_AADL(AltArrDegList_t* aa) {
 if (aa != 
# 251 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null
# 251 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              ) {
  int size = aa->size;
  AAElem_DegList_t* elems = aa->elems;
  for (int i = 0; i < size; ++i) {
   
# 255 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
  __gmpq_clear
# 255 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           (elems[i].coef);
   free(elems[i].degs);
  }
  free(aa->elems);
  free(aa);
 }
}





static inline AltArr_t* makePolynomial_AA(int allocSize, int nvar) {
 if (allocSize < 1) {
  return 
# 269 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
        __null
# 269 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
            ;
 }

 AltArr_t* newAA = (AltArr_t*) malloc(sizeof(AltArr_t));
 newAA->size = 0;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->unpacked = 0;
 newAA->elems = (AAElem_t*) malloc(sizeof(AAElem_t)*allocSize);
 return newAA;
}

static inline AltArrDegList_t* makePolynomial_AADL(int allocSize, int nvar) {
 if (allocSize < 1) {
  return 
# 283 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
        __null
# 283 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
            ;
 }
 AltArrDegList_t* newAA = (AltArrDegList_t*) malloc(sizeof(AltArrDegList_t));
 newAA->size = 0;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->elems = (AAElem_DegList_t*) malloc(sizeof(AAElem_DegList_t)*allocSize);
 return newAA;
}

static inline AltArr_t* makeConstPolynomial_AA(int allocSize, int nvar, const mpq_t coef) {
 if (allocSize < 1) {
  return 
# 295 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
        __null
# 295 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
            ;
 }

 AltArr_t* newAA = (AltArr_t*) malloc(sizeof(AltArr_t));
 newAA->size = 1;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->unpacked = 0;
 newAA->elems = (AAElem_t*) malloc(sizeof(AAElem_t)*allocSize);
 
# 304 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
__gmpq_init
# 304 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
        (newAA->elems->coef);
 
# 305 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
__gmpq_set
# 305 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
       (newAA->elems->coef, coef);
 newAA->elems->degs = 0;
 return newAA;
}

static inline int isZero_AA(AltArr_t* aa) {
    if (aa == 
# 311 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             __null 
# 311 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                  || aa->size == 0) {
     return 1;
    }

    int ret = 
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             ((
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
             aa->elems[0].coef
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             )->_mp_num._mp_size < 0 ? -1 : (
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
             aa->elems[0].coef
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             )->_mp_num._mp_size > 0) 
# 315 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                                        == 0;
    if (aa->unpacked) {
     ret = ret && isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar);
    } else {
     ret = ret && ((aa->elems[0].degs) == 0);
 }

 return ret;
}

static inline int isOne_AA(AltArr_t* aa) {
 if (aa != 
# 326 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null
# 326 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              ) {
  int ret = aa->unpacked ? isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar) : ((aa->elems[0].degs) == 0);
  ret = ret && 
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              (__builtin_constant_p (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) && (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) == 0 ? ((
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num._mp_size < 0 ? -1 : (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num._mp_size > 0) : __builtin_constant_p ((
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) == (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )) && (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) == (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) ? __gmpz_cmp ((&((
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num)), (&((
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_den))) : __gmpq_cmp_ui (
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ,
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ,
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1ul
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )) 
# 328 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                                                      == 0;
  return ret;
    }
    return 0;
}

static inline int isNegativeOne_AA(AltArr_t* aa) {
 if (aa != 
# 335 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null
# 335 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              ) {
  int ret = aa->unpacked ? isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar) : ((aa->elems[0].degs) == 0);
  ret = ret && 
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              (__builtin_constant_p ((
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) >= 0) && (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ))) && ((static_cast<unsigned long> (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ))) == 0 ? ((
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num._mp_size < 0 ? -1 : (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num._mp_size > 0) : __builtin_constant_p (((static_cast<unsigned long> (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ))) == (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )) && ((static_cast<unsigned long> (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ))) == (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ) ? __gmpz_cmp ((&((
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_num)), (&((
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )->_mp_den))) : __gmpq_cmp_ui (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              ,(static_cast<unsigned long> (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )),
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )) : __gmpq_cmp_si (
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              aa->elems[0].coef
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              , 
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              -1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              , 
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
              1l
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              )) 
# 337 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                                                     == 0;
  return ret;
    }
    return 0;
}

static inline int isConstant_AA(AltArr_t* aa) {
    if (aa == 
# 344 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
             __null 
# 344 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                  || aa->size == 0) {
        return 1;
    }
    int isZeroDegs = aa->unpacked ? isZeroExponentVector_unpk(aa->elems->degs, aa->nvar) : ((aa->elems->degs) == 0);
    if (isZeroDegs) {
        if (
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
           ((
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           aa->elems->coef
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
           )->_mp_num._mp_size < 0 ? -1 : (
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           aa->elems->coef
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
           )->_mp_num._mp_size > 0) 
# 349 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                                    >= 0) {
            return 1;
        } else {
            return -1;
        }
    }
    return 0;
}





static inline degree_t partialDegreeTerm_AA(AltArr_t* aa, int idx, int k) {
 if (aa == 
# 363 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null 
# 363 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
               || aa->size == 0) {
  return -1;
 }
 if (idx >= aa->size || k >= aa->nvar) {
  return -1;
 }
 if (aa->unpacked) {
  return ((degree_t*) aa->elems[idx].degs)[k];
 } else {
  degrees_t* masks = getExpMaskArray(aa->nvar);
  int* sizes = getExpOffsetArray(aa->nvar);
  return ( ((aa->elems[idx].degs) & (masks[k])) >> (sizes[k]));
 }
}

static inline void partialDegreesTerm_AA(const AltArr_t* aa, int idx, degree_t* degs) {
 if (aa == 
# 379 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null 
# 379 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
               || aa->size == 0 || idx >= aa->size) {
  return;
 }
 if (aa->unpacked) {
  for (int k = 0; k < aa->nvar; ++k ) {
   degs[k] = ((degree_t*) aa->elems[idx].degs)[k];
  }
 } else {
  degrees_t* masks = getExpMaskArray(aa->nvar);
  int* sizes = getExpOffsetArray(aa->nvar);
  for (int k = 0; k < aa->nvar; ++k ) {
   degs[k] = ( ((aa->elems[idx].degs) & (masks[k])) >> (sizes[k]));
  }
  free(masks);
  free(sizes);
 }
}




void printDegs_AA(FILE* fp, degrees_t degs, const char** syms, int nvar, degrees_t* masks, int* sizes);





void printPoly_AA(FILE* fp, const AltArr_t* aa, const char** syms, int nvar);






int isInOrder_AA(AltArr_t* aa);
# 423 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
int isExactlyEqual_AA(AltArr_t* a, AltArr_t* b);




void nonZeroVariables_AA(AltArr_t* aa, int* vars);




degree_t totalDegree_AA(AltArr_t* aa);





degree_t partialDegree_AA(AltArr_t* aa, int k);





void partialDegrees_AA(AltArr_t* aa, degree_t* degsList);






degree_t mainDegree_AA(AltArr_t* aa);




int mainVariable_AA(AltArr_t* aa);





void coefficient_AA(AltArr_t* aa, const degree_t* degs, int nvar, mpq_t retCoef);





void setCoefficient_AA(AltArr_t* aa, const degree_t* degs, int nvar, const mpq_t coef);






int isEqualWithVariableOrdering_AA(AltArr_t* a, AltArr_t* b, const int* xs, int xsSize);




AltArr_t* termAtIdx_AA(AltArr_t* a, int idx);





int isConstantTermZero_AA(AltArr_t* a);






void expandNumVars_AA(AltArr_t* aa, int newNvar);






void expandNumVarsLeft_AA(AltArr_t* aa, int newNvar);







void shrinkNumVarsAtIdx_AA(AltArr_t* aa, int idx);







void shrinkAndReorderVars_AA(AltArr_t* aa, int* varMap, int varmapSize);
# 527 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void reorderVars_AA(AltArr_t* aa, int* varMap, int varMapSize);

void setDegrees_AA_inp(AltArr_t* aa, int idx, const degree_t* degsList, int nvar);






static inline void resizePolynomial_AA(AltArr_t* aa, int allocSize) {
 if (aa != 
# 537 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
          __null 
# 537 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
               && aa->unpacked) {
  return resizePolynomial_AA_unpk(aa, allocSize);
 }

 if (allocSize < aa->size) {
  for (int i = aa->size; i >= allocSize; --i) {
   
# 543 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
  __gmpq_clear
# 543 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           (aa->elems[i].coef);
  }
  aa->size = allocSize;
 }
 aa->elems = (AAElem_t*) realloc(aa->elems, sizeof(AAElem_t)*allocSize);
 aa->alloc = allocSize;
}

static inline int monomialDivideTest_AA (AltArr_t* a, int idxa, AltArr_t* b, int idxb) {
 if (a == 
# 552 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
         __null
# 552 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
             ) {
  return 1;
 }
 if (b == 
# 555 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
         __null
# 555 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
             ) {
  return 0;
 }

 if (a->unpacked || b->unpacked) {
  return monomialDivideTest_AA_unpk(a, idxa, b, idxb);
 }

 return monomialDivideTest(a->elems[idxa].degs, b->elems[idxb].degs, a->nvar);
}






AltArr_t* deepCopyPolynomial_AAFromNode(Node* a, int nvar);






Node* deepCopyPolynomial_NodeFromAA(AltArr_t* aa);





AltArrDegList_t* deepCopyPolynomial_AADegListFromAA(AltArr_t* aa);






AltArr_t* deepCopyPolynomial_AA(AltArr_t* aa);






AltArr_t* sortPolynomial_AA(AltArr_t* aa);




void mergeSortPolynomial_AA(AltArr_t* aa);





void condensePolyomial_AA(AltArr_t* aa);




void negatePolynomial_AA(AltArr_t* a);

void exactDividePolynomials_AA (AltArr_t* c, AltArr_t* b, AltArr_t** res_a, register int nvar);




void multiplyByRational_AA_inp(AltArr_t* aa, const mpq_t z);






void evalPolyToVal_AA(const AltArr_t* aa, ratNum_t* vals, int nvar, ratNum_t res);
# 637 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* evaluatePoly_AA(AltArr_t* aa, int* active, ratNum_t* vals, int nvar);


AltArr_t* convertFromAAElemToAA (AAElem_t* coef, int coefSize, int nvar, int unpacked);


AltArr_t* swappingExponents_AA (AltArr_t* aa, int idx1, int idx2);




AltArr_t* mainLShiftPolynomial_AA (AltArr_t* aa, int n);
AltArr_t* mainLShiftPolynomial_AA_inp (AltArr_t* aa, int n);




AltArr_t* leadingTerm_AA (AltArr_t* aa, int nvar);






int leadingVariable_AA (AltArr_t* aa);






int mainLeadingDegree_AA (AltArr_t* aa);







AltArr_t* mainLeadingCoefficient_AA (AltArr_t* aa);
# 685 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* mainCoefficientAtIdx_AA (AltArr_t* aa, int e);
# 695 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void mainCoefficientListAtIdx_AA (AltArr_t* aa, int idx, AltArr_t*** cList, int *sz);





AltArr_t* maxPolynomials_AA (AltArr_t* a, AltArr_t* b);





AltArr_t* maxPolynomials_AA_inp (AltArr_t* a, AltArr_t* b);
# 718 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* addPolynomials(Node *a, Node *b, int nvar);

void addRationalNumber_AA_inp(AltArr_t* a, const mpq_t coef);






AltArr_t* addPolynomials_AA(AltArr_t* a, AltArr_t* b, int nvar);

AltArr_t* subPolynomials_AA(AltArr_t* a, AltArr_t* b, int nvar);
# 738 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* addPolynomials_inp(Node* a, Node* b, int nvar);
AltArr_t* addPolynomials_AA_inp(AltArr_t* a, AltArr_t* b, int nvar);
# 749 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* subPolynomials_inp(Node* a, Node* b, int nvar);
AltArr_t* subPolynomials_AA_inp(AltArr_t* a, AltArr_t* b, int nvar);







void subByLeadingTerm_AA (AltArr_t** a, int nvar);
# 768 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
typedef struct productHeapElem {
 Node* a_i;
 Node* b;
 Node* product;
 struct productHeapElem* next;
} productHeapElem;




typedef struct {
 productHeapElem** elements;
 polysize_t heapSize;
 polysize_t maxHeapSize;
 int nvar;
} ProductHeap;

typedef struct ProductHeapChain_AA {

 int a_i;
 int b;




 struct ProductHeapChain_AA* next;
} ProductHeapChain_AA;

typedef struct ProductHeapElem_AA {
 degrees_t degs;
 ProductHeapChain_AA* chain;
} ProductHeapElem_AA;

typedef struct ProductHeap_AA {
 ProductHeapElem_AA* elements;
 polysize_t heapSize;
 polysize_t maxHeapSize;
 int nvar;

 int lastB;



 degree_t* unpackedDegs;
} ProductHeap_AA;





void prodheapPrint(ProductHeap* h, int nvar);






productHeapElem* prodheapMakeElement(ProductHeap* h, Node* a, Node* b);


static inline ProductHeapChain_AA* prodheapMakeChain_AA(int a, int b, ProductHeapChain_AA* next) {



 ProductHeapChain_AA* chain = (ProductHeapChain_AA*) malloc(sizeof(ProductHeapChain_AA));
 chain->a_i = a;
 chain->b = b;
 chain->next = next;
 return chain;
}




static inline void prodheapFreeElement(productHeapElem* elem) {
 freeNode(elem->product);
 free(elem);
}




void prodheapFree(ProductHeap* h);

static inline void prodheapFreeChain_AA(ProductHeapChain_AA* chain) {
 ProductHeapChain_AA* next;
 while(chain != 
# 854 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
               __null
# 854 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                   ) {
  next = chain->next;
  free(chain);
  chain = next;
 }
}




static inline void prodheapFree_AA(ProductHeap_AA* h) {
 ProductHeapElem_AA* elems = h->elements;
 polysize_t s = h->heapSize;
 for (polysize_t i = 0; i < s; ++i) {
  prodheapFreeChain_AA(elems[i].chain);
 }
 free(h->elements);
 free(h);
}




ProductHeap* prodheapCreate(int nvar);




static inline ProductHeap_AA* prodheapCreate_AA(int nvar) {
 ProductHeap_AA* h = (ProductHeap_AA*) malloc(sizeof(ProductHeap_AA));
 h->elements = 
# 884 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
              __null
# 884 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                  ;
 h->heapSize = 0;
 h->maxHeapSize = 0;
 h->nvar = nvar;
 h->unpackedDegs = 
# 888 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
                  __null
# 888 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
                      ;
 return h;
}







ProductHeap* prodheapInit(Node* a, Node* b, int nvar);







ProductHeap_AA* prodheapInit_AA(AltArr_t* a, AltArr_t* b, int nvar);




static inline void prodheapResize_AA(ProductHeap_AA* h, int newAllocSize) {
 h->elements = (ProductHeapElem_AA*) realloc(h->elements, sizeof(ProductHeapElem_AA)*newAllocSize);
 h->maxHeapSize = newAllocSize;
}





void prodheapSwim(ProductHeap* h, int index);






void prodheapSink(ProductHeap* h, int i);
# 937 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void prodheapInsert(ProductHeap* h, productHeapElem* elem);





void prodheapInsert_AA(ProductHeap_AA* h, ProductHeapChain_AA* chain, register degrees_t degs);
# 952 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
static inline degrees_t* prodheapPeek(ProductHeap* h) {
 if (h->heapSize > 0) {
  return &(h->elements[0]->product->degs);
 }
 return 
# 956 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
       __null
# 956 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           ;
}





static inline degrees_t* prodheapPeek_AA(ProductHeap_AA* h) {
 if (h->heapSize > 0) {
  return &(h->elements->degs);
 }
 return 
# 967 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 3 4
       __null
# 967 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
           ;
}







productHeapElem* prodheapRemoveMax(ProductHeap* h);







ProductHeapChain_AA* prodheapRemoveMax_AA(ProductHeap_AA* h);






Node* prodheapExtract(ProductHeap* h);
# 1002 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* multiplyPolynomials(Node* a, Node* b, int nvar);
# 1013 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* multiplyPolynomials_AA(AltArr_t* a, AltArr_t* b, int nvar);
# 1027 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* multiplyPolynomials_inp(Node* a, Node* b, int nvar);
# 1041 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* multiplyPolynomials_AA_inp(AltArr_t* a, AltArr_t* b, int nvar);





void multiplyPolynomialAtIdxByXn_AA_inp (AltArr_t* aa, int idx, int n, int nvar);
# 1061 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* exponentiatePoly(Node* a, unsigned int n, int nvar);
# 1071 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* exponentiatePoly_AA(AltArr_t* a, unsigned int n, int nvar);
# 1086 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
Node* divisionGetNextTerm(ProductHeap* h);


void divisionGetNextTerm_AA(ProductHeap_AA* h, const AAElem_t* __restrict__ aElems, const AAElem_t* __restrict__ bElems, mpq_t* retCoef);
# 1099 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void divideBySingleTerm(Node* c, Node* b, Node** res_a, Node** res_r, int nvar);






void divideBySingleTerm_AA(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int nvar);






void dividePolynomials(Node* c, Node* b, Node** res_a, Node** res_r, int nvar);






void dividePolynomials_AA(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int nvar);
# 1130 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void univariatePseudoDividePolynomials_AA(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int* e, int lazy);

int divideTestSingleTerm_AA(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, int nvar);







int divideTest_AA(AltArr_t* c, AltArr_t* b, AltArr_t** res_a, int nvar);





void divideByLeadingTerms_AA (AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int nvar);
# 1158 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* derivative_AA(AltArr_t* aa, int idx, int k);
# 1168 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* integral_AA(AltArr_t* aa, int idx, int k);
# 1177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* integrateExpand_AA(AltArr_t* aa, int k);
# 1193 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void integralContent_AA(AltArr_t* aa, mpq_t ret);






AltArr_t* primitivePart_AA(AltArr_t* aa);







AltArr_t* primitivePartAndContent_AA(AltArr_t* aa, mpq_t cont);




void primitivePart_AA_inp(AltArr_t* aa);






AltArr_t* univariateGCD_AA(AltArr_t* a, AltArr_t* b);





void integerPolynomialTest_AA(AltArr_t* aa, mpz_t mpzG);
# 1235 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* commonFactor_AA(AltArr_t* a, AltArr_t** factored);
# 1249 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* univarInterpolate_AA(mpq_t* points, mpq_t* vals, int nPoints);
# 1259 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
AltArr_t* univarInterpolateDoubles_AA(double* points, double* vals, int nPoints);





void univarEvaluate_AA(AltArr_t* aa, const mpq_t point, mpq_t res);






typedef struct mpzCoefs_t{
    mpz_t mpzCoef;
    struct mpzCoefs_t* next;
} mpzCoefs_t;

typedef struct content_t{
    mpz_t cont;
} content_t;





content_t* content (Node* a);







Node* primitivePart (Node* a, content_t** returnContent, int nvar);
# 1313 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void multiDivisorDivision_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar, int type);







void normalForm_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar);
void heapMDD_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar);







void triangularSetMDD_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar);
void recTriangularSetMDD_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar);
# 1340 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h"
void primitiveFactorTriangularSetMDD_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t** r, int s, int nvar);





static inline int* recursiveLoop (int nvar)
{
  int size = (1 << nvar);
  int* seq = (int*) calloc( size-1, sizeof (int));

  if (nvar == 1)
      return seq;
  else {
   int* seq_part = recursiveLoop (nvar-1);
   for (int i = 0; i < (size/2)-1; i++) {
       seq[i] = seq_part[i];
       seq[(size/2) +i] = seq_part[i];
      }

      free(seq_part);
      seq[(size/2)-1] = nvar-1;
      return seq;
    }
}






int isNormalizedTriangularSet_AA (AltArr_t** G, int s, int nvar);




int multiDivisorDivisionVerification_AA (AltArr_t* f, AltArr_t** G, AltArr_t** Q, AltArr_t* r, AltArr_t* hPow, int nSet, int tnvar);



}
# 30 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Unpacked.h" 1






extern "C" {







typedef struct AAZElem AAZElem_t;
typedef struct AltArrZ AltArrZ_t;
typedef struct AltArrZDegList AltArrZDegList_t;
typedef struct ProductHeap_AAZ ProductHeap_AAZ;
typedef struct ProductHeapChain_AAZ ProductHeapChain_AAZ;
# 42 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Unpacked.h"
AltArrZ_t* makePolynomial_AAZ_unpk(int allocSize, int nvar);

void freePolynomial_AAZ_unpk(AltArrZ_t* aa);

void unpackExponentVectors_AAZ_inp(AltArrZ_t* aa);

void tryPackExponentVectors_AAZ_inp(AltArrZ_t* aa);

void packExponentVectors_AAZ_inp(AltArrZ_t* aa);

int monomialDivideTest_AAZ_unpk(AltArrZ_t* a, int idxa, AltArrZ_t* b, int idxb);

void printDegs_AAZ_unpk(FILE* fp, degrees_t degs, const char** syms, int nvar);

void printPoly_AAZ_unpk(FILE* fp, const AltArrZ_t* aa, const char** syms, int nvar);

int isExactlyEqual_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b);

void nonZeroVariables_AAZ_unpk(AltArrZ_t* a, int* vars);

degree_t totalDegree_AAZ_unpk(AltArrZ_t* aa);

degree_t partialDegree_AAZ_unpk(AltArrZ_t* aa, int k);

void partialDegrees_AAZ_unpk(const AltArrZ_t* aa, degree_t* degsList);

degree_t mainDegree_AAZ_unpk(AltArrZ_t* aa);

int mainVariable_AAZ_unpk(AltArrZ_t* aa);

void coefficient_AAZ_unpk(AltArrZ_t* aa, const degree_t* degs, int nvar, mpz_t retCoef);

void setCoefficient_AAZ_unpk(AltArrZ_t* aa, const degree_t* degs, int nvar, const mpz_t coef);

int isEqualWithVariableOrdering_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b, const int* xs, int xsSize);

void expandNumVars_AAZ_unpk(AltArrZ_t* aa, int newNvar);

void expandNumVarsLeft_AAZ_unpk(AltArrZ_t* aa, int newNvar);







void shrinkNumVarsAtIdx_AAZ_unpk(AltArrZ_t* aa, int idx);

void shrinkAndReorderVars_AAZ_unpk(AltArrZ_t* aa, int* varMap, int varmapSize);

void reorderVars_AAZ_unpk(AltArrZ_t* aa, int* varMap, int varMapSize);

void setDegrees_AAZ_inp_unpk(AltArrZ_t* aa, int idx, const degree_t* degsList, int nvar);




void resizePolynomial_AAZ_unpk(AltArrZ_t* aa, int allocSize);




AltArrZ_t* deepCopyPolynomial_AAZ_unpk(const AltArrZ_t* aa);

AltArrZDegList_t* deepCopyPolynomial_AAZDegListFromAA_unpk(AltArrZ_t* aa);

AltArr_t* deepCopyPolynomial_AAFromAAZ_unpk(AltArrZ_t* aa);

AltArrZ_t* deepCopyPolynomial_AAZFromAA_unpk(AltArr_t* aa);

void mergeSortPolynomial_AAZ_unpk(AltArrZ_t* aa);

AltArrZ_t* sortPolynomial_AAZ_unpk(AltArrZ_t* aa);

void condensePolyomial_AAZ_unpk(AltArrZ_t* aa);

extern void negatePolynomial_AAZ(AltArrZ_t* aa);
static inline void negatePolynomial_AAZ_unpk(AltArrZ_t* aa) {
 negatePolynomial_AAZ(aa);
}

extern void multiplyByRational_AAZ_inp(AltArrZ_t* aa, const mpz_t z);
static inline void multiplyByRational_AAZ_inp_unpk(AltArrZ_t* aa, const mpz_t z) {
 multiplyByRational_AAZ_inp(aa, z);
}

void evalPolyToVal_AAZ_unpk(const AltArrZ_t* aa, mpz_t* vals, int nvar, mpz_t res);

AltArrZ_t* evaluatePoly_AAZ_unpk(const AltArrZ_t* aa, int* active, mpz_t* vals, int nvar);







AltArrZ_t* mainLShiftPolynomial_AAZ_unpk (AltArrZ_t* aa, int n);
AltArrZ_t* mainLShiftPolynomial_AAZ_inp_unpk (AltArrZ_t* aa, int n);




AltArrZ_t* leadingTerm_AAZ_unpk (AltArrZ_t* aa, int nvar);






int leadingVariable_AAZ_unpk (AltArrZ_t* aa);






int mainLeadingDegree_AAZ_unpk (AltArrZ_t* aa);







AltArrZ_t* mainLeadingCoefficient_AAZ_unpk (AltArrZ_t* aa);
# 175 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Unpacked.h"
AltArrZ_t* mainCoefficientAtIdx_AAZ_unpk (AltArrZ_t* aa, int e);





AltArrZ_t* maxPolynomials_AAZ_unpk (AltArrZ_t* a, AltArrZ_t* b);





AltArrZ_t* maxPolynomials_AAZ_inp_unpk (AltArrZ_t* a, AltArrZ_t* b);







void addInteger_AAZ_inp_unpk(AltArrZ_t* aa, const mpz_t coef);

AltArrZ_t* addPolynomials_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b, int nvar);

AltArrZ_t* subPolynomials_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b, int nvar);

AltArrZ_t* addPolynomials_AAZ_inp_unpk(AltArrZ_t* a, AltArrZ_t* b, int nvar);

AltArrZ_t* subPolynomials_AAZ_inp_unpk(AltArrZ_t* a, AltArrZ_t* b, int nvar);

AltArrZ_t* CFDucosOptZ_subPolynomials_AAZ_inp_unpk (AltArrZ_t* a, AltArrZ_t* b, int nvar, AltArrZ_t** Pe, int e);




void prodheapInsert_AAZ_unpk(ProductHeap_AAZ* h, ProductHeapChain_AAZ* chain, register degrees_t degs);







ProductHeapChain_AAZ* prodheapRemoveMax_AAZ_unpk(ProductHeap_AAZ* h);

AltArrZ_t* multiplyPolynomials_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b, int nvar);





void divideBySingleTerm_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int nvar);

void dividePolynomials_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, register int nvar);

void exactDividePolynomials_AAZ_unpk (AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, register int nvar);

void univariatePseudoDivideBySingleTerm_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, int lazy);

void univariatePseudoDividePolynomials_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, int lazy);

int divideTestSingleTerm_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, int nvar);







int divideTest_AAZ_unpk(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, int nvar);





void divideByLeadingTerms_AAZ_unpk (AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int nvar);
# 262 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Unpacked.h"
AltArrZ_t* derivative_AAZ_unpk(AltArrZ_t* aa, int idx, int k);







AltArrZ_t* primitivePartAndContent_AAZFromAA_unpk(AltArr_t* aa, mpq_t cont);

AltArrZ_t* univariateGCD_AAZ_unpk(AltArrZ_t* a, AltArrZ_t* b);
# 282 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Unpacked.h"
AltArrZ_t* commonFactor_AAZ_unpk(AltArrZ_t* a, AltArrZ_t** factored);

void univarEvaluate_AAZ_unpk(AltArrZ_t* aa, const mpz_t point, mpz_t res);



}
# 31 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 2







typedef struct AAZElem {
 mpz_t coef;
 degrees_t degs;
} AAZElem_t;

typedef struct AltArrZ {
 int size;
 int alloc;
 int nvar;
 int unpacked;
 AAZElem_t* elems;
} AltArrZ_t;




static inline void freePolynomial_AAZ(AltArrZ_t* aa) {
 if (aa != 
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              ) {
  int size = aa->size;
  AAZElem_t* elems = aa->elems;
  for (int i = 0; i < size; ++i) {
   
# 59 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
  __gmpz_clear
# 59 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           (elems[i].coef);
  }
  free(aa->elems);
  free(aa);
 }
}

typedef struct AAZElem_DegList {
 mpz_t coef;
 degree_t* degs;
} AAZElem_DegList_t;

typedef struct AltArrZDegList {
 int size;
 int alloc;
 int nvar;
 AAZElem_DegList_t* elems;
} AltArrZDegList_t;

static inline void freePolynomial_AAZDL(AltArrZDegList_t* aa) {
 if (aa != 
# 79 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null
# 79 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              ) {
  int size = aa->size;
  AAZElem_DegList_t* elems = aa->elems;
  for (int i = 0; i < size; ++i) {
   
# 83 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
  __gmpz_clear
# 83 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           (elems[i].coef);
   free(elems[i].degs);
  }
  free(aa->elems);
  free(aa);
 }
}






static inline AltArrZ_t* makePolynomial_AAZ(int allocSize, int nvar) {
 if (allocSize < 1) {
  return 
# 98 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
        __null
# 98 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
            ;
 }
 AltArrZ_t* newAA = (AltArrZ_t*) malloc(sizeof(AltArrZ_t));
 newAA->size = 0;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->unpacked = 0;
 newAA->elems = (AAZElem_t*) malloc(sizeof(AAZElem_t)*allocSize);
 return newAA;
}

static inline AltArrZDegList_t* makePolynomial_AAZDL(int allocSize, int nvar) {
 if (allocSize < 1) {
  return 
# 111 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
        __null
# 111 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
            ;
 }
 AltArrZDegList_t* newAA = (AltArrZDegList_t*) malloc(sizeof(AltArrZDegList_t));
 newAA->size = 0;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->elems = (AAZElem_DegList_t*) malloc(sizeof(AAZElem_DegList_t)*allocSize);
 return newAA;
}

static inline AltArrZ_t* makeConstPolynomial_AAZ(int allocSize, int nvar, const mpz_t coef) {
 if (allocSize < 1) {
  return 
# 123 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
        __null
# 123 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
            ;
 }

 AltArrZ_t* newAA = (AltArrZ_t*) malloc(sizeof(AltArrZ_t));
 newAA->size = 1;
 newAA->alloc = allocSize;
 newAA->nvar = nvar;
 newAA->unpacked = 0;
 newAA->elems = (AAZElem_t*) malloc(sizeof(AAZElem_t)*allocSize);
 
# 132 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
__gmpz_init
# 132 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
        (newAA->elems->coef);
 
# 133 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
__gmpz_set
# 133 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
       (newAA->elems->coef, coef);
 newAA->elems->degs = 0;
 return newAA;
}

static inline int isZero_AAZ(AltArrZ_t* aa) {
    if (aa == 
# 139 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
             __null 
# 139 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                  || aa->size == 0) {
     return 1;
    }

    int ret = 
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
             ((
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
             aa->elems[0].coef
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
             )->_mp_size < 0 ? -1 : (
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
             aa->elems[0].coef
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
             )->_mp_size > 0) 
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                                        == 0;
    if (aa->unpacked) {
     ret = ret && isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar);
    } else {
     ret = ret && ((aa->elems[0].degs) == 0);
 }

 return ret;
}

static inline int isOne_AAZ(AltArrZ_t* aa) {
 if (aa != 
# 154 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null
# 154 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              ) {
  int ret = aa->unpacked ? isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar) : ((aa->elems[0].degs) == 0);
  ret = ret && 
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              (__builtin_constant_p (
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              1ul
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ) && (
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              1ul
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ) == 0 ? ((
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )->_mp_size < 0 ? -1 : (
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )->_mp_size > 0) : __gmpz_cmp_ui (
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ,
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              1ul
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )) 
# 156 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                                                 == 0;
  return ret;
    }
    return 0;
}

static inline int isNegativeOne_AAZ(AltArrZ_t* aa) {
 if (aa != 
# 163 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null
# 163 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              ) {
  int ret = aa->unpacked ? isZeroExponentVector_unpk(aa->elems[0].degs, aa->nvar) : ((aa->elems[0].degs) == 0);
  ret = ret && 
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              (__builtin_constant_p ((
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ) >= 0) && (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ))) && ((static_cast<unsigned long> (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ))) == 0 ? ((
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )->_mp_size < 0 ? -1 : (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )->_mp_size > 0) : __gmpz_cmp_ui (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ,(static_cast<unsigned long> (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )))) : __gmpz_cmp_si (
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              aa->elems[0].coef
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              ,
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              -1l
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              )) 
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                                                 == 0;
  return ret;
    }
    return 0;
}

static inline int isConstant_AAZ(AltArrZ_t* aa) {
    if (aa == 
# 172 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
             __null 
# 172 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                  || aa->size == 0) {
        return 1;
    }
    int isZeroDegs = aa->unpacked ? isZeroExponentVector_unpk(aa->elems->degs, aa->nvar) : ((aa->elems->degs) == 0);
    if (isZeroDegs) {
        if (
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
           ((
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           aa->elems->coef
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
           )->_mp_size < 0 ? -1 : (
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           aa->elems->coef
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
           )->_mp_size > 0) 
# 177 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                                    >= 0) {
            return 1;
        } else {
            return -1;
        }
    }
    return 0;
}





static inline degree_t partialDegreeTerm_AAZ(AltArrZ_t* aa, int idx, int k) {
 if (aa == 
# 191 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null 
# 191 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               || aa->size == 0) {
  return -1;
 }
 if (idx >= aa->size || k >= aa->nvar) {
  return -1;
 }
 if (aa->unpacked) {
  return ((degree_t*) aa->elems[idx].degs)[k];
 } else {
  degrees_t* masks = getExpMaskArray(aa->nvar);
  int* sizes = getExpOffsetArray(aa->nvar);
  return ( ((aa->elems[idx].degs) & (masks[k])) >> (sizes[k]));
 }
}

static inline void partialDegreesTerm_AAZ(const AltArrZ_t* aa, int idx, degree_t* degs) {
 if (aa == 
# 207 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null 
# 207 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               || aa->size == 0 || idx >= aa->size) {
  return;
 }
 if (aa->unpacked) {
  for (int k = 0; k < aa->nvar; ++k ) {
   degs[k] = ((degree_t*) aa->elems[idx].degs)[k];
  }
 } else {
  degrees_t* masks = getExpMaskArray(aa->nvar);
  int* sizes = getExpOffsetArray(aa->nvar);
  for (int k = 0; k < aa->nvar; ++k ) {
   degs[k] = ( ((aa->elems[idx].degs) & (masks[k])) >> (sizes[k]));
  }
  free(masks);
  free(sizes);
 }
}

void printPoly_AAZ(FILE* fp, const AltArrZ_t* aa, const char** syms, int nvar);






int isInOrder_AAZ(AltArrZ_t* aa);






void expandNumVars_AAZ(AltArrZ_t* aa, int newNvar);
# 249 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
int isExactlyEqual_AAZ(AltArrZ_t* a, AltArrZ_t* b);




void nonZeroVariables_AAZ(AltArrZ_t* aa, int* vars);




degree_t totalDegree_AAZ(AltArrZ_t* aa);





degree_t partialDegree_AAZ(AltArrZ_t* aa, int k);





void partialDegrees_AAZ(const AltArrZ_t* aa, degree_t* degs);






degree_t mainDegree_AAZ(AltArrZ_t* aa);




int mainVariable_AAZ(AltArrZ_t* aa);





void coefficient_AAZ(AltArrZ_t* aa, const degree_t* degs, int nvar, mpz_t retCoef);





void setCoefficient_AAZ(AltArrZ_t* aa, const degree_t* degs, int nvar, const mpz_t coef);






int isEqualWithVariableOrdering_AAZ(AltArrZ_t* a, AltArrZ_t* b, const int* xs, int xsSize);




AltArrZ_t* termAtIdx_AAZ(AltArrZ_t* a, int idx);





int isConstantTermZero_AAZ(AltArrZ_t* a);






void expandNumVarsLeft_AAZ(AltArrZ_t* aa, int newNvar);







void shrinkNumVarsAtIdx_AAZ(AltArrZ_t* aa, int idx);







void shrinkAndReorderVars_AAZ(AltArrZ_t* aa, int* varMap, int varmapSize);
# 346 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void reorderVars_AAZ(AltArrZ_t* aa, int* varMap, int varMapSize);

void setDegrees_AAZ_inp(AltArrZ_t* aa, int idx, const degree_t* degsList, int nvar);

static inline void resizePolynomial_AAZ(AltArrZ_t* aa, int allocSize) {
 if (aa != 
# 351 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null 
# 351 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               && aa->unpacked) {
  return resizePolynomial_AAZ_unpk(aa, allocSize);
 }
 if (allocSize < aa->size) {
  for (int i = aa->size; i >= allocSize; --i) {
   
# 356 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
  __gmpz_clear
# 356 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           (aa->elems[i].coef);
  }
  aa->size = allocSize;
 }
 aa->elems = (AAZElem_t*) realloc(aa->elems, sizeof(AAZElem_t)*allocSize);
 aa->alloc = allocSize;
}






AltArrZ_t* deepCopyPolynomial_AAZFromNode(Node* a, int nvar);






Node* deepCopyPolynomial_NodeFromAAZ(AltArrZ_t* aa);





AltArrZDegList_t* deepCopyPolynomial_AAZDegListFromAA(AltArrZ_t* aa);






AltArrZ_t* deepCopyPolynomial_AAZ(const AltArrZ_t* aa);






AltArrZ_t* deepCopyPolynomial_AAZFromAA(AltArr_t* aa);







AltArr_t* deepCopyPolynomial_AAFromAAZ(AltArrZ_t* aa);






AltArrZ_t* sortPolynomial_AAZ(AltArrZ_t* aa);




void mergeSortPolynomial_AAZ(AltArrZ_t* aa);





void condensePolyomial_AAZ(AltArrZ_t* aa);




void negatePolynomial_AAZ(AltArrZ_t* a);

static inline void multiplyByInteger_AAZ_inp(AltArrZ_t* aa, const mpz_t z) {
 if (aa == 
# 430 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null 
# 430 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               || aa->size == 0) {
  return;
 }

 for (int i = 0; i < aa->size; ++i) {
  
# 435 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
 __gmpz_mul
# 435 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
        (aa->elems[i].coef, aa->elems[i].coef, z);
 }
}

static inline void divideByIntegerExact_AAZ_inp(AltArrZ_t* aa, const mpz_t z) {
 if (aa == 
# 440 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
          __null 
# 440 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               || aa->size == 0) {
  return;
 }

 for (int i = 0; i < aa->size; ++i) {
  
# 445 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
 __gmpz_divexact
# 445 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
             (aa->elems[i].coef, aa->elems[i].coef, z);
 }
}


AltArrZ_t* multiplyByInteger_AAZ(AltArrZ_t* a, mpz_t div);





AltArrZ_t* divideByInteger_AAZ(AltArrZ_t* a, mpz_t div);







void evalPolyToVal_AAZ(const AltArrZ_t* aa, mpz_t* vals, int nvar, mpz_t res);
# 473 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* evaluatePoly_AAZ(const AltArrZ_t* aa, int* active, mpz_t* vals, int nvar);


AltArrZ_t* convertFromAAZElemToAAZ (AAZElem_t* coef, int coefSize, int nvar, int unpacked);


AltArrZ_t* swappingExponents_AAZ (AltArrZ_t* aa, int idx1, int idx2);




AltArrZ_t* mainLShiftPolynomial_AAZ (AltArrZ_t* aa, int n);
AltArrZ_t* mainLShiftPolynomial_AAZ_inp (AltArrZ_t* aa, int n);



AltArrZ_t* leadingTerm_AAZ (AltArrZ_t* aa, int nvar);






int leadingVariable_AAZ (AltArrZ_t* aa);






int mainLeadingDegree_AAZ (AltArrZ_t* aa);







AltArrZ_t* mainLeadingCoefficient_AAZ (AltArrZ_t* aa);
# 520 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* mainCoefficientAtIdx_AAZ (AltArrZ_t* aa, int e);
# 529 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void mainCoefficientListAtIdx_AAZ (AltArrZ_t* aa, int idx, AltArrZ_t*** cList, int *sz);





AltArrZ_t* maxPolynomials_AAZ (AltArrZ_t* a, AltArrZ_t* b);





AltArrZ_t* maxPolynomials_AAZ_inp (AltArrZ_t* a, AltArrZ_t* b);




static inline void infinityNorm_AAZ (AltArrZ_t* a, mpz_t c) {
 if (a == 
# 547 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
         __null 
# 547 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
              || a->size == 0) {
  
# 548 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
 __gmpz_set_ui
# 548 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           (c, 0ul);
  return;
 }
 int size = a->size;
 AAZElem_t* elems = a->elems;
 
# 553 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
__gmpz_abs
# 553 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
       (c, elems[0].coef);
 for (int i = 1; i < size; ++i) {
  if (
# 555 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
     __gmpz_cmpabs
# 555 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
               (c, elems[i].coef) < 0) {
   
# 556 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
  __gmpz_abs
# 556 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
         (c, elems[i].coef);
  }
 }
}






void addInteger_AAZ_inp(AltArrZ_t* aa, const mpz_t coef);






AltArrZ_t* addPolynomials_AAZ(AltArrZ_t* a, AltArrZ_t* b, int nvar);
# 582 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* addPolynomials_AAZ_inp(AltArrZ_t* a, AltArrZ_t* b, int nvar);






AltArrZ_t* subPolynomials_AAZ(AltArrZ_t* a, AltArrZ_t* b, int nvar);
# 598 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* subPolynomials_AAZ_inp(AltArrZ_t* a, AltArrZ_t* b, int nvar);





AltArrZ_t* CFDucosOptZ_subPolynomials_AAZ_inp (AltArrZ_t* a, AltArrZ_t* b, int nvar,
            AltArrZ_t** Pe, int e);






typedef struct ProductHeapChain_AAZ {

 int a_i;
 int b;




 struct ProductHeapChain_AAZ* next;
} ProductHeapChain_AAZ;

typedef struct ProductHeapElem_AAZ {
 degrees_t degs;
 ProductHeapChain_AAZ* chain;
} ProductHeapElem_AAZ;

typedef struct ProductHeap_AAZ {
 ProductHeapElem_AAZ* elements;
 polysize_t heapSize;
 polysize_t maxHeapSize;
 int nvar;

 int lastB;



 degree_t* unpackedDegs;
} ProductHeap_AAZ;







static inline ProductHeapChain_AAZ* prodheapMakeChain_AAZ(int a, int b, ProductHeapChain_AAZ* next) {



 ProductHeapChain_AAZ* chain = (ProductHeapChain_AAZ*) malloc(sizeof(ProductHeapChain_AAZ));
 chain->a_i = a;
 chain->b = b;
 chain->next = next;
 return chain;
}




static inline void prodheapFreeChain_AAZ(ProductHeapChain_AAZ* chain) {
 ProductHeapChain_AAZ* next;
 while(chain != 
# 663 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
               __null
# 663 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                   ) {
  next = chain->next;
  free(chain);
  chain = next;
 }
}




static inline void prodheapFree_AAZ(ProductHeap_AAZ* h) {
 ProductHeapElem_AAZ* elems = h->elements;
 polysize_t s = h->heapSize;
 for (polysize_t i = 0; i < s; ++i) {
  prodheapFreeChain_AAZ(elems[i].chain);
 }
 free(h->elements);
 free(h);
}




static inline ProductHeap_AAZ* prodheapCreate_AAZ(int nvar) {
 ProductHeap_AAZ* h = (ProductHeap_AAZ*) malloc(sizeof(ProductHeap_AAZ));
 h->elements = 
# 688 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
              __null
# 688 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                  ;
 h->heapSize = 0;
 h->maxHeapSize = 0;
 h->nvar = nvar;
 h->unpackedDegs = 
# 692 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
                  __null
# 692 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
                      ;
 return h;
}







ProductHeap_AAZ* prodheapInit_AAZ(AltArrZ_t* a, AltArrZ_t* b, int nvar);




static inline void prodheapResize_AAZ(ProductHeap_AAZ* h, int newAllocSize) {
 h->elements = (ProductHeapElem_AAZ*) realloc(h->elements, sizeof(ProductHeapElem_AAZ)*newAllocSize);
 h->maxHeapSize = newAllocSize;
}





void prodheapInsert_AAZ(ProductHeap_AAZ* h, ProductHeapChain_AAZ* chain, register degrees_t degs);
# 725 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
static inline degrees_t* prodheapPeek_AAZ(ProductHeap_AAZ* h) {
 if (h->heapSize > 0) {
  return &(h->elements->degs);
 }
 return 
# 729 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h" 3 4
       __null
# 729 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
           ;
}







ProductHeapChain_AAZ* prodheapRemoveMax_AAZ(ProductHeap_AAZ* h);
# 749 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* multiplyPolynomials_AAZ(AltArrZ_t* a, AltArrZ_t* b, int nvar);
# 763 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* multiplyPolynomials_AAZ_inp(AltArrZ_t* a, AltArrZ_t* b, int nvar);





void multiplyPolynomialAtIdxByXn_AAZ_inp (AltArrZ_t* aa, int idx, int n, int nvar);
# 784 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* exponentiatePoly_AAZ(AltArrZ_t* a, unsigned int n, int nvar);
# 801 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void divisionGetNextTerm_AAZ(ProductHeap_AAZ* h, const AAZElem_t* __restrict__ aElems, const AAZElem_t* __restrict__ bElems, mpz_t* retCoef);
# 811 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void divideBySingleTerm_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int nvar);






void dividePolynomials_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int nvar);

void exactDividePolynomials_AAZ (AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, register int nvar);

void univariatePseudoDivideBySingleTerm_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, int lazy);




void univariatePseudoDividePolynomials_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, int lazy);







int divideTest_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, int nvar);
int divideTestSingleTerm_AAZ(AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, int nvar);





void divideByLeadingTerms_AAZ (AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int nvar);
# 854 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* derivative_AAZ(AltArrZ_t* aa, int idx, int k);
# 864 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArr_t* integral_AAZ(AltArrZ_t* aa, int idx, int k);
# 879 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void integralContent_AAZ(AltArrZ_t* aa, mpz_t ret);






AltArrZ_t* primitivePart_AAZ(AltArrZ_t* aa);







AltArrZ_t* primitivePartAndContent_AAZ(AltArrZ_t* aa, mpz_t cont);
# 904 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* primitivePartAndContent_AAZFromAA(AltArr_t* aa, mpq_t cont);




void primitivePart_AAZ_inp(AltArrZ_t* aa);





void primitivePartContent_AAZ_inp(AltArrZ_t* aa, mpz_t content);







AltArrZ_t* univariateHeuristicGCD_AAZ(AltArrZ_t* a, AltArrZ_t* b);
# 932 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* univariateHeuristicPrimitiveGCD_AAZ(AltArrZ_t* a, AltArrZ_t* b);






AltArrZ_t* univariateGCD_AAZ(AltArrZ_t* a, AltArrZ_t* b);
# 954 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void integerPolynomialTest_AAZ(AltArrZ_t* aa, mpz_t mpzG);
# 963 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
AltArrZ_t* commonFactor_AAZ(AltArrZ_t* a, AltArrZ_t** factored);
# 975 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void univarEvaluate_AAZ(AltArrZ_t* aa, const mpz_t point, mpz_t res);
# 996 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void multiDivisorDivision_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar, int type);







void normalForm_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar);
void heapMDD_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar);







void triangularSetMDD_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar);
void recTriangularSetMDD_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar);
# 1023 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support.h"
void primitiveFactorTriangularSetMDD_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t** r, int s, int nvar);





static inline int* recursiveLoopZ (int nvar)
{
  int size = (1 << nvar);
  int* seq = (int*) calloc( size-1, sizeof (int));

  if (nvar == 1)
      return seq;
  else {
   int* seq_part = recursiveLoopZ (nvar-1);
   for (int i = 0; i < (size/2)-1; i++) {
       seq[i] = seq_part[i];
       seq[(size/2) +i] = seq_part[i];
      }

      free(seq_part);
      seq[(size/2)-1] = nvar-1;
      return seq;
    }
}





int isNormalizedTriangularSet_AAZ (AltArrZ_t** G, int s, int nvar);




int multiDivisorDivisionVerification_AAZ (AltArrZ_t* f, AltArrZ_t** G, AltArrZ_t** Q, AltArrZ_t* r, AltArrZ_t* hPow, int nSet, int tnvar);


}
# 12 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_CppSupport-AA.hpp" 1
# 11 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_CppSupport-AA.hpp"
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support-AA.h" 1
# 12 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_CppSupport-AA.hpp" 2

typedef mpq_class ratNum_class;

static bool degsToString(std::stringstream& ss, const char** vars, degrees_t degs, bool needsMult, int nvar) {
    int* sizes = getExpOffsetArray(nvar);
    unsigned long long int* masks = getExpMaskArray(nvar);

 bool ret = 1;
 for (int i = 0; i < nvar; ++i) {
  unsigned long int deg = (degs & masks[i]) >> sizes[i];
  if (deg > 0) {
   if (needsMult) {
    ss << "*";
   }
   ss << vars[i];
   if (deg > 1) {
    ss << "^" << deg;
   }
   needsMult = true;

   ret = 0;
  }
 }

 free(sizes);
 free(masks);
 return ret;
}

static bool degsToString_unpk(std::stringstream& ss, const char** vars, degrees_t degs, bool needsMult, int nvar) {
 bool ret = 1;
 degree_t* degs_p = (degree_t*) degs;
 for (int i = 0; i < nvar; ++i) {
  degree_t deg = degs_p[i];
  if (deg > 0) {
   if (needsMult) {
    ss << "*";
   }
   ss << vars[i];
   if (deg > 1) {
    ss << "^" << deg;
   }
   needsMult = true;

   ret = 0;
  }
 }
 return ret;
}






static std::string polyToString_AA(AltArr_t* aa, const char** vars) {
 if (aa == 
# 68 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_CppSupport-AA.hpp" 3 4
          __null 
# 68 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_CppSupport-AA.hpp"
               || aa->size == 0) {
  return "0";
 }

 std::stringstream ss;

 int nvar = aa->nvar;
 bool first = true;
 bool needsMult = false;
 bool isConst = true;
 ratNum_class coef;
 for (int i = 0; i < aa->size; ++i) {
  coef = ratNum_class(aa->elems[i].coef);

  isConst = true;
  if (coef < 0) {
   coef *= -1;
   ss << " - ";
  } else if (!first) {
   ss << " + ";
  }

  if (coef != 1) {
   ss << coef;
   needsMult = true;
  }
  if (nvar > 0) {
   if (aa->unpacked) {
    isConst = degsToString_unpk(ss, vars, aa->elems[i].degs, needsMult, nvar);
   } else {
    isConst = degsToString(ss, vars, aa->elems[i].degs, needsMult, nvar);
   }
  } else {
   isConst = 1;
  }

  first = false;
  needsMult = false;
 }
 if (isConst && coef == 1) {
  ss << coef;
 }

 return ss.str();
}

static std::string polyToString_AA(AltArr_t* aa, const std::string* vars) {
 int nvar = aa->nvar;
 const char* charvars[nvar];
 for (int i = 0; i < nvar; ++i) {
  charvars[i] = vars[i].c_str();
 }
 return polyToString_AA(aa, charvars);
}
# 13 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp" 2






static std::string polyToString_AAZ(AltArrZ_t* aa, const char** vars) {
 if (aa == 
# 20 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp" 3 4
          __null 
# 20 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_CppSupport.hpp"
               || aa->size == 0) {
  return "0";
 }

 std::stringstream ss;

 int nvar = aa->nvar;
 bool first = true;
 bool needsMult = false;
 bool isConst = true;
 mpz_class coef;
 for (int i = 0; i < aa->size; ++i) {
  coef = mpz_class(aa->elems[i].coef);

  isConst = true;
  if (coef < 0) {
   coef *= -1;
   if (i == 0) {
    ss << "-";
   } else {
    ss << " - ";
   }
  } else if (!first) {
   ss << " + ";
  }

  if (coef != 1) {
   ss << coef;
   needsMult = true;
  }
  if (nvar > 0) {
   if (aa->unpacked) {
    isConst = degsToString_unpk(ss, vars, aa->elems[i].degs, needsMult, nvar);
   } else {
    isConst = degsToString(ss, vars, aa->elems[i].degs, needsMult, nvar);
   }
  } else {
   isConst = 1;
  }

  first = false;
  needsMult = false;
 }
 if (isConst && coef == 1) {
  ss << coef;
 }

 return ss.str();
}

static std::string polyToString_AAZ(AltArrZ_t* aa, const std::string* vars) {
 int nvar = aa->nvar;
 const char* charvars[nvar];
 for (int i = 0; i < nvar; ++i) {
  charvars[i] = vars[i].c_str();
 }
 return polyToString_AAZ(aa, charvars);
}
# 10 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2

# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Test.h" 1





extern "C" {



# 1 "/usr/include/c++/7/math.h" 1 3
# 11 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Test.h" 2
# 22 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Test.h"
Node* buildRandomZPoly(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
AltArrZ_t* buildRandomPoly_AAZ_unpk(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
AltArrZ_t* buildRandomSeededPoly_AAZ_unpk(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg, time_t seed);
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Test.h"
AltArrZ_t* buildRandomZPolyFromMax(int nvar, const int* maxDegs, unsigned long int coefBound, float sparsity, int includeNeg);



}
# 12 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h" 1





extern "C" {



# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive_Unpacked.h" 1





extern "C" {







typedef struct RecArrZ RecArrZ_t;
# 29 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive_Unpacked.h"
RecArrZ_t* convertToRecursiveArrayZ_unpk(AltArrZ_t* aa);
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive_Unpacked.h"
AltArrZ_t* convertFromRecursiveArrayZ_unpk(RecArrZ_t* poly, int nvar);




}
# 11 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 1





extern "C" {




# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive_Unpacked.h" 1





extern "C" {







typedef struct RecArrElem RecArrElem_t;
typedef struct RecArr RecArr_t;
typedef struct RecProdHeap_AA RecProdHeap_AA;
typedef struct RecProdHeapChain_AA RecProdHeapChain_AA;
typedef struct AltArrs AltArrs_t;
# 34 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive_Unpacked.h"
RecArr_t* convertToRecursiveArray_unpk(AltArr_t* aa);
# 46 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive_Unpacked.h"
AltArr_t* convertFromRecursiveArray_unpk(RecArr_t* poly, int nvar);



}
# 12 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 2
# 23 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
typedef struct RecNode {
 int coefSize;
 degree_t exp;
 AAElem_t* coef;

 struct RecNode* next;
} RecNode_t;





static inline void freeRecNode(RecNode_t* rNode) {



 free(rNode);
}







static inline RecNode_t* addRecTerm(RecNode_t* tail, AAElem_t* coef, int coefSize, int exp) {
 RecNode_t* node = (RecNode_t*) malloc(sizeof(RecNode_t));
 node->coef = coef;
 node->coefSize = coefSize;
 node->exp = exp;

 node->next = 
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
             __null
# 54 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                 ;
 if (tail != 
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
            __null
# 55 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                ) {
  tail->next = node;
 }
 return node;
}

typedef struct RecArrElem {
 int coefSize;
 degree_t exp;
 AAElem_t* coef;
} RecArrElem_t;

typedef struct RecArr {
 int alloc;
 int size;
 int unpacked;
 AltArr_t* origAA;
 RecArrElem_t* elems;
} RecArr_t;




static inline void freeRecArray(RecArr_t* rArr) {
 if (rArr != 
# 79 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
            __null
# 79 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                ) {
  if (rArr->alloc > 0) {
   free(rArr->elems);
  }
  free(rArr);
 }
}




static inline void freeRecArrayAndCoef(RecArr_t* rArr) {
 if (rArr != 
# 91 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
            __null
# 91 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                ) {
  if (rArr->alloc > 0) {
   if (rArr->unpacked) {
    free( (degree_t*) rArr->elems->coef->degs);
   }
   free(rArr->elems->coef);
   free(rArr->elems);
  }
  free(rArr);
 }
}
# 111 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
RecNode_t* buildRandomRecPoly(int nvar, int nterms, int coefNterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
RecArr_t* buildRandomRecArrPoly(int nvar, int nterms, int coefNterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
# 129 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
RecNode_t* convertToRecursiveNode(AltArr_t* aa);
RecArr_t* convertToRecursiveArray(AltArr_t* aa);
# 143 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
RecNode_t* convertToRecursiveNodeAtIdx(AltArr_t* aa, int idx);
RecArr_t* convertToRecursiveArrayAtIdx (AltArr_t* aa, int idx);
# 155 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
RecNode_t* convertToRecursiveNodeCopy(Node* poly, int nvar);
# 169 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
AltArr_t* convertFromRecursiveArray(RecArr_t* poly, int nvar);
# 190 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
AltArr_t* convertFromRecursiveArrayAtIdx (RecArr_t* recPoly, int idx, int nvar);
# 199 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
RecArr_t* deepCopyRecArrayPolynomial(RecArr_t* poly, int nvar);







typedef struct RecProdHeapChain_AA {
 int a_i;
 int b;
 struct RecProdHeapChain_AA* next;
} RecProdHeapChain_AA;

typedef struct RecProdHeapElem_AA {
 degree_t exp;
 RecProdHeapChain_AA* chain;
} RecProdHeapElem_AA;

typedef struct RecProdHeap_AA {
 RecProdHeapElem_AA* elements;
 int heapSize;
 int maxHeapSize;
 int nvar;
 int lastB;
 int unpacked;
} RecProdHeap_AA;
# 234 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
static inline RecProdHeapChain_AA* recProdHeapMakeChain_AA(int a , int b, RecProdHeapChain_AA* next) {
 RecProdHeapChain_AA* chain = (RecProdHeapChain_AA*) malloc(sizeof(RecProdHeapChain_AA));
 chain->a_i = a;
 chain->b = b;
 chain->next = next;
 return chain;
}




static inline void recProdHeapFreeChain_AA(RecProdHeapChain_AA* chain) {
 RecProdHeapChain_AA* next;
 while(chain != 
# 247 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
               __null
# 247 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                   ) {
  next = chain->next;
  free(chain);
  chain = next;
 }
}




static inline RecProdHeap_AA* recProdHeapCreate_AA(int nvar) {
 RecProdHeap_AA* h = (RecProdHeap_AA*) malloc(sizeof(RecProdHeap_AA));
 h->elements = 
# 259 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 3 4
              __null
# 259 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
                  ;
 h->heapSize = 0;
 h->maxHeapSize = 0;
 h->nvar = nvar;
 h->unpacked = 0;
 return h;
}




static inline void recProdheapResize_AA(RecProdHeap_AA* h, int newAllocSize) {
 h->elements = (RecProdHeapElem_AA*) realloc(h->elements, sizeof(RecProdHeapElem_AA)*newAllocSize);
 h->maxHeapSize = newAllocSize;
}

static inline void recProdHeapFree_AA(RecProdHeap_AA* h) {
 RecProdHeapElem_AA* elems = h->elements;
 polysize_t s = h->heapSize;
 for (polysize_t i = 0; i < s; ++i) {
  recProdHeapFreeChain_AA(elems[i].chain);
 }
 free(h->elements);
 free(h);
}





void recProdHeapInsert_AA(RecProdHeap_AA* h, RecProdHeapChain_AA* chain, register degree_t insertExp);




static inline long long int recProdHeapPeek_AA(RecProdHeap_AA* h) {
 if (h->heapSize > 0) {
  return h->elements->exp;
 }
 return -1;
}




RecProdHeapChain_AA* recProdHeapRemoveMax_AA(RecProdHeap_AA* h);
# 319 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
AltArr_t* recProdHeapGetNextCoef_AA(RecProdHeap_AA* h, const RecArrElem_t* __restrict__ aElems, const RecArrElem_t* __restrict__ bElems, const int* aUnpacked, int bUnpacked);

void pesudoDivideOneTerm_RecArray(RecArr_t* c, RecArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int* e, AltArr_t** hPow, int nvar, int lazy);
# 331 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
void pesudoDivide_RecArray(RecArr_t* c, RecArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int* e, AltArr_t** hPow, int nvar, int lazy);
# 345 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
void pesudoDivideAtIdx_AA(int idx, AltArr_t* c, AltArr_t* b, AltArr_t** res_a, AltArr_t** res_r, int* e, AltArr_t** hPow, int nvar, int lazy);
# 358 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
void multiDivisorPseudoDivide_AA (AltArr_t* c, AltArr_t** B, AltArr_t** quoSet, AltArr_t** rem, AltArr_t** hPow, int nvar, int lazy, int nSet);
# 369 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
void naiveMultiDivisorPseudoDivide_AA (AltArr_t* c, AltArr_t** B, AltArr_t** quoSet, AltArr_t** rem, AltArr_t** hPow, int nvar, int lazy, int nSet);
# 381 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
void normalizedTriangularSetPseudoDivide_AA (AltArr_t* c, AltArr_t** B, AltArr_t*** quoSet, AltArr_t** rem, AltArr_t** hPow, int nvar, int lazy, int nSet);







void recursiveTriangularSetMDD_AA (AltArr_t* c, AltArr_t** B, AltArr_t*** quoSet, AltArr_t** rem, int nvar, int nSet);
# 398 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
typedef struct AltArrs {
    AltArr_t* poly;
    struct AltArrs* next;
} AltArrs_t;




void freeAltArrs (AltArrs_t* AAs);






AltArr_t* LazardOpt (AltArr_t* Sd, AltArr_t* Sdm, AltArr_t* s);






AltArr_t* DucosOpt (AltArr_t* A, AltArr_t* Sdm, AltArr_t* Se, AltArr_t* sd);






AltArr_t* CFDucosOpt (AltArr_t* A, AltArr_t* Sdm, AltArr_t* Se, AltArr_t* sd);







void DucosSubresultantChain_rev (AltArr_t* P, AltArr_t* Q, AltArrs_t** SC, int* len, int type);
void DucosSubresultantChain (AltArr_t* P, AltArr_t* Q, AltArrs_t** SC, int* len);






AltArr_t* DucosResultant (AltArr_t* P, AltArr_t* Q);






AltArr_t* DucosGCD (AltArr_t* P, AltArr_t* Q);




AltArr_t* lastNonZeroChain_AA (AltArr_t* P, AltArr_t* Q);






AltArr_t* integralGCD_AA_polyOut (AltArr_t* P, AltArr_t* Q);






AltArr_t* gcd_AA_Q (AltArr_t* P, mpq_t c);







AltArr_t* gcd_AA (AltArr_t* P, AltArr_t* Q);






AltArr_t* mainPrimitiveFactorization_AA (AltArr_t* P, AltArr_t** cont);






AltArr_t* mainPrimitivePart_AA (AltArr_t* P, int mvar);






AltArr_t* mainContent_AA (AltArr_t* P);
# 508 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../RationalNumberPolynomial/SMQP_Support_Recursive-AA.h"
AltArr_t* squareFreePart_AA (AltArr_t* aa, int nvar);



}
# 12 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h" 2

typedef struct RecArrElemZ {
 int coefSize;
 degree_t exp;
 AAZElem_t* coef;
} RecArrElemZ_t;

typedef struct RecArrZ {
 int alloc;
 int size;
 int unpacked;
 AltArrZ_t* origAA;
 RecArrElemZ_t* elems;
} RecArrZ_t;




static inline void freeRecArrayZ(RecArrZ_t* rArr) {
 if (rArr->alloc > 0) {
  free(rArr->elems);
 }
 free(rArr);
}




static inline void freeRecArrayZAndCoef(RecArrZ_t* rArr) {
 if (rArr != 
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h" 3 4
            __null
# 41 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
                ) {
  if (rArr->alloc > 0) {
   if (rArr->unpacked) {
    free( (degree_t*) rArr->elems->coef->degs);
   }
   free(rArr->elems->coef);
   free(rArr->elems);
  }
  free(rArr);
 }
}


AltArrZ_t* buildRandomAltArrZPoly_MvarSparse(int univarSparsity, int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg, time_t seed);
# 64 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
RecArrZ_t* buildRandomRecArrZPoly(int nvar, int nterms, int coefNterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
# 80 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
RecArrZ_t* convertToRecursiveArrayZ(AltArrZ_t* aa);
# 89 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
AltArrZ_t* convertFromRecursiveArrayZ(RecArrZ_t* poly, int nvar);






RecArrZ_t* deepCopyRecArrayZPolynomial(RecArrZ_t* poly, int nvar);
# 109 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
RecArrZ_t* convertToRecursiveArrayZAtIdx (AltArrZ_t* aa, int idx);
# 121 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
AltArrZ_t* convertFromRecursiveArrayZAtIdx (RecArrZ_t* recPoly, int idx, int nvar);
# 235 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
AltArrZ_t* recProdHeapGetNextCoef_AAZ(RecProdHeap_AA* h, const RecArrElemZ_t* __restrict__ aElems, const RecArrElemZ_t* __restrict__ bElems, const int* aUnpacked, int bUnpacked);
# 245 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
void pesudoDivide_RecArrayZ(RecArrZ_t* c, RecArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, AltArrZ_t** hPow, int nvar, int lazy);
# 259 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
void pesudoDivideAtIdx_AAZ (int idx, AltArrZ_t* c, AltArrZ_t* b, AltArrZ_t** res_a, AltArrZ_t** res_r, int* e, AltArrZ_t** hPow, int nvar, int lazy);
# 272 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
void multiDivisorPseudoDivide_AAZ (AltArrZ_t* c, AltArrZ_t** B, AltArrZ_t** quoSet, AltArrZ_t** rem, AltArrZ_t** hPow, int nvar, int lazy, int nSet);
# 283 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
void naiveMultiDivisorPseudoDivide_AAZ (AltArrZ_t* c, AltArrZ_t** B, AltArrZ_t** quoSet, AltArrZ_t** rem, AltArrZ_t** hPow, int nvar, int lazy, int nSet);
# 295 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
void normalizedTriangularSetPseudoDivide_AAZ (AltArrZ_t* c, AltArrZ_t** B, AltArrZ_t*** quoSet, AltArrZ_t** rem, AltArrZ_t** hPow, int nvar, int lazy, int nSet);







void recursiveTriangularSetMDD_AAZ (AltArrZ_t* c, AltArrZ_t** B, AltArrZ_t*** quoSet, AltArrZ_t** rem, int nvar, int nSet);
# 312 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
typedef struct AltArrsZ {
    AltArrZ_t* poly;
    struct AltArrsZ* next;
} AltArrsZ_t;

static inline int Log2n (int n)
{
    return (n > 1) ? 1 + Log2n (n/2) : 0;
}




void freeAltArrsZ (AltArrsZ_t* AAs);






AltArrZ_t* LazardOptZ (AltArrZ_t* Sd, AltArrZ_t* Sdm, AltArrZ_t* s);






AltArrZ_t* DucosOptZ (AltArrZ_t* A, AltArrZ_t* Sdm, AltArrZ_t* Se, AltArrZ_t* sd);






AltArrZ_t* CFDucosOptZ (AltArrZ_t* A, AltArrZ_t* Sdm, AltArrZ_t* Se, AltArrZ_t* sd);







void DucosSubresultantChainZ_rev (AltArrZ_t* P, AltArrZ_t* Q, AltArrsZ_t** SC, int* len, int type);
void DucosSubresultantChainZ (AltArrZ_t* P, AltArrZ_t* Q, AltArrsZ_t** SC, int* len);






AltArrZ_t* DucosResultantZ (AltArrZ_t* P, AltArrZ_t* Q);






AltArrZ_t* DucosGCDZ (AltArrZ_t* P, AltArrZ_t* Q);




AltArrZ_t* lastNonZeroChain_AAZ (AltArrZ_t* P, AltArrZ_t* Q);






AltArrZ_t* integralGCD_AAZ_polyOut (AltArrZ_t* P, AltArrZ_t* Q);






AltArrZ_t* gcd_AAZ_Z (AltArrZ_t* P, mpz_t c);







AltArrZ_t* gcd_AAZ (AltArrZ_t* P, AltArrZ_t* Q);






AltArrZ_t* mainPrimitiveFactorization_AAZ (AltArrZ_t* P, AltArrZ_t** cont);






AltArrZ_t* mainPrimitivePart_AAZ (AltArrZ_t* P, int mvar);







AltArrZ_t* mainContent_AAZ (AltArrZ_t* P);
# 428 "../../include/RationalNumberPolynomial/../IntegerPolynomial/SMZP_Support_Recursive.h"
AltArrZ_t* squareFreePart_AAZ (AltArrZ_t* aa, int nvar);


}
# 13 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2

# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../ExpressionTree/ExpressionTree.hpp" 1
# 15 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 1 "../../include/RationalNumberPolynomial/../IntegerPolynomial/../DataStructures/Factors.hpp" 1
# 16 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 2
# 25 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
class SparseMultivariateRationalPolynomial;




class SLPZRepresentation {

 public:
  union CoefOrInt {
   Integer* c;
   int i;
  };

  int op;
  int type;




  CoefOrInt a;
  int b;
  Interval res;

  SLPZRepresentation() {
   a.c = 
# 49 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
        __null
# 49 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            ;
  }

  SLPZRepresentation(const SLPZRepresentation& r) {
   op = r.op;
   type = r.type;
   b = r.b;
   res = r.res;
   if (type == 0 || type == 1 || type == 4) {
    a.c = new Integer(*(r.a.c));
   } else {
    a.i = r.a.i;
   }
  }

  ~SLPZRepresentation() {
   if (type == 0 || type == 1) {
    delete a.c;
   }
  }
};





class SparseMultivariateIntegerPolynomial: public BPASRecursivelyViewedPolynomial<Integer,SparseMultivariateIntegerPolynomial> {

 private:
  mutable AltArrZ_t* poly;
  int nvar;
  Symbol* names;



  friend class SparseMultivariateRationalPolynomial;




  SparseMultivariateIntegerPolynomial(AltArrZ_t* aa, int vars, Symbol* varNames);




  SparseMultivariateIntegerPolynomial(const RationalNumber& r, AltArr_t* aa, int vars, Symbol* varNames);






  bool isOrderedRing(const SparseMultivariateIntegerPolynomial& b, std::vector<int>& xs) const;




  void reorderVarsInPlace(int varmap[]);




  void expandVarsInPlace(int vars, Symbol* newvars, int varmap[]);






  SparseMultivariateIntegerPolynomial expandVariables(int vars, Symbol* newvars, int varmap[]) const;

 public:

    SparseMultivariateIntegerPolynomial subresultantGCD (const SparseMultivariateIntegerPolynomial& q) const;

    std::vector<SparseMultivariateIntegerPolynomial> subresultantChain (const SparseMultivariateIntegerPolynomial& q, int filled = 0) const;

    SparseMultivariateIntegerPolynomial resultant (const SparseMultivariateIntegerPolynomial& q) const;

    std::vector<SLPZRepresentation> slp;







  SparseMultivariateIntegerPolynomial();






  SparseMultivariateIntegerPolynomial(int v);







  SparseMultivariateIntegerPolynomial (const Symbol& x);




  SparseMultivariateIntegerPolynomial (const std::string& str);
# 165 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial(const SparseMultivariateIntegerPolynomial& b);






  SparseMultivariateIntegerPolynomial(SparseMultivariateIntegerPolynomial&& b);




  SparseMultivariateIntegerPolynomial(const SparseMultivariateRationalPolynomial& b);




  SparseMultivariateIntegerPolynomial(const Integer& r, int nvar = 0);




  SparseMultivariateIntegerPolynomial(const RationalNumber& r, int nvar = 0);






  SparseMultivariateIntegerPolynomial (const DenseUnivariateIntegerPolynomial& p);







     SparseMultivariateIntegerPolynomial (const SparseUnivariatePolynomial<SparseMultivariateIntegerPolynomial>& s);




  ~SparseMultivariateIntegerPolynomial();



        static mpz_class characteristic;
        static RingProperties properties;
# 221 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  bool isZero() const;




        void zero();





        bool isOne() const;




        void one();





        bool isNegativeOne() const;




        void negativeOne();





        int isConstant() const;






        inline SparseMultivariateIntegerPolynomial unitCanonical(SparseMultivariateIntegerPolynomial* u, SparseMultivariateIntegerPolynomial* v) const {
         if (isZero()) {
          return *this;
         }

         if (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            (__builtin_constant_p ((
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ) >= 0) && (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ))) && ((static_cast<unsigned long> (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ))) == 0 ? ((
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            this->poly->elems->coef
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            )->_mp_size < 0 ? -1 : (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            this->poly->elems->coef
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            )->_mp_size > 0) : __gmpz_cmp_ui (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            this->poly->elems->coef
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ,(static_cast<unsigned long> (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            )))) : __gmpz_cmp_si (
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            this->poly->elems->coef
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            ,
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
            0l
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
            )) 
# 266 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                                                    < 0) {
          SparseMultivariateIntegerPolynomial ret = -(*this);
          if (u != 
# 268 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                  __null
# 268 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                      ) {
           *u = SparseMultivariateIntegerPolynomial(Integer(-1));
          }
          if (v != 
# 271 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                  __null
# 271 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                      ) {
           *v = *u;
          }
          return ret;
         }

         if (u != 
# 277 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                 __null
# 277 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                     ) {
          (*u).one();
         }
         if (v != 
# 280 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                 __null
# 280 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                     ) {
          (*v).one();
         }
         return *this;
        }






        SparseMultivariateIntegerPolynomial& operator= (const SparseMultivariateIntegerPolynomial& b);




        SparseMultivariateIntegerPolynomial& operator= (SparseMultivariateIntegerPolynomial&& b);




     SparseMultivariateIntegerPolynomial& operator= (const Integer& r);




  SparseMultivariateIntegerPolynomial operator+ (const SparseMultivariateIntegerPolynomial& b) const;
  SparseMultivariateIntegerPolynomial operator+ (SparseMultivariateIntegerPolynomial&& b) const;
# 317 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial& operator+= (const SparseMultivariateIntegerPolynomial& b);




  SparseMultivariateIntegerPolynomial operator- (const SparseMultivariateIntegerPolynomial& b) const;
  SparseMultivariateIntegerPolynomial operator- (SparseMultivariateIntegerPolynomial&& b) const;
# 333 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial operator- () const;




  SparseMultivariateIntegerPolynomial& operator-= (const SparseMultivariateIntegerPolynomial& b);




  SparseMultivariateIntegerPolynomial operator* (const SparseMultivariateIntegerPolynomial& b) const;
  SparseMultivariateIntegerPolynomial operator* (SparseMultivariateIntegerPolynomial&& b) const;
# 354 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial& operator*= (const SparseMultivariateIntegerPolynomial& b);




  SparseMultivariateIntegerPolynomial operator/ (const SparseMultivariateIntegerPolynomial& b) const;
  SparseMultivariateIntegerPolynomial operator/ (SparseMultivariateIntegerPolynomial&& b) const;






  SparseMultivariateIntegerPolynomial& operator/= (const SparseMultivariateIntegerPolynomial& b);





  SparseMultivariateIntegerPolynomial operator^ (long long int e) const;





  SparseMultivariateIntegerPolynomial& operator^= (long long int e);







  bool operator== (const SparseMultivariateIntegerPolynomial& b) const;







  bool operator!= (const SparseMultivariateIntegerPolynomial& b) const;




  void print(std::ostream& os) const;




  friend std::istream& operator>>(std::istream& in, SparseMultivariateIntegerPolynomial& p);




  void fromString(const std::string& str);




        SparseMultivariateIntegerPolynomial gcd(const SparseMultivariateIntegerPolynomial& b) const;




        SparseMultivariateIntegerPolynomial primitiveGCD(const SparseMultivariateIntegerPolynomial& b) const;




  Factors<SparseMultivariateIntegerPolynomial> squareFree() const;




  Factors<SparseMultivariateIntegerPolynomial> squareFree(const std::vector<Symbol>& vars) const;





  SparseMultivariateIntegerPolynomial squareFreePart() const;





  SparseMultivariateIntegerPolynomial squareFreePart(std::vector<Symbol>& vars) const;
# 452 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  Integer content() const;
# 461 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial content(const std::vector<Symbol>& v) const;





  SparseMultivariateIntegerPolynomial primitivePart() const;







  SparseMultivariateIntegerPolynomial primitivePart(Integer& content) const;






  SparseMultivariateIntegerPolynomial primitivePart(const std::vector<Symbol>& v) const;






  SparseMultivariateIntegerPolynomial primitivePart(const std::vector<Symbol>& v, SparseMultivariateIntegerPolynomial& content) const;






  SparseMultivariateIntegerPolynomial initial() const;







  inline Symbol mainVariable() const {
   return leadingVariable();
  }






  int mainDegree() const;







  SparseMultivariateIntegerPolynomial rank() const;







  SparseMultivariateIntegerPolynomial head() const;






  SparseMultivariateIntegerPolynomial tail() const;

  SparseMultivariateIntegerPolynomial separant() const;






  int numberOfVariables() const;




  inline int numberOfRingVariables() const {
   return ringVariables().size();
  }




  Integer numberOfTerms() const;




  Integer degree() const;




  Integer degree(const Symbol&) const;




  Integer leadingCoefficient() const;




  void setLeadingCoefficient(const Integer& it);




  Integer trailingCoefficient() const;




  Integer coefficient(int, const int*) const;

  inline Integer coefficient(const std::vector<int>& v) const {
   return coefficient(v.size(), v.data());
  }




  void setCoefficient(int, const int*, const Integer&);

  inline void setCoefficient(const std::vector<int>& v, const Integer& r) {
   setCoefficient(v.size(), v.data(), r);
  }
# 630 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  void setRingVariables (const std::vector<Symbol>&);





  std::vector<Symbol> ringVariables() const;




  std::vector<Symbol> variables() const;
# 652 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  bool isEqual(const SparseMultivariateIntegerPolynomial& b) const;







     inline void differentiate(const Symbol& s, int k) {
      *this = this->derivative(s, k);
     }






     inline void differentiate(const Symbol& s) {
      this->differentiate(s,1);
     }







     SparseMultivariateIntegerPolynomial derivative(const Symbol& s, int k) const;






  inline SparseMultivariateIntegerPolynomial derivative(const Symbol& s) const {
       return this->derivative(s,1);
        }







     inline void integrate(const Symbol& s, int k) {
      *this = this->integral(s, k);
     }






     inline void integrate(const Symbol& s) {
      this->integrate(s,1);
     }
# 720 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
     SparseMultivariateIntegerPolynomial integral(const Symbol& s, int k) const;
# 733 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateRationalPolynomial rationalIntegral(const Symbol& s, int k) const;






  inline SparseMultivariateIntegerPolynomial integral(const Symbol& s) const {
       return this->integral(s,1);
        }







  SparseMultivariateRationalPolynomial rationalIntegral(const Symbol& s) const;







     inline SparseMultivariateIntegerPolynomial evaluate(int n, const Symbol* syms, const Integer* xs) const {
      std::vector<Symbol> vecSyms;
      std::vector<Integer> vecRats;
      vecSyms.reserve(n);
      vecRats.reserve(n);
      for (int i = 0; i < n; ++i) {
       vecSyms.push_back(syms[i]);
       vecRats.push_back(xs[i]);
      }
      return evaluate(vecSyms, vecRats);
     }
# 777 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial evaluate(const std::vector<Symbol>& vars, const std::vector<Integer>& values) const;
# 788 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  static SparseMultivariateIntegerPolynomial interpolate(const std::vector<std::vector<Integer>>& points, const std::vector<Integer>& vals);
# 799 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  static SparseMultivariateIntegerPolynomial interpolate(const std::vector<std::vector<RationalNumber>>& points, const std::vector<RationalNumber>& vals);







  bool divide(const SparseMultivariateIntegerPolynomial& b, SparseMultivariateIntegerPolynomial& q, SparseMultivariateIntegerPolynomial& r) const;
# 816 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  bool rationalDivide(const SparseMultivariateIntegerPolynomial& b, SparseMultivariateRationalPolynomial& q, SparseMultivariateRationalPolynomial& r) const;




  SparseMultivariateIntegerPolynomial operator% (const SparseMultivariateIntegerPolynomial& b) const;




  SparseMultivariateIntegerPolynomial& operator%= (const SparseMultivariateIntegerPolynomial& b);
# 836 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  SparseMultivariateIntegerPolynomial pseudoDivide(const SparseMultivariateIntegerPolynomial& b, SparseMultivariateIntegerPolynomial* quo = 
# 836 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                                                                                                                                           __null
# 836 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                                                                                                                                               , SparseMultivariateIntegerPolynomial* mult = 
# 836 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                                                                                                                                                                                             __null
# 836 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                                                                                                                                                                                                 , bool lazy = 0) const;





  inline SparseMultivariateIntegerPolynomial operator+ (const mpz_t r) const {
   return (*this + mpz_class(r));
  }




  SparseMultivariateIntegerPolynomial operator+ (const mpz_class& r) const;

  inline SparseMultivariateIntegerPolynomial operator+ (const Integer& r) const {
   return (*this + r.get_mpz());
  }




  inline friend SparseMultivariateIntegerPolynomial operator+ (const mpz_t r, const SparseMultivariateIntegerPolynomial& b) {
   return (b + r);
  }




  inline SparseMultivariateIntegerPolynomial& operator+= (const mpz_t r) {
   return (*this += mpz_class(r));
  }





  inline friend SparseMultivariateIntegerPolynomial operator+ (const mpz_class& r, const SparseMultivariateIntegerPolynomial& b) {
   return (b + r);
  }




  SparseMultivariateIntegerPolynomial& operator+= (const mpz_class& r);




  inline SparseMultivariateIntegerPolynomial& operator+= (const Integer& r) {
      *this += r.get_mpz();
      return *this;
  }




  inline SparseMultivariateIntegerPolynomial operator- (const mpz_t r) const {
   return (*this - mpz_class(r));
  }




  SparseMultivariateIntegerPolynomial operator- (const mpz_class& r) const;




  inline SparseMultivariateIntegerPolynomial operator- (const Integer& r) const {
      return (*this - r.get_mpz());
  }




  inline friend SparseMultivariateIntegerPolynomial operator- (const mpz_t r, const SparseMultivariateIntegerPolynomial& b) {
   return (-b + r);
  }




  inline SparseMultivariateIntegerPolynomial& operator-= (const mpz_t r) {
   return (*this -= mpz_class(r));
  }





  inline friend SparseMultivariateIntegerPolynomial operator- (const mpz_class& r, const SparseMultivariateIntegerPolynomial& b) {
   return (-b + r);
  }




  SparseMultivariateIntegerPolynomial& operator-= (const mpz_class& r);




  inline SparseMultivariateIntegerPolynomial& operator-= (const Integer& r) {
      *this -= r.get_mpz();
      return *this;
  }




  inline SparseMultivariateIntegerPolynomial operator* (const mpz_t r) const {
   return (*this * mpz_class(r));
  }




  SparseMultivariateIntegerPolynomial operator* (const mpz_class& r) const;




  inline SparseMultivariateIntegerPolynomial operator* (const Integer& r) const {
      return (*this * r.get_mpz());
  }




  inline friend SparseMultivariateIntegerPolynomial operator* (const mpz_t r, const SparseMultivariateIntegerPolynomial& b) {
   return (b * r);
  }




  inline SparseMultivariateIntegerPolynomial& operator*= (const mpz_t r) {
   return (*this *= mpz_class(r));
  }




  inline friend SparseMultivariateIntegerPolynomial operator* (const mpz_class& r, const SparseMultivariateIntegerPolynomial& b) {
   return (b * r);
  }




  SparseMultivariateIntegerPolynomial& operator*= (const mpz_class& r);




  inline SparseMultivariateIntegerPolynomial& operator*= (const Integer& r) {
      *this *= r.get_mpz();
      return *this;
  }




  inline SparseMultivariateIntegerPolynomial operator/ (const mpz_t r) const {
   return (*this / mpz_class(r));
  }




  SparseMultivariateIntegerPolynomial operator/ (const mpz_class& r) const;




  inline SparseMultivariateIntegerPolynomial operator/ (const Integer& r) const {
      return (*this / r.get_mpz());
  }




  friend SparseMultivariateIntegerPolynomial operator/ (const mpz_t r, const SparseMultivariateIntegerPolynomial& b) ;




  inline SparseMultivariateIntegerPolynomial& operator/= (const mpz_t r) {
   return (*this /= mpz_class(r));
  }



  inline friend SparseMultivariateIntegerPolynomial operator/ (const mpz_class& r, const SparseMultivariateIntegerPolynomial& b) {
   mpz_t t;
   
# 1032 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
  __gmpz_init
# 1032 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
          (t);
   
# 1033 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
  __gmpz_set
# 1033 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
         (t, r.get_mpz_t());
   SparseMultivariateIntegerPolynomial ret = (t / b);
   
# 1035 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
  __gmpz_clear
# 1035 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
           (t);
   return ret;
  }




  SparseMultivariateIntegerPolynomial& operator/= (const mpz_class& r);



  inline SparseMultivariateIntegerPolynomial& operator/= (const Integer& r) {
      *this /= r.get_mpz();
      return *this;
  }





  SparseMultivariateIntegerPolynomial operator[] (int index) const;






  Symbol leadingVariable() const;




  Integer leadingVariableDegree() const;




  bool isConstantTermZero() const;







  SparseMultivariateIntegerPolynomial leadingCoefficientInVariable (const Symbol& x, int* e = 
# 1080 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp" 3 4
                                                                                             __null
# 1080 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
                                                                                                 ) const;






  SparseUnivariatePolynomial<SparseMultivariateIntegerPolynomial> convertToSUP(const Symbol& x) const;






  void negate();






  SparseMultivariateIntegerPolynomial deepCopy() const;






  Factors<SparseMultivariateIntegerPolynomial> factor() const;




  void straightLineProgram();




  void printSLP(std::ostream& out = std::cout) const;
# 1128 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  void randomPolynomial(int numvar, int nterms, unsigned long int coefBound, degree_t sparsity, bool includeNeg);
# 1142 "../../include/RationalNumberPolynomial/../IntegerPolynomial/mzpolynomial.hpp"
  void randomPolynomial(std::vector<int> maxDegs, unsigned long int coefBound, float sparsity, bool includeNeg);






  ExpressionTree convertToExpressionTree() const;
};
# 8 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../RingPolynomial/upolynomial.h" 1
# 9 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/SMQP_CppSupport-AA.hpp" 1
# 10 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/SMQP_Support-AA.h" 1
# 11 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h" 1





extern "C" {



# 1 "/usr/include/c++/7/math.h" 1 3
# 11 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h" 2
# 21 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
degrees_t getNextDegrees (degrees_t prev, degree_t step, degree_t maxUniDeg, int nvar, int* sizes, unsigned long long int* masks);
void getNextDegrees_unpk (degree_t* prev, degree_t step, degree_t maxUniDeg, int nvar, degree_t* nextDegs);
# 33 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
Node* buildRandomPoly(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
AltArr_t* buildRandomPoly_AA_unpk(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg);
AltArr_t* buildRandomSeededPoly_AA_unpk(int nvar, int nterms, unsigned long int coefBound, degree_t sparsity, int includeNeg, time_t seed);
# 52 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
AltArr_t* buildRandomPolyFromMax(int nvar, const int* maxDegs, unsigned long int coefBound, float sparsity, int includeNeg);
AltArr_t* buildRandomPolyFromMax_seeded(time_t seed, int nvar, const int* maxDegs, unsigned long int coefBound, float sparsity, int includeNeg);
# 67 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
degrees_t getNextMaxDegs(degrees_t lastDegs, degrees_t step, int nvar, int* sizes, unsigned long long int* masks);
# 78 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
Node* randomMaxDegsPoly(int nvar, degrees_t maxDegs, degree_t sparsity, unsigned long coefBound, int includeNeg);
# 103 "../../include/RationalNumberPolynomial/SMQP_Support_Test-AA.h"
void randomTriangularSet (Node** T, int outNvar,degrees_t maxDegs, degree_t sparsity, unsigned long coefBound, int includeNeg, int lazard_flag);
void randomTriangularSet_AA (AltArr_t** T, int outNvar,degrees_t maxDegs, degree_t sparsity, unsigned long coefBound, int includeNeg, int lazard_flag);




}
# 12 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/SMQP_Support_Recursive-AA.h" 1
# 13 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2

# 1 "../../include/RationalNumberPolynomial/../ExpressionTree/ExpressionTree.hpp" 1
# 15 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../DataStructures/Factors.hpp" 1
# 16 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2
# 1 "../../include/RationalNumberPolynomial/../TriangularSet/triangularset.hpp" 1
# 17 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2

# 1 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 1






# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 8 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 9 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 2

# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_type.h" 1



# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/../../include/RationalNumberPolynomial/SMQP_Support-AA.h" 1
# 5 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_type.h" 2
# 16 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_type.h"
extern "C" {

typedef struct _term{
    ratNum_t coef;
 degrees_t *exp;
}term;

typedef struct _powervar{
 char *var;
 degrees_t exp;
}powervar;

typedef struct _altarr_pack{
 AltArr_t* altarr_t_data;
 char** vars;
 int numVars;
}altarr_pack;

}
# 11 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 2
# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h" 1




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h" 2


# 1 "/usr/include/c++/7/math.h" 1 3
# 9 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h" 2

# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_type.h" 1
# 11 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h" 2
# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 1




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 2

# 1 "/usr/include/c++/7/math.h" 1 3
# 8 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 2



# 1 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_errno.h" 1




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_errno.h" 2
# 17 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_errno.h"
extern "C" {


enum{
    PARSER_SUCCESS = 0,
    PARSER_FAILURE = -1,
    PARSER_GENERIC = 1,
    PARSER_NOALLOC = 2
};
# 35 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_errno.h"
void parser_error(const char* reason, const char* file, const char* fun, int line);
# 45 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_errno.h"
void parser_error_with_errno_reason(const int parser_errno, const char* file, const char* fun, int line);


}
# 12 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 2
# 23 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
extern "C" {
# 33 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
int check_if_it_exists(char** vars, char* v, int numvar);
# 42 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
degrees_t* unpacked_degs(degrees_t packed_degs, int numvars);
# 53 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
char* strip_comments(const char* buf, size_t size);







void free2DArray(char** arr, int size);







void clear_term(term *tempTerm, int numVar);






void free_term(term* temp);
# 85 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
powervar *create_power_var(char *var, degrees_t exp);







term* create_term(int arraySize);







degrees_t* generate_long_int_exponents(int arraySize);
# 115 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
void fill_term_exponent(char **orderedVarArray, degrees_t *exponentToFill, char* currentVar, degrees_t currentExp, int *arraySize);
# 127 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
char** push_back_dynamic(char **varArray, int *numvar, char* var);







void deep_degrees_cpy(degrees_t *dst, degrees_t *src, int size);
# 146 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
void add_packed_degree_term_to_smqp_aa(AltArr_t *aa, degrees_t *deg, ratNum_t coef, int numvar);
# 157 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
static void addTermSafe_AA(AltArr_t* aa, degrees_t d, const ratNum_t coef){
 if (((aa)->size) >= aa->alloc) {
  aa->alloc *= 2;
  aa->elems = (AAElem_t*) realloc(aa->elems, sizeof(AAElem_t)*aa->alloc);
 }
 
# 162 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 3 4
__gmpq_init
# 162 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
        (aa->elems[((aa)->size)].coef);
 
# 163 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h" 3 4
__gmpq_set
# 163 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_helper.h"
       (aa->elems[((aa)->size)].coef, coef);
 aa->elems[((aa)->size)].degs = d;
 ++(((aa)->size));
}

}
# 12 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h" 2
# 24 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
extern "C" {
# 35 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
char* print_poly_to_string_variable(AltArr_t *altarr, char** var, int numVar );
# 47 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
void print_poly_to_file(AltArr_t *l, char** var, int numVar, char *filename, int insertVarsAtTheBeginning);
# 56 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
void print_poly_to_terminal(AltArr_t *l, char** var, int numVar );







void print_naked_AltArr_t_poly(AltArr_t* aa);
# 75 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
void print_naked_AltArr_t_poly2(AltArr_t* aa, char **vars, int numvars, char* msg);
# 85 "../../include/RationalNumberPolynomial/../Parser/../../src/Parser/parser_print.h"
void print_term(term* t, char **vars, int numvars, char* message);

static char* generate_super(unsigned long int super){
    const char *s[] = {"\xe2\x81\xb0", "\xc2\xb9", "\xc2\xb2",
    "\xc2\xb3", "\xe2\x81\xb4", "\xe2\x81\xb5", "\xe2\x81\xb6",
    "\xe2\x81\xb7", "\xe2\x81\xb8", "\xe2\x81\xb9"};

    int nDigits = floor(log10(super)) + 1;
    int *arr = (int*)malloc(nDigits*sizeof(int));
    int temp = nDigits;
    while(super){
        arr[temp-1] = super%10;
        super/=10;
        temp--;
    }
    char *ret = (char*)malloc(nDigits*12*sizeof(char)+1);
    memset( ret, 0x00, nDigits*12*sizeof(char)+1 );
    for(int i=0; i<nDigits; i++ ){
        strncat(ret, s[arr[i]], strlen(s[arr[i]]));
    }
    strncat(ret, "\0", 1);
    free(arr);
    return ret;
}

void print_poly_to_terminal_fancy(AltArr_t *l, char** var, int numVar, int term_vars_separated);

}
# 12 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 2
# 1 "../../include/RationalNumberPolynomial/../Parser/../RationalNumberPolynomial/SMQP_Support-AA.h" 1
# 13 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h" 2
# 24 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h"
extern "C" {
# 34 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h"
char **create_dynamic_str_array(int arrSize, ...);






AltArr_t* generate_altarr(const char* poly_str);
# 52 "../../include/RationalNumberPolynomial/../Parser/bpas_parser.h"
AltArr_t* generate_altarr_var_defined(const char* poly_str, const char** variables, int num_var);







altarr_pack* generate_altarr_pack(const char* poly_str);

}
# 19 "../../include/RationalNumberPolynomial/mrpolynomial.h" 2

class SparseMultivariateIntegerPolynomial;




class SLPRepresentation {

 public:
  union CoefOrInt {
   RationalNumber* c;
   int i;
  };

  int op;
  int type;




  CoefOrInt a;
  int b;
  Interval res;

  SLPRepresentation() {
   a.c = 
# 44 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
        __null
# 44 "../../include/RationalNumberPolynomial/mrpolynomial.h"
            ;
  }

  SLPRepresentation(const SLPRepresentation& r) {
   op = r.op;
   type = r.type;
   b = r.b;
   res = r.res;
   if (type == 0 || type == 1 || type == 4) {
    a.c = new RationalNumber(*(r.a.c));
   } else {
    a.i = r.a.i;
   }
  }

  ~SLPRepresentation() {
   if (type == 0 || type == 1) {
    delete a.c;
   }
  }
};





class SparseMultivariateRationalPolynomial: public BPASRecursivelyViewedPolynomial<RationalNumber,SparseMultivariateRationalPolynomial> {

 private:
  mutable AltArr_t* poly;
  int nvar;
  Symbol* names;




  friend class SparseMultivariateIntegerPolynomial;






  bool isOrderedRing(const SparseMultivariateRationalPolynomial& b, std::vector<int>& xs) const;




  void reorderVarsInPlace(int varmap[]);




  void expandVarsInPlace(int vars, Symbol* newvars, int varmap[]);






  SparseMultivariateRationalPolynomial expandVariables(int vars, Symbol* newvars, int varmap[]) const;

 public:


  SparseMultivariateRationalPolynomial subresultantGCD (const SparseMultivariateRationalPolynomial& q) const;

  std::vector<SLPRepresentation> slp;







  SparseMultivariateRationalPolynomial();






  SparseMultivariateRationalPolynomial(int v);






  SparseMultivariateRationalPolynomial (const Symbol& x);




  SparseMultivariateRationalPolynomial (const std::string& str);





  SparseMultivariateRationalPolynomial(AltArr_t* aa, int vars, Symbol* varNames);
# 153 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial(const SparseMultivariateRationalPolynomial& b);






  SparseMultivariateRationalPolynomial(SparseMultivariateRationalPolynomial&& b);




  SparseMultivariateRationalPolynomial(const SparseMultivariateIntegerPolynomial& b);




  SparseMultivariateRationalPolynomial(const Integer& r, int nvar = 0);




  SparseMultivariateRationalPolynomial(const RationalNumber& r, int nvar = 0);






  SparseMultivariateRationalPolynomial (const DenseUnivariateRationalPolynomial& p);







     SparseMultivariateRationalPolynomial (const SparseUnivariatePolynomial<SparseMultivariateRationalPolynomial>& s);




  ~SparseMultivariateRationalPolynomial();



        static mpz_class characteristic;
        static RingProperties properties;
# 209 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  bool isZero() const;




        void zero();





        bool isOne() const;




        void one();





        bool isNegativeOne() const;




        void negativeOne();





        int isConstant() const;






  inline SparseMultivariateRationalPolynomial unitCanonical(SparseMultivariateRationalPolynomial* u, SparseMultivariateRationalPolynomial* v) const {
         RationalNumber lead = leadingCoefficient();
         RationalNumber leadInv = lead.inverse();
         if (u != 
# 252 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                 __null
# 252 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                     ) {
          *u = leadInv;
         }
         if (v != 
# 255 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                 __null
# 255 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                     ) {
          *v = lead;
         }
         return (*this * leadInv);
        }






        SparseMultivariateRationalPolynomial& operator= (const SparseMultivariateRationalPolynomial& b);




        SparseMultivariateRationalPolynomial& operator= (SparseMultivariateRationalPolynomial&& b);




     SparseMultivariateRationalPolynomial& operator= (const RationalNumber& r);




  SparseMultivariateRationalPolynomial operator+ (const SparseMultivariateRationalPolynomial& b) const;
  SparseMultivariateRationalPolynomial operator+ (SparseMultivariateRationalPolynomial&& b) const;
# 292 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial& operator+= (const SparseMultivariateRationalPolynomial& b);




  SparseMultivariateRationalPolynomial operator- (const SparseMultivariateRationalPolynomial& b) const;
  SparseMultivariateRationalPolynomial operator- (SparseMultivariateRationalPolynomial&& b) const;
# 308 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial operator- () const;




  SparseMultivariateRationalPolynomial& operator-= (const SparseMultivariateRationalPolynomial& b);




  SparseMultivariateRationalPolynomial operator* (const SparseMultivariateRationalPolynomial& b) const;
  SparseMultivariateRationalPolynomial operator* (SparseMultivariateRationalPolynomial&& b) const;
# 329 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial& operator*= (const SparseMultivariateRationalPolynomial& b);




  SparseMultivariateRationalPolynomial operator/ (const SparseMultivariateRationalPolynomial& b) const;
  SparseMultivariateRationalPolynomial operator/ (SparseMultivariateRationalPolynomial&& b) const;






  SparseMultivariateRationalPolynomial& operator/= (const SparseMultivariateRationalPolynomial& b);





  SparseMultivariateRationalPolynomial operator^ (long long int e) const;





  SparseMultivariateRationalPolynomial& operator^= (long long int e);







  bool operator== (const SparseMultivariateRationalPolynomial& b) const;







  bool operator!= (const SparseMultivariateRationalPolynomial& b) const;




  void print(std::ostream& os) const;




  friend std::istream& operator>>(std::istream& in, SparseMultivariateRationalPolynomial& p);




   void fromString(const std::string& str);

     std::vector<SparseMultivariateRationalPolynomial> subresultantChain (const SparseMultivariateRationalPolynomial& q, int filled = 0) const;


     SparseMultivariateRationalPolynomial resultant (const SparseMultivariateRationalPolynomial& q) const;




        SparseMultivariateRationalPolynomial gcd(const SparseMultivariateRationalPolynomial& b) const;




        SparseMultivariateRationalPolynomial primitiveGCD(const SparseMultivariateRationalPolynomial& b) const;




  Factors<SparseMultivariateRationalPolynomial> squareFree() const;




  Factors<SparseMultivariateRationalPolynomial> squareFree(const std::vector<Symbol>& vars) const;





  SparseMultivariateRationalPolynomial squareFreePart() const;





  SparseMultivariateRationalPolynomial squareFreePart(std::vector<Symbol>& vars) const;
# 432 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  RationalNumber content() const;
# 441 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial content(const std::vector<Symbol>& v) const;





  SparseMultivariateIntegerPolynomial primitivePartSMZP() const;







  SparseMultivariateIntegerPolynomial primitivePartSMZP(RationalNumber& content) const;





  SparseMultivariateRationalPolynomial primitivePart() const;





  SparseMultivariateRationalPolynomial primitivePart(const Symbol& s) const;







  SparseMultivariateRationalPolynomial primitivePart(RationalNumber& content) const;






  SparseMultivariateRationalPolynomial primitivePart(const std::vector<Symbol>& v) const;






  SparseMultivariateRationalPolynomial primitivePart(const std::vector<Symbol>& v, SparseMultivariateRationalPolynomial& content) const;

        SparseMultivariateRationalPolynomial mainPrimitivePart() const;

        SparseMultivariateRationalPolynomial mainPrimitivePart(SparseMultivariateRationalPolynomial& content) const;






  SparseMultivariateRationalPolynomial initial() const;







  inline Symbol mainVariable() const {
   return leadingVariable();
  }






  int mainDegree() const;







  SparseMultivariateRationalPolynomial rank() const;







  SparseMultivariateRationalPolynomial head() const;






  SparseMultivariateRationalPolynomial tail() const;

  SparseMultivariateRationalPolynomial separant() const;






  int numberOfVariables() const;




  inline int numberOfRingVariables() const {
   return ringVariables().size();
  }




  Integer numberOfTerms() const;




  Integer degree() const;




  Integer degree(const Symbol&) const;




  RationalNumber leadingCoefficient() const;




  RationalNumber trailingCoefficient() const;




  RationalNumber coefficient(int, const int*) const;

  inline RationalNumber coefficient(const std::vector<int>& v) const {
   return coefficient(v.size(), v.data());
  }




  void setCoefficient(int, const int*, const RationalNumber&);

  inline void setCoefficient(const std::vector<int>& v, const RationalNumber& r) {
   setCoefficient(v.size(), v.data(), r);
  }
# 629 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  void setRingVariables (const std::vector<Symbol>&);





  std::vector<Symbol> ringVariables() const;




  std::vector<Symbol> variables() const;
# 651 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  bool isEqual(const SparseMultivariateRationalPolynomial& b) const;







     inline void differentiate(const Symbol& s, int k) {
      *this = this->derivative(s, k);
     }






     inline void differentiate(const Symbol& s) {
      this->differentiate(s,1);
     }







     SparseMultivariateRationalPolynomial derivative(const Symbol& s, int k) const;






  inline SparseMultivariateRationalPolynomial derivative(const Symbol& s) const {
       return this->derivative(s,1);
        }







     inline void integrate(const Symbol& s, int k) {
      *this = this->integral(s, k);
     }






     inline void integrate(const Symbol& s) {
      this->integrate(s,1);
     }
# 716 "../../include/RationalNumberPolynomial/mrpolynomial.h"
     SparseMultivariateRationalPolynomial integral(const Symbol& s, int k) const;






  inline SparseMultivariateRationalPolynomial integral(const Symbol& s) const {
       return this->integral(s,1);
        }







     inline SparseMultivariateRationalPolynomial evaluate(int n, const Symbol* syms, const RationalNumber* xs) const {
      std::vector<Symbol> vecSyms;
      std::vector<RationalNumber> vecRats;
      vecSyms.reserve(n);
      vecRats.reserve(n);
      for (int i = 0; i < n; ++i) {
       vecSyms.push_back(syms[i]);
       vecRats.push_back(xs[i]);
      }
      return evaluate(vecSyms, vecRats);
     }
# 752 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial evaluate(const std::vector<Symbol>& vars, const std::vector<RationalNumber>& values) const;
# 761 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  static SparseMultivariateRationalPolynomial interpolate(const std::vector<std::vector<RationalNumber>>& points, const std::vector<RationalNumber>& vals);






  bool divide(const SparseMultivariateRationalPolynomial& b, SparseMultivariateRationalPolynomial& q, SparseMultivariateRationalPolynomial& r) const;




  SparseMultivariateRationalPolynomial operator% (const SparseMultivariateRationalPolynomial& b) const;




  SparseMultivariateRationalPolynomial& operator%= (const SparseMultivariateRationalPolynomial& b);
# 788 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  SparseMultivariateRationalPolynomial pseudoDivide(const SparseMultivariateRationalPolynomial& b, SparseMultivariateRationalPolynomial* quo = 
# 788 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                                                                                                                                              __null
# 788 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                                                                                                                                                  , SparseMultivariateRationalPolynomial* mult = 
# 788 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                                                                                                                                                                                                 __null
# 788 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                                                                                                                                                                                                     , bool lazy = 0) const;





  inline SparseMultivariateRationalPolynomial operator+ (const ratNum_t& r) const {
   return (*this + RationalNumber(r));
  }




  SparseMultivariateRationalPolynomial operator+ (const RationalNumber& r) const;




  inline friend SparseMultivariateRationalPolynomial operator+ (const ratNum_t& r, const SparseMultivariateRationalPolynomial& b) {
   return (b + r);
  }




  inline SparseMultivariateRationalPolynomial& operator+= (const ratNum_t& r) {
   return (*this += RationalNumber(r));
  }




  inline friend SparseMultivariateRationalPolynomial operator+ (const RationalNumber& r, const SparseMultivariateRationalPolynomial& b) {
   return (b + r);
  }




  SparseMultivariateRationalPolynomial& operator+= (const RationalNumber& r);




  inline SparseMultivariateRationalPolynomial operator- (const ratNum_t& r) const {
   return (*this - RationalNumber(r));
  }




  SparseMultivariateRationalPolynomial operator- (const RationalNumber& r) const;




  inline friend SparseMultivariateRationalPolynomial operator- (const ratNum_t& r, const SparseMultivariateRationalPolynomial& b) {
   return (-b + r);
  }




  inline friend SparseMultivariateRationalPolynomial operator- (const RationalNumber& r, const SparseMultivariateRationalPolynomial& b) {
   return (-b + r);
  }




  inline SparseMultivariateRationalPolynomial& operator-= (const ratNum_t& r) {
   return (*this -= RationalNumber(r));
  }




  SparseMultivariateRationalPolynomial& operator-= (const RationalNumber& r);




  inline SparseMultivariateRationalPolynomial operator* (const ratNum_t& r) const {
   return (*this * RationalNumber(r));
  }




  SparseMultivariateRationalPolynomial operator* (const RationalNumber& r) const;




  inline friend SparseMultivariateRationalPolynomial operator* (const ratNum_t& r, const SparseMultivariateRationalPolynomial& b) {
   return (b * r);
  }




  inline SparseMultivariateRationalPolynomial& operator*= (const ratNum_t& r) {
   return (*this *= RationalNumber(r));
  }




  inline friend SparseMultivariateRationalPolynomial operator* (const RationalNumber& r, const SparseMultivariateRationalPolynomial& b) {
   return (b * r);
  }




  SparseMultivariateRationalPolynomial& operator*= (const RationalNumber& r);




  inline SparseMultivariateRationalPolynomial operator/ (const ratNum_t& r) const {
   return (*this / RationalNumber(r));
  }




  SparseMultivariateRationalPolynomial operator/ (const RationalNumber& r) const;




  friend SparseMultivariateRationalPolynomial operator/ (const ratNum_t& r, const SparseMultivariateRationalPolynomial& b) ;




  inline SparseMultivariateRationalPolynomial& operator/= (const ratNum_t& r) {
   return (*this /= RationalNumber(r));
  }



  inline friend SparseMultivariateRationalPolynomial operator/ (const RationalNumber& r, const SparseMultivariateRationalPolynomial& b) {
   ratNum_t t;
   
# 933 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
  __gmpq_init
# 933 "../../include/RationalNumberPolynomial/mrpolynomial.h"
          (t);
   
# 934 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
  __gmpq_set
# 934 "../../include/RationalNumberPolynomial/mrpolynomial.h"
         (t, r.get_mpq_t());
   SparseMultivariateRationalPolynomial ret = (t / b);
   
# 936 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
  __gmpq_clear
# 936 "../../include/RationalNumberPolynomial/mrpolynomial.h"
           (t);
   return ret;
  }




  SparseMultivariateRationalPolynomial& operator/= (const RationalNumber& r);





  SparseMultivariateRationalPolynomial operator[] (int index) const;






  Symbol leadingVariable() const;




  Integer leadingVariableDegree() const;
    degree_t leadingVariableDegree_tmp() const;



  bool isConstantTermZero() const;







  SparseMultivariateRationalPolynomial leadingCoefficientInVariable (const Symbol& x, int* e = 
# 974 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                                                                                              __null
# 974 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                                                                                                  ) const;






  SparseUnivariatePolynomial<SparseMultivariateRationalPolynomial> convertToSUP(const Symbol& x) const;






  void negate();






  SparseMultivariateRationalPolynomial deepCopy() const;






  Factors<SparseMultivariateRationalPolynomial> factor() const;




  void straightLineProgram();




  void printSLP(std::ostream& out = std::cout) const;


 private:
  int isIntervalsMatchable(Intervals*, Intervals*, DenseUnivariateRationalPolynomial*, DenseUnivariateRationalPolynomial*, lfixq);
  int refineSleeveUnivariateIntervals(Intervals*, Intervals*, Intervals*, DenseUnivariateRationalPolynomial*, DenseUnivariateRationalPolynomial*, lfixq);
  void sleeveBoundURPolynomials(DenseUnivariateRationalPolynomial*, DenseUnivariateRationalPolynomial*, Intervals&, int, int);
 public:
# 1035 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  int positiveRealRootIsolation(Intervals* pIs, Intervals& apIs, mpq_class width, int ts=-1, bool s=0, bool check=1);
# 1045 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  void randomPolynomial(int numvar, int nterms, unsigned long int coefBound, degree_t sparsity, bool includeNeg);
# 1059 "../../include/RationalNumberPolynomial/mrpolynomial.h"
  void randomPolynomial(std::vector<int> maxDegs, unsigned long int coefBound, float sparsity, bool includeNeg);






  ExpressionTree convertToExpressionTree() const;
# 1080 "../../include/RationalNumberPolynomial/mrpolynomial.h"
    SparseMultivariateRationalPolynomial lexNormalForm(const std::vector<Symbol>& superNames,
             const std::vector<SparseMultivariateRationalPolynomial>& ts, std::vector<SparseMultivariateRationalPolynomial>* quoSet = 
# 1081 "../../include/RationalNumberPolynomial/mrpolynomial.h" 3 4
                                                                                                                                     __null
# 1081 "../../include/RationalNumberPolynomial/mrpolynomial.h"
                                                                                                                                         ) const;
# 1090 "../../include/RationalNumberPolynomial/mrpolynomial.h"
    SparseMultivariateRationalPolynomial triangularSetNormalForm(const TriangularSet<RationalNumber,SparseMultivariateRationalPolynomial>& ts, std::vector<SparseMultivariateRationalPolynomial>* quoSet) const;
# 1101 "../../include/RationalNumberPolynomial/mrpolynomial.h"
    SparseMultivariateRationalPolynomial triangularSetPseudoDivide (const TriangularSet<RationalNumber,SparseMultivariateRationalPolynomial>& ts,
            std::vector<SparseMultivariateRationalPolynomial>* quoSet, SparseMultivariateRationalPolynomial* h) const;




Factors<SparseMultivariateRationalPolynomial> Factoring (SparseMultivariateRationalPolynomial& a);


};


Factors<SparseMultivariateRationalPolynomial> Factorization_AA (AltArr_t* a, AltArr_t* b);
# 6 "zerodimensionalregularchain.cpp" 2
# 1 "../../include/Utils/SymbolHelpers.hpp" 1
# 7 "zerodimensionalregularchain.cpp" 2

int ZDisInvertibleDepth = 0;
int ZDregularGCDDepth = 0;
int ZDregularizeDepth = 0;
int ZDregularizeInitialDepth = 0;
int ZDlnzsrDepth = 0;
int ZDlnzsrInnerDepth = 0;
int ZDdepth = 0;
# 24 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain () : RegularChain<Field,RecursivePoly>() {}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const std::vector<Symbol>& ps) : RegularChain<Field,RecursivePoly>() {
 trcVars = ps;
}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const RecursivePoly& p) : RegularChain<Field,RecursivePoly>(p) {
 if (p.numberOfVariables() != 1) {
  std::cerr << "BPAS: error, cannot construct a ZeroDimensionalRegularChain from a polynomial with more than one variable." << std::endl;
  exit(1);
 }
}
# 59 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const RecursivePoly& p, const std::vector<Symbol>& ts) : RegularChain<Field,RecursivePoly>(p,ts) {
 std::vector<Symbol> vs;
 vs.push_back(p.leadingVariable());
 vs.insert(vs.end(),ts.begin(),ts.end());
 vs = orderPreservingSetIntersection(vs,p.variables());

 if (p.variables() != vs) {
  std::cerr << "BPAS: error, cannot construct a ZeroDimensionalRegularChain from a polynomial with more than one (non-transcendental) variable." << std::endl;






  exit(1);
 }
}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a) : RegularChain<Field,RecursivePoly>(a) {



}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const RegularChain<Field,RecursivePoly>& a, int options) : RegularChain<Field,RecursivePoly>(a) {
 unsigned long long int timerStart;



 if ((options & ASSUME_MAKESCHAIN) != ASSUME_MAKESCHAIN) {
  int firstZeroIndex(-1);
  for (int i=vars.size()-1; i>-1; --i) {
   if (set[i].isZero())
    firstZeroIndex = i;
  }
  if (!this->isEmpty()) {
   if (firstZeroIndex == vars.size()-1) {
    std::cerr << "BPAS: error, cannot cast from a positive dimensional regular chain to a zero dimensional regular chain." << std::endl;
    exit(1);
   }
   int secondNonzeroIndex(-1);
   if (firstZeroIndex != -1) {
    for (int i=firstZeroIndex-1; i>-1; --i) {
     if (!set[i].isZero())
      secondNonzeroIndex = i;
    }
   }
   if (secondNonzeroIndex != -1) {
    std::cerr << "BPAS: error, cannot cast from a positive dimensional regular chain to a zero dimensional regular chain." << std::endl;
    exit(1);
   }
  }
  if (firstZeroIndex != -1) {
   if (mode == TS_FIXED) {



   }
   else {
    vars.erase(vars.begin(),vars.begin()+firstZeroIndex+1);
    set.erase(set.begin(),set.begin()+firstZeroIndex+1);
    if (vars != algVars) {
     std::cerr << "BPAS: error, vars must equal algVars in ZDRC(RC,opts) copy constructor." << std::endl;
     exit(1);
    }
   }
  }
 }



}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a) : RegularChain<Field,RecursivePoly>(std::move(a)) {



}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (RegularChain<Field,RecursivePoly>&& a, int options) : RegularChain<Field,RecursivePoly>(std::move(a)) {
 if ((options & ASSUME_MAKESCHAIN) != ASSUME_MAKESCHAIN) {
  int firstZeroIndex(-1);
  for (int i=vars.size()-1; i>-1; --i) {
   if (set[i].isZero())
    firstZeroIndex = i;
  }
  if (!this->isEmpty()) {
   if (firstZeroIndex == vars.size()-1) {
    std::cerr << "BPAS: error, cannot cast from a positive dimensional regular chain to a zero dimensional regular chain." << std::endl;
    exit(1);
   }
   int secondNonzeroIndex(-1);
   if (firstZeroIndex != -1) {
    for (int i=firstZeroIndex-1; i>-1; --i) {
     if (!set[i].isZero())
      secondNonzeroIndex = i;
    }
   }
   if (secondNonzeroIndex != -1) {
    std::cerr << "BPAS: error, cannot cast from a positive dimensional regular chain to a zero dimensional regular chain." << std::endl;
    exit(1);
   }
  }
  if (firstZeroIndex != -1) {
   if (mode == TS_FIXED) {



   }
   else {
    vars.erase(vars.begin(),vars.begin()+firstZeroIndex+1);
    set.erase(set.begin(),set.begin()+firstZeroIndex+1);
    if (vars != algVars) {
     std::cerr << "BPAS: error, vars must equal algVars in ZDRC(RC,opts) move constructor." << std::endl;






     exit(1);
    }
   }
  }
 }
}
# 222 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>::ZeroDimensionalRegularChain (const std::vector<Symbol>&& vs, const std::vector<Symbol>&& avs, const std::vector<Symbol>&& tvs, const std::vector<RecursivePoly>&& ts, TriangularSetMode tsm, const mpz_class& c) : RegularChain<Field,RecursivePoly>(std::move(vs),std::move(avs),std::move(tvs),std::move(ts),tsm,c) {}
# 234 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::constructChain(const RecursivePoly& p, int options) {
 Symbol v(p.leadingVariable());






 if ((options & ASSUME_REGULAR) != ASSUME_REGULAR) {

  if (!this->isRegular(p.initial())) {
    std::cerr << "BPAS: error, initial of p is not regular with respect to the current regular chain T so T+p is not a regular chain." << std::endl;



    exit(1);
  }
 }
 if ((options & ASSUME_ZERODIMENSIONAL) != ASSUME_ZERODIMENSIONAL) {
  std::vector<Symbol> vs,vs2;
  vs2.push_back(v);

  if (isAMemberOf(v,algVars)) {
   std::cerr << "BPAS: error, the leading variable of p is an algebraic variable of the current object, so cannot extend it." << std::endl;





   exit(1);
  }

  vs = setDifference(p.variables(),this->allVariables());



  if (mode == TS_VARIABLE) {
   if (vs != vs2) {
    std::cerr << "BPAS: error, cannot add p to current object because resulting object would not be zero-dimensional." << std::endl;
# 282 "zerodimensionalregularchain.cpp"
    exit(1);
   }
  }
  else {
   if (!vs.empty()) {
    std::cerr << "BPAS: error, cannot add a polynomial with new variables to a fixed mode triangular set." << std::endl;
# 296 "zerodimensionalregularchain.cpp"
    exit(1);

   }
  }
 }


 if (!isAMemberOf(v,vars)) {
  vars.insert(vars.begin(),v);
  set.insert(set.begin(),RecursivePoly());
 }




 RegularChain<Field,RecursivePoly>::constructChain(p,options);
}






template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::constructChain(const RegularChain<Field,RecursivePoly>& T, int options) {





 std::vector<RecursivePoly> polys(T.polynomials());
 for (int i=polys.size()-1; i>-1; --i) {
  if (!polys[i].isZero()) {
   constructChain(polys[i],options);
  }
 }
}







template <class Field, class RecursivePoly>
std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> ZeroDimensionalRegularChain<Field,RecursivePoly>::constructChains(const RecursivePoly& p, int options) const {



 std::vector<RegularChain<Field,RecursivePoly>> rcResults;
 std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> results;
 Symbol v(p.leadingVariable());


 if ((options & ASSUME_REGULAR) != ASSUME_REGULAR) {

  if (!this->isRegular(p.initial())) {
    std::cerr << "BPAS: error, initial of p is not regular with respect to the current regular chain T so T+p is not a regular chain." << std::endl;



    exit(1);
  }
 }

 if ((options & ASSUME_ZERODIMENSIONAL) != ASSUME_ZERODIMENSIONAL) {
  std::vector<Symbol> vs,vs2;
  vs2.push_back(v);

  if (isAMemberOf(v,vars)) {
   std::cerr << "BPAS: error, the leading variable of p is an algebraic variable of the current object, so cannot extend it." << std::endl;
   exit(1);
  }

  vs = setDifference(p.variables(),vars);
  vs = setDifference(vs,trcVars);
  if (vs != vs2) {
   std::cerr << "BPAS: error, cannot add p to current object because resulting object would not be zero-dimensional." << std::endl;
   exit(1);
  }
 }

 options = options | ASSUME_MAKESCHAIN;


 std::vector<Symbol> vs;
 std::vector<RecursivePoly> polys;
 vs.insert(vs.begin(),v);
 vs.insert(vs.end(),vars.begin(),vars.end());
 polys.insert(polys.begin(),RecursivePoly());
 polys.insert(polys.end(),set.begin(),set.end());






 rcResults = this->RegularChain<Field,RecursivePoly>::constructChains(p,true,this->numberOfAlgebraicVariables(),options);
 for (int i=0; i<rcResults.size(); ++i) {
  results.push_back(ZeroDimensionalRegularChain(std::move(rcResults[i])));
 }



 return results;
}






template <class Field, class RecursivePoly>
std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> ZeroDimensionalRegularChain<Field,RecursivePoly>::constructChains(const RegularChain<Field,RecursivePoly>& T, int options) const {




 std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> results,moreResults;
 options = options | ASSUME_MAKESCHAIN;
 std::vector<RecursivePoly> polys(T.polynomials());
 for (int i=polys.size()-1; i>-1; --i) {
  if (!polys[i].isZero()) {
   moreResults = constructChains(polys[i],options);
   results.insert(results.end(),moreResults.begin(),moreResults.end());
  }
 }
 return results;
}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (const ZeroDimensionalRegularChain<Field,RecursivePoly>& a) {
 RegularChain<Field,RecursivePoly>::operator=(a);
 return *this;
}






template <class Field, class RecursivePoly>
BPASTriangularSet<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (const BPASTriangularSet<Field,RecursivePoly>& a) {
 if (dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASTriangularSet to ZeroDimensionalRegularChain."));
 return *this;
}






template <class Field, class RecursivePoly>
BPASRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (const BPASRegularChain<Field,RecursivePoly>& a) {
 if (dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASRegularChain to ZeroDimensionalRegularChain."));
 return *this;
}






template <class Field, class RecursivePoly>
BPASZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (const BPASZeroDimensionalRegularChain<Field,RecursivePoly>& a) {
 if (dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<const ZeroDimensionalRegularChain<Field,RecursivePoly>&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASZeroDimensionalRegularChain to ZeroDimensionalRegularChain."));
 return *this;
}






template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (ZeroDimensionalRegularChain<Field,RecursivePoly>&& a) {



 RegularChain<Field,RecursivePoly>::operator=(std::move(a));
 regularChainOptions = a.regularChainOptions;
 return *this;
}






template <class Field, class RecursivePoly>
BPASTriangularSet<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (BPASTriangularSet<Field,RecursivePoly>&& a) {
 if (dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>&&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASTriangularSet to ZeroDimensionalRegularChain."));
 return *this;
}






template <class Field, class RecursivePoly>
BPASRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (BPASRegularChain<Field,RecursivePoly>&& a) {
 if (dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>&&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASRegularChain to ZeroDimensionalRegularChain."));
 return *this;
}






template <class Field, class RecursivePoly>
BPASZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator= (BPASZeroDimensionalRegularChain<Field,RecursivePoly>&& a) {
 if (dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>*>(&a))
  *this = dynamic_cast<ZeroDimensionalRegularChain<Field,RecursivePoly>&&>(a);
 else throw (std::invalid_argument("BPAS: Cannot cast BPASZeroDimensionalRegularChain to ZeroDimensionalRegularChain."));
 return *this;
}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly> ZeroDimensionalRegularChain<Field,RecursivePoly>::operator+ (const RecursivePoly& p) const {
 ZeroDimensionalRegularChain<Field,RecursivePoly> r(*this);






 return (r += p);
}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator+= (const RecursivePoly& p) {





 if (!this->isRegular(p.initial())) {
  std::cerr << "BPAS: error, initial of p is not regular with respect to the current regular chain T so T+p is not a regular chain." << std::endl;



  exit(1);
 }






 this->constructChain(p,ASSUME_REGULAR);
 return *this;
}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly> ZeroDimensionalRegularChain<Field,RecursivePoly>::operator+ (const RegularChain<Field,RecursivePoly>& T) const {
 RegularChain<Field,RecursivePoly> r(*this);
 return (r += T);
}







template <class Field, class RecursivePoly>
ZeroDimensionalRegularChain<Field,RecursivePoly>& ZeroDimensionalRegularChain<Field,RecursivePoly>::operator+= (const RegularChain<Field,RecursivePoly>& T) {

 std::vector<RecursivePoly> polys(T.polynomials());

 for (int i=polys.size()-1; i>-1; --i) {
  if (!polys[i].isZero()) {
   *this += polys[i];
  }
 }




 return *this;
}







template <class Field, class RecursivePoly>
bool ZeroDimensionalRegularChain<Field,RecursivePoly>::operator== (ZeroDimensionalRegularChain<Field,RecursivePoly>& a) {
 return RegularChain<Field,RecursivePoly>::operator==(a);
}







template <class Field, class RecursivePoly>
bool ZeroDimensionalRegularChain<Field,RecursivePoly>::operator!= (ZeroDimensionalRegularChain<Field,RecursivePoly>& a) {
 return !(*this==a);
}

template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::lower(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const {
 RegularChain<Field,RecursivePoly> ts2;



 ts2 = std::move(ts);



 RegularChain<Field,RecursivePoly>::lower(s,ts2);
 if (mode == TS_VARIABLE && !ts2.isEmpty()) {





  ts2.lowerSlice(s);



 }
 ts = ZeroDimensionalRegularChain<Field,RecursivePoly>(std::move(ts2));
}

template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::upper(const Symbol& s, BPASTriangularSet<Field,RecursivePoly>& ts) const {
 RegularChain<Field,RecursivePoly> ts2;
 ts2 = std::move(ts);
 RegularChain<Field,RecursivePoly>::upper(s,ts2);
 ts = std::move(ts2);
}

template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::cutRegularChain(const ZeroDimensionalRegularChain<Field,RecursivePoly>& T, const Symbol& v, ZeroDimensionalRegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const {




 T.lower(v,Tlv);



 T.upper(v,Tgv);





 Tv = T.select(v);
}

template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::cutRegularChain(const Symbol& v, RecursivePoly& Tv, RegularChain<Field,RecursivePoly>& Tgv) const {
  Tv = select(v);
  upper(v,Tgv);

}

template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::cutRegularChain(const Symbol& v, ZeroDimensionalRegularChain<Field,RecursivePoly>& Tlv, RecursivePoly& Tv) const {
  lower(v,Tlv);
  Tv = select(v);

}
# 709 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> ZeroDimensionalRegularChain<Field,RecursivePoly>::intersect(const RecursivePoly& p) const {
 long long unsigned int rcProfilingStart;



 std::vector<ZeroDimensionalRegularChain<Field,RecursivePoly>> results;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> regularComponents;
 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> currRegularComponent;
 bool reduceMore(false);







 RecursivePoly q(p.squareFreePart());







 regularComponents = regularize(q);



 for (int i=0; i<regularComponents.size(); ++i) {
  currRegularComponent = regularComponents[i];
  if (currRegularComponent.poly.isZero()) {
   results.push_back(currRegularComponent.chain);



  }
 }
# 799 "zerodimensionalregularchain.cpp"
 return results;
}
# 810 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::regularize(const RecursivePoly& f) const {



 RecursivePoly c;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> results;
 std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> isInv;
 BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>> currIsInv;
 RecursivePoly h(this->reduce(f));



 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> t(h,*this);



 if (this->isConstantPolynomial(h) || this->isEmpty()) {



  results.push_back(t);
  return results;
 }
 RecursivePoly zero;
 isInv = this->isInvertible(h);
 for (int i=0; i<isInv.size(); ++i) {
  currIsInv = std::move(isInv[i]);
  if (currIsInv.isTrue) {
   t = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(currIsInv.chain.reduce(h),std::move(currIsInv.chain));
   results.push_back(t);
  }
  else {
   t = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(zero,std::move(currIsInv.chain));
   results.push_back(t);
  }
 }




 return results;
}
# 861 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::regularizeInitial(const RecursivePoly& f) const {

 typedef PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> RC_GEN_OBJ;

 std::vector<RC_GEN_OBJ> results;
 std::vector<RC_GEN_OBJ> regularComponents = ((*this).*((&ZeroDimensionalRegularChain<Field, RecursivePoly>::_regularizeInitial)))((f));
 RC_GEN_OBJ currRegularComponent;;

 for(int (i) = 0; (i) < (regularComponents).size(); ++(i)) {

  ((currRegularComponent) = (regularComponents)[(i)]);
  results.push_back(currRegularComponent);
 }

}





template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::_regularizeInitial(const RecursivePoly& f) const {

 ++ZDregularizeInitialDepth;
 ++ZDdepth;



 RecursivePoly c;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> results;
 std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> isInv;
 BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>> currIsInv;
 RecursivePoly h(this->reduce(f));



 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> t(std::move(h),*this);



 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> tasks;
 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> currTask;
 tasks.push_back(t);



 while (!tasks.empty()) {
  currTask = tasks.back();
  tasks.pop_back();
  if (currTask.chain.isConstantPolynomial(currTask.poly)) {



   results.push_back(currTask);
  }
  else {



   c = currTask.poly.initial();




   if (!currTask.chain.isConstantPolynomial(c)) {
    isInv = currTask.chain.isInvertible(c);
   }
   else {
    if (c.isZero()) {
     currIsInv = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(false,std::move(currTask.chain));
     isInv.clear();
     isInv.push_back(currIsInv);
    }
    else {
     currIsInv = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(true,std::move(currTask.chain));
     isInv.clear();
     isInv.push_back(currIsInv);
    }
   }




   for (int i=0; i<isInv.size(); ++i) {
    currIsInv = isInv[i];
    if (currIsInv.isTrue) {



     t = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(currIsInv.chain.reduce(currTask.poly),std::move(currIsInv.chain));
     results.push_back(t);
    }
    else {



     h = RecursivePoly(currIsInv.chain.reduce(currTask.poly.tail()));
     t = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(std::move(h),std::move(currIsInv.chain));
     tasks.push_back(t);
    }
   }
  }
 }




 --ZDregularizeInitialDepth;
 --ZDdepth;
 return results;
}
# 981 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::isInvertible(const RecursivePoly& f) const {
 long long unsigned int rcProfilingStart;
 ++ZDisInvertibleDepth;
 ++ZDdepth;



 Symbol v;
 RecursivePoly h,g,q,Tv,temp;
 std::vector<RecursivePoly> polys;
 ZeroDimensionalRegularChain<Field,RecursivePoly> T,L;
 RegularChain<Field,RecursivePoly> U;
 SubResultantChain<RecursivePoly,RecursivePoly> src;
 std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> results,moreResults;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> regularComponents;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> subResultantComponents;
 BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>> currResult;
 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> currRegularComponent,currSubResultantComponent;
 regularComponents = regularizeInitial(f);




 for (int i=0; i<regularComponents.size(); ++i) {



  currRegularComponent = regularComponents[i];
  h = std::move(currRegularComponent.poly);
  T = std::move(currRegularComponent.chain);





  if (h.isZero()) {




   currResult = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(false,T);
   results.push_back(currResult);
  }
  else if (T.isConstantPolynomial(h)) {



   currResult = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(true,T);
   results.push_back(currResult);
  }
  else {



   v = h.leadingVariable();



   cutRegularChain(T,v,L,Tv,U);
# 1051 "zerodimensionalregularchain.cpp"
   src = SubResultantChain<RecursivePoly,RecursivePoly>(Tv,h,v);






   subResultantComponents = L.lastNonZeroSubResultant_inner(Tv,h,v,src,false);



   for (int j=0; j<subResultantComponents.size(); ++j) {



    currSubResultantComponent = subResultantComponents[j];
    g = std::move(currSubResultantComponent.poly);
    L = std::move(currSubResultantComponent.chain);




    if (g.degree(v).isZero()) {






     T = std::move(L);
     T.constructChain(Tv,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_SQUAREFREE | ASSUME_PRIMITIVE);



     T.constructChain(U,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_SQUAREFREE | ASSUME_PRIMITIVE);



     currResult = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(true,T);
     results.push_back(currResult);
    }
    else {
# 1101 "zerodimensionalregularchain.cpp"
     Tv.pseudoDivide(g,&q,
# 1101 "zerodimensionalregularchain.cpp" 3 4
                         __null
# 1101 "zerodimensionalregularchain.cpp"
                             ,1);







     T = L;
     T.constructChain(g,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_SQUAREFREE | ASSUME_PRIMITIVE);



     T.constructChain(U,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_PRIMITIVE);



     currResult = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(false,T);
     results.push_back(currResult);



     T = std::move(L);
     T.constructChain(q,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_SQUAREFREE | ASSUME_PRIMITIVE);



     T.constructChain(U,ASSUME_MAKESCHAIN | ASSUME_REGULAR | ASSUME_SQUAREFREE | ASSUME_PRIMITIVE);



     if (this->isSquareFree) {
      currResult = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(true,T);
      results.push_back(currResult);
     }
     else {
      moreResults = T.isInvertible(T.reduce(f));
      results.insert(results.end(),moreResults.begin(),moreResults.end());
     }
    }
   }
  }
 }



 --ZDisInvertibleDepth;
 --ZDdepth;
 return results;
}
# 1162 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::lastNonZeroSubResultant(const RecursivePoly& f, const RecursivePoly& g, const Symbol& v, bool isGCD) const {
 long long unsigned int rcProfilingStart;
 ++ZDlnzsrDepth;
 ++ZDdepth;
 std::vector<Symbol> vs,vs2,vs3;





 vs = this->vars;
 if (contains(vs,v)) {
  std::cerr << "BPAS: error, ZeroDimensionalRegularChain cannot contain the variable input to lastNonZeroSubResultant." << std::endl;
  exit(1);
 }
 vs.insert(vs.begin(),v);

 if (!isSubset(setUnion(f.variables(),g.variables()),vs)) {
  std::cerr << "BPAS: error, polynomials input to lastNonZeroSubResultant have variables other than v and the those of the ZeroDimensionalRegularChain." << std::endl;
  exit(1);
 }





 RecursivePoly F(f),G(g),one;
 vs2 = orderPreservingSetIntersection(vs,f.ringVariables());
 vs3 = orderPreservingSetDifference(f.ringVariables(),vs2);
 vs2.reserve(vs2.size()+vs3.size());
 vs2.insert(vs2.begin(),vs3.begin(),vs3.end());
 F.setRingVariables(vs2);
 vs2 = orderPreservingSetIntersection(vs,g.ringVariables());
 vs3 = orderPreservingSetDifference(g.ringVariables(),vs2);
 vs2.reserve(vs2.size()+vs3.size());
 vs2.insert(vs2.begin(),vs3.begin(),vs3.end());
 G.setRingVariables(vs2);







 one.one();

 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> results,moreResults,regularF,regularG;
 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> currResult,currRegularF,currRegularG;
 SubResultantChain<RecursivePoly,RecursivePoly> src;
 regularF = regularizeInitial(F);



 for (int i=0; i<regularF.size(); ++i) {



  currRegularF = std::move(regularF[i]);




  regularG = currRegularF.chain.regularizeInitial(G);
  for (int j=0; j<regularG.size(); ++j) {



   currRegularG = std::move(regularG[j]);



   currRegularF.poly = currRegularF.poly.mainPrimitivePart();
   currRegularG.poly = currRegularG.poly.mainPrimitivePart();
# 1245 "zerodimensionalregularchain.cpp"
   if (currRegularF.poly.isZero()) {



    results.push_back(currRegularG);
   }
   else if (currRegularG.poly.isZero()) {



    currResult = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(std::move(currRegularF.poly),std::move(currRegularG.chain));
    results.push_back(currResult);
   }
   else if ((currRegularF.poly.isConstant() == 0) && currRegularF.poly.leadingVariable() == v) {
    if ((currRegularG.poly.isConstant() == 0) && currRegularG.poly.leadingVariable() == v) {






     src = SubResultantChain<RecursivePoly,RecursivePoly>(currRegularF.poly,currRegularG.poly,v);



     moreResults = currRegularG.chain.lastNonZeroSubResultant_inner(currRegularF.poly,currRegularG.poly,v,src,isGCD);
     results.reserve(results.size()+moreResults.size());
     results.insert(results.end(),moreResults.begin(),moreResults.end());
    }
    else {



     results.push_back(currRegularG);
    }
   }
   else {
    if ((currRegularG.poly.isConstant() == 0) && currRegularG.poly.leadingVariable() == v) {



     currResult = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(std::move(currRegularF.poly),std::move(currRegularG.chain));
     results.push_back(currResult);
    }
    else {



     currResult = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(one,std::move(currRegularG.chain));
     results.push_back(currResult);
    }
   }
  }
 }



 --ZDlnzsrDepth;
 --ZDdepth;
 return results;
}
# 1317 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::lastNonZeroSubResultant_inner(const RecursivePoly& f, const RecursivePoly& g, const Symbol& v, const SubResultantChain<RecursivePoly,RecursivePoly>& src, bool isGCD) const {
 long long unsigned int rcProfilingStart;
 if (v != f.leadingVariable() || v != g.leadingVariable()) {
  std::cerr << "BPAS: error, leading variable of f and g must be v in input to lastNonZeroSubResultant." << std::endl;
  exit(1);
 }
 ++ZDlnzsrInnerDepth;
 ++ZDdepth;



 int k(0);
 RecursivePoly s,c;
 RecursivePoly uP;

 struct Task {
  RecursivePoly a;
  RecursivePoly b;
  ZeroDimensionalRegularChain<Field,RecursivePoly> T;
  int k;
 };
 std::vector<BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>> isInv;
 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> results;
 BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>> currIsInv;
 PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>> currResult;



 std::vector<Task> tasks;
 Task t = {f,g,*this,k},currTask;
 tasks.push_back(t);
 while (!tasks.empty()) {



  currTask = tasks.back();
  tasks.pop_back();
  k = currTask.k;





  uP = src.subResultantOfIndex(k);





  RecursivePoly supLead = uP.leadingCoefficient();





  s = uP;





  c = s.leadingCoefficientInVariable(v);



  if (!(c.isConstant() != 0)) {
   isInv = currTask.T.isInvertible(c);
  }
  else {
   if (c.isZero()) {
    currIsInv = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(false,std::move(currTask.T));
    isInv.clear();
    isInv.push_back(currIsInv);
   }
   else {
    currIsInv = BoolChainPair<ZeroDimensionalRegularChain<Field,RecursivePoly>>(true,std::move(currTask.T));
    isInv.clear();
    isInv.push_back(currIsInv);
   }
  }

  for (int i=0; i<isInv.size(); ++i) {
   currIsInv = std::move(isInv[i]);
   if (currIsInv.isTrue) {







    RecursivePoly temp(currIsInv.chain.reduce(s));






    currResult = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(temp.mainPrimitivePart(),std::move(currIsInv.chain));




    results.push_back(currResult);
   }
   else {
    if (currTask.k == currTask.b.leadingVariableDegree().get_ui()) {



     RecursivePoly temp(currIsInv.chain.reduce(currTask.b));






     currResult = PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>(temp.mainPrimitivePart(),std::move(currIsInv.chain));




     results.push_back(currResult);
    }
    else {



     RecursivePoly temp(currIsInv.chain.reduce(currTask.a));
     RecursivePoly temp2(currIsInv.chain.reduce(currTask.b));




     t = {temp,temp2,std::move(currIsInv.chain),currTask.k+1};
     tasks.push_back(t);
    }
   }
  }
 }
# 1466 "zerodimensionalregularchain.cpp"
 --ZDlnzsrInnerDepth;
 --ZDdepth;
 return results;
}
# 1479 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> ZeroDimensionalRegularChain<Field,RecursivePoly>::regularGCD(const RecursivePoly& f, const RecursivePoly& g, const Symbol& v) {
 if (v != f.leadingVariable() || v != g.leadingVariable()) {
  std::cerr << "BPAS: error, leading variable of f and g must be v in input to regularGCD." << std::endl;
  exit(1);
 }
 ++ZDregularGCDDepth;
 ++ZDdepth;



 std::vector<PolyChainPair<RecursivePoly,ZeroDimensionalRegularChain<Field,RecursivePoly>>> result;
 result = lastNonZeroSubResultant(f,g,v,true);




 --ZDregularGCDDepth;
 --ZDdepth;
 return result;
}
# 1511 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::randomZeroDimensionalRegularChain(int nVars, int nTrcVars, int nTerms, unsigned long int coefBound, int pSparsity, bool includeNeg) {
 this->RegularChain<Field,RecursivePoly>::randomRegularChain(nVars,nVars,nTrcVars,nTerms,coefBound,pSparsity,includeNeg);
}
# 1526 "zerodimensionalregularchain.cpp"
template <class Field, class RecursivePoly>
void ZeroDimensionalRegularChain<Field,RecursivePoly>::randomZeroDimensionalRegularChain(int nVars, int nTrcVars, std::vector<int> maxDegs, unsigned long int coefBound, double pSparsity, bool includeNeg) {
 this->RegularChain<Field,RecursivePoly>::randomRegularChain(nVars,nVars,nTrcVars,maxDegs,coefBound,pSparsity,includeNeg);
}


template class ZeroDimensionalRegularChain<RationalNumber,SparseMultivariateRationalPolynomial>;
